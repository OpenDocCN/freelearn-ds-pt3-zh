["```py\nN = 20\ndf = pd.DataFrame({\n    \"date\": pd.date_range(periods=N, start=\"2021-04-12\", freq=\"D\"),\n    \"ts\": np.random.randn(N)\n}) \n```", "```py\nts = torch.from_numpy(df.ts.values).float()\nwindow = 15\n# Creating windows of 15 over the dataset\nts_dataset = ts.unfold(0, size=window, step=1) \n```", "```py\n# The FFN we define would have this architecture\n# window(windowed input) >> 64 (hidden layer 1) >> 32 (hidden layer 2) >> 32 (hidden layer 2) >> 1 (output)\nffn = nn.Sequential(\n    nn.Linear(in_features=window,out_features=64), # (batch-size x window) --> (batch-size x 64)\n    nn.ReLU(),\n    nn.Linear(in_features=64,out_features=32), # (batch-size x 64) --> (batch-size x 32)\n    nn.ReLU(),\n    nn.Linear(in_features=32,out_features=32), # (batch-size x 32) --> (batch-size x 32)\n    nn.ReLU(),\n    nn.Linear(in_features=32,out_features=1), # (batch-size x 32) --> (batch-size x 1)\n) \n```", "```py\nffn(ts_dataset)\n# or more explicitly\nffn.forward(ts_dataset) \n```", "```py\nrnn = nn.RNN(\n    input_size=1,\n    hidden_size=32,\n    num_layers=1,\n    batch_first=True,\n    dropout=0,\n    bidirectional=False,\n) \n```", "```py\n#input dim: torch.Size([6, 15, 1])\n# batch size = 6, sequence length = 15 and number of features = 1, batch_first = True\noutput, hidden_states = rnn(rnn_input)\n# output.shape -> torch.Size([6, 15, 32])\n# hidden_states.shape -> torch.Size([1, 6, 32])) \n```", "```py\ntorch.equal(hidden_states[0], output[:,-1]) # -> True \n```", "```py\nlstm = nn.LSTM(\n    input_size=1,\n    hidden_size=32,\n    num_layers=5,\n    batch_first=True,\n    dropout=0,\n    # bidirectional=True,\n)\noutput, (hidden_states, cell_states) = lstm(rnn_input)\noutput.shape # -> [6, 15, 32]\nhidden_states.shape # -> [5, 6, 32]\ncell_states.shape # -> [5, 6, 32] \n```", "```py\nGru = nn.GRU(\n    input_size=1,\n    hidden_size=32,\n    num_layers=5,\n    batch_first=True,\n    dropout=0,\n    # bidirectional=True,\n)\noutput, hidden_states = gru(rnn_input)\noutput.shape # -> [6, 15, 32]\nhidden_states.shape # -> [5, 6, 32] \n```", "```py\nconv = nn.Conv1d(in_channels=1, out_channels=1, kernel_size=k) \n```", "```py\n#input dim: torch.Size([6, 1, 15])\n# batch size = 6, number of features = 1 and sequence length = 15\noutput = conv(cnn_input)\n# Output should be in_dim - k + 1\nassert output.size(-1)==cnn_input.size(-1)-k+1\noutput.shape #-> torch.Size([6, 1, 13]) \n```"]