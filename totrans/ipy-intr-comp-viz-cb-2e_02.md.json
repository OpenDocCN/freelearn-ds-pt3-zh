["```py\nfor k, v in d.iteritems():\n    # ...\n```", "```py\nfrom six import iteritems\nfor k, v in iteritems(d):\n    # ...\n```", "```py\n%run <CURRENT_FILE_NAME>\n\n```", "```py\nimport myscript\nfrom IPython.lib.deepreload import reload as dreload\ndreload(myscript)\n```", "```py\n    $ mkdir myproject\n    $ cd myproject\n\n    ```", "```py\n    $ git init\n\n    ```", "```py\n    $ git config --global user.name \"My Name\"\n    $ git config --global user.email \"me@home\"\n\n    ```", "```py\n    $ touch __init__.py\n    $ git add __init__.py\n\n    ```", "```py\n    $ git commit -m \"Initial commit.\"\n\n    ```", "```py\n    $ git clone /path/to/myproject.git\n\n    ```", "```py\n    $ git config --global user.name \"My Name\"\n    $ git config --global user.email \"me@home\"\n\n    ```", "```py\n    $ touch __init__.py\n    $ git add __init__.py\n\n    ```", "```py\n    $ git commit -m \"Initial commit.\"\n\n    ```", "```py\n    $ git push origin\n\n    ```", "```py\n    $ git branch newidea\n\n    ```", "```py\n    $ git checkout newidea\n\n    ```", "```py\n    $ touch newfile.py\n\n    ```", "```py\n    $ git add newfile.py\n    $ git commit -m \"Testing new idea.\"\n\n    ```", "```py\n    $ git checkout master\n    $ git merge newidea\n\n    ```", "```py\n    $ git checkout master\n    $ git branch -d newidea\n\n    ```", "```py\n    $ git stash\n\n    ```", "```py\n    $ git stash pop\n\n    ```", "```py\n    def power(x, n):\n        \"\"\"Compute the power of a number.\n\n        Arguments:\n          * x: a number.\n          * n: the exponent.\n\n        Returns:\n           * c: the number x to the power of n.\n\n        \"\"\"\n        return x ** n\n    ```", "```py\n    # Imports\n    # -------\n    import numpy\n\n    # Utility functions\n    # -----------------\n    def fun():\n        pass\n    ```", "```py\n    In [1]: %%writefile datautils.py\n    # Version 1.\n    import os\n    from urllib.request import urlopen  # Python 2: use urllib2\n\n    def download(url):\n        \"\"\"Download a file and save it in the current folder.\n        Return the name of the downloaded file.\"\"\"\n        # Get the filename.\n        file = os.path.basename(url)\n        # Download the file unless it already exists.\n        if not os.path.exists(file):\n            with open(file, 'w') as f:\n                f.write(urlopen(url).read())\n        return file\n    Writing datautils.py\n    ```", "```py\n    In [2]: %%writefile test_datautils.py\n    # Python 2: use urllib2\n    from urllib.request import (HTTPHandler, install_opener, \n                                build_opener, addinfourl)\n    import os\n    import shutil\n    import tempfile\n    from io import StringIO  # Python 2: use StringIO\n    from datautils import download\n\n    TEST_FOLDER = tempfile.mkdtemp()\n    ORIGINAL_FOLDER = os.getcwd()\n\n    class TestHTTPHandler(HTTPHandler):\n        \"\"\"Mock HTTP handler.\"\"\"\n        def http_open(self, req):\n            resp = addinfourl(StringIO('test'), '',\n                              req.get_full_url(), 200)\n            resp.msg = 'OK'\n            return resp\n\n    def setup():\n        \"\"\"Install the mock HTTP handler for unit tests.\"\"\"\n        install_opener(build_opener(TestHTTPHandler))\n        os.chdir(TEST_FOLDER)\n\n    def teardown():\n        \"\"\"Restore the normal HTTP handler.\"\"\"\n        install_opener(build_opener(HTTPHandler))\n        # Go back to the original folder.\n        os.chdir(ORIGINAL_FOLDER)\n        # Delete the test folder.\n        shutil.rmtree(TEST_FOLDER)\n\n    def test_download1():\n        file = download(\"http://example.com/file.txt\")\n        # Check that the file has been downloaded.\n        assert os.path.exists(file)\n        # Check that the file contains the contents of\n        # the remote file.\n        with open(file, 'r') as f:\n            contents = f.read()\n        print(contents)\n        assert contents == 'test'\n    Writing test_datautils.py\n    ```", "```py\n    $ nosetests\n    .\n    Ran 1 test in 0.042s\n    OK\n\n    ```", "```py\n    In [4]: %%writefile test_datautils.py -a\n\n            def test_download2():\n                file = download(\"http://example.com/\")\n                assert os.path.exists(file)\n    Appending to test_datautils.py\n    ```", "```py\n    $ nosetests\n    .E\n    ERROR: test_datautils.test_download2\n    Traceback (most recent call last):\n     File \"datautils.py\", line 12, in download\n     with open(file, 'wb') as f:\n    IOError: [Errno 22] invalid mode ('wb') or filename: ''\n    Ran 2 tests in 0.032s\n    FAILED (errors=1)\n\n    ```", "```py\n    In [6]: %%file datautils.py\n    # Version 2.\n    import os\n    from urllib.request import urlopen  # Python 2: use urllib2\n\n    def download(url):\n        \"\"\"Download a file and save it in the current folder.\n        Return the name of the downloaded file.\"\"\"\n        # Get the filename.\n        file = os.path.basename(url)\n        # Fix the bug, by specifying a fixed filename if the\n        # URL does not contain one.\n        if not file:\n            file = 'downloaded'\n        # Download the file unless it already exists.\n        if not os.path.exists(file):\n            with open(file, 'w') as f:\n                f.write(urlopen(url).read())\n        return file\n    Overwriting datautils.py\n    ```", "```py\n    $ nosetests\n    ..\n    Ran 2 tests in 0.036s\n    OK\n\n    ```", "```py\n$ nosetests --with-cov --cover-package datautils\n\n```", "```py\nimport pdb; pdb.set_trace()\n\n```", "```py\n%run -d -b extscript.py:20 script\n\n```", "```py\nfrom IPython import embed\nembed()\n\n```"]