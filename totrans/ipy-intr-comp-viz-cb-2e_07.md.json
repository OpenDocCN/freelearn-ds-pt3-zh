["```py\n    In [1]: import numpy as np\n            import pandas as pd\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: player = 'Roger Federer'\n            filename = \"data/{name}.csv\".format(\n                          name=player.replace(' ', '-'))\n            df = pd.read_csv(filename)\n    ```", "```py\n    In [3]: df\n    Out[3]: Int64Index: 1179 entries, 0 to 1178\n            Data columns (total 70 columns):\n            year                        1179  non-null values\n            tournament                  1179  non-null values\n            ...\n            player2 total points total  1027  non-null values\n            dtypes: float64(49), int64(2), object(19)\n    ```", "```py\n    In [4]: df['win'] = df['winner'] == player\n            df['win'].tail()\n    Out[4]: 1174    False\n            1175     True\n            1176     True\n            1177     True\n            1178    False\n            Name: win, dtype: bool\n    ```", "```py\n    In [5]: print((\"{player} has won {vic:.0f}% \"\n                   \"of his ATP matches.\").format(\n                    player=player, vic=100*df['win'].mean()))\n    Roger Federer has won 82% of his ATP matches.\n    ```", "```py\n    In [6]: date = pd.to_datetime(df['start date'])\n    ```", "```py\n    In [7]: df['dblfaults'] = (df['player1 double faults'] / \n                               df['player1 total points total'])\n    ```", "```py\n    In [8]: df['dblfaults'].tail()\n    Out[8]: 1174    0.018116\n            1175    0.000000\n            1176    0.000000\n            1177    0.011561\n            1178         NaN\n            Name: dblfaults, dtype: float64\n    In [9]: df['dblfaults'].describe()\n    Out[9]: count    1027.000000\n            mean        0.012129\n            std         0.010797\n            min         0.000000\n            25%         0.004444\n            50%         0.010000\n            75%         0.018108\n            max         0.060606\n            dtype: float64\n    ```", "```py\n    In [10]: df.groupby('surface')['win'].mean()\n    Out[10]: surface\n             Indoor: Carpet    0.736842\n             Indoor: Clay      0.833333\n             Indoor: Hard      0.836283\n             Outdoor: Clay     0.779116\n             Outdoor: Grass    0.871429\n             Outdoor: Hard     0.842324\n             Name: win, dtype: float64\n    ```", "```py\n    In [11]: gb = df.groupby('year')\n    ```", "```py\n    In [12]: plt.plot_date(date, df['dblfaults'], \n                           alpha=.25, lw=0)\n             plt.plot_date(gb['start date'].max(), \n                           gb['dblfaults'].mean(), '-', lw=3)\n             plt.xlabel('Year')\n             plt.ylabel('Proportion of double faults per \n                           match.')\n    ```", "```py\n    In [1]: import numpy as np\n            import scipy.stats as st\n            import scipy.special as sp\n    In [2]: n = 100  # number of coin flips\n            h = 61  # number of heads\n            q = .5  # null-hypothesis of fair coin\n    ```", "```py\n    In [3]: xbar = float(h)/n\n            z = (xbar - q) * np.sqrt(n / (q*(1-q))); z\n    Out[3]: 2.1999999999999997\n    ```", "```py\n    In [4]: pval = 2 * (1 - st.norm.cdf(z)); pval\n    Out[4]: 0.02780689502699718\n    ```", "```py\n    In [1]: import numpy as np\n            import scipy.stats as st\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    In [2]: posterior = lambda n, h, q: ((n+1) * \n                                         st.binom(n, q).pmf(h))\n    ```", "```py\n    In [3]: n = 100\n            h = 61\n            q = np.linspace(0., 1., 1000)\n            d = posterior(n, h, q)\n    In [4]: plt.plot(q, d, '-k')\n            plt.ylim(0, d.max()+1)\n    ```", "```py\n    In [1]: import numpy as np\n            import pandas as pd\n            import scipy.stats as st\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: player = 'Roger Federer'\n            filename = \"data/{name}.csv\".format(\n                          name=player.replace(' ', '-'))\n            df = pd.read_csv(filename)\n    ```", "```py\n    In [3]: print(\"Number of columns: \" + str(len(df.columns)))\n            df[df.columns[:4]].tail()\n    Number of columns: 70\n                  year                  tournament  start date\n            1174  2012  Australian Open, Australia  16.01.2012\n            1175  2012                 Doha, Qatar  02.01.2012\n            1176  2012                 Doha, Qatar  02.01.2012\n            1177  2012                 Doha, Qatar  02.01.2012\n            1178  2012                 Doha, Qatar  02.01.2012\n    ```", "```py\n    In [4]: npoints = df['player1 total points total']\n            points = df['player1 total points won'] / npoints\n            aces = df['player1 aces'] / npoints\n    In [5]: plt.plot(points, aces, '.')\n            plt.xlabel('% of points won')\n            plt.ylabel('% of aces')\n            plt.xlim(0., 1.)\n            plt.ylim(0.)\n    ```", "```py\n    In [6]: df_bis = pd.DataFrame({'points': points,\n                                   'aces': aces}).dropna()\n            df_bis.tail()\n    Out[6]:           aces    points\n            1173  0.024390  0.585366\n            1174  0.039855  0.471014\n            1175  0.046512  0.639535\n            1176  0.020202  0.606061\n            1177  0.069364  0.531792\n    ```", "```py\n    In [7]: df_bis.corr()\n    Out[7]:             aces    points\n            aces    1.000000  0.255457\n            points  0.255457  1.000000\n    ```", "```py\n    In [8]: df_bis['result'] = df_bis['points'] > \\\n                               df_bis['points'].median()\n            df_bis['manyaces'] = df_bis['aces'] > \\\n                               df_bis['aces'].median()\n    ```", "```py\n    In [9]: pd.crosstab(df_bis['result'], df_bis['manyaces'])\n    Out[9]: manyaces  False  True \n            result                \n            False       300    214\n            True        214    299\n    ```", "```py\n    In [10]: st.chi2_contingency(_)\n    Out[10]: (27.809858855369555,\n              1.3384233799633629e-07,\n              1L,\n              array([[ 257.25024343,  256.74975657],\n                     [ 256.74975657,  256.25024343]]))\n    ```", "```py\n    In [1]: import numpy as np\n            import scipy.stats as st\n            import statsmodels.datasets as ds\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    In [2]: data = ds.heart.load_pandas().data\n    ```", "```py\n    In [3]: data.tail()\n    Out[3]:     survival  censors   age\n            64        14        1  40.3\n            65       167        0  26.7\n            66       110        0  23.7\n            67        13        0  28.9\n            68         1        0  35.2\n    ```", "```py\n    In [4]: data = data[data.censors==1]\n            survival = data.survival\n    ```", "```py\n    In [5]: plt.subplot(121)\n            plt.plot(sorted(survival)[::-1], 'o')\n            plt.xlabel('Patient')\n            plt.ylabel('Survival time (days)')\n            plt.subplot(122)\n            plt.hist(survival, bins=15)\n            plt.xlabel('Survival time (days)')\n            plt.ylabel('Number of patients')\n    ```", "```py\n    In [6]: smean = survival.mean()\n            rate = 1./smean\n    ```", "```py\n    In [7]: smax = survival.max()\n            days = np.linspace(0., smax, 1000)\n            dt = smax / 999\\.  # bin size: interval between two\n                              # consecutive values in `days`\n    ```", "```py\n    In [8]: dist_exp = st.expon.pdf(days, scale=1./rate)\n    ```", "```py\n    In [9]: nbins = 30\n            plt.hist(survival, nbins)\n            plt.plot(days, dist_exp*len(survival)*smax/nbins,\n                     '-r', lw=3)\n    ```", "```py\n    In [10]: dist = st.expon\n             args = dist.fit(survival); args\n    Out[10]: (0.99999999994836486, 222.28880590143666)\n    ```", "```py\n    In [11]: st.kstest(survival, dist.cdf, args)\n    Out[11]: (0.36199685486406347, 8.6470960143358866e-06)\n    ```", "```py\n    In [12]: dist = st.fatiguelife\n             args = dist.fit(survival)\n             st.kstest(survival, dist.cdf, args)\n    Out[12]: (0.18773446101946889, 0.073211497000863268)\n    ```", "```py\n    In [13]: dist_fl = dist.pdf(days, *args)\n             nbins = 30\n             plt.hist(survival, nbins)\n             plt.plot(days, dist_exp*len(survival)*smax/nbins,\n                      '-r', lw=3, label='exp')\n             plt.plot(days, dist_fl*len(survival)*smax/nbins,\n                      '-g', lw=3, label='BS')\n             plt.xlabel(\"Survival time (days)\")\n             plt.ylabel(\"Number of patients\")\n             plt.legend()\n    ```", "```py\n    In [1]: import numpy as np\n            import pandas as pd\n            import scipy.stats as st\n            import matplotlib.pyplot as plt\n            from mpl_toolkits.basemap import Basemap\n            %matplotlib inline\n    ```", "```py\n    In [2]: df = pd.read_csv(\n                       \"data/Allstorms.ibtracs_wmo.v03r05.csv\")\n    ```", "```py\n    In [3]: df[df.columns[[0,1,3,8,9]]].head()\n    Out[3]:       Serial_Num  Season Basin  Latitude  Longitude\n            0  1848011S09080    1848    SI      -8.6       79.8\n            1  1848011S09080    1848    SI      -9.0       78.9\n            2  1848011S09080    1848    SI     -10.4       73.2\n            3  1848011S09080    1848    SI     -12.8       69.9\n            4  1848011S09080    1848    SI     -13.9       68.9\n    ```", "```py\n    In [4]: dfs = df.groupby('Serial_Num')\n            pos = dfs[['Latitude', 'Longitude']].mean()\n            y, x = pos.values.T\n            pos.head()\n    Out[4]:                 Latitude  Longitude\n            Serial_Num                         \n            1848011S09080 -15.918182  71.854545\n            1848011S15057 -24.116667  52.016667\n            1848061S12075 -20.528571  65.342857\n            1851080S15063 -17.325000  55.400000\n            1851080S21060 -23.633333  60.200000\n    ```", "```py\n    In [5]: m = Basemap(projection='mill', llcrnrlat=-65,\n                        urcrnrlat=85, llcrnrlon=-180,\n                        urcrnrlon=180)\n            x0, y0 = m(-180, -65)\n            x1, y1 = m(180, 85)\n            m.drawcoastlines()\n            m.fillcontinents(color='#dbc8b2')\n            xm, ym = m(x, y)\n            m.plot(xm, ym, '.r', alpha=.1)\n    ```", "```py\n    In [6]: h = np.vstack((xm, ym))\n    In [7]: kde = st.gaussian_kde(h)\n    ```", "```py\n    In [8]: k = 50\n            tx, ty = np.meshgrid(np.linspace(x0, x1, 2*k),\n                                 np.linspace(y0, y1, k))\n            v = kde(np.vstack((tx.ravel(), \n                               ty.ravel()))).reshape((k, 2*k))\n    ```", "```py\n    In [9]: m.drawcoastlines()\n            m.fillcontinents(color='#dbc8b2')\n            xm, ym = m(x, y)\n            m.imshow(v, origin='lower', extent=[x0,x1,y0,y1],\n                     cmap=plt.get_cmap('Reds'))\n    ```", "```py\n    In [1]: import numpy as np\n            import pandas as pd\n            import pymc\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: df = pd.read_csv(\n                    \"data/Allstorms.ibtracs_wmo.v03r05.csv\",\n                    delim_whitespace=False)\n    ```", "```py\n    In [3]: cnt = df[df['Basin'] == ' NA'].groupby('Season') \\\n                               ['Serial_Num'].nunique()\n            years = cnt.index\n            y0, y1 = years[0], years[-1]\n            arr = cnt.values\n            plt.plot(years, arr, '-ok')\n            plt.xlim(y0, y1)\n            plt.xlabel(\"Year\")\n            plt.ylabel(\"Number of storms\")\n    ```", "```py\n    In [4]: switchpoint = pymc.DiscreteUniform('switchpoint',\n                                               lower=0, \n                                               upper=len(arr))\n            early_mean = pymc.Exponential('early_mean', beta=1)\n            late_mean = pymc.Exponential('late_mean', beta=1)\n    ```", "```py\n    In [5]: @pymc.deterministic(plot=False)\n            def rate(s=switchpoint, e=early_mean, l=late_mean):\n                out = np.empty(len(arr))\n                out[:s] = e\n                out[s:] = l\n                return out\n    ```", "```py\n    In [6]: storms = pymc.Poisson('storms', mu=rate, value=arr, \n                                  observed=True)\n    ```", "```py\n    In [7]: model = pymc.Model([switchpoint, early_mean, \n                                late_mean,\n                                rate, storms])\n    In [8]: mcmc = pymc.MCMC(model)\n            mcmc.sample(iter=10000, burn=1000, thin=10)\n             [----       17%            ] 1774 of 10000 complete\n             [-----------100%-----------] 10000 of 10000 complete\n    ```", "```py\n    In [9]: plt.subplot(311)\n            plt.plot(mcmc.trace('switchpoint')[:])\n            plt.ylabel(\"Switch point\")\n            plt.subplot(312)\n            plt.plot(mcmc.trace('early_mean')[:])\n            plt.ylabel(\"Early mean\")\n            plt.subplot(313)\n            plt.plot(mcmc.trace('late_mean')[:])\n            plt.xlabel(\"Iteration\")\n            plt.ylabel(\"Late mean\")\n    ```", "```py\n    In [10]: plt.subplot(131)\n             plt.hist(mcmc.trace('switchpoint')[:] + y0, 15)\n             plt.xlabel(\"Switch point\")\n             plt.ylabel(\"Distribution\")\n             plt.subplot(132)\n             plt.hist(mcmc.trace('early_mean')[:], 15)\n             plt.xlabel(\"Early mean\")\n             plt.subplot(133)\n             plt.hist(mcmc.trace('late_mean')[:], 15)\n             plt.xlabel(\"Late mean\")\n    ```", "```py\n    In [11]: yp = y0 + mcmc.trace('switchpoint')[:].mean()\n             em = mcmc.trace('early_mean')[:].mean()\n             lm = mcmc.trace('late_mean')[:].mean()\n             print((yp, em, lm))\n    (1966.681111111111, 8.2843072252292682, 16.728831395584947)\n    ```", "```py\n    In [12]: plt.plot(years, arr, '-ok')\n             plt.axvline(yp, color='k', ls='--')\n             plt.plot([y0, yp], [em, em], '-b', lw=3)\n             plt.plot([yp, y1], [lm, lm], '-r', lw=3)\n             plt.xlim(y0, y1)\n             plt.xlabel(\"Year\")\n             plt.ylabel(\"Number of storms\")\n    ```", "```py\nIn [13]: graph = pymc.graph.graph(model)\n         from IPython.display import display_png\n         display_png(graph.create_png(), raw=True)\n```", "```py\npip install pyparsing==1.5.7\npip install pydot\n\n```", "```py\n    In [1]: import statsmodels.datasets as sd\n    In [2]: data = sd.longley.load_pandas()\n    In [3]: %load_ext rmagic\n    ```", "```py\n    In [4]: data.endog_name, data.exog_name\n    Out[4]: ('TOTEMP', ['GNPDEFL', 'GNP', 'UNEMP',\n                        'ARMED', 'POP', 'YEAR'])\n    In [5]: y, x = data.endog, data.exog\n    ```", "```py\n    In [6]: x['TOTEMP'] = y\n    In [7]: x\n    Out[7]:     GNPDEFL     GNP  UNEMP     POP  YEAR  TOTEMP\n            0      83.0  234289   2356  107608  1947   60323\n            1      88.5  259426   2325  108632  1948   61122\n            2      88.2  258054   3682  109773  1949   60171\n            ...\n            13    114.2  502601   3931  125368  1960   69564\n            14    115.7  518173   4806  127852  1961   69331\n            15    116.9  554894   4007  130081  1962   70551\n    ```", "```py\n    In [8]: gnp = x['GNP']\n            totemp = x['TOTEMP']\n    In [9]: %R -i totemp,gnp plot(gnp, totemp)\n    ```", "```py\n    In [10]: %%R\n             # Least-squares regression\n             fit <- lm(totemp ~ gnp);\n             # Display the coefficients of the fit.\n             print(fit$coefficients)\n             plot(gnp, totemp)  # Plot the data points.\n             abline(fit)  # And plot the linear regression.\n     (Intercept)          gnp \n    5.184359e+04 3.475229e-02\n    ```"]