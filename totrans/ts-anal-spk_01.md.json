["```py\n    import pyspark.pandas as ps\n    import Plotly, a graphing library that enables interactive visualization, converts data points into graphs.\n    ```", "```py\n    df1 = spark.read.format(\"csv\") \\\n        .option(\"header\", \"true\") \\\n        .load(\"file:///\" + SparkFiles.get(DATASET_FILE))\n    df1.createOrReplaceTempView(\"temperatures\")\n    ```", "```py\n    df2 = spark.sql(\"select to_date(Category) as year, float(`Annual Mean`) as annual_mean from temperatures where Category > '1950'\")\n    ```", "```py\n    fig = px.scatter(\n        df2_pd, x=\"year\", y=\"annual_mean\",\n        trendline=\"ols\", \n        title='Average Temperature - Mauritius (from 1950)'\n    )\n    ```", "```py\n    from prophet import Prophet\n    from prophet.plot import plot_plotly, plot_components_plotly\n    ```", "```py\n    df1 = spark.read.format(\"csv\") \\\n        .option(\"header\", \"true\") \\\n        .load(\"file:///\" + SparkFiles.get(DATASET_FILE))\n    df1.createOrReplaceTempView(\"temperatures\")\n    ```", "```py\n    df2 = spark.sql(\"select to_date(date) as ds, float(daily_min_temperature) as y from temperatures sort by ds asc\")\n    ```", "```py\n    model = Prophet(\n        n_changepoints=20, \n        yearly_seasonality=True,\n        changepoint_prior_scale=0.001)\n    model.fit(df2_pd)\n    ```", "```py\n    future_dates = model.make_future_dataframe(\n        periods=365, freq='D')\n    forecast = model.predict(future_dates)\n    ```", "```py\n    plot_components_plotly(model, forecast)\n    ```", "```py\n    import numpy as np\n    from plotly.subplots import make_subplots\n    ```", "```py\n    (amp, freq) = (3, 0.33)\n    seasonality1 = amp * np.sin(2 * np.pi * freq * time_period)\n    (amp, freq) = (2, 1)\n    seasonality2 = amp * np.sin(2 * np.pi * freq * time_period)\n    (amp, freq) = (1, 4)\n    seasonality3 = amp * np.sin(2 * np.pi * freq * time_period)\n    combined = seasonality1 + seasonality2 + seasonality3\n    ```", "```py\n    fig = make_subplots(rows=4, cols=1, shared_xaxes=True)\n    fig.add_scatter(\n        x=time_period, y=seasonality1, \n        row=1, col=1, name=f\"seasonality 1\")\n    fig.add_scatter(\n        x=time_period, y=seasonality2, \n        row=2, col=1, name=f\"seasonality 2\")\n    fig.add_scatter(\n        x=time_period, y=seasonality3, \n        row=3, col=1, name=f\"seasonality 3\")\n    fig.add_scatter(\n        x=time_period, y=combined, \n        row=4, col=1, name=f\"combined\")fig.show()\n    ```"]