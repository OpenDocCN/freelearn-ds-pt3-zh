["```py\nimport pandas as pd\nimport numpy as np\nimport json\nimport pprint\nfrom collections import Counter \n```", "```py\nwith open('data/allcandidatenewssample.json') as f:\n...   candidatenews = json.load(f)\n...\nlen(candidatenews) \n```", "```py\n60000 \n```", "```py\npprint.pprint(candidatenews[0:2]) \n```", "```py\n[{'date': '2019-12-25 10:00:00',\n  'domain': 'www.nbcnews.com',\n  'panel_position': 1,\n  'query': 'Michael Bloomberg',\n  'source': 'NBC News',\n  'story_position': 6,\n  'time': '18 hours ago',\n  'title': 'Bloomberg cuts ties with company using prison inmates to make campaign calls',\n  'url': 'https://www.nbcnews.com/politics/2020-election/bloomberg-cuts-ties-company-using-prison-inmates-make-campaign-calls-n1106971'},\n {'date': '2019-11-09 08:00:00',\n  'domain': 'www.townandcountrymag.com',\n  'panel_position': 1,\n  'query': 'Amy Klobuchar',\n  'source': 'Town & Country Magazine',\n  'story_position': 3,\n  'time': '18 hours ago',\n  'title': \"Democratic Candidates React to Michael Bloomberg's Potential Run\",\n  'url': 'https://www.townandcountrymag.com/society/politics/a29739854/michael-bloomberg-democratic-candidates-campaign-reactions/'}] \n```", "```py\npprint.pprint(candidatenews[0]['source']) \n```", "```py\n'NBC News' \n```", "```py\nCounter([len(item) for item in candidatenews]) \n```", "```py\nCounter({9: 57202, 2: 2382, 10: 416}) \n```", "```py\npprint.pprint(next(item for item in candidatenews if len(item)<9)) \n```", "```py\n{'date': '2019-09-11 18:00:00', 'reason': 'Not collected'} \n```", "```py\npprint.pprint(next(item for item in candidatenews if len(item)>9)) \n```", "```py\n{'category': 'Satire',\n 'date': '2019-08-21 04:00:00',\n 'domain': 'politics.theonion.com',\n 'panel_position': 1,\n 'query': 'John Hickenlooper',\n 'source': 'Politics | The Onion',\n 'story_position': 8,\n 'time': '4 days ago',\n 'title': ''And Then There Were 23,' Says Wayne Messam Crossing Out '\n          'Hickenlooper Photo \\n'\n          'In Elaborate Grid Of Rivals',\n 'url': 'https://politics.theonion.com/and-then-there-were-23-says-wayne-messam-crossing-ou-1837311060'} \n```", "```py\npprint.pprint([item for item in candidatenews if len(item)==2][0:2]) \n```", "```py\n[{'date': '2019-09-11 18:00:00', 'reason': 'Not collected'},\n {'date': '2019-07-24 00:00:00', 'reason': 'No Top stories'}, \n```", "```py\n3candidatenews = [item for item in candidatenews if len(item)>2]\nlen(candidatenews) \n```", "```py\n57618 \n```", "```py\npolitico = [item for item in candidatenews if item[\"source\"] == \"Politico\"]\nlen(politico) \n```", "```py\n2732 \n```", "```py\npprint.pprint(politico[0:2]) \n```", "```py\n[{'date': '2019-05-18 18:00:00',\n  'domain': 'www.politico.com',\n  'panel_position': 1,\n  'query': 'Marianne Williamson',\n  'source': 'Politico',\n  'story_position': 7,\n  'time': '1 week ago',\n  'title': 'Marianne Williamson reaches donor threshold for Dem debates',\n  'url': 'https://www.politico.com/story/2019/05/09/marianne-williamson-2020-election-1315133'},\n {'date': '2018-12-27 06:00:00',\n  'domain': 'www.politico.com',\n  'panel_position': 1,\n  'query': 'Julian Castro',\n  'source': 'Politico',\n  'story_position': 1,\n  'time': '1 hour ago',\n  'title': \"O'Rourke and Castro on collision course in Texas\",\n  'url': 'https://www.politico.com/story/2018/12/27/orourke-julian-castro-collision-texas-election-1073720'}] \n```", "```py\nsources = [item.get('source') for item in candidatenews]\ntype(sources) \n```", "```py\n<class 'list'> \n```", "```py\nlen(sources) \n```", "```py\n57618 \n```", "```py\nsources[0:5] \n```", "```py\n['NBC News', 'Town & Country Magazine', 'TheHill', 'CNBC.com', 'Fox News'] \n```", "```py\npprint.pprint(Counter(sources).most_common(10)) \n```", "```py\n[('Fox News', 3530),\n ('CNN.com', 2750),\n ('Politico', 2732),\n ('TheHill', 2383),\n ('The New York Times', 1804),\n ('Washington Post', 1770),\n ('Washington Examiner', 1655),\n ('The Hill', 1342),\n ('New York Post', 1275),\n ('Vox', 941)] \n```", "```py\nfor newsdict in candidatenews:\n...     newsdict.update((k, \"The Hill\") for k, v in newsdict.items()\n...      if k == \"source\" and v == \"TheHill\")\n...\nsources = [item.get('source') for item in candidatenews]\npprint.pprint(Counter(sources).most_common(10)) \n```", "```py\n[('The Hill', 3725),\n ('Fox News', 3530),\n ('CNN.com', 2750),\n ('Politico', 2732),\n ('The New York Times', 1804),\n ('Washington Post', 1770),\n ('Washington Examiner', 1655),\n ('New York Post', 1275),\n ('Vox', 941),\n ('Breitbart', 799)] \n```", "```py\ncandidatenewsdf = pd.DataFrame(candidatenews)\ncandidatenewsdf.dtypes \n```", "```py\ntitle             object\nurl               object\nsource            object\ntime              object\ndate              object\nquery             object\nstory_position     int64\npanel_position    object\ndomain            object\ncategory          object\ndtype: object \n```", "```py\ncandidatenewsdf.rename(columns={'date':'storydate'}, inplace=True)\ncandidatenewsdf.storydate = candidatenewsdf.storydate.astype('datetime64[ns]')\ncandidatenewsdf.shape \n```", "```py\n(57618, 10) \n```", "```py\ncandidatenewsdf.source.value_counts(sort=True).head(10) \n```", "```py\nThe Hill               3725\nFox News               3530\nCNN.com                2750\nPolitico               2732\nThe New York Times     1804\nWashington Post        1770\nWashington Examiner    1655\nNew York Post          1275\nVox                     941\nBreitbart               799\nName: source, dtype: int64 \n```", "```py\n{\"info\": { \"total\": 778, \"parameters\": {\"african_american_artists\": \"\" }},\n\"data\": [\n{\n\"id\": 165157,\n\"accession_number\": \"2007.158\",\n\"title\": \"Fulton and Nostrand\",\n\"creation_date\": \"1958\",\n\"citations\": [\n  {\n   \"citation\": \"Annual Exhibition: Sculpture, Paintings...\",\n   \"page_number\": \"Unpaginated, [8],[12]\",\n   \"url\": null\n   },\n  {\n   \"citation\": \"\\\"Moscow to See Modern U.S. Art,\\\"<em> New York...\", \n   \"page_number\": \"P. 60\",\n   \"url\": null\n  }]\n\"creators\": [\n      {\n     \"description\": \"Jacob Lawrence (American, 1917-2000)\",\n     \"extent\": null,\n     \"qualifier\": null,\n     \"role\": \"artist\",\n     \"birth_year\": \"1917\",\n     \"death_year\": \"2000\"\n     }\n  ]\n } \n```", "```py\nimport pandas as pd\nimport numpy as np\nimport json\nimport pprint\nimport requests \n```", "```py\nresponse = requests.get(\"https://openaccess-api.clevelandart.org/api/artworks/?african_american_artists\")\ncamcollections = json.loads(response.text)\nlen(camcollections['data']) \n```", "```py\n778 \n```", "```py\npprint.pprint(camcollections['data'][0]) \n```", "```py\n{'accession_number': '2007.158',\n 'catalogue_raisonne': None,\n 'citations': [\n   {'citation': 'Annual Exhibition: Sculpture...',\n    'page_number': 'Unpaginated, [8],[12]',\n    'url': None},\n  {'citation': '\"Moscow to See Modern U.S....',\n    'page_number': 'P. 60',\n    'url': None}]\n 'collection': 'American - Painting',\n 'creation_date': '1958',\n 'creators': [\n  {'biography': 'Jacob Lawrence (born 1917)...',\n   'birth_year': '1917',\n   'description': 'Jacob Lawrence (American...)',\n   'role': 'artist'}],\n 'type': 'Painting'} \n```", "```py\ncamcollectionsdf = \\\n...   pd.json_normalize(camcollections['data'],\n...    'citations',\n...    ['accession_number','title','creation_date',\n...    'collection','creators','type'])\ncamcollectionsdf.head(2).T \n```", "```py\n 0                         1\ncitation          Annual Exhibiti...  \"Moscow to See Modern...\npage_number             Unpaginated,                     P. 60\nurl                             None                      None\naccession_number            2007.158                  2007.158\ntitle               Fulton and No...          Fulton and No...\ncreation_date                   1958                      1958\ncollection          American - Pa...          American - Pa...\ncreators       [{'description':'J...     [{'description':'J...\ntype                        Painting                  Painting \n```", "```py\n    creator = camcollectionsdf[:1].creators[0]\n    type(creator[0]) \n    ```", "```py\n    dict \n    ```", "```py\n    pprint.pprint(creator) \n    ```", "```py\n    [{'biography': 'Jacob Lawrence (born 1917) has been a prominent art...',\n      'birth_year': '1917',\n      'death_year': '2000',\n      'description': 'Jacob Lawrence (American, 1917-2000)',\n      'extent': None,\n      'name_in_original_language': None,\n      'qualifier': None,\n      'role': 'artist'}] \n    ```", "```py\n    camcollectionsdf['birthyear'] = camcollectionsdf.\\\n    ...   creators.apply(lambda x: x[0]['birth_year'])\n    camcollectionsdf.birthyear.value_counts().\\\n    ...   sort_index().head() \n    ```", "```py\n    1821    18\n    1886     2\n    1888     1\n    1892    13\n    1899    17\n    Name: birthyear, dtype: int64 \n    ```", "```py\ncamcollectionsdf['birthyear'] = camcollectionsdf.\\\n...   creators.apply(lambda x: x[0]['birth_year']) \n```", "```py\n    import pandas as pd\n    import numpy as np\n    import json\n    import pprint\n    import requests\n    from bs4 import BeautifulSoup \n    ```", "```py\nwebpage = requests.get(\"http://www.alrb.org/datacleaning/highlowcases.html\")\nbs = BeautifulSoup(webpage.text, 'html.parser')\ntheadrows = bs.find('table', {'id':'tblLowCases'}).thead.find_all('th')\ntype(theadrows) \n```", "```py\n<class 'bs4.element.ResultSet'> \n```", "```py\nlabelcols = [j.get_text() for j in theadrows]\nlabelcols[0] = \"rowheadings\"\nlabelcols \n```", "```py\n['rowheadings',\n 'Last Date',\n 'Total Cases',\n 'Total Deaths',\n 'Total Cases PM',\n 'Total Deaths PM',\n 'Population',\n 'GDP Per Capita',\n 'Median Age'] \n```", "```py\nrows = bs.find('table', {'id':'tblLowCases'}).tbody.find_all('tr')\ndatarows = []\nlabelrows = []\nfor row in rows:\n...   rowlabels = row.find('th').get_text()\n...   cells = row.find_all('td', {'class':'data'})\n...   if (len(rowlabels)>3):\n...     labelrows.append(rowlabels)\n...   if (len(cells)>0):\n...     cellvalues = [j.get_text() for j in cells]\n...     datarows.append(cellvalues)\n...\npprint.pprint(datarows[0:2]) \n```", "```py\n[['11/6/2022', '11,945', '2,159', '354', '64', '33,696,612', '1,479', '20.3'],\n ['7/2/2023', '9,515', '315', '363', '12', '26,207,982', '926', '15.1']] \n```", "```py\npprint.pprint(labelrows[0:2]) \n```", "```py\n['Yemen', 'Niger'] \n```", "```py\nfor i in range(len(datarows)):\n...   datarows[i].insert(0, labelrows[i])\n...\npprint.pprint(datarows[0:2]) \n```", "```py\n[['Yemen',\n  '11/6/2022',\n  '11,945',\n  '2,159',\n  '354',\n  '64',\n  '33,696,612',\n  '1,479',\n  '20.3'],\n ['Niger',\n  '7/2/2023',\n  '9,515',\n  '315',\n  '363',\n  '12',\n  '26,207,982',\n  '926',\n  '15.1']] \n```", "```py\nlowcases = pd.DataFrame(datarows, columns=labelcols)\nlowcases.iloc[:,1:5].head() \n```", "```py\n Last Date   Total Cases   Total Deaths   Total Cases PM\n0    11/6/2022        11,945          2,159              354\n1     7/2/2023         9,515            315              363\n2    4/30/2023         7,698            194              434\n3   12/10/2023        43,223            846              660\n4   12/24/2023         7,779            125              904 \n```", "```py\nlowcases.dtypes \n```", "```py\nrowheadings                object\nLast Date                  object\nTotal Cases                object\nTotal Deaths               object\nTotal Cases PM             object\nTotal Deaths PM            object\nPopulation                 object\nGDP Per Capita             object\nMedian Age                 object\ndtype: object \n```", "```py\nlowcases.columns = lowcases.columns.str.replace(\" \", \"_\").str.lower()\nfor col in lowcases.columns[2:-1]:\n  lowcases[col] = lowcases[col].\\\nstr.replace(\"[^0-9]\",\"\",regex=True).astype('int64')\nlowcases['last_date'] = pd.to_datetime(lowcases.last_date)\nlowcases['median_age'] = lowcases['median_age'].astype('float')\nlowcases.dtypes \n```", "```py\nrowheadings                 object\nlast_date            datetime64[ns]\ntotal_cases                 int64\ntotal_deaths                int64\ntotal_cases_pm              int64\ntotal_deaths_pm             int64\npopulation                  int64\ngdp_per_capita              int64\nmedian_age                float64\ndtype: object \n```", "```py\ntheadrows = bs.find('table', {'id':'tblLowCases'}).thead.find_all('th')\nlabelcols = [j.get_text() for j in theadrows] \n```", "```py\nfor i in range(len(datarows)):\n...   datarows[i].insert(0, labelrows[i]) \n```", "```py\n    from pyspark.sql import SparkSession\n    spark = SparkSession.builder \\\n       .getOrCreate()\n    landtemps = spark.read.option(\"header\",True) \\\n         .csv(\"data/landtemps.tar.gz\")\n    type(landtemps) \n    ```", "```py\n    pyspark.sql.dataframe.DataFrame \n    ```", "```py\n    landtemps.count() \n    ```", "```py\n    16904868 \n    ```", "```py\n    landtemps.printSchema() \n    ```", "```py\n    root\n     |-- locationid: string (nullable = true)\n     |-- year: string (nullable = true)\n     |-- month: string (nullable = true)\n     |-- temp: string (nullable = true)\n     |-- latitude: string (nullable = true)\n     |-- longitude: string (nullable = true)\n     |-- stnelev: string (nullable = true)\n     |-- station: string (nullable = true)\n     |-- countryid: string (nullable = true)\n     |-- country: string (nullable = true) \n    ```", "```py\n    landtemps.select(\"station\",'country','month','year','temp') \\\n        .show(5, False) \n    ```", "```py\n    +-------+-------------------+-----+----+-----+\n    |station|country            |month|year|temp |\n    +-------+-------------------+-----+----+-----+\n    |SAVE   |Antigua and Barbuda|1    |1961|-0.85|\n    |SAVE   |Antigua and Barbuda|1    |1962|1.17 |\n    |SAVE   |Antigua and Barbuda|1    |1963|-7.09|\n    |SAVE   |Antigua and Barbuda|1    |1964|0.66 |\n    |SAVE   |Antigua and Barbuda|1    |1965|0.48 |\n    +-------+-------------------+-----+----+-----+\n    only showing top 5 rows \n    ```", "```py\n    landtemps = landtemps \\\n      .withColumn(\"temp\",landtemps.temp.cast('float'))\n    landtemps.select(\"temp\").dtypes \n    ```", "```py\n    [('temp', 'float')] \n    ```", "```py\n    landtemps.describe('temp').show() \n    ```", "```py\n    +-------+------------------+\n    |summary|              temp|\n    +-------+------------------+\n    |  count|          14461547|\n    |   mean|10.880725773138536|\n    | stddev|11.509636369381685|\n    |    min|             -75.0|\n    |    max|             42.29|\n    +-------+------------------+ \n    ```", "```py\n    allcandidatenews = spark.read \\\n         .json(\"data/allcandidatenewssample.json\")\n    allcandidatenews \\\n      .select(\"source\",\"title\",\"story_position\") \\\n      .show(5) \n    ```", "```py\n    +--------------------+--------------------+--------------+\n    |              source|               title|story_position|\n    +--------------------+--------------------+--------------+\n    |            NBC News|Bloomberg cuts ti...|             6|\n    |Town & Country Ma...|Democratic Candid...|             3|\n    |                null|                null|          null|\n    |             TheHill|Sanders responds ...|             7|\n    |            CNBC.com|From Andrew Yang'...|             2|\n    +--------------------+--------------------+--------------+\n    only showing top 5 rows \n    ```", "```py\n    allcandidatenews.count() \n    ```", "```py\n    60000 \n    ```", "```py\n    allcandidatenews.printSchema() \n    ```", "```py\n    root\n     |-- category: string (nullable = true)\n     |-- date: string (nullable = true)\n     |-- domain: string (nullable = true)\n     |-- panel_position: string (nullable = true)\n     |-- query: string (nullable = true)\n     |-- reason: string (nullable = true)\n     |-- source: string (nullable = true)\n     |-- story_position: long (nullable = true)\n     |-- time: string (nullable = true)\n     |-- title: string (nullable = true)\n     |-- url: string (nullable = true) \n    ```", "```py\n    allcandidatenews \\\n       .describe('story_position') \\\n       .show() \n    ```", "```py\n    +-------+-----------------+\n    |summary|   story_position|\n    +-------+-----------------+\n    |  count|            57618|\n    |   mean|5.249626852719636|\n    | stddev|2.889001922195635|\n    |    min|                1|\n    |    max|               10|\n    +-------+-----------------+ \n    ```", "```py\nallcandidatenewsdf = allcandidatenews.toPandas()\nallcandidatenewsdf.info() \n```", "```py\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 60000 entries, 0 to 59999\nData columns (total 11 columns):\n #   Column          Non-Null Count  Dtype\n---  ------          --------------  ------\n 0   category          416 non-null  object\n 1   date            60000 non-null  object\n 2   domain          57618 non-null  object\n 3   panel_position  57618 non-null  object\n 4   query           57618 non-null  object\n 5   reason          2382 non-null   object\n 6   source          57618 non-null  object\n 7   story_position  57618 non-null float64\n 8   time            57618 non-null  object\n 9   title           57618 non-null  object\n 10  url             57618 non-null  object\ndtypes: float64(1), object(10)\nmemory usage: 5.0+ MB \n```", "```py\n{\"info\": { \"total\": 778, \"parameters\": {\"african_american_artists\": \"\" }},\n\"data\": [\n{\n\"id\": 165157,\n\"accession_number\": \"2007.158\",\n\"title\": \"Fulton and Nostrand\",\n\"creation_date\": \"1958\",\n\"citations\": [\n  {\n   \"citation\": \"Annual Exhibition: Sculpture, Paintings...\",\n   \"page_number\": \"Unpaginated, [8],[12]\",\n   \"url\": null\n   },\n  {\n   \"citation\": \"\\\"Moscow to See Modern U.S. Art,\\\"<em> New York...\", \n   \"page_number\": \"P. 60\",\n   \"url\": null\n  }]\n\"creators\": [\n      {\n     \"description\": \"Jacob Lawrence (American, 1917-2000)\",\n     \"extent\": null,\n     \"qualifier\": null,\n     \"role\": \"artist\",\n     \"birth_year\": \"1917\",\n     \"death_year\": \"2000\"\n     }\n  ]\n } \n```", "```py\n    import pandas as pd\n    import json\n    import pprint\n    import requests\n    import msgpack \n    ```", "```py\n    response = requests.get(\"https://openaccess-api.clevelandart.org/api/artworks/?african_american_artists\")\n    camcollections = json.loads(response.text)\n    len(camcollections['data']) \n    ```", "```py\n    778 \n    ```", "```py\n    pprint.pprint(camcollections['data'][0]) \n    ```", "```py\n    {'accession_number': '2007.158',\n     'catalogue_raisonne': None,\n     'citations': [\n       {'citation': 'Annual Exhibition: Sculpture...',\n        'page_number': 'Unpaginated, [8],[12]',\n        'url': None},\n      {'citation': '\"Moscow to See Modern U.S....',\n        'page_number': 'P. 60',\n        'url': None}]\n     'collection': 'American - Painting',\n     'creation_date': '1958',\n     'creators': [\n      {'biography': 'Jacob Lawrence (born 1917)...',\n       'birth_year': '1917',\n       'description': 'Jacob Lawrence (American...)',\n       'role': 'artist'}],\n     'type': 'Painting'} \n    ```", "```py\nwith open(\"data/camcollections.json\",\"w\") as f:\n...   json.dump(camcollections, f)\n...\nwith open(\"data/camcollections.json\",\"r\") as f:\n...   camcollections = json.load(f)\n...\npprint.pprint(camcollections['data'][0]['creators']) \n```", "```py\n[{'biography': 'Jacob Lawrence (born 1917) has been a prominent artist since...'\n  'birth_year': '1917',\n  'description': 'Jacob Lawrence (American, 1917-2000)',\n  'role': 'artist'}] \n```", "```py\n    with open(\"data/camcollections.msgpack\", \"wb\") as outfile:\n    ...     packed = msgpack.packb(camcollections)\n    ...     outfile.write(packed)\n    ... \n    ```", "```py\n    1586507 \n    ```", "```py\n    with open(\"data/camcollections.msgpack\", \"rb\") as data_file:\n    ...     msgbytes = data_file.read()\n    ...\n    camcollections = msgpack.unpackb(msgbytes)\n    pprint.pprint(camcollections['data'][0]['creators']) \n    ```", "```py\n    [{'biography': 'Jacob Lawrence (born 1917) has been a prominent...',\n      'birth_year': '1917',\n      'death_year': '2000',\n      'description': 'Jacob Lawrence (American, 1917-2000)',\n      'role': 'artist'}] \n    ```", "```py\n    import pandas as pd\n    from deltalake.writer import write_deltalake\n    from deltalake import DeltaTable\n    import os\n    os.makedirs(\"data/temps_lake\", exist_ok=True) \n    ```", "```py\n    landtemps = pd.read_csv('data/landtempssample.csv',\n        names=['stationid','year','month','avgtemp','latitude',\n          'longitude','elevation','station','countryid','country'],\n        skiprows=1,\n    parse_dates=[['month','year']])\n    landtemps.shape \n    ```", "```py\n    (100000, 9) \n    ```", "```py\n    write_deltalake(\"data/temps_lake\", landtemps) \n    ```", "```py\n    tempsdelta = DeltaTable(\"data/temps_lake\", version=0)\n    type(tempsdelta) \n    ```", "```py\n    deltalake.table.DeltaTable \n    ```", "```py\n    tempsdfv1 = tempsdelta.to_pandas()\n    tempsdfv1.shape \n    ```", "```py\n    (100000, 9) \n    ```", "```py\n    write_deltalake(\"data/temps_lake\", landtemps.head(1000), mode=\"overwrite\") \n    ```", "```py\n    tempsdfv2 = DeltaTable(\"data/temps_lake\", version=1).to_pandas()\n    tempsdfv2.shape \n    ```", "```py\n    (1000, 9) \n    ```", "```py\n    write_deltalake(\"data/temps_lake\", landtemps.head(1000), mode=\"append\")\n    tempsdfv3 = DeltaTable(\"data/temps_lake\", version=2).to_pandas()\n    tempsdfv3.shape \n    ```", "```py\n    (2000, 9) \n    ```", "```py\n    DeltaTable(\"data/temps_lake\", version=0).to_pandas().shape \n    ```", "```py\n    (100000, 9) \n    ```"]