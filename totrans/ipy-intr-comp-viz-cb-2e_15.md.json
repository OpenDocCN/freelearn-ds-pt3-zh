["```py\n    In [1]: from sympy import *\n            init_printing()\n    ```", "```py\n    In [2]: var('x y')\n    Out[2]: (x, y)\n    ```", "```py\n    In [3]: x, y = symbols('x y')\n    ```", "```py\n    In [4]: expr1 = (x + 1)**2\n            expr2 = x**2 + 2*x + 1\n    ```", "```py\n    In [5]: expr1 == expr2\n    Out[5]: False\n    ```", "```py\n    In [6]: simplify(expr1-expr2)\n    Out[6]: 0\n    ```", "```py\n    In [9]: expr1.subs(x, S(1)/2)\n    Out[9]: 9/4\n    ```", "```py\n    In [10]: _.evalf()\n    Out[10]: 2.25000000000000\n    ```", "```py\n    In [11]: f = lambdify(x, expr1)\n    In [12]: import numpy as np\n             f(np.linspace(-2., 2., 5))\n    Out[12]: array([ 1.,  0.,  1.,  4.,  9.])\n    ```", "```py\n    In [2]: var('x y z a')\n    Out[2]: (x, y, z, a)\n    ```", "```py\n    In [3]: solve(x**2 - a, x)\n    Out[3]: [-sqrt(a), sqrt(a)]\n    ```", "```py\n    In [4]: x = Symbol('x')\n            solve_univariate_inequality(x**2 > 4, x)\n    Out[4]: Or(x < -2, x > 2)\n    ```", "```py\n    In [5]: solve([x + 2*y + 1, x - 3*y - 2], x, y)\n    Out[5]: {x: 1/5, y: -3/5}\n    ```", "```py\n    In [6]: solve([x**2 + y**2 - 1, x**2 - y**2 - S(1)/2],\n                  x, y)\n    Out[6]: [(-sqrt(3)/2, -1/2), (-sqrt(3)/2, 1/2),\n             (sqrt(3)/2, -1/2), (sqrt(3)/2, 1/2)]\n    ```", "```py\n    In [7]: solve([x + 2*y + 1, -x - 2*y - 1], x, y)\n    Out[7]: {x: -2*y - 1}\n    ```", "```py\n    In [8]: var('a b c d u v')\n    Out[8]: (a, b, c, d, u, v)\n    ```", "```py\n    In [9]: M = Matrix([[a, b, u], [c, d, v]]); M\n    Out[9]: Matrix([[a, b, u],\n                    [c, d, v]])\n    In [10]: solve_linear_system(M, x, y)\n    Out[10]: {x: (-b*v + d*u)/(a*d - b*c),\n              y: ( a*v - c*u)/(a*d - b*c)}\n    ```", "```py\n    In [11]: det(M[:2,:2])\n    Out[11]: a*d - b*c\n    ```", "```py\n    In [1]: var('x z')\n    Out[1]: (x, z) \n    In [2]: f = 1/(1+x**2)\n    ```", "```py\n    In [3]: f.subs(x, 1)\n    Out[3]: 1/2\n    ```", "```py\n    In [4]: diff(f, x)\n    Out[4]: -2*x/(x**2 + 1)**2\n    ```", "```py\n    In [5]: limit(f, x, oo)\n    Out[5]: 0\n    ```", "```py\n    In [6]: series(f, x0=0, n=9)\n    Out[6]: 1 - x**2 + x**4 - x**6 + x**8 + O(x**9)\n    ```", "```py\n    In [7]: integrate(f, (x, -oo, oo))\n    Out[7]: pi\n    ```", "```py\n    In [8]: integrate(f, x)\n    Out[8]: atan(x)\n    ```", "```py\n    In [9]: fourier_transform(f, x, z)\n    Out[9]: pi*exp(-2*pi*z)\n    ```", "```py\n    In [1]: from sympy import *\n            from sympy.stats import *\n            init_printing()\n    ```", "```py\n    In [2]: X, Y = Die('X', 6), Die('Y', 6)\n    ```", "```py\n    In [3]: P(Eq(X, 3))\n    Out[3]: 1/6\n    In [4]: P(X>3)\n    Out[4]: 1/2\n    ```", "```py\n    In [5]: P(X>Y)\n    Out[5]: 5/12\n    ```", "```py\n    In [6]: P(X+Y>6, X<5)\n    Out[6]: 5/12\n    ```", "```py\n    In [7]: Z = Normal('Z', 0, 1)  # Gaussian variable\n    In [8]: P(Z>pi)\n    Out[8]: -erf(sqrt(2)*pi/2)/2 + 1/2\n    ```", "```py\n    In [9]: E(Z**2), variance(Z**2)\n    Out[9]: (1, 2)\n    ```", "```py\n    In [10]: f = density(Z)\n    In [11]: var('x')\n             f(x)\n    Out[11]: sqrt(2)*exp(-x**2/2)/(2*sqrt(pi))\n    ```", "```py\n    In [12]: %matplotlib inline\n             plot(f(x), (x, -6, 6))\n    ```", "```py\n    In [1]: from sympy import *\n            init_printing() \n    In [2]: import sympy.ntheory as nt\n    ```", "```py\n    In [3]: nt.isprime(2011)\n    Out[3]: True\n    ```", "```py\n    In [4]: nt.nextprime(2011)\n    Out[4]: 2017\n    ```", "```py\n    In [5]: nt.prime(1000)\n    Out[5]: 7919\n    ```", "```py\n    In [6]: nt.primepi(2011)\n    Out[6]: 305\n    ```", "```py\n    In [7]: import numpy as np\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n            x = np.arange(2, 10000)\n            plt.plot(x, map(nt.primepi, x), '-k', \n                     label='$\\pi(x)$')\n            plt.plot(x, x / np.log(x), '--k', \n                     label='$x/\\log(x)$')\n            plt.legend(loc=2)\n    ```", "```py\n    In [8]: nt.factorint(1998)\n    Out[8]: {2: 1, 3: 3, 37: 1}\n    In [9]: 2 * 3**3 * 37\n    Out[9]: 1998\n    ```", "```py\n    In [10]: from sympy.ntheory.modular import solve_congruence\n    In [11]: solve_congruence((1, 3), (2, 4), (3, 5))\n    Out[11]: (58, 60)\n    ```", "```py\n    In [1]: from sympy import *\n            init_printing()\n    ```", "```py\n    In [2]: var('x y z')\n    ```", "```py\n    In [3]: P = x & (y | ~z); P\n    Out[3]: And(Or(Not(z), y), x) \n    ```", "```py\n    In [4]: P.subs({x: True, y: False, z: True})\n    Out[4]: False\n    ```", "```py\n    In [6]: minterms = [[1,0,1], [1,0,0], [0,0,0]]\n            dontcare = [[1,1,1], [1,1,0]]\n    ```", "```py\n    In [7]: Q = SOPform(['x', 'y', 'z'], minterms, dontcare); Q\n    Out[7]: Or(And(Not(y), Not(z)), x)\n    ```", "```py\n    In [8]: Q.subs({x: True, y: False, z: False}), \n            Q.subs({x: False, y: True, z: True})\n    Out[8]: (True, False)\n    ```", "```py\n    In [1]: from sympy import *\n            init_printing() \n    In [2]: var('x y')\n            var('a b c d', positive=True)\n    Out[2]: (a, b, c, d)\n    ```", "```py\n    In [3]: f = x * (a - b*y)\n            g = -y * (c - d*x)\n    ```", "```py\n    In [4]: solve([f, g], (x, y))\n    Out[4]: [(0, 0), (c/d, a/b)] \n    In [5]: (x0, y0), (x1, y1) = _\n    ```", "```py\n    In [6]: M = Matrix((f, g)); M\n    Out[6]: Matrix([[ x*(a - b*y)],\n                    [-y*(c - d*x)]])\n    ```", "```py\n    In [7]: J = M.jacobian((x, y)); J\n    Out[7]: Matrix([\n            [a - b*y,     -b*x],\n            [    d*y, -c + d*x]])\n    ```", "```py\n    In [8]: M0 = J.subs(x, x0).subs(y, y0); M0\n    Out[8]: Matrix([a,  0],\n                   [0, -c]]) \n    In [9]: M0.eigenvals()\n    Out[9]: {a: 1, -c: 1}\n    ```", "```py\n    In [10]: M1 = J.subs(x, x1).subs(y, y1); M1\n    Out[10]: Matrix([[    0, -b*c/d],\n                     [a*d/b,      0]])\n    In [11]: M1.eigenvals()\n    Out[11]: {-I*sqrt(a)*sqrt(c): 1, I*sqrt(a)*sqrt(c): 1}\n    ```", "```py\n    sage: 3*4\n    12\n    ```", "```py\n    sage: 2^3\n    8\n    ```", "```py\n    sage: f=1-sin(x)^2\n    ```", "```py\n    sage: f.simplify_trig()\n    cos(x)^2\n    ```", "```py\n    sage: f(x=pi)\n    1\n    ```", "```py\n    sage: f.diff(x)\n    -2*cos(x)*sin(x)\n    sage: f.integrate(x)\n    1/2*x + 1/4*sin(2*x)\n    ```", "```py\n    sage: find_root(f-x, 0, 2)\n    0.6417143708729723\n    ```", "```py\n    sage: f.plot((x, -2*pi, 2*pi))\n    ```"]