["```py\nipython profile create\n\n```", "```py\nipython --profile=name\n\n```", "```py\n# Enable GUI event loop integration ('qt', 'wx', 'gtk', 'glut',\n# 'pyglet','osx').\nc.InteractiveShellApp.gui = 'qt'\n\n# Pre-load matplotlib and numpy for interactive use, selecting a\n# particular matplotlib backend and loop integration.\nc.InteractiveShellApp.pylab = 'qt'\n\n# If true, an 'import *' is done from numpy and pylab, when using # pylab\nc.InteractiveShellApp.pylab_import_all = True\n```", "```py\nc.TerminalIPythonApp.extensions = [\n    'line_profiler',\n    'memory_profiler'\n]\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef myfun():\n    dx = np.random.randn(1000, 10000)\n    x = np.sum(dx, axis=0)\n    plt.hist(x, bins=np.linspace(-100, 100, 20))\n```", "```py\nIn [1]: from myscript import myfun\nIn [2]: lprun -f myfun myfun()\n\n```", "```py\nTimer unit: 5.13284e-07 s\n\nFile: myscript.py\nFunction: myfun at line 3\nTotal time: 1.26848 s\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     3                                           def myfun():\n     4         1      1783801 1783801.0     72.2      dx = \nnp.random.randn(1000, 1000)\n     5         1       262352 262352.0     10.6      x = \nnp.cumsum(dx, axis=0)\n     6         1       425142 425142.0     17.2      t = \nnp.arange(1000)\n     7                                               \nnp.histogram2d(t, x)\n```", "```py\nip = get_ipython()\n\n```", "```py\nimport IPython.core.magic as ipym\n\n@ipym.magics_class\nclass CppMagics(ipym.Magics):\n    @ipym.cell_magic\n    def cpp(self, line, cell=None):\n        \"\"\"Compile, execute C++ code, and return the standard output.\"\"\"\n        # Define the source and executable filenames.\n        source_filename = 'temp.cpp'\n        program_filename = 'temp.exe'\n        # Write the code contained in the cell to the C++ file.\n        with open(source_filename, 'w') as f:\n            f.write(cell)\n        # Compile the C++ code into an executable.\n        compile = self.shell.getoutput(\"g++ {0:s} -o {1:s}\".format(\n            source_filename, program_filename))\n        # Execute the executable and return the output.\n        output = self.shell.getoutput(program_filename)\n        return output\n\ndef load_ipython_extension(ipython):\n    ipython.register_magics(CppMagics)\n```", "```py\nIn [1]: class Disc(object):\n def __init__(self, size, color= ared'):\n self.size = size\n self.color = color\n\n def _repr_svg_(self):\n return \"\"\"<svg  version=\"1.1\">\n <circle cx=\"{0:d}\" cy=\"{0:d}\" r=\"{0:d}\" fill=\"{1:s}\" />\n </svg>\"\"\".format(self.size, self.color)\n\n```"]