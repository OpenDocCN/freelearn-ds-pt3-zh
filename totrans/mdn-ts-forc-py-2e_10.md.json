["```py\ntrain_features, train_target, train_original_target = feat_config.get_X_y(\n    sample_train_df, categorical=False, exogenous=False\n) \n```", "```py\nmodel_config = ModelConfig(\n    model=LinearRegression(),\n    name=\"Linear Regression\",\n    normalize=True,\n    fill_missing=True,\n) \n```", "```py\ndef evaluate_model(\n    model_config,\n    feature_config,\n    missing_config,\n    train_features,\n    train_target,\n    test_features,\n    test_target,\n):\n    ml_model = MLForecast(\n        model_config=model_config,\n        feature_config=feat_config,\n        missing_config=missing_value_config,\n    )\n    ml_model.fit(train_features, train_target)\n    y_pred = ml_model.predict(test_features)\n    feat_df = ml_model.feature_importance()\n    metrics = calculate_metrics(test_target, y_pred, model_config.name, train_target)\n    return y_pred, metrics, feat_df \n```", "```py\nfrom sklearn.linear_model import LinearRegression\nmodel_config = ModelConfig(\n    model=LinearRegression(),\n    name=\"Linear Regression\",\n    # LinearRegression is sensitive to normalized data\n    normalize=True,\n    # LinearRegression cannot handle missing values\n    fill_missing=True,\n)\ny_pred, metrics, feat_df = evaluate_model(\n    model_config,\n    feat_config,\n    missing_value_config,\n    train_features,\n    train_target,\n    test_features,\n    test_target,\n) \n```", "```py\nfrom sklearn.linear_model import RidgeCV\nmodel_config = ModelConfig(\n    model=RidgeCV(),\n    name=\"Ridge Regression\",\n    # RidgeCV is sensitive to normalized data\n    normalize=True,\n    # RidgeCV does not handle missing values\n    fill_missing=True\n)\ny_pred, metrics, feat_df = evaluate_model(\n    model_config,\n    feat_config,\n    missing_value_config,\n    train_features,\n    train_target,\n    test_features,\n    test_target,\n) \n```", "```py\nfrom sklearn.linear_model import LassoCV\nmodel_config = ModelConfig(\n    model=LassoCV(),\n    name=\"Lasso Regression\",\n    # LassoCV is sensitive to normalized data\n    normalize=True,\n    # LassoCV does not handle missing values\n    fill_missing=True\n)\ny_pred, metrics, feat_df = evaluate_model(\n    model_config,\n    feat_config,\n    missing_value_config,\n    train_features,\n    train_target,\n    test_features,\n    test_target,\n) \n```", "```py\nfrom sklearn.tree import DecisionTreeRegressor\nmodel_config = ModelConfig(\n    model=DecisionTreeRegressor(max_depth=4, random_state=42),\n    name=\"Decision Tree\",\n    # Decision Tree is not affected by normalization\n    normalize=False,\n    # Decision Tree in scikit-learn does not handle missing values\n    fill_missing=True,\n)\ny_pred, metrics, feat_df = evaluate_model(\n    model_config,\n    feat_config,\n    missing_value_config,\n    train_features,\n    train_target,\n    test_features,\n    test_target,\n) \n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor\nmodel_config = ModelConfig(\n    model=RandomForestRegressor(random_state=42, max_depth=4),\n    name=\"Random Forest\",\n    # RandomForest is not affected by normalization\n    normalize=False,\n    # RandomForest in scikit-learn does not handle missing values\n    fill_missing=True,\n)\ny_pred, metrics, feat_df = evaluate_model(\n    model_config,\n    feat_config,\n    missing_value_config,\n    train_features,\n    train_target,\n    test_features,\n    test_target,\n) \n```", "```py\nfrom lightgbm import LGBMRegressor\nmodel_config = ModelConfig(\n    model=LGBMRegressor(random_state=42),\n    name=\"LightGBM\",\n    # LightGBM is not affected by normalization\n    normalize=False,\n    # LightGBM handles missing values\n    fill_missing=False,\n)\ny_pred, metrics, feat_df = evaluate_model(\n    model_config,\n    feat_config,\n    missing_value_config,\n    train_features,\n    train_target,\n    test_features,\n    test_target,\n) \n```", "```py\n#Reading the missing value imputed and train test split data\ntrain_df = pd.read_parquet(preprocessed/\"block_0-7_train_missing_imputed_feature_engg.parquet\")\nauto_stat_target = pd.read_parquet(preprocessed/\"block_0-7_train_auto_stat_target.parquet\")\ntransformer_pipelines = joblib.load(preprocessed/\"auto_transformer_pipelines_train.pkl\")\n#Reading in validation as test\ntest_df = pd.read_parquet(preprocessed/\"block_0-7_val_missing_imputed_feature_engg.parquet\")\n# Joining the transformed target\ntrain_df = train_df.set_index(['LCLid','timestamp']).join(auto_stat_target).reset_index() \n```"]