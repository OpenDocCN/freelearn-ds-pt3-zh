["```py\n    import pandas as pd\n    poverty = pd.read_csv('data/poverty.csv')\n    year = 2016\n    indicator = 'GINI index (World Bank estimate)'\n    ```", "```py\n    df = poverty[poverty['is_country'] & poverty['year'].eq(year)]\n    ```", "```py\n    import plotly.express as px\n    px.choropleth(df, locations=\"Country Code\", color=indicator)\n    ```", "```py\npx.choropleth(df, \n              locations=['Australia', 'Egypt', 'Chile'], \n              color=[10, 20, 30], \n              locationmode='country names')\n```", "```py\nfig = px.choropleth(poverty[poverty['is_country']],|\n                    color_continuous_scale='cividis',\n                    locations='Country Code',\n                    color=indicator,\n                    animation_frame='year')\nfig.show()\n```", "```py\n    fig.layout.geo.showframe = False\n    ```", "```py\n    fig.layout.geo.showcountries = True\n    ```", "```py\n    fig.layout.geo.projection.type = 'natural earth'\n    ```", "```py\n    fig.layout.geo.lataxis.range = [-53, 76]\n    ```", "```py\n    fig.layout.geo.lonaxis.range = [-137, 168]\n    ```", "```py\n    fig.layout.geo.landcolor = 'white'\n    ```", "```py\n    fig.layout.geo.bgcolor = '#E5ECF6'\n    fig.layout.paper_bgcolor = '#E5ECF6'\n    ```", "```py\n    fig.layout.geo.countrycolor = 'gray'\n    fig.layout.geo.coastlinecolor = 'gray'\n    ```", "```py\n    fig.layout.coloraxis.colorbar.title =\\\n    indicator.replace(' ', '<br>')\n    ```", "```py\n    dcc.Dropdown(id='indicator_dropdown',\n                 value='GINI index (World Bank estimate)',\n                 options=[{'label': indicator, 'value': indicator}\n                          for indicator in poverty.columns[3:54]])\n    ```", "```py\n    dcc.Graph(id='indicator_map_chart')\n    ```", "```py\n    def multiline_indicator(indicator):\n        final = []\n        split = indicator.split()\n        for i in range(0, len(split), 3):\n            final.append(' '.join(split[i:i+3]))\n        return '<br>'.join(final)\n    ```", "```py\n    @app.callback(Output('indicator_map_chart', 'figure'),\n                  Input('indicator_dropdown', 'value'))\n    ```", "```py\n    def display_generic_map_chart(indicator):\n        df = poverty[poverty['is_country']]\n        fig = px.choropleth(df,\n                            locations='Country Code',\n                            color=indicator,\n                            title=indicator,\n                            hover_name='Country Name',\n                            color_continuous_scale='cividis',\n                            animation_frame='year',\n                            height=650)\n        fig.layout.geo.showframe = False\n        …\n        fig.layout.coloraxis.colorbar.title =\\\n    multiline_indicator(indicator)\n    ```", "```py\n<h1>This is the main text of the page</h1>\n<h3>This is secondary text</h2>\n<ul>\n  <li>first item</li>\n  <li>second item</li>\n  <li>third item</li>\n</ul>\n```", "```py\n# This is the main text of the page\n### This is secondary text\n* first item\n* second item\n* third item\n```", "```py\n    from jupyter_dash import JupyterDash\n    import dash_core_components as dcc\n    app = JupyterDash(__name__)\n    ```", "```py\n    app.layout = html.Div([])\n    ```", "```py\n    dcc.Markdown(\"\"\"\n    # This is the main text of the page\n    ### This is secondary text\n    * first item\n    * second item\n    * third item\n    \"\"\")\n    ```", "```py\n    app.run_server(mode='inline')\n    ```", "```py\n    dcc.Markdown(id='indicator_map_details_md',\n                 style={'backgroundColor': '#E5ECF6'})\n    ```", "```py\n    @app.callback(Output('indicator_map_chart', 'figure'),\n                  Output('indicator_map_details_md', 'children'),\n                  Input('indicator_dropdown', 'value'))\n    ```", "```py\n    series_df =\\\n    series[series['Indicator Name'].eq(indicator)]\n    ```", "```py\n    limitations =series_df['Limitations and\\\n    exceptions'].fillna('N/A').str.replace('\\n\\n',\\\n    ' ').values[0]\n    ```", "```py\n    ## {series_df['Indicator Name'].values[0]}  \n    ```", "```py\n    {series_df['Long definition'].values[0]}\n    ```", "```py\n    * **Unit of measure** {series_df['\\\n    Unit of measure'].fillna('count').values[0]}\n    * **Periodicity**\\\n    {series_df['Periodicity'].fillna('N/A').values[0]}\n    * **Source** {series_df['Source'].values[0]}\n    ```", "```py\n    ### Limitations and exceptions:  \n    ```", "```py\n    {limitations}  \n    ```", "```py\n…\nfig.layout.coloraxis.colorbar.title =\\\nmultiline_indicator(indicator)\nseries_df = series[series['Indicator Name'].eq(indicator)]\nif series_df.empty:\n    markdown = \"No details available on this indicator\"\nelse:\n    limitations = series_df['Limitations and exceptions'].fillna('N/A').str.replace('\\n\\n', ' ').values[0]\n    markdown = f\"\"\"\n    ## {series_df['Indicator Name'].values[0]}  \n    {series_df['Long definition'].values[0]}  \n    * **Unit of measure** {series_df['Unit of measure'].fillna('count').values[0]}\n    * **Periodicity**\n{series_df['Periodicity'].fillna('N/A').values[0]}\n    * **Source** {series_df['Source'].values[0]}\n    ### Limitations and exceptions:  \n    {limitations}\n\"\"\"\nreturn fig, markdown\n```", "```py\ndf =\\\npoverty[poverty['year'].eq(2010) & poverty['is_country']]\npx.scatter_geo(df, locations='Country Code')\n```", "```py\npx.scatter_geo(lon=[10, 12, 15, 18], lat=[23, 28, 31, 40])\n```", "```py\npx.scatter_mapbox(lon=[5, 10, 15, 20],\n                  lat=[10, 7, 18, 5],\n                  zoom=2,\n                  center={'lon': 5, 'lat': 10},\n                  size=[5]*4,\n                  color_discrete_sequence=['darkred'],\n                  mapbox_style='stamen-watercolor')\n```", "```py\nlat_long =\\\npd.read_html('https://developers.google.com/public-data/docs/canonical/countries_csv')[0]\n```", "```py\npoverty = pd.merge(left=poverty, right=lat_long, how='left',\n                   left_on='2-alpha code', right_on='country')\n```", "```py\ndf =\\\npoverty[poverty['is_country']].dropna(subset=['Population, total'])\n```", "```py\n    px.scatter_mapbox(df, …)\n    ```", "```py\n    lon='longitude', lat='latitude'\n    ```", "```py\n    zoom=1\n    ```", "```py\n    size='Population, total', size_max=80\n    ```", "```py\n    color='Income Group'\n    ```", "```py\n    animation_frame='year'\n    ```", "```py\n    opacity=0.7\n    ```", "```py\n    height=650\n    ```", "```py\n    hover_data=['Income Group', 'Region']\n    ```", "```py\n    color_discrete_sequence=px.colors.qualitative.G10\n    ```", "```py\n    mapbox_style='stamen-toner'\n    ```", "```py\n    hover_name=df['Country Name']\n    ```", "```py\n    title=\"Population by Country\"\n    ```", "```py\npx.scatter_mapbox(df,\n                  lon='longitude',\n                  lat='latitude',\n                  zoom=1,\n                  size='Population, total',\n                  size_max=80,\n                  color='Income Group',\n                  animation_frame='year',\n                  opacity=0.7,\n                  height=650,\n                  hover_data=['Income Group', 'Region'],\n                  color_discrete_sequence=px.colors.qualitative.G10,\n                  mapbox_style='stamen-toner',\n                  hover_name=df['Country Name'],\n                  title='Population by Country')\n```", "```py\n    series = pd.read_csv('data/PovStatsSeries.csv')\n    ```", "```py\n    def multiline_indicator(indicator):\n        final = []\n        split = indicator.split()\n        for i in range(0, len(split), 3):\n            final.append(' '.join(split[i:i+3]))\n        return '<br>'.join(final)\n    ```", "```py\n    app.layout = html.Div([\n        dbc.Col([\n            html.Br(),\n            html.H1('Poverty And Equity Database'),\n            html.H2('The World Bank'),\n        ], style={'textAlign': 'center'}),\n        html.Br(),\n        dbc.Row([\n            dbc.Col(lg=2),\n            dbc.Col([\n                dcc.Dropdown(id='indicator_dropdown', ...),\n                dcc.Graph(id='indicator_map_chart', ...),\n                dcc.Markdown(id='indicator_map_details_md', ...)\n        ], lg=8)\n        ]),\n        html.Br()\n    ```"]