["```py\nCountry,Time,Sex,Age,Value\nUnited Kingdom,1950,Male,0-4,2238.735\nUnited States of America,1950,Male,0-4,8812.309\n```", "```py\n{\n \"population\": [\n {\n \"Country\": \"United Kingdom\",\n \"Time\": 1950,\n \"Sex\", \"Male\",\n \"Age\", \"0-4\",\n \"Value\",2238.735\n },{\n \"Country\": \"United States of America\",\n \"Time\": 1950,\n \"Sex\", \"Male\",\n \"Age\", \"0-4\",\n \"Value\",8812.309\n },\n ]\n}\n```", "```py\n<?xml version='1.0' encoding='utf-8'?>\n<populations>\n <population>\n <Country>United Kingdom</Country> \n <Time>1950</Time>\n <Sex>Male</Sex>\n <Age>0-4</Age>\n <Value>2238.735</Value>\n </population>\n <population>\n <Country>United States of America</Country>\n <Time>1950</Time>\n <Sex>Male</Sex>\n <Age>0-4</Age>\n <Value>8812.309</Value>\n </population>\n</populations>\n```", "```py\npip install pandas\n```", "```py\nimport numpy as np # Python scientific computing package\nimport pandas as pd # Python data analysis package\n\n# URL for Annual Population by Age and Sex - Department of Economic\n# and Social Affairs, United Nations\nsource = \"https://github.com/PacktPublishing/Matplotlib-2.x-By-Example/blob/master/WPP2015_DB04_Population_Annual.zip\"\n\n# Pandas support both local or online files \ndata = pd.read_csv(source, header=0, compression='zip', encoding='latin_1') \n\n# Show the first five rows of the DataFrame\ndata.head() \n```", "```py\npip install pycountry \n```", "```py\nfrom pycountry import countries\n\ndef get_alpha_3(location):\n    \"\"\"Convert full country name to three letter code (ISO 3166 alpha-3)\n\n    Args:\n        location: Full location name\n    Returns:\n        three letter code or None if not found\"\"\"\n\n    try:\n        return countries.get(name=location).alpha_3\n    except:\n        return None\n\n# Add a new country column to the dataframe\npopulation_df['country'] = population_df['Location'].apply(lambda x: get_alpha_3(x))\npopulation_df.head()\n```", "```py\nfrom urllib.request import urlopen\nimport json\nimport time\nimport pandas as pd\n\ndef get_bigmac_codes():\n    \"\"\"Get a Pandas DataFrame of all codes in the Big Mac index dataset\n\n    The first column contains the code, while the second header\n    contains the description of the code.\n\n    for example, \n    ECONOMIST/BIGMAC_ARG,Big Mac Index - Argentina\n    ECONOMIST/BIGMAC_AUS,Big Mac Index - Australia\n    ECONOMIST/BIGMAC_BRA,Big Mac Index - Brazil\n\n    Returns:\n        codes: Pandas DataFrame of Quandl dataset codes\"\"\"\n\n    codes_url = \"https://www.quandl.com/api/v3/databases/ECONOMIST/codes\"\n    codes = pd.read_csv(codes_url, header=None, names=['Code', 'Description'], \n                        compression='zip', encoding='latin_1')\n\n    return codes\n\ndef get_quandl_dataset(api_key, code):\n    \"\"\"Obtain and parse a quandl dataset in Pandas DataFrame format\n\n    Quandl returns dataset in JSON format, where data is stored as a \n    list of lists in response['dataset']['data'], and column headers\n    stored in response['dataset']['column_names'].\n\n    for example, {'dataset': {...,\n             'column_names': ['Date',\n                              'local_price',\n                              'dollar_ex',\n                              'dollar_price',\n                              'dollar_ppp',\n                              'dollar_valuation',\n                              'dollar_adj_valuation',\n                              'euro_adj_valuation',\n                              'sterling_adj_valuation',\n                              'yen_adj_valuation',\n                              'yuan_adj_valuation'],\n             'data': [['2017-01-31',\n                       55.0,\n                       15.8575,\n                       3.4683903515687,\n                       10.869565217391,\n                       -31.454736135007,\n                       6.2671477203176,\n                       8.2697553162259,\n                       29.626894343348,\n                       32.714616745128,\n                       13.625825886047],\n                      ['2016-07-31',\n                       50.0,\n                       14.935,\n                       3.3478406427854,\n                       9.9206349206349,\n                       -33.574590420925,\n                       2.0726096168216,\n                       0.40224795003514,\n                       17.56448458418,\n                       19.76377270142,\n                       11.643103380531]\n                      ],\n             'database_code': 'ECONOMIST',\n             'dataset_code': 'BIGMAC_ARG',\n             ... }}\n\n    A custom column--country is added to denote the 3-letter country code.\n\n    Args:\n        api_key: Quandl API key\n        code: Quandl dataset code\n\n    Returns:\n        df: Pandas DataFrame of a Quandl dataset\n\n    \"\"\"\n    base_url = \"https://www.quandl.com/api/v3/datasets/\"\n    url_suffix = \".json?api_key=\"\n\n    # Fetch the JSON response \n    u = urlopen(base_url + code + url_suffix + api_key)\n    response = json.loads(u.read().decode('utf-8'))\n\n    # Format the response as Pandas Dataframe\n    df = pd.DataFrame(response['dataset']['data'], columns=response['dataset']['column_names'])\n\n    # Label the country code\n    df['country'] = code[-3:]\n\n    return df\n\nquandl_dfs = []\ncodes = get_bigmac_codes()\n\n# Replace this with your own API key\napi_key = \"INSERT YOUR KEY HERE\" \n\nfor code in codes.Code:\n    # Get the DataFrame of a Quandl dataset\n    df = get_quandl_dataset(api_key, code)\n\n    # Store in a list\n    quandl_dfs.append(df)\n\n    # Prevents exceeding the API speed limit\n    time.sleep(2)\n\n# Concatenate the list of dataframes into a single one    \nbigmac_df = pd.concat(quandl_dfs)\nbigmac_df.head()\n```", "```py\nimport matplotlib.pyplot as plt\n\n# Select the aggregated population data from the world for both genders,\n# during 1950 to 2017.\nselected_data = data[(data.Location == 'WORLD') & (data.Sex == 'Both') & (data.Time <= 2017) ]\n\n# Calculate aggregated population data across all age groups for each year \n# Set as_index=False to avoid the Time variable to be used as index\ngrouped_data = selected_data.groupby('Time', as_index=False).sum()\n\n# Generate a simple line plot of population vs time\nfig = plt.figure()\nplt.plot(grouped_data.Time, grouped_data.Value)\n\n# Label the axis\nplt.xlabel('Year')\nplt.ylabel('Population (thousands)')\n\nplt.show()\n```", "```py\nfill_between(x, y1, y2=0, where=None, interpolate=False, step=None)\n```", "```py\n# Select the aggregated population data from the world for each gender,\n# during 1950 to 2017.\nmale_data = data[(data.Location == 'WORLD') & (data.Sex == 'Male') & (data.Time <= 2017) ]\nfemale_data = data[(data.Location == 'WORLD') & (data.Sex == 'Female') & (data.Time <= 2017) ]\n\n# Calculate aggregated population data across all age groups for each year \n# Set as_index=False to avoid the Time variable to be used as index\ngrouped_male_data = male_data.groupby('Time', as_index=False).sum()\ngrouped_female_data = female_data.groupby('Time', as_index=False).sum()\n\n# Create two subplots with shared y-axis (sharey=True)\nfig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12,4), sharey=True)\n\n# Generate a simple line plot of population vs time,\n# then shade the area under the line in sky blue.\nax1.plot(grouped_data.Time, grouped_data.Value)\nax1.fill_between(grouped_data.Time, grouped_data.Value, color='skyblue')\n\n# Use set_xlabel() or set_ylabel() instead to set the axis label of an\n# axes object\nax1.set_xlabel('Year')\nax1.set_ylabel('Population (thousands)')\n\n# Generate a stacked area plot of population vs time\nax2.stackplot(grouped_male_data.Time, grouped_male_data.Value, grouped_female_data.Value)\n\n# Add a figure legend\nax2.legend(['Male', 'Female'], loc='upper left')\n\n# Set the x-axis label only this time\nax2.set_xlabel('Year')\nplt.show()\n```", "```py\npip install pandas\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Extract USA population data in 2017\ncurrent_population = population_df[(population_df.Location \n                                    == 'United States of America') & \n                                   (population_df.Time == 2017) &\n                                   (population_df.Sex != 'Both')]\n\n# Population Bar chart \nsns.barplot(x=\"AgeGrp\",y=\"Value\", hue=\"Sex\", data = current_population)\n\n# Use Matplotlib functions to label axes rotate tick labels\nax = plt.gca()\nax.set(xlabel=\"Age Group\", ylabel=\"Population (thousands)\")\nax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)\nplt.title(\"Population Barchart (USA)\")\n\n# Show the figure\nplt.show()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Extract USA population data in 2017\ncurrent_population = population_df[(population_df.Location \n                                    == 'United States of America') & \n                                   (population_df.Time == 2017) &\n                                   (population_df.Sex != 'Both')]\n\n# Change the age group to descending order\ncurrent_population = current_population.iloc[::-1]\n\n# Create two subplots with shared y-axis\nfig, axes = plt.subplots(ncols=2, sharey=True)\n\n# Bar chart for male\nsns.barplot(x=\"Value\",y=\"AgeGrp\", color=\"darkblue\", ax=axes[0],\n            data = current_population[(current_population.Sex == 'Male')])\n# Bar chart for female\nsns.barplot(x=\"Value\",y=\"AgeGrp\", color=\"darkred\", ax=axes[1],\n            data = current_population[(current_population.Sex == 'Female')])\n\n# Use Matplotlib function to invert the first chart\naxes[0].invert_xaxis()\n\n# Use Matplotlib function to show tick labels in the middle\naxes[0].yaxis.tick_right()\n\n# Use Matplotlib functions to label the axes and titles\naxes[0].set_title(\"Male\")\naxes[1].set_title(\"Female\")\naxes[0].set(xlabel=\"Population (thousands)\", ylabel=\"Age Group\")\naxes[1].set(xlabel=\"Population (thousands)\", ylabel=\"\")\nfig.suptitle(\"Population Pyramid (USA)\")\n\n# Show the figure\nplt.show()\n```", "```py\nfig, axes = plt.subplots(ncols=2, sharey=True)\n```", "```py\n# Get a list of tick positions according to the data bins\ny_pos = range(len(current_population.AgeGrp.unique()))\n\n# Horizontal barchart for male\naxes[0].barh(y_pos, current_population[(current_population.Sex ==\n             'Male')].Value, color=\"darkblue\")\n\n# Horizontal barchart for female\naxes[1].barh(y_pos, current_population[(current_population.Sex == \n             'Female')].Value, color=\"darkred\")\n\n# Show tick for each data point, and label with the age group\naxes[0].set_yticks(y_pos)\naxes[0].set_yticklabels(current_population.AgeGrp.unique())\n\n# Increase spacing between subplots to avoid clipping of ytick labels\nplt.subplots_adjust(wspace=0.3)\n```", "```py\n# Invert the first chart\naxes[0].invert_xaxis()\n\n# Show tick labels in the middle\naxes[0].yaxis.tick_right()\n\n# Label the axes and titles\naxes[0].set_title(\"Male\")\naxes[1].set_title(\"Female\")\naxes[0].set(xlabel=\"Population (thousands)\", ylabel=\"Age Group\")\naxes[1].set(xlabel=\"Population (thousands)\", ylabel=\"\")\nfig.suptitle(\"Population Pyramid (USA)\")\n\n# Show the figure\nplt.show()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Get the BigMac index in 2017\ncurrent_bigmac = bigmac_df[(bigmac_df.Date == \"2017-01-31\")]\n\n# Plot the histogram\nax = sns.distplot(current_bigmac.dollar_price)\nplt.show()\n```", "```py\nfrom scipy import stats\n\nax = sns.distplot(current_bigmac.dollar_price, kde=False, fit=stats.norm)\nplt.show()\n```", "```py\nimport urllib\nimport json\nimport pandas as pd\nimport time\nfrom urllib.request import urlopen\n\ndef get_gdp_dataset(api_key, country_code):\n    \"\"\"Obtain and parse a quandl GDP dataset in Pandas DataFrame format\n    Quandl returns dataset in JSON format, where data is stored as a \n    list of lists in response['dataset']['data'], and column headers\n    stored in response['dataset']['column_names'].\n\n    Args:\n        api_key: Quandl API key\n        country_code: Three letter code to represent country\n\n    Returns:\n        df: Pandas DataFrame of a Quandl dataset\n    \"\"\"\n    base_url = \"https://www.quandl.com/api/v3/datasets/\"\n    url_suffix = \".json?api_key=\"\n\n    # Compose the Quandl API dataset code to get GDP per capita\n    # (constant 2000 US$) dataset\n    gdp_code = \"WWDI/\" + country_code + \"_NY_GDP_PCAP_KD\"\n\n    # Parse the JSON response from Quandl API\n    # Some countries might be missing, so we need error handling code\n    try:\n        u = urlopen(base_url + gdp_code + url_suffix + api_key)\n    except urllib.error.URLError as e:\n        print(gdp_code,e)\n        return None\n\n    response = json.loads(u.read().decode('utf-8'))\n\n    # Format the response as Pandas Dataframe\n    df = pd.DataFrame(response['dataset']['data'], columns=response['dataset']['column_names'])\n\n    # Add a new country code column\n    df['country'] = country_code\n\n    return df\n\napi_key = \"INSERT YOUR KEY HERE\"\nquandl_dfs = []\n\n# Loop through all unique country code values in the BigMac index DataFrame\nfor country_code in bigmac_df.country.unique():\n    # Fetch the GDP dataset for the corresponding country \n    df = get_gdp_dataset(api_key, country_code)\n\n    # Skip if the response is empty\n    if df is None:\n        continue\n\n    # Store in a list DataFrames\n    quandl_dfs.append(df)\n\n    # Prevents exceeding the API speed limit\n    time.sleep(2)\n\n# Concatenate the list of DataFrames into a single one \ngdp_df = pd.concat(quandl_dfs)\ngdp_df.head()\n```", "```py\nWWDI/EUR_NY_GDP_PCAP_KD HTTP Error 404: Not Found\nWWDI/SIN_NY_GDP_PCAP_KD HTTP Error 404: Not Found\nWWDI/ROC_NY_GDP_PCAP_KD HTTP Error 404: Not Found\nWWDI/UAE_NY_GDP_PCAP_KD HTTP Error 404: Not Found\n```", "```py\nmerged_df = pd.merge(bigmac_df[(bigmac_df.Date == \"2015-01-31\")], gdp_df[(gdp_df.Date == \"2015-12-31\")], how='inner', on='country')\nmerged_df.head()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# seaborn.regplot() returns matplotlib.Axes object\nax = sns.regplot(x=\"Value\", y=\"dollar_price\", data=merged_df, fit_reg=False)\nax.set_xlabel(\"GDP per capita (constant 2000 US$)\")\nax.set_ylabel(\"BigMac index (US$)\")\n\nplt.show()\n```", "```py\nax = sns.regplot(x=\"Value\", y=\"dollar_price\", data=merged_df)\nax.set_xlabel(\"GDP per capita (constant 2000 US$)\")\nax.set_ylabel(\"BigMac index (US$)\")\n\n# Label the country code for those who demonstrate extreme BigMac index\nfor row in merged_df.itertuples():\n    if row.dollar_price >= 5 or row.dollar_price <= 2:\n        ax.text(row.Value,row.dollar_price+0.1,row.country)\n\nplt.show()\n```", "```py\nfrom scipy.stats import linregress\n\nax = sns.regplot(x=\"Value\", y=\"dollar_price\", data=merged_df)\nax.set_xlabel(\"GDP per capita (constant 2000 US$)\")\nax.set_ylabel(\"BigMac index (US$)\")\n\n# Calculate linear regression parameters\nslope, intercept, r_value, p_value, std_err = linregress(merged_df.Value, merged_df.dollar_price)\n\ncolors = []\nfor row in merged_df.itertuples():\n    if row.dollar_price > row.Value * slope + intercept:\n        # Color markers as darkred if they are above the regression line\n        color = \"darkred\"\n    else:\n        # Color markers as darkblue if they are below the regression line\n        color = \"darkblue\"\n\n    # Label the country code for those who demonstrate extreme BigMac index\n    if row.dollar_price >= 5 or row.dollar_price <= 2:\n        ax.text(row.Value,row.dollar_price+0.1,row.country)\n\n    # Highlight the marker that corresponds to China\n    if row.country == \"CHN\":\n        t = ax.text(row.Value,row.dollar_price+0.1,row.country)\n        color = \"yellow\"\n\n    colors.append(color)\n\n# Overlay another scatter plot on top with marker-specific color\nax.scatter(merged_df.Value, merged_df.dollar_price, c=colors)\n\n# Label the r squared value and p value of the linear regression model.\n# transform=ax.transAxes indicates that the coordinates are given relative\n# to the axes bounding box, with 0,0 being the lower left of the axes\n# and 1,1 the upper right.\nax.text(0.1, 0.9, \"$r^2={0:.3f}, p={1:.3e}$\".format(r_value ** 2, p_value), transform=ax.transAxes)\n\nplt.show()\n```", "```py\n# seaborn.jointplot() returns a seaborn.JointGrid object\ng = sns.jointplot(x=\"Value\", y=\"dollar_price\", data=merged_df)\n\n# Provide custom axes labels through accessing the underlying axes object\n# We can get matplotlib.axes.Axes of the scatter plot by calling g.ax_joint\ng.ax_joint.set_xlabel(\"GDP per capita (constant 2000 US$)\")\ng.ax_joint.set_ylabel(\"BigMac index (US$)\")\n\n# Set the title and adjust the margin\ng.fig.suptitle(\"Relationship between GDP per capita and BigMac Index\")\ng.fig.subplots_adjust(top=0.9)\n\nplt.show()\n```", "```py\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Select total population for each country in 2015\ncurrent_population = population_df[(population_df.Time == 2015) &\n                                   (population_df.Sex == 'Both')]\n\n# A list for storing the population type for each country\npop_type_list = []\n\n# Look through each country in the BigMac index dataset\nfor country in merged_df.country.unique():\n    # Make sure the country also exist in the GDP per capita dataset\n    if not country in current_population.country.values:\n       continue\n\n    # Calculate the ratio of population between \"0-4\" and \"50-54\"\n    # age groups\n    young = current_population[(current_population.country == country) &\n                               (current_population.AgeGrp == \"0-4\")].Value\n\n    midage = current_population[(current_population.country == country) &\n                                (current_population.AgeGrp == \"50-54\")].Value\n\n    ratio = float(young) / float(midage)\n\n    # Classify the populations based on arbitrary ratio thresholds\n    if ratio < 0.8:\n        pop_type = \"constrictive\"\n    elif ratio < 1.2 and ratio >= 0.8:\n        pop_type = \"stable\"\n    else:\n        pop_type = \"expansive\"\n\n    pop_type_list.append([country, ratio, pop_type])\n\n# Convert the list to Pandas DataFrame\npop_type_df = pd.DataFrame(pop_type_list, columns=['country','ratio','population type'])\n\n# Merge the BigMac index DataFrame with population type DataFrame\nmerged_df2 = pd.merge(merged_df, pop_type_df, how='inner', on='country')\nmerged_df2.head()\n```", "```py\n# Horizontal faceted grids (col=\"population type\")\ng = sns.lmplot(x=\"Value\", y=\"dollar_price\", col=\"population type\", data=merged_df2)\ng.set_xlabels(\"GDP per capita (constant 2000 US$)\")\ng.set_ylabels(\"BigMac index (US$)\")\n\nplt.show()\n```", "```py\n# Strip plot with jitter value\nax = sns.stripplot(x=\"population type\", y=\"dollar_price\", data=merged_df2, jitter=True)\nax.set_xlabel(\"Population type\")\nax.set_ylabel(\"BigMac index (US$)\")\n\nplt.show()\n```", "```py\n# Box plot\nax = sns.boxplot(x=\"population type\", y=\"dollar_price\", data=merged_df2)\nax.set_xlabel(\"Population type\")\nax.set_ylabel(\"BigMac index (US$)\")\n\nplt.show()\n```", "```py\n# Prepare a box plot\nax = sns.boxplot(x=\"population type\", y=\"dollar_price\", data=merged_df2)\n\n# Overlay a swarm plot on top of the same axes\nsns.swarmplot(x=\"population type\", y=\"dollar_price\", data=merged_df2, color=\"w\", ax=ax)\nax.set_xlabel(\"Population type\")\nax.set_ylabel(\"BigMac index (US$)\")\n\nplt.show()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n# Note: Codes related to data preparation are skipped for brevity\n# Reset all previous theme settings to defaults\nsns.set()\n\n# Change the size to 8 inches wide and 4 inches tall\nfig = plt.figure(figsize=(8,4))\n\n# We are going to reuse current_bigmac that was generated earlier\n# Plot the histogram\nax = sns.distplot(current_bigmac.dollar_price)\nplt.show()\n```", "```py\n# Reset all previous theme settings to defaults\nsns.set()\n\n# Set Seaborn context to poster\nsns.set_context(\"poster\")\n\n# We are going to reuse current_bigmac that was generated earlier\n# Plot the histogram\nax = sns.distplot(current_bigmac.dollar_price)\nplt.show()\n```", "```py\n# Get a dictionary of all parameters that can be changed\nsns.axes_style()\n\n\"\"\"\nReturns\n{'axes.axisbelow': True,\n 'axes.edgecolor': '.8',\n 'axes.facecolor': 'white',\n 'axes.grid': True,\n 'axes.labelcolor': '.15',\n 'axes.linewidth': 1.0,\n 'figure.facecolor': 'white',\n 'font.family': [u'sans-serif'],\n 'font.sans-serif': [u'Arial',\n u'DejaVu Sans',\n u'Liberation Sans',\n u'Bitstream Vera Sans',\n u'sans-serif'],\n 'grid.color': '.8',\n 'grid.linestyle': u'-',\n 'image.cmap': u'rocket',\n 'legend.frameon': False,\n 'legend.numpoints': 1,\n 'legend.scatterpoints': 1,\n 'lines.solid_capstyle': u'round',\n 'text.color': '.15',\n 'xtick.color': '.15',\n 'xtick.direction': u'out',\n 'xtick.major.size': 0.0,\n 'xtick.minor.size': 0.0,\n 'ytick.color': '.15',\n 'ytick.direction': u'out',\n 'ytick.major.size': 0.0,\n 'ytick.minor.size': 0.0}\n \"\"\"\n\n# Increase the font scale to 2, change the grid color to light grey, \n# and axes label color to dark blue\nsns.set(context=\"notebook\", \n style=\"darkgrid\",\n font_scale=2, \n rc={'grid.color': '0.6', \n 'axes.labelcolor':'darkblue',\n \"lines.linewidth\": 2.5})\n\n# Plot the histogram\nax = sns.distplot(current_bigmac.dollar_price)\nplt.show()\n```", "```py\n# Note: Codes related to data preparation and imports are skipped for\n# brevity\n# Reset the style\nsns.set(context=\"notebook\", style=\"darkgrid\")\n\n# Plot the histogram with custom style\nax = sns.distplot(current_bigmac.dollar_price,\n                 kde_kws={\"color\": \"g\", \n                          \"linewidth\": 3, \n                          \"label\": \"KDE\"},\n                 hist_kws={\"histtype\": \"step\", \n                           \"alpha\": 1, \n                           \"color\": \"k\",\n                           \"label\": \"histogram\"})\n\nplt.show()\n```", "```py\n# Note: Codes related to data preparation and imports are skipped\n# for brevity\n# Population Bar chart \nsns.barplot(x=\"AgeGrp\",y=\"Value\", hue=\"Sex\",\n            linewidth=2, edgecolor=\"w\",\n            data = current_population)\n\n# Use Matplotlib functions to label axes rotate tick labels\nax = plt.gca()\nax.set(xlabel=\"Age Group\", ylabel=\"Population (thousands)\")\nax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)\nplt.title(\"Population Barchart (USA)\")\n\n# Show the figure\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\ndef palplot(pal, ax):\n    \"\"\"Plot the values in a color palette as a horizontal array.\n    Adapted from seaborn.palplot\n\n    Args:\n        p : seaborn color palette\n        ax : axes to plot the color palette\n    \"\"\"\n    n = len(pal) \n    ax.imshow(np.arange(n).reshape(1, n),\n              cmap=ListedColormap(list(pal)),\n              interpolation=\"nearest\", aspect=\"auto\")\n    ax.set_xticks(np.arange(n) - .5)\n    ax.set_yticks([-.5, .5])\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n\npalettes = {\"qualitative\": [\"deep\", \"pastel\", \"bright\", \"dark\", \n                            \"colorblind\", \"Accent\", \"Paired\", \n                            \"Set1\", \"Set2\", \"Set3\", \"Pastel1\", \n                            \"Pastel2\", \"Dark2\"],\n            \"diverging\": [\"BrBG\", \"PiYG\", \"PRGn\", \"PuOr\", \"RdBu\", \n                          \"RdBu_r\", \"RdGy\", \"RdGy_r\", \"RdYlGn\", \n                          \"coolwarm\"],\n            \"sequential\": [\"husl\", \"Greys\", \"Blues\", \"BuGn_r\", \n                           \"GnBu_d\", \"plasma\", \"viridis\",\"cubehelix\"]}\n\n#Reset to default Seaborn style\nsns.set()\n\n# Create one subplot per palette, the x-axis is shared\nfig, axarr = plt.subplots(13, 3, sharex=True, figsize=(12,11))\n\n# Plot 9 color blocks for each palette\nfor i, palette_type in enumerate(palettes.keys()):\n    for j, palette in enumerate(palettes[palette_type]):\n        pal = sns.color_palette(palettes[palette_type][j], 9)\n        palplot(pal, axarr[j,i])\n        axarr[j,i].set_xlabel(palettes[palette_type][j])\n\n# Plot a few more custom diverging palette\ncustom_diverging_palette = [\n sns.diverging_palette(220, 20, n=9),\n sns.diverging_palette(10, 220, sep=80, n=9),\n sns.diverging_palette(145, 280, s=85, l=25, n=9)\n]\n\nfor i, palette in enumerate(custom_diverging_palette):\n    palplot(palette, axarr[len(palettes[\"diverging\"])+i,1])\n    axarr[len(palettes[\"diverging\"])+i,1].set_xlabel(\"custom diverging \n    {}\".format(i+1))\n\n# Plot a few more custom sequential palette\nother_custom_palette = [\n sns.light_palette(\"green\", 9),\n sns.light_palette(\"green\", 9, reverse=True),\n sns.dark_palette(\"navy\", 9),\n sns.dark_palette(\"navy\", 9, reverse=True),\n sns.color_palette([\"#49a17a\",\"#4aae82\",\"#4eb98a\",\"#55c091\",\"#c99b5f\",\n \"#cbb761\",\"#c5cc62\",\"#accd64\",\"#94ce65\"])\n]\n\nfor i, palette in enumerate(other_custom_palette):\n    palplot(palette, axarr[len(palettes[\"sequential\"])+i,2])\n    axarr[len(palettes[\"sequential\"])+i,2].set_xlabel(\"custom sequential\n    {}\".format(i+1))\n\n# Reduce unnecessary margin space\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```", "```py\n# Note: Codes related to data preparation and imports are skipped\n# for brevity\n# Change the color of histogram and KDE line to darkred\nax = sns.distplot(current_bigmac.dollar_price, color=\"darkred\")\nplt.show()\n```", "```py\ncurrent_population = population_df[(population_df.Location == 'United States of America') & \n                                   (population_df.Time == 2017) &\n                                   (population_df.Sex != 'Both')]\n# Change the color palette of the bar chart to Paired \nsns.barplot(x=\"AgeGrp\",y=\"Value\", hue=\"Sex\", palette=\"Paired\", data = current_population)\n# Rotate tick labels by 30 degree\nplt.setp(plt.gca().get_xticklabels(), rotation=30, horizontalalignment='right') \nplt.show()\n```", "```py\n# Note: Codes related to data preparation and imports are skipped\n# for brevity\n# Change the color palette of the bar chart to Set2 from color\n# brewer library\nax = sns.boxplot(x=\"population type\", y=\"dollar_price\", palette=\"Set2\", data=merged_df2)\nplt.show()\n```"]