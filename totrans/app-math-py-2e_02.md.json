["```py\npython3.10 -m pip install matplotlib\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\ndef f(x):\n  return x*(x - 2)*np.exp(3 – x)\ndef g(x):\n  return x**2\ndef h(x):\n  return 1 - x\n```", "```py\n    x = np.linspace(-0.5, 3.0)  # 50 values between -0.5 and 3.0\n    ```", "```py\n    y1 = f(x)  # evaluate f on the x points\n    ```", "```py\n    y2 = g(x)  # evaluate g on the x points\n    ```", "```py\n    y3 = h(x)  # evaluate h on the x points\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\nax.plot(x, y1, \"k\")  # black solid line style\n```", "```py\nax.plot(x, y2, \"k--\")  # black dashed line style\nax.plot(x, y3, \"k.-\")  # black dot-dashed line style\n```", "```py\nax.set_title(\"Plot of the functions f, g, and h\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\n```", "```py\nax.legend([\"f\", \"g\", \"h\"])\n```", "```py\nax.text(0.4, 2.0, \"Intersection\")\n```", "```py\nplt.show()\n```", "```py\nplt.plot(x, y1, \"k\", x, y2, \"k--\", x, y3, \"k.-\")\nplt.title(\"Plot of the functions f, g, and h\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.legend([\"f\", \"g\", \"h\"])\nplt.text(0.4, 2.0, \"Intersection\")\n```", "```py\ny1 = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\ny2 = np.array([1.2, 1.6, 3.1, 4.2, 4.8])\ny3 = np.array([3.2, 1.1, 2.0, 4.9, 2.5])\nfig, ax = plt.subplots()\nax.plot(y1, 'o', y2, 'x', y3, '*', color=\"k\")\n```", "```py\nax.axis([-0.5, 5.5, 0, 5.5]) # set axes\nax.set_xticks([0.5*i for i in range(9)])  # set xticks\nax.set_yticks([0.5*i for i in range(11)]) # set yticks\nax.grid()  # add a grid\n```", "```py\ndef generate_newton_iters(x0, number):\n  iterates = [x0]\n  errors = [abs(x0 - 1.)]\n  for _ in range(number):\n       x0 = x0 - (x0*x0 - 1.)/(2*x0)\n       iterates.append(x0)\n       errors.append(abs(x0 - 1.))\n    return iterates, errors\n```", "```py\niterates, errors = generate_newton_iters(2.0, 5)\n```", "```py\n    fig, (ax1, ax2) = plt.subplots(1, 2, \n    ```", "```py\n    tight_layout=True) \n    ```", "```py\n    #1 row, 2 columns\n    ```", "```py\n    ax1.plot(iterates, \"kx\")\n    ```", "```py\n    ax1.set_title(\"Iterates\")\n    ```", "```py\n    ax1.set_xlabel(\"$i$\", usetex=True)\n    ```", "```py\n    ax1.set_ylabel(\"$x_i$\", usetex=True)\n    ```", "```py\n    ax2.semilogy(errors, \"kx\") # plot y on logarithmic scale\n    ```", "```py\n    ax2.set_title(\"Error\")\n    ```", "```py\n    ax2.set_xlabel(\"$i$\", usetex=True)\n    ```", "```py\n    ax2.set_ylabel(\"Error\")\n    ```", "```py\nmeasurement_id = np.arange(1, 11)\nmeasurements = np.array([2.3, 1.9, 4.4, 1.5, 3.0, 3.3, 2.9,    2.6, 4.1, 3.6]) # cm\nerr = np.array([0.1]*10)  # 1mm\n```", "```py\nfig, ax = plt.subplots()\n```", "```py\nax.errorbar(measurement_id,\n    measurements, yerr=err, fmt=\"kx\", \n     capsize=2.0)\n```", "```py\nax.set_title(\"Plot of measurements and their estimated error\")\nax.set_xlabel(\"Measurement ID\")\nax.set_ylabel(\"Measurement(cm)\")\n```", "```py\nax.set_xticks(measurement_id)\n```", "```py\nax.bar(measurement_id, measurements, \nyerr=err, capsize=2.0, alpha=0.4)\n```", "```py\nx = np.arange(1, 5, 0.1)\ny = x*x\n```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    ax.plot(x, y)\n    ```", "```py\n    ax.set_title(\"Graph of $y = x^2$\", usetex=True)\n    ```", "```py\n    ax.set_xlabel(\"$x$\", usetex=True)\n    ```", "```py\n    ax.set_ylabel(\"$y$\", usetex=True)\n    ```", "```py\n    fig.savefig(\"savingfigs.png\", dpi=300)\n    ```", "```py\n    X = np.linspace(-5, 5)\n    ```", "```py\n    Y = np.linspace(-5, 5)\n    ```", "```py\n    grid_x, grid_y = np.meshgrid(X, Y)\n    ```", "```py\n    z = np.exp(-((grid_x-2.)**2 + (\n    ```", "```py\n        grid_y-3.)**2)/4) -  np.exp(-(\n    ```", "```py\n        (grid_x+3.)**2 + (grid_y+2.)**2)/3)\n    ```", "```py\n    from mpl_toolkits import mplot3d\n    ```", "```py\n    fig = plt.figure()\n    ```", "```py\n    # declare 3d plot\n    ```", "```py\n    ax = fig.add_subplot(projection=\"3d\")\n    ```", "```py\n    ax.plot_surface(grid_x, grid_y, z, cmap=\"gray\")\n    ```", "```py\n    ax.set_xlabel(\"x\")\n    ```", "```py\n    ax.set_ylabel(\"y\")\n    ```", "```py\n    ax.set_zlabel(\"z\")\n    ```", "```py\n    ax.set_title(\"Graph of the function f(x, y)\")\n    ```", "```py\n    fig = plt.figure()  # Force a new figure\n    ```", "```py\n    plt.contour(grid_x, grid_y, z, cmap=\"gray\")\n    ```", "```py\n    plt.title(\"Contours of f(x, y)\")\n    ```", "```py\n    plt.xlabel(\"x\")\n    ```", "```py\n    plt.ylabel(\"y\")\n    ```", "```py\n    x = np.array([ 0.19, -0.82, 0.8 , 0.95, 0.46, 0.71,\n    ```", "```py\n          -0.86, -0.55,   0.75,-0.98, 0.55, -0.17, -0.89,\n    ```", "```py\n                -0.4 , 0.48, -0.09, 1., -0.03, -0.87, -0.43])\n    ```", "```py\n    y = np.array([-0.25, -0.71, -0.88, 0.55, -0.88, 0.23,\n    ```", "```py\n            0.18,-0.06, 0.95, 0.04, -0.59, -0.21, 0.14, 0.94,\n    ```", "```py\n                  0.51, 0.47, 0.79, 0.33, -0.85, 0.19])\n    ```", "```py\n    z = np.array([-0.04, 0.44, -0.53, 0.4, -0.31,\n    ```", "```py\n        0.13,-0.12, 0.03, 0.53, -0.03, -0.25, 0.03, \n    ```", "```py\n        -0.1 ,-0.29, 0.19, -0.03, 0.58, -0.01, 0.55, \n    ```", "```py\n        -0.06])\n    ```", "```py\n    fig = plt.figure(tight_layout=True)  # force new figure\n    ```", "```py\n    ax1 = fig.add_subplot(1, 2, 1, projection=\"3d\")  # 3d axes\n    ```", "```py\n    ax1.plot_trisurf(x, y, z)\n    ```", "```py\n    ax1.set_xlabel(\"x\")\n    ```", "```py\n    ax1.set_ylabel(\"y\")\n    ```", "```py\n    ax1.set_zlabel(\"z\")\n    ```", "```py\n    ax1.set_title(\"Approximate surface\")\n    ```", "```py\n    ax2 = fig.add_subplot(1, 2, 2)  # 2d axes\n    ```", "```py\n    ax2.tricontour(x, y, z)\n    ```", "```py\n    ax2.set_xlabel(\"x\")\n    ```", "```py\n    ax2.set_ylabel(\"y\")\n    ```", "```py\n    ax2.set_title(\"Approximate contours\")\n    ```", "```py\nt = np.linspace(-5, 5)\nx, y = np.meshgrid(t, t)\nz = np.exp(-((x-2.)**2 + (y-3.)**2)/4) - np.exp(\n    -((x+3.)**2 + (y+2.)**2)/3)\n```", "```py\nfig = plt.figure()\n```", "```py\nax = fig.add_subplot(projection=\"3d\", azim=-80, elev=22)\n```", "```py\nax.plot_surface(x, y, z, cmap=\"gray\", vmin=-1.2, vmax=1.2)\n```", "```py\nax.set_title(\"Customized 3D surface plot\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_zlabel(\"z\")\n```", "```py\nfrom matplotlib.colors import LightSource\nlight_source = LightSource(0, 45)  # angles of lightsource\ncmap = plt.get_cmap(\"binary_r\")\nvals = light_source.shade(z, cmap)\nsurf = ax.plot_surface(x, y, z, facecolors=vals)\n```", "```py\ndef f(x, y):\n  v = x**2 +y**2\n    return np.exp(-2*v)*(x+y), np.exp(\n        -2*v)*(x-y)\n```", "```py\nt = np.linspace(-1., 1.)\nx, y = np.meshgrid(t, t)\n```", "```py\ndx, dy = f(x, y)\n```", "```py\nfig, ax = plt.subplots()\nax.quiver(x, y, dx, dy)\n```"]