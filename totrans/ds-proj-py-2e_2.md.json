["```py\nimport numpy as np #numerical computation\nimport pandas as pd #data wrangling\nimport matplotlib.pyplot as plt #plotting package\n#Next line helps with rendering plots\n%matplotlib inline\nimport matplotlib as mpl #add'l plotting functionality\nmpl.rcParams['figure.dpi'] = 400 #high res figures\n```", "```py\ndf = pd.read_csv('../../Data/Chapter_1_cleaned_data.csv')\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\n```", "```py\nmy_lr = LogisticRegression()\n```", "```py\nmy_lr\n```", "```py\nLogisticRegression()\n```", "```py\nmy_new_lr = LogisticRegression(penalty='l2', dual=False,\\\n                               tol=0.0001, C=1.0,\\\n                               fit_intercept=True,\\\n                               intercept_scaling=1,\\\n                               class_weight=None,\\\n                               random_state=None,\\\n                               solver='lbfgs',\\\n                               max_iter=100,\\\n                               multi_class='auto',\\\n                               verbose=0, warm_start=False,\\\n                               n_jobs=None, l1_ratio=None)\n```", "```py\nmy_new_lr.C = 0.1\nmy_new_lr.solver = 'liblinear'\nmy_new_lr\n```", "```py\nOut[11]:LogisticRegression(C=0.1, solver='liblinear')\n```", "```py\nX = df['EDUCATION'][0:10].values.reshape(-1,1)\nX\n```", "```py\ny = df['default payment next month'][0:10].values\ny\n```", "```py\nOut[13]: array([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])\n```", "```py\nmy_new_lr.fit(X, y)\n```", "```py\nOut[14]:LogisticRegression(C=0.1, solver='liblinear')\n```", "```py\nnew_X = df['EDUCATION'][10:20].values.reshape(-1,1)\nnew_X\n```", "```py\nmy_new_lr.predict(new_X)\n```", "```py\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n```", "```py\ndf['default payment next month'][10:20].values\n```", "```py\nOut[17]:array([0, 0, 0, 1, 0, 0, 1, 0, 0, 0])\n```", "```py\nfrom numpy.random import default_rng\nrg = default_rng(12345)\nX = rg.uniform(low=0.0, high=10.0, size=(1000,))\nX[0:10]\n```", "```py\nslope = 0.25\nintercept = -1.25\ny = slope * X + rg.normal(loc=0.0, scale=1.0, size=(1000,))\\\n          + intercept\n```", "```py\nmpl.rcParams['figure.dpi'] = 400\nplt.scatter(X,y,s=1)\nplt.xlabel('X')\nplt.ylabel('y')\n```", "```py\n    from sklearn.linear_model import LinearRegression\n    lin_reg = LinearRegression(fit_intercept=True, normalize=False,\\\n                               copy_X=True, n_jobs=None)\n    lin_reg\t\n    ```", "```py\n    Out[11]:LinearRegression()\n    ```", "```py\n    lin_reg.fit(X.reshape(-1,1), y)\n    print(lin_reg.intercept_)\n    print(lin_reg.coef_)\n    ```", "```py\n    -1.2522197212675905\n    [0.25711689]\n    ```", "```py\n    y_pred = lin_reg.predict(X.reshape(-1,1))\n    ```", "```py\n    plt.scatter(X,y,s=1)\n    plt.plot(X,y_pred,'r')\n    plt.xlabel('X')\n    plt.ylabel('y')\n    ```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split\\\n                                   (df['EDUCATION']\\\n                                    .values.reshape(-1,1),\\\n                                    df['default payment\\\n                                       ' next month']\\\n                                    .values, test_size=0.2,\\\n                                    random_state=24)\n```", "```py\n    P = sum(y_test)\n    P\n    ```", "```py\n    1155\n    ```", "```py\n    TP = sum( (y_test==1) & (y_pred==1) )\n    TP\n    ```", "```py\n    0\n    ```", "```py\n    TPR = TP/P\n    TPR\n    ```", "```py\n    0.0\n    ```", "```py\n    FN = sum( (y_test==1) & (y_pred==0) )\n    FN\n    ```", "```py\n    FNR = FN/P\n    FNR\n    ```", "```py\n    1.0\n    ```", "```py\n    metrics.confusion_matrix(y_test, y_pred)\n    ```", "```py\n    y_pred_proba = example_lr.predict_proba(X_test)\n    y_pred_proba\n    ```", "```py\n    prob_sum = np.sum(y_pred_proba,1)\n    prob_sum\n    ```", "```py\n    array([1., 1., 1., ..., 1., 1., 1.])\n    ```", "```py\n    prob_sum.shape\n    ```", "```py\n    (5333,)\n    ```", "```py\n    np.unique(prob_sum)\n    ```", "```py\n    array([1.])\n    ```", "```py\n    pos_proba = y_pred_proba[:,1]\n    pos_proba\n    ```", "```py\n    plt.hist(pos_proba)\n    ```", "```py\n    mpl.rcParams['font.size'] = 12\n    plt.hist(pos_proba)\n    plt.xlabel('Predicted probability of positive class '\\\n               'for test data')\n    plt.ylabel('Number of samples')\n    ```", "```py\n    pos_sample_pos_proba = pos_proba[y_test==1]\n    neg_sample_pos_proba = pos_proba[y_test==0]\n    ```", "```py\n    plt.hist([pos_sample_pos_proba, neg_sample_pos_proba],\\\n              histtype='barstacked')\n    plt.legend(['Positive samples', 'Negative samples'])\n    plt.xlabel('Predicted probability of positive class')\n    plt.ylabel('Number of samples')\n    ```", "```py\nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(y_test, pos_proba)\n```", "```py\nplt.plot(fpr, tpr, '*-')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.legend(['Logistic regression', 'Random chance'])\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.title('ROC curve')\n```", "```py\nthresholds\n```", "```py\narray([1.2549944 , 0.2549944 , 0.24007604, 0.22576598, 0.21207085]) \n```", "```py\nmetrics.roc_auc_score(y_test, pos_proba)\n```", "```py\n0.5434650477972642\n```"]