["```py\narray_list = [[100, 65, 160],\n[150, 82, 200],\n[90, 55, 80],\n[130, 73, 220],\n[190, 80, 150]]\n```", "```py\nIn [2]: array_list[1][2]\nOut[2]: 200\n\nIn [3]: array_list[3][0]\nOut[3]: 130\n```", "```py\nimport array as arr\narr_x = arr.array(\"d\", [98.6, 22.35, 72.1])\n```", "```py\nIn [4]: ndarray_1\n\nOut[4]:\narray([[[100, 65, 160],\n[150, 82, 200],\n[ 90, 55, 80],\n[130, 73, 220],\n[190, 80, 150]],\n[[ 95, 68, 140],\n[145, 80, 222],\n[ 90, 62, 100],\n[150, 92, 200],\n[140, 60, 90]],\n[[110, 72, 160],\n[160, 95, 185],\n[100, 80, 110],\n[140, 92, 120],\n[100, 55, 100]]])\n```", "```py\n# Data type of the array\nIn [5]: ndarray_1.dtype\nOut[5]: dtype('int32')\n\n# Shape of the array\nIn [6]: ndarray_1.shape\nOut[6]: (3, 5, 3)\n\n# Number of dimensions in the array\nIn [7]: ndarray_1.ndim\nOut[7]: 3\n\n# Size of the array (number of elements in the array)\nIn [8]: ndarray_1.size\nOut[8]: 45\n```", "```py\nIn [9]: ndarray_1.itemsize\nOut[9]: 4\nIn [10]: ndarray_1.nbytes\nOut[10]: 180\n```", "```py\nIn [11]: ndarray_1.strides\nOut[11]: (60, 12, 4)\n```", "```py\nIn [12]: array1d = np.array([1, 2, 3, 4])\nIn [13]: array1d\nOut [13]: array([1, 2, 3, 4])\n```", "```py\nIn [14]: array2d = np.array([[0, 1, 2],[2, 3, 4]])\nIn [15]: array2d\nOut [15]:\narray([[0, 1, 2],\n[2, 3, 4]])\n```", "```py\n# Creating an array of ones with shape (2, 3, 4)\nIn [27]: np.ones((2, 3, 4))\nOut [27]:\narray([[[1., 1., 1., 1.],\n[1., 1., 1., 1.],\n[1., 1., 1., 1.]],\n[[1., 1., 1., 1.],\n[1., 1., 1., 1.],\n[1., 1., 1., 1.]]])\n\n# Creating an array of zeros with shape (2, 1, 3)\nIn [28]: np.zeros((2, 1, 3))\nOut [28]:\narray([[[0., 0., 0.]],\n[[0., 0., 0.]]])\n```", "```py\nIn [29]: np.identity(3)\nOut [29]:\narray([[1., 0., 0.],\n[0., 1., 0.],\n[0., 0., 1.]])\n```", "```py\n# Creating an identity matrix of order 3 with the eye function\nIn [39]: np.eye(N = 3)\nOut [39]:\narray([[1., 0., 0.],\n[0., 1., 0.],[0., 0., 1.]])\n\n# Creating a rectangular equivalent of identity matrix with 2 rows and 3 columns\nIn [40]: np.eye(N = 2, M = 3)\nOut [40]:\narray([[1., 0., 0.],\n[0., 1., 0.]])\n\n# Offsetting the diagonal of ones by one position in the upper triangle\nIn [41]: np.eye(N = 4, M = 3, k = 1)\nOut [41]:\narray([[0., 1., 0.],\n[0., 0., 1.],\n[0., 0., 0.],\n[0., 0., 0.]])\n\n# Offsetting the diagonal of ones by two positions in the lower triangle\nIn [42]: np.eye(N = 4, M = 3, k = -2)\nOut [42]:\narray([[0., 0., 0.],\n[0., 0., 0.],\n[1., 0., 0.],\n[0., 1., 0.]])\n```", "```py\n# Creating an array with continuous values from 0 to 5\nIn [44]: np.arange(6)\nOut [44]: array([0, 1, 2, 3, 4, 5])\n\n# Creating an array with numbers from 2 to 12 spaced out at intervals of 3\nIn [45]: np.arange(2, 13, 3)\nOut [45]: array([ 2, 5, 8, 11])\n```", "```py\n# Creating a linearly spaced array of 20 samples between 5 and 10\nIn [47]: np.linspace(start = 5, stop = 10, num = 20)\nOut [47]:\narray([ 5\\. , 5.26315789, 5.52631579, 5.78947368, 6.05263158,\n6.31578947, 6.57894737, 6.84210526, 7.10526316, 7.36842105,\n7.63157895, 7.89473684, 8.15789474, 8.42105263, 8.68421053,\n8.94736842, 9.21052632, 9.47368421, 9.73684211, 10\\. ])\n```", "```py\n# Creating a random array with 2 rows and 4 columns, from a uniform distribution\nIn [49]: np.random.rand(2, 4)\nOut [49]:\narray([[0.06573958, 0.32399347, 0.60926818, 0.99319404],\n[0.46371691, 0.49197909, 0.93103333, 0.06937098]])\n```", "```py\n# Creating a 2X4 array from a standard normal distribution\nIn [50]: np.random.randn(2, 4)\nOut [50]:\narray([[ 1.29319502, 0.55161748, 0.4660141 , -0.72012401],\n[-0.64549002, 0.01922198, 0.04187487, 1.35950566]])\n\n# Creating a 2X4 array from a normal distribution with mean 10 and standard deviation 5\nIn [51]: 5 * np.random.randn(2, 4) + 10\nOut [51]:\narray([[ 6.08538069, 12.10958845, 15.27372945, 15.9252008 ],\n[13.34173712, 18.49388151, 10.19195856, 11.63874627]])\n```", "```py\n# Creating an array of shape (2, 3) with random integers chosen from the interval [2, 5)\nIn [52]: np.random.randint(2, 5, (2, 3))\nOut [52]:\narray([[2, 4, 3],\n[3, 4, 4]])\n```", "```py\n# Creating an uninitialized empty array of 4X3 dimensions\nIn [58]: np.empty([4,3])\nOut [58]:\narray([[0., 0., 0.],\n[0., 0., 0.],\n[1., 0., 0.],\n[0., 1., 0.]])\n```", "```py\n# The 2D input matrix for diag function\nIn [68]: arr_a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nIn [69]: arr_a\nOut [69]:\narray([[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]])\n\n# Getting the diagonal of the array\nIn [70]: np.diag(arr_a)\nOut [70]: array([1, 5, 9])\n\n# Constructing the diagonal matrix from a 1D array\n# diag returns a 1D array of diagonals for a 2D input matrix. This 1D array of diagonals can be used here.\nIn [71]: np.diag(np.diag(arr_a))\nOut [71]:\narray([[1, 0, 0],\n[0, 5, 0],\n[0, 0, 9]])\n\n# Creating the diagonal matrix with diagonals other than main diagonal\nIn [72]: np.diag(np.diag(arr_a, k = 1))\nOut [72]:\narray([[2, 0],\n[0, 6]])\n```", "```py\n# Repeating a 1D array 2 times\nIn [76]: np.tile(np.array([1, 2, 3]), 2)\nOut [76]: array([1, 2, 3, 1, 2, 3])\n\n# Repeating a 2D array 4 times\nIn [77]: np.tile(np.array([[1, 2, 3], [4, 5, 6]]), 4)\nOut [77]:\narray([[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n[4, 5, 6, 4, 5, 6, 4, 5, 6, 4, 5, 6]])\n\n# Repeating a 2D array 4 times along axis 0 and 1 time along axis 1\nIn [78]: np.tile(np.array([[1, 2, 3], [4, 5, 6]]), (4,1))\nOut [78]:\narray([[1, 2, 3],\n[4, 5, 6],\n[1, 2, 3],\n[4, 5, 6],\n[1, 2, 3],\n[4, 5, 6],\n[1, 2, 3],\n[4, 5, 6]])\n```", "```py\nIn [80]: np.array([-2, -1, 0, 1, 2]).dtype\nOut [80]: dtype('int32')\n```", "```py\nIn [81]: np.array([-2, -1, 0, 1, 2], dtype = \"float\")\nOut [81]: array([-2., -1., 0., 1., 2.])\n```", "```py\nIn [83]: np.array([-2, -1, 0, 1, 2], dtype = \"str\")\nOut[83]: array(['-2', '-1', '0', '1', '2'], dtype='<U2'\n```", "```py\nIn [87]: np.array([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\nOut[87]: array(['a', 'bb', 'ccc', 'dddd', 'eeeee'], dtype='<U5')\n```", "```py\n# Boolean array\nIn [89]: np.array([True, False, True, True]).dtype\nOut[89]: dtype('bool')\nIn [90]: np.array([0, 1, 1, 0, 0], dtype = \"bool\")\nOut[90]: array([False, True, True, False, False])\nIn [91]: np.array([0, 1, 2, 3, -4], dtype = \"bool\")\nOut[91]: array([False, True, True, True, True])\n\n# Complex array\nIn [92]: np.array([[1 + 1j, 2 + 2j], [3 + 3j, 4 + 4j]])\nOut[92]:\narray([[1.+1.j, 2.+2.j],\n[3.+3.j, 4.+4.j]])\nIn [93]: np.array([[1 + 1j, 2 + 2j], [3 + 3j, 4 + 4j]]).dtype\nOut[93]: dtype('complex128')\n```", "```py\n# Int to float conversion\nIn [94]: int_array = np.array([0, 1, 2, 3])\nIn [95]: int_array.astype(\"float\")\nOut[95]: array([0., 1., 2., 3.])\n\n# Float to int conversion\nIn [97]: float_array = np.array([1.56, 2.95, 3.12, 4.65])\nIn [98]: float_array.astype(\"int\")\nOut[98]: array([1, 2, 3, 4])\n```", "```py\n    # print entire array, element 0, element 1, last element.\n    In [36]: ar = np.arange(5); print ar; ar[0], ar[1], ar[-1]\n    [0 1 2 3 4]\n    Out[36]: (0, 1, 4)\n    # 2nd, last and 1st elements\n    In [65]: ar=np.arange(5); ar[1], ar[-1], ar[0]\n    Out[65]: (1, 4, 0)\n```", "```py\n    In [24]: ar=np.arange(5); ar[::-1]\n    Out[24]: array([4, 3, 2, 1, 0])\n```", "```py\n    In [71]: ar = np.array([[2,3,4],[9,8,7],[11,12,13]]); ar\n    Out[71]: array([[ 2,  3,  4],\n                    [ 9,  8,  7],\n                    [11, 12, 13]])\n    In [72]: ar[1,1]\n    Out[72]: 8\n```", "```py\n    In [75]: ar[1,1]=5; ar\n    Out[75]: array([[ 2,  3,  4],\n                    [ 9,  5,  7],\n                    [11, 12, 13]])\n```", "```py\n    In [76]:  ar[2]\n    Out[76]: array([11, 12, 13])\n    In [77]: ar[2,:]\n    Out[77]: array([11, 12, 13])\n\n```", "```py\n    In [78]: ar[:,1]\n    Out[78]: array([ 3,  5, 12])\n\n```", "```py\n    In [6]: ar = np.array([0,1,2])\n    In [7]: ar[5]\n       ---------------------------------------------------------------------------\n       IndexError                  Traceback (most recent call last)\n      <ipython-input-7-8ef7e0800b7a> in <module>()\n       ----> 1 ar[5]\n          IndexError: index 5 is out of bounds for axis 0 with size 3\n\n```", "```py\n    In [82]: ar=2*np.arange(6); ar\n    Out[82]: array([ 0,  2,  4,  6,  8, 10])\n    In [85]: ar[1:5:2]\n    Out[85]: array([2, 6])\n```", "```py\n    In [86]: ar[1:6:2]\n    Out[86]: array([ 2,  6, 10])  \n```", "```py\n    In [91]: ar[:4]\n    Out[91]: array([0, 2, 4, 6])  \n```", "```py\n    In [92]: ar[4:]\n    Out[92]: array([ 8, 10])  \n```", "```py\n    In [94]: ar[::3]\n    Out[94]: array([0, 6]) \n```", "```py\n    In [96]: ar\n    Out[96]: array([ 0,  2,  4,  6,  8, 10])\n    In [100]: ar[:3]=1; ar\n    Out[100]: array([ 1,  1,  1,  6,  8, 10])\n    In [110]: ar[2:]=np.ones(4);ar\n    Out[110]: array([1, 1, 1, 1, 1, 1])\n\n```", "```py\n    In [146]: np.random.seed(10)\n              ar=np.random.random_integers(0,25,10); ar\n    Out[146]: array([ 9,  4, 15,  0, 17, 25, 16, 17,  8,  9])\n    In [147]: evenMask=(ar % 2==0); evenMask\n    Out[147]: array([False,  True, False,  True, False, False,  True, False,  True, False], dtype=bool)\n    In [148]: evenNums=ar[evenMask]; evenNums\n    Out[148]: array([ 4,  0, 16,  8])\n```", "```py\n    In [149]: ar=np.array(['Hungary','Nigeria', \n                           'Guatemala','','Poland',\n                           '','Japan']); ar\n    Out[149]: array(['Hungary', 'Nigeria', 'Guatemala', \n                     '', 'Poland', '', 'Japan'], \n                     dtype='|S9')\n    In [150]: ar[ar=='']='USA'; ar\n    Out[150]: array(['Hungary', 'Nigeria', 'Guatemala', \n      'USA', 'Poland', 'USA', 'Japan'], dtype='|S9')\n```", "```py\n    In [173]: ar=11*np.arange(0,10); ar\n    Out[173]: array([ 0, 11, 22, 33, 44, 55, 66, 77, 88, 99])\n    In [174]: ar[[1,3,4,2,7]]\n    Out[174]: array([11, 33, 44, 22, 77])\n```", "```py\n    In [175]: ar[1,3,4,2,7]\n```", "```py\n    IndexError          Traceback (most recent call last)\n    <ipython-input-175-adbcbe3b3cdc> in <module>()\n    ----> 1 ar[1,3,4,2,7]\n\n    IndexError: too many indices\n```", "```py\n    In [176]: ar[[1,3]]=50; ar\n    Out[176]: array([ 0, 50, 22, 50, 44, 55, 66, 77, 88, 99]) \n```", "```py\n    In [188]: ar=np.arange(15); ar\n    Out[188]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\n    In [193]: ar2=np.arange(0,-10,-1)[::-1]; ar2\n    Out[193]: array([-9, -8, -7, -6, -5, -4, -3, -2, -1,  0]) \n```", "```py\n    In [194]: ar[:10]=ar2; ar\n    Out[194]: array([-9, -8, -7, -6, -5, -4, -3, -2, -1,  0, 10, 11, 12, 13, 14])  \n```", "```py\n    In [118]:ar1=np.arange(12); ar1\n    Out[118]:array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n    In [119]:ar2=ar1[::2]; ar2\n    Out[119]: array([ 0,  2,  4,  6,  8, 10])\n\n    In [120]: ar2[1]=-1; ar1\n    Out[120]: array([ 0,  1, -1,  3,  4,  5,  6,  7,  8,  9, 10, 11])  \n```", "```py\n    In [124]: ar=np.arange(8);ar\n    Out[124]: array([0, 1, 2, 3, 4, 5, 6, 7])\n\n    In [126]: arc=ar[:3].copy(); arc\n    Out[126]: array([0, 1, 2])\n\n    In [127]: arc[0]=-1; arc\n    Out[127]: array([-1,  1,  2])\n\n    In [128]: ar\n    Out[128]: array([0, 1, 2, 3, 4, 5, 6, 7])\n```", "```py\n# Arithmetic operation on arrays with scalars\nIn [71]: array_1 = np.array([[1, 2, 3], [4, 5, 6]])\nIn [72]: array_1\nOut[72]:\narray([[1, 2, 3],\n[4, 5, 6]])\nIn [73]: array_1 + 5\nOut[73]:\narray([[ 6, 7, 8],\n[ 9, 10, 11]])\nIn [74]: array_1 * 5\nOut[74]:\narray([[ 5, 10, 15],\n[20, 25, 30]])\nIn [75]: array_1 ** 2\nOut[75]:\narray([[ 1, 4, 9],\n[16, 25, 36]], dtype=int32)\n```", "```py\n# Element-wise addition of two arrays\nIn [76]: array_1 + array_1\nOut[76]:\narray([[ 2, 4, 6],\n[ 8, 10, 12]])\n\n# Element-wise multiplication of two arrays\nIn [77]: array_1 * array_1\nOut[77]:\narray([[ 1, 4, 9],\n[16, 25, 36]])\n\n# Matrix multiplication of an array and its transpose\nIn [78]: array_1 @ array_1.T\nOut[78]:\narray([[14, 32],\n[32, 77]])\n```", "```py\n# Computing the cube of each element in an array, for an array with 1000 elements\nIn [79]: %timeit np.arange(1000) ** 3\n5.05 µs ± 195 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n\n# Computing the cube of each number from 0 to 1000, using a for loop\nIn [80]: array_list = range(1000)\n...: %timeit [array_list[i]**3 for i in array_list]\n533 µs ± 8.06 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```", "```py\n# Sum of all elements in an array\nIn [62]: np.array([[1, 2, 3], [4, 5, 6]]).sum()\nOut[62]: 21\n\n# Column sum of elements\nIn [63]: np.array([[1, 2, 3], [4, 5, 6]]).sum(axis = 0)\nOut[63]: array([5, 7, 9])\n\n# Cumulative sum of elements along axis 0\nIn [64]: np.array([[1, 2, 3], [4, 5, 6]]).cumsum(axis = 0)\nOut[64]:\narray([[1, 2, 3],\n[5, 7, 9]], dtype=int32)\n\n# Cumulative sum of all elements in the array\nIn [65]: np.array([[1, 2, 3], [4, 5, 6]]).cumsum()\nOut[65]: array([ 1, 3, 6, 10, 15, 21], dtype=int32)\n```", "```py\nIn [16]: array_x = np.array([[0, 1, 2], [3, 4, 5]])\nIn [17]: np.mean(array_x)\nOut[17]: 2.5\nIn [18]: np.median(array_x)\nOut[18]: 2.5\nIn [19]: np.var(array_x)\nOut[19]: 2.9166666666666665\nIn [20]: np.std(array_x)\nOut[20]: 1.707825127659933\n```", "```py\nIn [27]: np.mean(array_x, axis = 0)\nOut[27]: array([1.5, 2.5, 3.5])\nIn [28]: np.mean(array_x, axis = 1)\nOut[28]: array([1., 4.])\n```", "```py\nIn [30]: nan_array = np.array([[5, 6, np.nan], [19, 3, 2]])\n\n# The regular function returns only nan with a warning\nIn [31]: np.median(nan_array)\nC:\\Users \\Anaconda3\\lib\\site-packages\\numpy\\lib\\function_base.py:3250: RuntimeWarning: Invalid value encountered in median\nr = func(a, **kwargs)\nOut[31]: nan\nIn [32]: np.nanmedian(nan_array)\nOut[32]: 5.0\n```", "```py\nIn [35]: array_corr = np.random.randn(3,4)\nIn [36]: array_corr\nOut[36]:\narray([[-2.36657958, -0.43193796, 0.4761051 , -0.11778897],\n[ 0.52101041, 1.11562216, 0.61953044, 0.07586606],\n[-0.17068701, -0.84382552, 0.86449631, 0.77080463]])\nIn [37]: np.corrcoef(array_corr)\nOut[37]:\narray([[ 1\\. , -0.00394547, 0.48887013],\n[-0.00394547, 1\\. , -0.76641267],\n[ 0.48887013, -0.76641267, 1\\. ]])\nIn [38]: np.cov(array_corr)\nOut[38]:\narray([[ 1.51305796, -0.00207053, 0.48931189],\n[-0.00207053, 0.18201613, -0.26606154],\n[ 0.48931189, -0.26606154, 0.66210821]])\n```", "```py\nIn [39]: array_logical = np.random.randn(3, 4)\nIn [40]: array_logical\nOut[40]:\narray([[ 0.79560751, 1.11526762, 1.21139114, -0.36566102],\n[ 0.561285 , -1.27640005, 0.28338879, 0.13984101],\n[-0.304546 , 1.58540957, 0.1415475 , 1.53267898]])\n\n# Check if any value is negative along each dimension in axis 0\nIn [42]: np.any(array_logical < 0, axis = 0)\nOut[42]: array([ True, True, False, True])\n\n# Check if all the values are negative in the array\nIn [43]: np.all(array_logical < 0)\nOut[43]: False\n```", "```py\nIn [44]: np.isfinite(np.array([12, np.inf, 3, np.nan]))\nOut[44]: array([ True, False, True, False])\nIn [45]: np.isnan((np.array([12, np.inf, 3, np.nan])))\nOut[45]: array([False, False, False, True])\nIn [46]: np.isinf((np.array([12, np.inf, 3, np.nan])))\nOut[46]: array([False, True, False, False])\n```", "```py\n# Creating two random arrays for comparison\nIn [50]: array1 = np.random.randn(3,4)\nIn [51]: array2 = np.random.randn(3, 4)\nIn [52]: array1\nOut[52]:\narray([[ 0.80394696, 0.67956857, 0.32560135, 0.64933303],\n[-1.78808905, 0.73432929, 0.26363089, -1.47596536],\n[ 0.00214663, 1.30853759, -0.11930249, 1.41442395]])\nIn [54]: array2\nOut[54]:\narray([[ 0.59876194, -0.33230015, -1.68219462, -1.27662143],\n[-0.49655572, 0.43650693, -0.34648415, 0.67175793],\n[ 0.1837518 , -0.15162542, 0.04520202, 0.58648728]])\n\n# Checking for the truth of array1 greater than array2\nIn [55]: np.greater(array1, array2)\nOut[55]:\narray([[ True, True, True, True],\n[False, True, True, False],\n[False, True, False, True]])\n\n# Checking for the truth of array1 less than array2\nIn [56]: np.less(array1, array2)\nOut[56]:\narray([[False, False, False, False],\n[ True, False, False, True],\n[ True, False, True, False]])\n```", "```py\n    In [357]: ar=np.ones([3,2]); ar\n    Out[357]: array([[ 1.,  1.],\n                     [ 1.,  1.],\n                     [ 1.,  1.]])\n\n    In [358]: ar2=np.array([2,3]); ar2\n    Out[358]: array([2, 3])\n\n    In [359]: ar+ar2\n    Out[359]: array([[ 3.,  4.],\n                     [ 3.,  4.],\n                     [ 3.,  4.]])\n```", "```py\n    In [369]: ar=np.array([[23,24,25]]); ar\n    Out[369]: array([[23, 24, 25]])\n    In [368]: ar.T\n    Out[368]: array([[23],\n                     [24],\n                     [25]])\n    In [370]: ar.T+ar\n    Out[370]: array([[46, 47, 48],\n                     [47, 48, 49],\n                     [48, 49, 50]])\n```", "```py\nIn [78]: reshape_array = np.arange(0,15)\nIn [79]: np.reshape(reshape_array, (5, 3))\nOut[79]:\narray([[ 0, 1, 2],\n[ 3, 4, 5],\n[ 6, 7, 8],\n[ 9, 10, 11],\n[12, 13, 14]]\n```", "```py\nIn [80]: trans_array = np.arange(0,24).reshape(4, 6)\nIn [82]: trans_array\nOut[82]:\narray([[ 0, 1, 2, 3, 4, 5],\n[ 6, 7, 8, 9, 10, 11],\n[12, 13, 14, 15, 16, 17],\n[18, 19, 20, 21, 22, 23]])\nIn [83]: trans_array.T\nOut[83]:\narray([[ 0, 6, 12, 18],\n[ 1, 7, 13, 19],\n[ 2, 8, 14, 20],\n[ 3, 9, 15, 21],\n[ 4, 10, 16, 22],\n[ 5, 11, 17, 23]])\n```", "```py\nIn [84]: trans_array = np.arange(0,24).reshape(2, 3, 4)\nIn [85]: trans_array.T.shape\nOut[85]: (4, 3, 2)\n```", "```py\nIn [86]: ravel_array = np.arange(0,12).reshape(4, 3)\nIn [87]: ravel_array.ravel()\nOut[87]: array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n```", "```py\nIn [88]: ravel_array.ravel(order = \"F\")\nOut[88]: array([ 0, 3, 6, 9, 1, 4, 7, 10, 2, 5, 8, 11])\n```", "```py\n# Creating a 1D array with 7 elements\nIn [98]: array_x = np.array([0, 1, 2, 3, 4, 5, 6])\nIn [99]: array_x.shape\nOut[99]: (7,)\n\n# Adding a new axis changes the 1D array to 2D\nIn [100]: array_x[:, np.newaxis]\nOut[100]:\narray([[0],\n[1],\n[2],\n[3],\n[4],\n[5],\n[6]])\nIn [101]: array_x[:, np.newaxis].shape\nOut[101]: (7, 1)\n\n# Adding 2 new axis to the 1D array to make it 3D\nIn [102]: array_x[:, np.newaxis, np.newaxis]\nOut[102]:\narray([[[0]],\n[[1]],\n[[2]],\n[[3]],\n[[4]],\n[[5]],\n[[6]]])\nIn [103]: array_x[:, np.newaxis, np.newaxis].shape\nOut[103]: (7, 1, 1)\n```", "```py\n# For 2D arrays\nIn [23]: array_1 = np.random.randn(2, 4)\nIn [24]: array_2 = np.random.randn(4, 2)\nIn [25]: np.dot(array_1, array_2)\nOut[25]:\narray([[-2.89783151, 5.34861977],\n[-0.98078998, -3.47603638]])\n\n# For N dimensional arrays\nIn [37]: array_1 = np.random.randn(2, 4, 2)\nIn [38]: array_2 = np.random.randn(1, 1, 2, 1)\nIn [39]: np.dot(array_1, array_2).shape\nOut[39]: (2, 4, 1, 1, 1)\n```", "```py\nIn [42]: array_svd = np.random.randn(4, 3)\nIn [43]: np.linalg.svd(array_svd)\nOut[43]:\n(array([[-0.31366226, 0.27266983, 0.17962633, -0.89162858],\n[ 0.72860587, 0.51810374, 0.44793275, -0.00763141],\n[-0.59309456, 0.61499855, 0.26103908, 0.44930416],\n[-0.13779807, -0.52820115, 0.83603183, 0.05537156]]),\narray([1.68668514, 0.91044852, 0.65293131]),\narray([[ 0.43322222, 0.10710679, 0.89490035],\n[-0.73052453, 0.62326903, 0.27905131],\n[-0.52787538, -0.77463789, 0.34825813]]))\n```", "```py\nIn [50]: np.linalg.eig(np.random.randn(5, 5))\nOut[50]:\n(array([ 2.52146488+0.j , -2.80191144+0.j ,\n0.57756977+0.j , -0.65032217+1.22149327j,\n-0.65032217-1.22149327j]),\narray([[-0.85628289+0.j , -0.04688595+0.j ,\n-0.71887813+0.j , -0.51046122-0.03158232j,\n-0.51046122+0.03158232j],\n[ 0.15793025+0.j , 0.7517844 +0.j ,\n0.45393309+0.j , 0.52887467+0.j ,\n0.52887467-0.j ],\n[-0.35226803+0.j , 0.33640372+0.j ,\n0.51482125+0.j , 0.40554944-0.02802925j,\n0.40554944+0.02802925j],\n[ 0.08722806+0.j , -0.07904384+0.j ,\n-0.03872718+0.j , -0.41252898+0.16212983j,\n-0.41252898-0.16212983j],\n[ 0.33186767+0.j , 0.55964858+0.j ,\n0.10304501+0.j , 0.14346541-0.27643973j,\n0.14346541+0.27643973j]]))\n```", "```py\nIn [51]: a = np.array([[1, 2, 3], [5, 4, 2], [8, 9, 7]])\nIn [52]: b = np.array([6, 19, 47])\nIn [53]: np.linalg.solve(a, b)\nOut[53]: array([-6.27272727, 15.81818182, -6.45454545])\n```", "```py\nIn [55]: np.linalg.det(np.random.randn(3,3))\nOut[55]: -0.08292700167707867\nIn [56]: np.linalg.det(np.random.randn(2,3,3))\nOut[56]: array([-0.22575897, 1.47647984])\n```", "```py\n    In [43]: ar=np.array([[3,2],[10,-1]])\n                 ar\n    Out[43]: array([[ 3,  2],\n                    [10, -1]])\n    In [44]: ar.sort(axis=1)\n                 ar\n    Out[44]: array([[ 2,  3],\n                    [-1, 10]])\n```", "```py\n    In [45]: ar=np.array([[3,2],[10,-1]])\n                 ar\n    Out[45]: array([[ 3,  2],\n                    [10, -1]])\n    In [46]: ar.sort(axis=0)\n                 ar\n    Out[46]: array([[ 3, -1],\n                    [10,  2]])  \n```", "```py\nN = 1000\nX1 = np.random.randn(N, 2) + np.array([0.9, 0.9])\nX2 = np.random.randn(N, 2) + np.array([-0.9, -0.9])\n```", "```py\nY1 = np.zeros((N, 1))\nY2 = np.ones((N, 1))\n```", "```py\nX = np.vstack((X1, X2))\nY = np.vstack((Y1, Y2))\ntrain = np.hstack((X, Y))\n```", "```py\nx = train[:, 0:2]\nt = train[:, 2].reshape(2000, 1)\n```", "```py\ndef sigmoid(x, derive = False):\nif (derive == True):\n    return x * (1 - x)\n    return 1 / (1 + np.exp(-x))\n```", "```py\nx_in = np.concatenate([x, np.repeat([[1]], 2000, axis = 0)], axis = 1)\nw_ih = np.random.normal(size = (3, 3))\n```", "```py\ny_h = np.dot(x_in, w_ih)\na_h = sigmoid(y_h)\n```", "```py\na_hin = np.concatenate([a_h, np.repeat([[1]], 2000, axis = 0)], axis = 1)\nw_ho = np.random.normal(size = (4, 1)\n```", "```py\ny_o = np.dot(a_hin, w_ho)\na_o = sigmoid(y_o)\n```", "```py\n# Output layer\ndelta_a_o_error = a_o - t\ndelta_y_o = sigmoid(a_o, derive=True)\ndelta_w_ho = a_hin\ndelta_output_layer = np.dot(delta_w_ho.T,(delta_a_o_error * delta_y_o))\n\n# Hidden layer\ndelta_a_h = np.dot(delta_a_o_error * delta_y_o, w_ho[0:3,:].T)\ndelta_y_h = sigmoid(a_h, derive=True)\ndelta_w_ih = x_in\ndelta_hidden_layer = np.dot(delta_w_ih.T, delta_a_h * delta_y_h)\n```", "```py\neta = 0.1\nw_ih = w_ih - eta * delta_hidden_layer\nw_ho = w_ho - eta * delta_output_layer\n```", "```py\n### Neural Network with one hidden layer with feedforward and backpropagation\nx = train[:,0:2]\nt = train[:,2].reshape(2000,1)\nx_in = np.concatenate([x, np.repeat([[1]], 2000, axis = 0)], axis = 1)\nw_ih = np.random.normal(size = (3, 3))\nw_ho = np.random.normal(size = (4, 1))\ndef sigmoid(x, derive = False):\nif (derive == True):\nreturn x * (1 - x)\nreturn 1 / (1 + np.exp(-x))\nepochs = 5000\neta = 0.1\n\nfor epoch in range(epochs):\n# Feed forward\n    y_h = np.dot(x_in, w_ih)\n    a_h = sigmoid(y_h)\n    a_hin = np.concatenate([a_h, np.repeat([[1]], 2000, axis = 0)],     axis = 1)\n    y_o = np.dot(a_hin, w_ho)\n    a_o = sigmoid(y_o)\n\n    # Calculate the error\n    a_o_error = ((1 / 2) * (np.power((a_o - t), 2)))\n\n    # Backpropagation\n    ## Output layer\n    delta_a_o_error = a_o - t\n    delta_y_o = sigmoid(a_o, derive=True)\n    delta_w_ho = a_hin\n    delta_output_layer = np.dot(delta_w_ho.T,(delta_a_o_error * delta_y_o))\n\n    ## Hidden layer\n    delta_a_h = np.dot(delta_a_o_error * delta_y_o, w_ho[0:3,:].T)\n    delta_y_h = sigmoid(a_h, derive=True)\n    delta_w_ih = x_in\n    delta_hidden_layer = np.dot(delta_w_ih.T, delta_a_h * delta_y_h)\n    w_ih = w_ih - eta * delta_hidden_layer\n    w_ho = w_ho - eta * delta_output_layer\n    print(a_o_error.mean())\n```", "```py\n# reading images using opencv package\nimport cv2\nimport matplotlib.pyplot as plt\nimport os\nos.chdir('')\nimg=cv2.imread('view.jpg')\nimg2=cv2.imread('rose.jpg')\n```", "```py\nprint(type(img))\n```", "```py\nimg.shape\n```", "```py\nplt.imshow(img) \n```", "```py\nimg_r=img[:,:,0]\nplt.imshow(img_r)    \n```", "```py\nimg_g=img[:,:,1]\nplt.imshow(img_g)\n```", "```py\nimg_b=img[:,:,2]\nplt.imshow(img_b)\n```", "```py\nimg_tree=img[50:155,95:190,:]\nplt.imshow(img_tree)\n```", "```py\nimg3=img\nimg3[50:155,1:96,:]=img_tree\nplt.imshow(img3)    \n```", "```py\nfig, axes = plt.subplots(1, 3)\n\n# Red Channel\nimgR = img.copy()\nimgR[:, :, 1:3] = 0 # Assigning Green and Blue channel pixels to 0\naxes[0].imshow(imgR)\n\n# Green Channel\nimgG = img.copy()\nimgG[:, :, [0,2]] = 0 # Assigning Red and Blue channel pixels to 0\naxes[1].imshow(imgG)\n\n# Blue Channel\nimgB = img.copy()\nimgB[:, :, 0:2] = 0 0 # Assigning Red and Green channel pixels to 0\naxes[2].imshow(imgB)\n```", "```py\nimport pandas as pd\nser = pd.Series(data, index = idx)\n```", "```py\nIn [4]: ser = pd.Series(np.random.randn(7))\nIn [5]: ser\nOut[5]:\n0 3.063921\n1 0.097450\n2 -1.660367\n3 -1.221308\n4 -0.948873\n5 0.454462\n6 0.586824\ndtype: float64\n```", "```py\nIn [6]: import calendar as cal\nIn [7]: monthNames=[cal.month_name[i] for i in np.arange(1,6)]\nIn [8]: months = pd.Series(np.arange(1,6), index = monthNames)\nIn [10]: months\nOut[10]:\nJanuary 1\nFebruary 2\nMarch 3\nApril 4\nMay 5\ndtype: int32\nIn [11]: months.index\nOut[11]: Index(['January', 'February', 'March', 'April', 'May'], dtype='object')\n```", "```py\nIn [12]: currDict={'US' : 'dollar', 'UK' : 'pound', 'Germany': 'euro', 'Mexico':'peso', 'Nigeria':'naira', 'China':'yuan', 'Japan':'yen'}\nIn [13]: currSeries = pd.Series(currDict)\nIn [14]: currSeries\nOut[14]:\nUS dollar\nUK pound\nGermany euro\nMexico peso\nNigeria naira\nChina yuan\nJapan yen\ndtype: object\n```", "```py\nIn [18]: stockPrices = {'GOOG':1180.97, 'FB':62.57, 'TWTR': 64.50, 'AMZN':358.69, 'AAPL':500.6}\n# \"YHOO\" is not a key in the above dictionary\nIn [19]: stockPriceSeries = pd.Series(stockPrices, index=['GOOG','FB','YHOO','TWTR','AMZN','AAPL'], name='stockPrices')\nIn [20]: stockPriceSeries\nOut[20]:\nGOOG 1180.97\nFB 62.57\nYHOO NaN\nTWTR 64.50\nAMZN 358.69\nAAPL 500.60\nName: stockPrices, dtype: float64\n```", "```py\nIn [21]: dogSeries=pd.Series('chihuahua', index=['breed', 'countryOfOrigin', 'name', 'gender'])\nIn [22]: dogSeries = pd.Series('chihuahua', index=['breed', 'countryOfOrigin', 'name', 'gender'])\nIn [23]: dogSeries\nOut[23]:\nbreed chihuahua\ncountryOfOrigin chihuahua\nname chihuahua\ngender chihuahua\ndtype: object\n```", "```py\n# Accessing value from series using index label\nIn [26]: currDict['China']\nOut[26]: 'yuan'\n\n# Assigning value to series through a new index label\nIn [27]: stockPriceSeries['GOOG'] = 1200.0\nIn [28]: stockPriceSeries\nOut[28]:\nGOOG 1200.00\nFB 62.57\nYHOO NaN\nTWTR 64.50\nAMZN 358.69\nAAPL 500.60\nName: stockPrices, dtype: float64\n```", "```py\nIn [29]: stockPriceSeries['MSFT']\nKeyError: 'MSFT'\n```", "```py\nIn [30]: stockPriceSeries.get('MSFT, np.NaN)\nOut[30]: nan\n```", "```py\n# Slice till the 4th index (0 to 3)\nIn [31]: stockPriceSeries[:4]\nOut[31]:\nGOOG 1200.00\nFB 62.57\nYHOO NaN\nTWTR 64.50\nName: stockPrices, dtype: float64\nLogical slicing also works as follows:\nIn [32]: stockPriceSeries[stockPriceSeries > 100]\nOut[32]:\nGOOG 1200.00\nAMZN 358.69\nAAPL 500.60\nName: stockPrices, dtype: float64\n```", "```py\n# Mean of entire series\nIn [34]: np.mean(stockPriceSeries)\nOut[34]: 437.27200000000005\n\n# Standard deviation of entire series\nIn [35]: np.std(stockPriceSeries)\nOut[35]: 417.4446361087899\n```", "```py\nIn [36]: ser\nOut[36]:\n0 3.063921\n1 0.097450\n2 -1.660367\n3 -1.221308\n4 -0.948873\n5 0.454462\n6 0.586824\ndtype: float64\n\nIn [37]: ser * ser\nOut[37]:\n0 9.387611\n1 0.009496\n2 2.756819\n3 1.491593\n4 0.900359\n5 0.206535\n6 0.344362\ndtype: float64\n```", "```py\nIn [40]: ser[1:]\nOut[40]:\n1 0.097450\n2 -1.660367\n3 -1.221308\n4 -0.948873\n5 0.454462\n6 0.586824\ndtype: float64\nIn [41]: ser[1:] + ser[:-2]\nOut[41]:\n0 NaN\n1 0.194899\n2 -3.320734\n3 -2.442616\n4 -1.897745\n5 NaN\n6 NaN\ndtype: float64\n```", "```py\nstockSummaries = {\n'AMZN': pd.Series([346.15,0.59,459,0.52,589.8,158.88],\nindex=['Closing price','EPS',\n'Shares Outstanding(M)',\n'Beta', 'P/E','Market Cap(B)']),\n'GOOG': pd.Series([1133.43,36.05,335.83,0.87,31.44,380.64],\nindex=['Closing price','EPS','Shares Outstanding(M)',\n'Beta','P/E','Market Cap(B)']),\n'FB': pd.Series([61.48,0.59,2450,104.93,150.92],\nindex=['Closing price','EPS','Shares Outstanding(M)',\n'P/E', 'Market Cap(B)']),\n'YHOO': pd.Series([34.90,1.27,1010,27.48,0.66,35.36],\nindex=['Closing price','EPS','Shares Outstanding(M)',\n'P/E','Beta', 'Market Cap(B)']),\n'TWTR':pd.Series([65.25,-0.3,555.2,36.23],\nindex=['Closing price','EPS','Shares Outstanding(M)',\n'Market Cap(B)']),\n'AAPL':pd.Series([501.53,40.32,892.45,12.44,447.59,0.84],\nindex=['Closing price','EPS','Shares Outstanding(M)','P/E',\n'Market Cap(B)','Beta'])}\n```", "```py\nstockDF = pd.DataFrame(stockSummaries)\n```", "```py\nstockDF = pd.DataFrame(stockSummaries,\nindex=['Closing price','EPS',\n'Shares Outstanding(M)',\n'P/E', 'Market Cap(B)','Beta'],\ncolumns=['FB','TWTR','SCNW'])\n```", "```py\nIn [47]: stockDF.index\nOut[47]:\nIndex(['Closing price', 'EPS', 'Shares Outstanding(M)', 'P/E', 'Market Cap(B)',\n'Beta'],\ndtype='object')\nIn [48]: stockDF.columns\nOut[48]: Index(['FB', 'TWTR', 'SCNW'], dtype='object')\n```", "```py\nalgos = {'search': ['DFS','BFS','Binary Search',\n'Linear','ShortestPath (Djikstra)'],\n'sorting': ['Quicksort','Mergesort', 'Heapsort',\n'Bubble Sort', 'Insertion Sort'],\n'machine learning': ['RandomForest', 'K Nearest Neighbor',\n'Logistic Regression', ''K-Means Clustering', 'Linear Regression']}\n```", "```py\nalgoDF = pd.DataFrame(algos)\n```", "```py\npd.DataFrame(algos,index=['algo_1','algo_2','algo_3','algo_4','algo_5'])\n```", "```py\nmemberData = np.array([('Sanjeev',37,162.4),\n('Yingluck',45,137.8),\n('Emeka',28,153.2),\n('Amy',67,101.3)],\ndtype = [('Name','a15'),\n('Age','i4'),\n('Weight','f4')])\n```", "```py\nmemberDF = pd.DataFrame(memberData)\n```", "```py\npd.DataFrame(memberData, index=['a','b','c','d'])\n```", "```py\npd.DataFrame(memberData, columns = [\"Weight\", \"Name\", \"Age\"])\n```", "```py\ndemographicData = [{\"Age\": 32, \"Gender\": \"Male\"}, {\"Race\": \"Hispanic\", \"Gender\": \"Female\", \"Age\": 26}]\n```", "```py\ndemographicDF = pd.DataFrame(demographicData)\n```", "```py\nsalesData = {(\"2012\", \"Q1\"): {(\"North\", \"Brand A\"): 100, (\"North\", \"Brand B\"): 80, (\"South\", \"Brand A\"): 25, (\"South\", \"Brand B\"): 40},\n(\"2012\", \"Q2\"): {(\"North\", \"Brand A\"): 30, (\"South\", \"Brand B\"): 50},\n(\"2013\", \"Q1\"): {(\"North\", \"Brand A\"): 80, (\"North\", \"Brand B\"): 10, (\"South\", \"Brand B\"): 25},\n(\"2013\", \"Q2\"): {(\"North\", \"Brand A\"): 70, (\"North\", \"Brand B\"): 50, (\"South\", \"Brand A\"): 35, (\"South\", \"Brand B\"): 40}}\n```", "```py\nsalesDF = pd.DataFrame(salesData)\n```", "```py\nIn [12]: currDict={'US' : 'dollar', 'UK' : 'pound', 'Germany': 'euro', 'Mexico':'peso', 'Nigeria':'naira', 'China':'yuan', 'Japan':'yen'}\nIn [13]: currSeries = pd.Series(currDict)\nOut[13]:\nUS dollar\nUK pound\nGermany euro\nMexico peso\nNigeria naira\nChina yuan\nJapan yen\nName: Currency, dtype: object\n```", "```py\ncurrDF = pd.DataFrame(currSeries)\n```", "```py\n# Default setting\npd.DataFrame.from_dict(algos, orient = \"columns\")\n```", "```py\npd.DataFrame.from_dict(algos, orient = \"index\", columns = [\"A\", \"B\", \"C\", \"D\", \"E\"])\n```", "```py\npd.DataFrame.from_records(memberData, index=\"Name\")\n```", "```py\nIn [60]: memberDF[\"Name\"]\nOut[60]:\n0 b'Sanjeev'\n1 b'Yingluck'\n2 b'Emeka'\n3 b'Amy'\nName: Name, dtype: object\n```", "```py\nIn [61]: memberDF['Height'] = 60\nIn [62]: memberDF\n```", "```py\nIn [63]: memberDF['Height2'] = [57, 62, 65, 59]\nIn [64]: memberDF\n```", "```py\nIn [65]: memberDF.insert(1, \"ID\", [\"S01\", \"S02\", \"S03\", \"S04\"])\nIn [66]: memberDF\n```", "```py\nIn [67]: del memberDF[\"Height\"]\nIn [68]: memberDF\n```", "```py\nIn [65]: height2 = memberDF.pop(\"Height2\")\nIn [66]: memberDF\n```", "```py\nore1DF=pd.DataFrame(np.array([[20,35,25,20],\n[11,28,32,29]]),\ncolumns=['iron','magnesium',\n'copper','silver'])\nore2DF=pd.DataFrame(np.array([[14,34,26,26],\n[33,19,25,23]]),\ncolumns=['iron','magnesium',\n'gold','silver'])\n```", "```py\nore1DF + ore2DF\n```", "```py\nore1DF + pd.Series([25,25,25,25], index=['iron', 'magnesium', 'copper', 'silver'])\n```", "```py\nIn [67]: ore1DF[\"add_iron_copper\"] = ore1DF[\"iron\"] + ore1DF[\"copper\"]\n```", "```py\nlogical_df1 = pd.DataFrame({'Col1' : [1, 0, 1], 'Col2' : [0, 1, 1] }, dtype=bool)\nlogical_df2 = pd.DataFrame({'Col1' : [1, 0, 0], 'Col2' : [0, 0, 1] }, dtype=bool)\n```", "```py\nlogical_df1 | logical_df2\n```", "```py\nnp.sqrt(ore1DF)\n```", "```py\nIn [68]: stockData = np.array([[[63.03,61.48,75],\n[62.05,62.75,46],\n[62.74,62.19,53]],\n[[411.90, 404.38, 2.9],\n[405.45, 405.91, 2.6],\n[403.15, 404.42, 2.4]]])\nIn [69]: stockHistoricalPrices = pd.Panel(stockData,\nitems=['FB', 'NFLX'], major_axis=pd.date_range('2/3/2014', periods=3),\nminor_axis=['open price', 'closing price', 'volume'])\nIn [70]: stockHistoricalPrices\nOut[70]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 3 (major_axis) x 3 (minor_axis)\nItems axis: FB to NFLX\nMajor_axis axis: 2014-02-03 00:00:00 to 2014-02-05 00:00:00\nMinor_axis axis: open price to volume\n```", "```py\nUSData = pd.DataFrame(np.array([[249.62 , 8900],\n[ 282.16,12680],\n[309.35,14940]]),\ncolumns=['Population(M)','GDP($B)'],\nindex=[1990,2000,2010])\nChinaData = pd.DataFrame(np.array([[1133.68, 390.28],\n[ 1266.83,1198.48],\n[1339.72, 6988.47]]),\ncolumns=['Population(M)','GDP($B)'],\nindex=[1990,2000,2010])\n```", "```py\nIn [73]: US_ChinaData={'US' : USData, 'China': ChinaData}\nIn [74]: pd.Panel(US_ChinaData)\nOut[74]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 3 (major_axis) x 2 (minor_axis)\nItems axis: US to China\nMajor_axis axis: 1990 to 2010\nMinor_axis axis: Population(M) to GDP($B)\n```", "```py\nIn [75]: mIdx = pd.MultiIndex(levels = [['US', 'China'], [1990,2000, 2010]], labels=[[1,1,1,0,0,0],[0,1,2,0,1,2]])\nIn [76]: ChinaUSDF = pd.DataFrame({'Population(M)' : [1133.68, 1266.83, 1339.72, 249.62, 282.16, 309.35], GDB($B)': [390.28, 1198.48, 6988.47, 8900, 12680,14940]}, index=mIdx)\nIn [77]: ChinaUSDF.to_panel()\nOut[77]:\n<class 'pandas.core.panel.Panel'>\nDimensions: 2 (items) x 2 (major_axis) x 3 (minor_axis)\nItems axis: Population(M) to GDB($B)\nMajor_axis axis: China to US\nMinor_axis axis: 1990 to 2010\n```"]