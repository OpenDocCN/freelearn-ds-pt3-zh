- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploring Streamlit’s Features and Functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is a beginner-friendly tutorial that introduces you to the core
    features and functionalities of the Streamlit Python framework, aiming to help
    you get started with the library quickly and easily. This chapter covers the basic
    concepts of Streamlit, such as creating and customizing widgets, laying out the
    user interface, and adding visualizations and charts.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to create and run Streamlit apps
    and have a solid understanding of the library’s features and capabilities. This
    is the first hands-on step of our exciting journey together!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and launching Streamlit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit features and widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames, plots, and visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date, time, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use the following libraries, packages, and tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`streamlit`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/fcb2bd740a2df7263b4470164805926fee3157a1/Chapter03](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/fcb2bd740a2df7263b4470164805926fee3157a1/Chapter03)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and launching Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we are ready to write our code to create beautiful web applications!
    Where do we start? The first thing we must do is install Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s create a new directory – we will call it `streamlit_course`. Once
    you’re inside it, prepare a new virtual environment by typing the well-known `pipenv
    shell` command. Once you are done running the `pipenv shell` command, you will
    get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1: The streamlit_course virtual environment creation](img/B21147_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: The streamlit_course virtual environment creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Streamlit is very easy – it’s a matter of using a simple instruction,
    as indicated on its official website ([www.streamlit.io](http://www.streamlit.io)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2: Installing Streamlit](img/B21147_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Installing Streamlit'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are using `pipenv` and the `streamlit_course` virtual environment
    that we just created, we have to modify the instruction suggested in *Figure 3**.2*
    slightly, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3: Streamlit installation with pipenv](img/B21147_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Streamlit installation with pipenv'
  prefs: []
  type: TYPE_NORMAL
- en: In this way, Streamlit will be easily installed and `Pipfile` will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create an empty file to be used as our Python script by typing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, in our `streamlit_course` directory, we have three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4: The files in the streamlit_course directory](img/B21147_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: The files in the streamlit_course directory'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have installed Streamlit and we have an empty Python file. Although
    this isn’t much, we are ready to launch our first web application!
  prefs: []
  type: TYPE_NORMAL
- en: 'The instruction to launch Streamlit is very simple – just type `streamlit run
    <python_file_name.py>`, where the Python file in our case is the empty `app.py`
    file we just created. However, since we are in a `pipenv` virtual environment,
    we have to tell `pipenv` that we want to launch something. So, let’s write the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this way, `pipenv` launches Streamlit, which runs the `app.py` file. Our
    browser will open on an empty page, but if we check the address bar carefully,
    we will see that something is running on `localhost:8501`. Our Streamlit web app
    is alive and running on our local machine on its standard `8501` port (if you
    are asked to write your email in the terminal, just press *Enter*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5: Streamlit running on localhost:8501](img/B21147_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Streamlit running on localhost:8501'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, our web app can be improved by adding widgets and elements. Open
    another terminal in our terminator (another tile), enter our virtual environment,
    and run our Sublime Text editor with `"``subl ."`.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit features and widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The very first step has been completed: Streamlit is up and running. What we
    need to do now is add text, widgets, elements, and more to make something beautiful
    that also works correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start populating our web app with nice and useful widgets, we need to write
    some Python code. The best way to do this is to put Sublime Text and our browser
    side by side, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6: Sublime Text and a browser side by side](img/B21147_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: Sublime Text and a browser side by side'
  prefs: []
  type: TYPE_NORMAL
- en: 'This kind of visualization is very convenient because we can immediately see
    any change we make to the code (in real time, as soon as we save our code changes),
    in our editor directly, in the browser by just selecting **Always Rerun** from
    the top-right menu of our web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7: Code changes and Always Rerun](img/B21147_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Code changes and Always Rerun'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s import Streamlit (with `st` as the alias) and start dealing with
    some text. We can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in *Figure 3**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8: Code changes and their effect on the web app](img/B21147_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Code changes and their effect on the web app'
  prefs: []
  type: TYPE_NORMAL
- en: '`st.title` gives back a long string of text. We can use many other text dimensions
    in Sublime Text. For example, we can write and save the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we’ve already selected **Always Rerun**, we’ll immediately see that our
    web app changes in the browser, introducing the header, subheader, text, and write
    text dimensions we wish to visualize:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9: Different text dimensions](img/B21147_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Different text dimensions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Streamlit can even directly manage the markdown. This is quite simple since
    we just have to use `markdown` and pass the text inside the parenthesis. For example,
    we can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this way, we write the word “Streamlit” on the screen as a hyperlink to
    the official Streamlit website. If we wish to put the link directly on the screen,
    to make the URL visible, we can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In Streamlit, we can use HTML in a very simple way – we just need to create
    a variable containing all our HTML code, then put it inside a markdown instruction
    together with the `unsafe_allow_html` argument set to `True`. Let’s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10: Markdown and HTML](img/B21147_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: Markdown and HTML'
  prefs: []
  type: TYPE_NORMAL
- en: See what happens when you set `unsafe_allow_html` to `False`.
  prefs: []
  type: TYPE_NORMAL
- en: Colored textboxes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In terms of text, we can have beautiful textboxes consisting of different colors
    to indicate a warning, an error, and so on. This kind of color code can be very
    useful when we’re building our web application. Let’s take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The first piece of code returns a green box with some text, the second a light
    blue box with text, the third a yellowish box containing text, and the last a
    red box containing the error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11: Colored textboxes](img/B21147_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: Colored textboxes'
  prefs: []
  type: TYPE_NORMAL
- en: Colored textboxes are something really interesting since we can use them to
    advise about something wrong, such as an issue, using the reddish tone, or something
    very good, such as a success case, using a greenish tone. Moreover, we can use
    this feature to give a little vivacity to our text.
  prefs: []
  type: TYPE_NORMAL
- en: Images, audio, and video
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Streamlit, it’s extremely easy to manage multimedia, such as images, audio,
    and video. Starting with images, we need to import the PIL library and then add
    a couple of lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12: The st.image](img/B21147_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: The st.image'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the JPEG image is in the same directory as our `app.py` file.
    If we want, we can change the width and the caption of the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Working with video is not very different – we can put a video file in the same
    directory as our `app.py` file and open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the box, there are buttons for play/pause, volume control, and fullscreen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13: The st.video widget from a file](img/B21147_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: The st.video widget from a file'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also open videos directly from the web by using a URL with the `st.video`
    widget. For example, we can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14: The st.video widget from a URL](img/B21147_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: The st.video widget from a URL'
  prefs: []
  type: TYPE_NORMAL
- en: 'For audio files, we can do more or less the same. We can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that this time, we have to specify the format. Once again, out
    of the box, we get the play/pause button and volume control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15: The st.audio widget](img/B21147_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: The st.audio widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s look at another widget that will be very useful in the next few
    chapters. First up is the “button” widget. So, please comment all the code we’ve
    written so far (we can create a comment by putting `#` at the beginning of the
    line of code we want to ignore), excluding the instruction that imports Streamlit,
    and continue. We can start by writing a simple instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This instruction gives us a beautiful button with a caption stating **Play**.
    However, when we click on it, nothing happens!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16: The st.button widget](img/B21147_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: The st.button widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nothing happens because there is no code related to the button, so things will
    change if we slightly change the previous line of code in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, when the **Play** button is clicked, a beautiful piece of text
    stating **Hello World!** will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17: Event associated with st.button](img/B21147_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: Event associated with st.button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Many other widgets work in the same way, such as `"Checkbox"`. Let’s say we
    write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the result shown in *Figure 3**.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18: The st.checkbox widget](img/B21147_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: The st.checkbox widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'The radio button works a little differently – we have to specify a list of
    options and then decide what happens when we select each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give us the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19: The st.radio widget](img/B21147_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: The st.radio widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, in the selectbox, we need to specify a list of options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We select one of the options (in this case, an Italian city) that will be saved
    in the `city` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20: The st.selectbox widget](img/B21147_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: The st.selectbox widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we want to have a multi-selection. We can use the `multiselect`
    widget in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The coding is very similar to the previous one but this time, we can select
    more than one option. This can be seen in the following figure, where we selected
    two jobs (if we want, we can click on the **x** button to cancel a selected option):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21: The st.multiselect widget](img/B21147_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: The st.multiselect widget'
  prefs: []
  type: TYPE_NORMAL
- en: Multiselect is a very elegant way to make multiple selections, keeping the screen
    clean and functional.
  prefs: []
  type: TYPE_NORMAL
- en: Inputting text and numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another extremely useful function in our web application is *inputting*, which
    is the process of entering some information. In this case, we have many widgets
    available out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: In the `text_input` widget, we only have to specify a label or caption and a
    placeholder – very easy!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything we write will be saved in the `name` variable and printed on the
    screen thanks to `st.text()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22: The st.text_input widget](img/B21147_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: The st.text_input widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same easy way, we can also input numbers. This time, it’s possible to
    write a number directly or use the `st.number_input`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23: The st.number_input widget](img/B21147_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.23: The st.number_input widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving back to text, to input text on more than one line, we can use the `text_area`
    widget, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, this time, a wider text area will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24: The st.text_area widget](img/B21147_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.24: The st.text_area widget'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_area` is the perfect tool when we need to input long text, and it can
    be configured according to our needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another wonderful input widget is the slider, where we just need to specify
    a starting and an ending value to have a nice selector on the screen. The syntax
    is extremely easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25: The st.slider widget](img/B21147_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.25: The st.slider widget'
  prefs: []
  type: TYPE_NORMAL
- en: The slider is quite nice to see and very effective in pursuing its task.
  prefs: []
  type: TYPE_NORMAL
- en: Balloons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A very nice widget is `balloons`. Think of a situation where you want to show
    happiness after something good hashappened. In this case, you can use it by clicking
    on a button, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See what happens after clicking the button!
  prefs: []
  type: TYPE_NORMAL
- en: DataFrames, plots, and visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it’s time to deal with DataFrames, so let’s comment on something and continue
    exploring widgets.
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame is the name that the pandas library gives to its data. When a file,
    such as a CSV file, is imported into pandas, the result will be a DataFrame. We
    can think of a DataFrame as an Excel or Google Sheets table – that is, a piece
    of data made up of columns and rows. Columns are the features or variables and
    rows are the records or cases. So, to keep things simple, we can say that a DataFrame
    is a data structure made up of columns and rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install pandas, with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you followed our suggestion and are using `pipenv` for virtual environments,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using a plain, standard Python installation, then write the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: First of all, please consider that all the files used in this book are available
    in its GitHub repository, including the `auto.csv` file. Now, let’s comment on
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: First, we import pandas, a powerful library for data/datasets management, with
    the `pd` alias. After that, we load the `auto.csv` file into a variable named
    `df` (which stands for DataFrame), and then we visualize the first 10 rows of
    the DataFrame (its head) with the `dataframe` widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26: The st.dataframe widget](img/B21147_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.26: The st.dataframe widget'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, thanks to `st.dataframe`, we can visualize the CSV file in a
    very nice format, with all the columns and rows similar to a Microsoft Excel sheet.
    If we go to the bottom or the right part of it, we can scroll left/right and up/down.
    Moreover, we have the opportunity to maximize the DataFrame!
  prefs: []
  type: TYPE_NORMAL
- en: If we prefer, we can visualize the DataFrame in the *table* format since, out
    of the box, we also have a nice `table` widget. Unfortunately, in this case, it’s
    not possible to scroll our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s say we write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we’ll get the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27: The st.table widget](img/B21147_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.27: The st.table widget'
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, Streamlit can also manage plottings – for example, we can show
    area, bar, and line charts. All we need is a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit, together with the plottings, automatically displays the list (in
    different colors) of all the visualized variables (please note we are using just
    “mpg” and “cylinders”).
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can use the DataFrames we loaded in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll get the following area chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28: The st.area_chart widget](img/B21147_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.28: The st.area_chart widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we’ll get the following bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29: The st.bar_chart widget](img/B21147_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.29: The st.bar_chart widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we’ll get the following line chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30: The st.line_chart widget](img/B21147_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.30: The st.line_chart widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we enter the charts, we can zoom in and out. By clicking on the three dots
    at the top right of each plotting, we can save the charts as PNG files, view the
    source, and perform some other operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.31: Out-of-the-box plotting functions](img/B21147_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.31: Out-of-the-box plotting functions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, as we saw with DataFrames, we can maximize all the charts to see them
    fullscreen:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 3.32: \uFEFFFullscreen plotting](img/B21147_03_32.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.32: Fullscreen plotting'
  prefs: []
  type: TYPE_NORMAL
- en: 'With Streamlit, we can plot much more beautiful graphs using the `matplotlib`
    and `seaborn` Python packages. So, first of all, let’s install these packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If we are in a pure Python environment, we can run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we can import these packages, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to start plotting. Here, we’re plotting a heatmap of the
    correlation matrix of our DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The first instruction creates an empty figure. The second line, leveraging
    `seaborn`, creates a heatmap plotting (with annotations) of the correlation matrix
    coming from the variables in the `df` DataFrame. Finally, the third command plots
    our figure using `matplotlib.pyplot`, which is directly managed by Streamlit.
    Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.33: Heatmap plotting with Seaborn](img/B21147_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.33: Heatmap plotting with Seaborn'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that we have displayed the correlation plot with labels and the
    heatmap with colors and annotations.
  prefs: []
  type: TYPE_NORMAL
- en: Date, time, and more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another very useful element that we can manage out of the box in Streamlit is
    date and time – that is, dates, hours, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to print today’s date on the screen, we just have to write the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the first line simply imports the `datetime` package while the second,
    using Streamlit’s `date_input`, asks the user to select a date. This date will
    be saved in the `today` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.34: The st.date_input widget](img/B21147_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.34: The st.date_input widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with date and time, we can do the same with time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, we are importing `time` and using `time_input`, where we specify
    that the time is 12:30\. On the screen, we can select any time we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.35: The st.time_input widget](img/B21147_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.35: The st.time_input widget'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit is powerful and easy to use, and we can even manage text in JSON or
    programming language formats such as Julia or Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we’ve created a variable called `data` that contains two key-value pairs
    that are displayed on the screen in JSON format using the `st.json` widget – easy
    and clean:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.36: The st.json widget](img/B21147_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.36: The st.json widget'
  prefs: []
  type: TYPE_NORMAL
- en: If we click on the arrow, we can close/minimize the JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Displaying code is also very easy – we simply use `st.code` while specifying
    the programming language as an argument (for Python, this is not necessary since
    it is the default). Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.37: The st.code widget for Python](img/B21147_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.37: The st.code widget for Python'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of Julia, we must specify the programming language, so we can write
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.38: The st.code widget for Julia](img/B21147_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.38: The st.code widget for Julia'
  prefs: []
  type: TYPE_NORMAL
- en: We can use also progress bars and spinners as standard widgets. Let’s see how
    they work.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to create a progress bar that goes from 0 to 100, increasing its
    value by 1 every 0.1 seconds, we can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is very nice. For a faster bar, we can use `time.sleep(0.01)`, while
    for a slower bar, we can use `time.sleep(1)`. This is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.39: The st.progress widget](img/B21147_03_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.39: The st.progress widget'
  prefs: []
  type: TYPE_NORMAL
- en: 'The spinner works more or less in the same way as the progress bar, so we can
    write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Very easily, we can set a starting message of *wait for 10 seconds*, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.40: The st.spinner widget during the waiting time](img/B21147_03_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.40: The st.spinner widget during the waiting time'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can print *Done!* in green (success), like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.41: The st.spinner widget after completion](img/B21147_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.41: The st.spinner widget after completion'
  prefs: []
  type: TYPE_NORMAL
- en: Very nice!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve covered progress bars and spinners, we can close this quick introduction
    to Streamlit’s main functions and widgets, which acted as a crash course for full
    immersion.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored Streamlit’s main out-of-the-box features and widgets.
    We started by creating an empty Python file and launching Streamlit, where we
    saw how to manage its web interface using the “rerun” feature and leverage its
    real-time updating functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we learned how to deal with text in various ways, in terms of size, colors,
    and format. We also explored multimedia widgets, such as images, audio, and video.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of elements, such as buttons, checkboxes, radio buttons, and others, were
    also explained and utilized.
  prefs: []
  type: TYPE_NORMAL
- en: Many different kinds of inputs are supported natively – it’s very easy to input
    text, numbers, dates, time, and so on. Widgets such as text areas or sliders are
    also ready to be used out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw, data plots are extremely easy to create – we can use DataFrames and
    plot bar, line, or area charts with one line of code. Even heatmaps are a clean
    and neat option.
  prefs: []
  type: TYPE_NORMAL
- en: Even formatting text in a programming language style, such as Python or Julia,
    is just a matter of a couple of lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we saw that if we need to wait for some calculation or activity in
    charge of our application, we can use progress bars or spinners to create a nice
    “wait please...” effect on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: All these components are the basic elements that make up the toolbox that we
    are going to use, starting from the next chapter, to build up our real web applications.
    By doing so, we’ll extend our knowledge of Streamlit’s more advanced features!
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Building a Basic Web App for Essential Streamlit Skills'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part 2 delves into the hands-on aspect of Streamlit, focusing on building a
    basic yet robust web application. It starts with the essentials of configuring
    the Streamlit environment and managing packages, laying a practical foundation
    for app development. The section progresses to demonstrate how to effectively
    organize and display content, incorporating advanced elements such as columns,
    expanders, and **natural language processing** (**NLP**) techniques. You will
    then explore the implementation of NLP for text analysis and processing, applying
    these skills to enhance your web application. The part concludes with a comprehensive
    guide on sharing and deploying these applications on the cloud using Streamlit
    Share, equipping you with the skills to make your apps accessible to a wider audience.
    This part is designed to boost your confidence in your Streamlit skills, preparing
    you for more complex app development in the subsequent parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21147_04.xhtml#_idTextAnchor045), *Streamlit Essentials – Configuring
    the Environment, Managing Packages, and More*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21147_05.xhtml#_idTextAnchor053), *Organizing and Displaying
    Content with Columns, Expanders, and NLP Techniques*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21147_06.xhtml#_idTextAnchor068), *Implementing NLP Techniques
    for Text Analysis and Processing in Streamlit*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21147_07.xhtml#_idTextAnchor080), *Sharing and Deploying Your
    Apps on the Cloud Using Streamlit Share*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
