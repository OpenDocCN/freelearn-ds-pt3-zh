- en: The pandas Library Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we examine the various libraries that are available to pandas
    users. This chapter is intended to be a short guide to help the user to navigate
    and find their way around the various modules and libraries that pandas provides.
    It gives a breakdown of how the library code is organized, and it gives a brief
    description of the various modules. It will be most valuable to users who are
    interested in seeing the inner workings of pandas , as well as to those who wish
    to make contributions to the code base. We will also briefly demonstrate how you
    can improve performance using Python extensions. The various topics that will
    be discussed are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the pandas library hierarchy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description of pandas modules and files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving performance using Python extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the pandas file hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally, upon installation, pandas is installed as a Python module in a standard
    location for third-party Python modules. In the following table, you will see
    the standard installation location for Unix/ macOS and the Windows platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Platform** | **Standard installation location** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| Unix/macOS | `prefix/lib/pythonX.Y/site-packages` | `/usr/local/lib/python2.7/site-packages`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | `prefix\Lib\site-packages` | `C:\Python27\Lib\site-packages` |'
  prefs: []
  type: TYPE_TB
- en: 'If Python installation was done with Anaconda, then the pandas module can be
    found in the Anaconda directory, within a similar file path: `Anaconda3\pkgs\pandas-0.23.4-py37h830ac7b_0\Lib\site-packages\pandas`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have had a look at the module on third-party Python modules, we
    will understand the file hierarchy. There are eight types of file in the installed
    Pandas library. The installed files follow a specific hierarchy, which is described
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas/core`: This contains files for fundamental data structures, such as
    Series/DataFrames and related functionalities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas/src`: This contains Cython and C code for implementing fundamental
    algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas/io`: This contains input/output tools for handling different file formats,
    such as flat files, Excel, HDF5, and SQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas/tools`: This contains auxiliary data algorithms, merge and join routines,
    concatenation, pivot tables, and more. This module primarily serves data-manipulation
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas/sparse`: This contains sparse versions of data structures, such as
    series, DataFrame, Panels, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas/stats`: This contains linear and panel regression, moving window regression,
    and several other statistical functions. This should be replaced by functionality
    in statsmodels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas/util`: This contains utilities and development and testing tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas/rpy`: This contains the RPy2 interface for connecting to R, thereby
    widening the scope of analytical operations on data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information, see: [http://pandas.pydata.org/developers.html](http://pandas.pydata.org/developers.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Description of pandas modules and files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we provide brief descriptions of the various sub-modules and
    files that make up the pandas library.
  prefs: []
  type: TYPE_NORMAL
- en: pandas/core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The module contains the core submodules of pandas. They are discussed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`api.py`: This imports some key modules and warnings for later use, such as
    indexing, `groupby`, and reshaping functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apply.py`: This module contains classes that help to apply a function to a
    DataFrame or series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arrays`: This isolates pandas'' exposure to `numpy`—that is, all direct `numpy`
    usage. The `base.py` submodule of array handles all array-oriented operations,
    such as the `ndarray` value, shape, and `ndim`, while the `categorical.py` submodule
    caters specifically for categorical values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.py`: This defines fundamental classes such as `StringMixin` and `PandasObject`,
    which is the base class for various pandas objects, such as `Period`, `PandasSQLTable`,
    `sparse.array.SparseArray`/`SparseList`, `internals.Block`, `internals.BlockManager`,
    `generic.NDFrame`, `groupby.GroupBy`, `base.FrozenList`, `base.FrozenNDArray`,
    `io.sql.PandasSQL`, `io.sql.PandasSQLTable`, `tseries.period.Period`, `FrozenList`,
    `FrozenNDArray: IndexOpsMixin`, and `DatetimeIndexOpsMixin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common.py`: This defines common utility methods for handling data structures.
    For example, the `isnull` object detects missing values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.py`: This is the module for handling package-wide configurable objects.
    It defines the following classes: `OptionError`, `DictWrapper`, `CallableDynamicDoc`,
    `option_context`, and `config_init`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetools.py`: This is a collection of functions that deal with dates in Python.
    It also utilizes some functions from the `tseries` module of pandas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frame.py`: This defines the pandas DataFrame class and its various methods.
    DataFrame inherits from NDFrame (see the following). It borrows functions from
    several submodules under the `pandas-core` module to define the functional aspects
    of a DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generic.py`: This defines the generic NDFrame base class, which is a base
    class for pandas DataFrame, series, and panel classes. NDFrame is derived from
    `PandasObject`, which is defined in `base.py`. An NDFrame can be regarded as an
    N-dimensional version of a pandas DataFrame. For more information on this, go
    to [http://nullege.com/codes/search/pandas.core.generic.NDFrame](http://nullege.com/codes/search/pandas.core.generic.NDFrame).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`categorical.py`: This defines categorical, which is a class that derives from
    `PandasObject` and represents categorical variables ''a'' la R/S-plus. (We will
    expand your knowledge on this a bit more later).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupby.py`: This defines various classes that enable the `groupby` functionality:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splitter classes**: This includes `DataSplitter`, `ArraySplitter`, `SeriesSplitter`,
    `FrameSplitter`, and `NDFrameSplitter`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grouper/grouping classe**s: This includes `Grouper`, `GroupBy`, `BaseGrouper`,
    `BinGrouper`, `Grouping`, `SeriesGroupBy`, and `NDFrameGroupBy`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ops.py`: This defines an internal API for arithmetic operations on `PandasObjects`.
    It defines functions that add arithmetic methods to objects. It defines a `_create_methods`
    metamethod, which is used to create other methods using arithmetic, comparison,
    and Boolean method constructors. The `add_methods` method takes a list of new
    methods, adds them to the existing list of methods, and binds them to their appropriate
    classes. The `add_special_arithmetic_methods`, `add_flex_arithmetic_methods`,
    `call _create_methods`, and `add_methods` are used to add arithmetic methods to
    a class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It defines the `_TimeOp` class, which is a wrapper for datetime-related arithmetic
    operations. It contains wrapper functions for arithmetic, comparison, and Boolean
    operations on series, DataFrame, and panel functions: `_arith_method_SERIES(..)`,
    `_comp_method_SERIES(..)`, `_bool_method_SERIES(..)`, `_flex_method_SERIES(..)`,
    `_arith_method_FRAME(..)`, `_comp_method_FRAME(..)`, `_flex_comp_method_FRAME(..)`,
    `_arith_method_PANEL(..)`, and `_comp_method_PANEL(..)`.
  prefs: []
  type: TYPE_NORMAL
- en: '`index.py`: This defines the index class and its related functionality. Index
    is used by all pandas objects—series, DataFrame, and panel—to store axis labels.
    Underneath it is an immutable array that provides an ordered set that can be sliced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indexing.py`: This module contains a series of functions and classes that
    make multi-indexing easier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`missing.py`: This defines techniques such as masking and interpolation to
    handle missing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`internals.py`: This defines multiple object classes. These are listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Block`: This is a homogeneously typed N-dimensional `numpy.ndarray` object
    with additional functionality for pandass—for example, it uses `__slots__` to
    restrict the attributes of the object to `ndim`, `values`, and `_mgr_locs`. It
    acts as the base class for other Block subclasses.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NumericBlock`: This is the base class for blocks with the numeric type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FloatOrComplexBlock`: This is the base class for `FloatBlock` and `ComplexBlock`
    that inherits from `` `NumericBlock` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ComplexBlock`: This is the class that handles the Block objects with the complex
    type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FloatBlock`: This is the class that handles the Block objects with the float
    type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IntBlock`: This is the class that handles the Block objects with the integer
    type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimeDeltaBlock`, `BoolBlock`, and `DatetimeBlock`: These are the block classes
    for timedelta, Boolean, and datetime.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ObjectBlock`: This is the class that handles block objects for user-defined
    objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SparseBlock`: This is the class that handles sparse arrays of the same type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BlockManager`: This is the class that manages a set of block objects. It is
    not a public API class.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SingleBlockManager`: This is the class that manages a single block.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JoinUnit`: This is the utility class for block objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nanops.py`: This submodule has a set of classes and functionalities for exclusively
    handling NaN values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ops.py`: This defines arithmetic operations for pandas objects. It is not
    a public API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`panel.py`, `panel4d.py`, and `panelnd.py`: These provide the functionality
    for the pandas panel object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample.py`: This defines a custom `groupby` class for time-interval grouping
    and aggregation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`series.py`: This defines the pandas Series class and the various methods that
    Series inherits from NDFrame and `IndexOpsMixin` to accommodate 1-dimensional
    data structures and 1-dimensional time series data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sorting.py`: This defines all necessary utilities for sorting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sparse.py`: This defines the import for handling sparse data structures. Sparse
    data structures are compressed in that data points matching NaN or missing values
    are omitted. For more information on this, go to [http://pandas.pydata.org/pandas-docs/stable/sparse.html](http://pandas.pydata.org/pandas-docs/stable/sparse.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strings.py`: These have various functions, such as `str_replace`, `str_contains`,
    and `str_cat`, for handling strings manipulations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`window.py`: This helps in the windowing of data structures and computing aggregates
    in a rolling window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram gives an overview of the structure of the Pandas core:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcfb4a6b-c2cc-4288-acd4-85c133bf8dee.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's move on to the next submodule.
  prefs: []
  type: TYPE_NORMAL
- en: pandas/io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module contains various modules for data I/O. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`api.py`: This defines various imports for the data I/O API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common.py`: This defines the common functionality for the I/O API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clipboards.py`: This contains cross-platform clipboard methods to enable the
    copy and paste functions from the keyboard. The pandas I/O API includes functions
    such as `pandas.read_clipboard()` and `pandas.to_clipboard(..)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_converters.py`: This defines date conversion functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`excel.py`: This module parses and converts Excel data. This defines the `ExcelFile`
    and `ExcelWriter` classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feather_format.py`: This module reads and writes data in Feather format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gbq.py` : This is the module for Google''s BigQuery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`html.py`: This is the module for dealing with HTML I/O.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`json.py`: This is the module for dealing with JSON I/O in pandas. This defines
    the `Writer`, `SeriesWriter`, `FrameWriter`, `Parser`, `SeriesParser`, and `FrameParser`
    classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msgpack`: This module reads and writes data to `msgpack` format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packer.py`: This is an `msgpack` serializer support for reading and writing
    pandas data structures to disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parquet.py`: This module reads and writes data in Parquet format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parsers.py`: This is the module that defines various functions and classes
    that are used in parsing and processing files to create pandas DataFrames. All
    of the three `read_*` functions discussed in the following list have multiple
    configurable options for reading. For more details, see [http://bit.ly/1EKDYbP](http://bit.ly/1EKDYbP):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_csv(..)`: This defines the `pandas.read_csv()` function that is used
    to read the contents of a CSV file into a DataFrame.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_table(..)`: This reads a tab-separated table file into a DataFrame.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_fwf(..)`: This reads a fixed-width format file into a DataFrame.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextFileReader`: This is the class that is used for reading text files.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ParserBase`: This is the base class for parser objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CParserWrapper`, `PythonParser`: These are the parser for C and Python respectively.
    They both inherit from `ParserBase`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FixedWidthReader`: This is the class for reading fixed-width data. A fixed-width
    data file contains fields in specific positions within the file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FixedWithFieldParser`: This is the class for parsing fixed-width fields that
    have been inherited from `PythonParser`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pickle.py`: This provides methods for pickling (serializing) pandas objects.
    These are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_pickle(..)`: This serializes an object to file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_pickle(..)`: This reads serialized objects from a file into a pandas
    object. It should only be used with trusted sources.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pytables.py`: This is an interface for PyTables module for reading and writing
    pandas data structures to files on disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql.py`: This is a collection of classes and functions that enable the retrieval
    of data from relational databases that attempts to be database-agnostic. These
    classes and functions are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PandasSQL`: This is the base class for interfacing pandas with SQL. It provides
    dummy `read_sql` and `to_sql` methods that must be implemented by subclasses.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PandasSQLAlchemy`: This is the subclass of `PandasSQL` that enables conversions
    between DataFrame and SQL databases using SQLAlchemy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PandasSQLTable`: This maps pandas tables (DataFrame) to SQL tables.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandasSQL_builder(..)`: This returns the correct PandasSQL subclass based
    on the provided parameters.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PandasSQLTableLegacy`: This class is the legacy support version of `PandasSQLTable.`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PandasSQLLegacy`: This class is the legacy support version of `PandasSQLTable`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_schema(..)`: This gets the SQL database table schema for a given frame.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_sql_table(..)`: This reads an SQL database table into a DataFrame.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_sql_query(..)`: This reads an SQL query into a DataFrame.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_sql(..)`: This reads an SQL query/table into a DataFrame.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stata.py`: This contains tools for processing Stata files into pandas DataFrames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sas`: This module contains submodules that help to read data from SAS outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S3.py`: This module provides remote connectivity to S3 buckets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas/tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The details of the module are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plotting.py`: This serves as a wrapper for the plotting module and has been
    deprecated in the recent version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge.py`: This provides functions for combining series, DataFrame, and panel
    objects, such as `merge(..)` and `concat(..)`, and has been deprecated in the
    recent version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas/util
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This `pandas/util` is the module that provides utility functionalities. The
    details of this module are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`testing.py`: This provides the `assertion`, `debug`, `unit test`, and other
    classes/functions for use in testing. It contains many special assert functions
    that make it easier to check whether series, DataFrame, or panel objects are equivalent.
    Some of these functions include `assert_equal(..)`, `assert_series_equal(..)`,
    `assert_frame_equal(..)`, and `assert_panelnd_equal(..)`. The `pandas.util.testing`
    module is especially useful to the contributors of the pandas code base. It defines
    a `util.TestCase` class. It also provides utilities for handling locales, console
    debugging, file cleanup, comparators, and so on for testing by potential code
    base contributors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doctools.py`: This submodule has the `TablePlotter` class, which helps to
    define a layout for DataFrames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validators.py`: This submodule helps to validate arguments passed to functions.
    For instance, it helps to evaluate the argument length, the default values, and
    argument values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print_versions.py`: This defines the `get_sys_info()` function, which returns
    a dictionary of systems information and the `show_versions(..)` function, which
    displays the versions of available Python libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`misc.py`: This defines a couple of miscellaneous utilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decorators.py`: This defines some decorator functions and classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The substitution and appender classes are decorators that perform substitution
    and appending on function docstrings. For more information on Python decorators,
    go to [http://www.artima.com/weblogs/viewpost.jsp?thread=240808](http://www.artima.com/weblogs/viewpost.jsp?thread=240808).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test_decorators.py`: This submodule provides decorators to test objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas/tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This `pandas/tests` is the module that provides many tests for various objects
    in pandas. The names of the specific library files are fairly self-explanatory,
    and I will not go into further details here; instead, I invite the reader to explore.
  prefs: []
  type: TYPE_NORMAL
- en: pandas/compat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Functionalities related to compatibility are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chainmap.py` and `chainmap_impl.py`: These provide a `ChainMap` class that
    can group multiple `dicts` or mappings to produce a single view that can be updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pickle_compat.py`: This provides functionality for pickling pandas objects
    in versions that are earlier than 0.12.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas/computation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This `pandas/computation` is the module that provides functionality for computation
    and is discussed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`expressions.py`: This provides fast expression evaluation through `numexpr`.
    The `numexpr` function is used to accelerate certain numerical operations. It
    uses multiple cores as well as smart chunking and caching speedups. It defines
    the `evaluate(..)` and `where(..)` methods. This module has been deprecated in
    the most recent version of pandas; the alternative usage will be through `pandas.get_option`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on `numexpr`, go to [https://code.google.com/p/numexpr/](https://code.google.com/p/numexpr/).
    For information on the usage of this module, go to [http://pandas.pydata.org/pandas-docs/version/0.15.0/computation.html](http://pandas.pydata.org/pandas-docs/version/0.15.0/computation.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas/plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pandas/plotting` is the module that takes care of all of the plotting
    functionalities pandas offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`compat.py`: This module checks for version compatibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`converter.py`: This module helps process datetime values for plotting. It
    helps to execute functions such as autoscaling of time series axes and formatting
    ticks for datetime axes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`core.py`: This defines classes that help in creating plots, such as bar plots,
    scatter plots, hex bin plots, and box plots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`misc.py`: This provides a set of plotting functions that take a series or
    DataFrame as an argument. This module contains the following submodules for performing
    miscellaneous tasks, such as plotting scatter matries and Andrews curve:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scatter_matrix(..)`: This draws a matrix of scatter plots.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`andrews_curves(..)`: This plots multivariate data as curves that are created
    using samples as coefficients for a Fourier series.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parallel_coordinates(..)`: This is a plotting technique that allows you to
    see clusters in data and visually estimate statistics.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lag_plot(..)`: This is used to check whether a dataset or a time series is
    random.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autocorrelation_plot(..)`: This is used for checking randomness in a time
    series.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap_plot(..)`: This plot is used to determine the uncertainty of a statistical
    measure, such as mean or median, in a visual manner'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radviz(..)`: This plot is used to visualize multivariate data.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.py`: This provides a set of styling options for the plot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeseries.py`: This defines auxiliary classes for time series plots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tools.py`: This contains some helper functions that create a table layout
    from DataFrames and series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas/tseries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section deals with the `pandas/tseries` module, which gives pandas its
    functionality to work with time series data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`api.py`: This is a set of convenience imports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`converter.py`: This defines a set of classes that are used to format and convert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime`: Upon importing pandas, this registers a set of unit converters
    with `matplotlib`. This is done via the `register()` function, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`Converter`: This class includes `TimeConverter`, `PeriodConverter`, and `DateTimeConverter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Formatters`: This class includes `TimeFormatter`, `PandasAutoDateFormatter`,
    and `TimeSeries_DateFormatter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Locators`: This class includes `PandasAutoDateLocator`, `MilliSecondLocator`,
    and `TimeSeries_DateLocator`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Formatter` and `Locator` classes are used for handling ticks in `matplotlib`
    plotting.
  prefs: []
  type: TYPE_NORMAL
- en: '`frequencies.py`: This defines the code for specifying frequencies—daily, weekly,
    quarterly, monthly, annual, and so on—of time series objects. This submodule depends
    on the `dtypes` submodule of the pandas/core module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`holiday.py`: This defines functions and classes for handling holidays—`Holiday`,
    `AbstractHolidayCalendar`, and `USFederalHolidayCalendar` are among the classes
    defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`offsets.py`: This defines various classes, including offsets that deal with
    time-related periods. These classes are explained as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateOffset`: This is an interface for classes that provide the time period
    functionality, such as `Week`, `WeekOfMonth`, `LastWeekOfMonth`, `QuarterOffset`,
    `YearOffset`, `Easter`, `FY5253`, and `FY5253Quarter`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BusinessMixin`: This is the mixin class for business objects to provide functionality
    with time-related classes. This is inherited by the `BusinessDay` class. The `BusinessDay`
    subclass is derived from `BusinessMixin` and `SingleConstructorOffset`, and provides
    an offset on business days.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MonthOffset`: This is the interface for classes that provide the functionality
    for month time periods, such as `MonthEnd`, `MonthBegin`, `BusinessMonthEnd`,
    and `BusinessMonthBegin`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MonthEnd` and `MonthBegin`: These provide a date offset of one month at the
    end or the beginning.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BusinessMonthEnd` and `BusinessMonthBegin`: These provide a date offset of
    one month at the end or the beginning of a business day calendar.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YearOffset`: This offset is subclassed by classes that provide year- period
    functionality—`YearEnd`, `YearBegin`, `BYearEnd`, and `BYearBegin`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YearEnd` and `YearBegin`: These provide a date offset of one year at the end
    or the beginning.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BYearEnd` and `BYearBegin`: These provide a date offset of one year at the
    end or the beginning of a business day calendar.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Week`: This provides an offset of one week.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WeekDay`: This provides mapping from a weekday (for example, Tue) to any day
    of the week (for example, =2).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WeekOfMonth` and `LastWeekOfMonth`: This describes dates in a week of the
    month.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QuarterOffset`: This is subclassed by classes that provide quarterly period
    functionality—`QuarterEnd`, `QuarterrBegin`, `BQuarterEnd`, and `BQuarterBegin`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QuarterEnd`, `QuarterrBegin`, `BQuarterEnd`, and `BQuarterBegin`: These are
    the same as for `Year*` classes, except the period is a quarter instead of a year.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FY5253` and `FY5253Quarter`: These classes describe a 52- and 53-week fiscal
    year respectively. This is also known as a 4-4-5 calendar.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Easter`: This is `DateOffset` for the Easter holiday.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tick`: This is the base class for the time unit classes, such as `Day`, `Hour`,
    `Minute`, `Second`, `Milli`, `Micro`, and `Nano`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plotting.py`: This imports the `tsplot(..)` submodule from the `pandas-plotting`
    module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will see how we can improve the performance of Python codes using Python
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Improving performance using Python extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the gripes of Python and pandas users is that the ease of use and expressiveness
    of the language and module comes with a significant downside—the performance.
    This happens especially when it comes to numeric computing.
  prefs: []
  type: TYPE_NORMAL
- en: According to programming benchmark standards, Python is often slower than compiled
    languages, such as C/C++, for many algorithms or data structure operations. An
    example of this would be binary-tree operations. In one simulation experiment,
    Python3 ran 104 times slower than the fastest C++ implementation of an *n*-body
    simulation calculation.
  prefs: []
  type: TYPE_NORMAL
- en: So, how can we solve this legitimate, yet vexing problem? We can mitigate this
    slowness in Python while maintaining the things that we like—clarity and productivity.
    This can be done by writing the parts of our code that are performance-sensitive-for
    example, numeric processing, algorithms in C/C++-and having them called by our
    Python code by writing a Python extension module. For more details, go to [http://docs.python.org/2/extending/extending.html](http://docs.python.org/2/extending/extending.html).
  prefs: []
  type: TYPE_NORMAL
- en: Python extension modules enable us to make calls out to user-defined C/C++ code
    or library functions from Python, which enables us to boost our code performance
    and benefit from the ease of using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help us to understand what a Python extension module is, let''s consider
    what happens in Python when a module has been imported. An import statement *imports*
    a module, but what does this really mean? There are three possibilities, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Some Python extension modules are linked to the interpreter when it is built.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An import causes Python to load a `.pyc` file into memory. The `.pyc` files
    contain Python `bytecode`, as shown in the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The import statement causes a Python extension module to be loaded into memory.
    The `.``so` (shared object) file is comprised of machine code, as shown in the
    following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will focus on the third possibility as this is the most common. Even though
    we are dealing with a binary-shared object compiled from C, we can import it as
    a Python module. This shows the power of Python extensions—applications can import
    modules from Python machine code or machine code and the interface is the same.
    Cython and SWIG are the two most popular methods of writing extensions in C and
    C++. In writing an extension, we wrap up C/C++ machine code and turn it into Python
    extension modules that behave like pure Python code. In this brief discussion,
    we will only focus on Cython, as it was designed specifically for Python.
  prefs: []
  type: TYPE_NORMAL
- en: Cython is a superset of Python that was designed to significantly improve Python's
    performance by allowing us to call externally compiled code in C/C++, as well
    as declare types on variables.
  prefs: []
  type: TYPE_NORMAL
- en: The Cython command generates an optimized C/C++ source file from a Cython source
    file and compiles this optimized C/C++ source into a Python extension module.
    It offers built-in support for NumPy and combines C's performance with Python's
    usability.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will give a quick demonstration of how we can use Cython to significantly
    speed up our code. Let''s define a simple Fibonacci function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using the `timeit` module, we see that it takes 18.2 µs per loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now rewrite the function in Cython, specifying types for the variables
    by going through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we import the Cython magic function to iPython as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we rewrite our function in Cython, specifying types for our variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s time our new Cython function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the Cython version is 57 times faster than the pure Python version!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For more information on writing Python extensions using Cython/SWIG or other
    options, please refer to the following sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas documentation, entitled *Enhancing Performance*, at [http://pandas.pydata.org/pandas-docs/stable/enhancingperf.html](http://pandas.pydata.org/pandas-docs/stable/enhancingperf.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ScipPy lecture notes, entitled *Interfacing with C*, at [https://scipy-lectures.github.io/advanced/interfacing_with_c/interfacing_with_c.html](https://scipy-lectures.github.io/advanced/interfacing_with_c/interfacing_with_c.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cython documentation at [http://docs.cython.org/index.html](http://docs.cython.org/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SWIG documentation at [http://www.swig.org/Doc2.0/SWIGDocumentation.html](http://www.swig.org/Doc2.0/SWIGDocumentation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize this chapter, we took a tour of the library hierarchy of pandas
    in an attempt to illustrate the internal guts of the library. This understanding
    will be useful for building custom modules from pandas code or improving the functionalities
    of pandas as an open source contributor. We also touched on the benefits of speeding
    up our code performance by using a Python extension module.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how pandas compares to other data analysis
    tools in terms of various analysis operations.
  prefs: []
  type: TYPE_NORMAL
