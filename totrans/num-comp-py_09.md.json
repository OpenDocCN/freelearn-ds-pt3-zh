["```py\npip install beautifulsoup4\n```", "```py\npip install requests\n```", "```py\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Specify the url\nurl = \"https://www.bls.gov/emp/ep_table_001.htm\"\n\n# Query the website and get the html response\nresponse = requests.get(url)\n\n# Parse the returned html using BeautifulSoup\nbs = BeautifulSoup(response.text)\n\n# Select the table header by CSS selector\nthead = bs.select(\"#bodytext > table > thead\")[0]\n\n# Select the table body by CSS selector\ntbody = bs.select(\"#bodytext > table > tbody\")[0]\n\n# Make sure the code works\nprint(thead)\n```", "```py\n<thead> <tr> <th scope=\"col\"><p align=\"center\" valign=\"top\"><strong>Educational attainment</strong></p></th> <th scope=\"col\"><p align=\"center\" valign=\"top\">Unemployment rate (%)</p></th> <th scope=\"col\"><p align=\"center\" valign=\"top\">Median usual weekly earnings ($)</p></th> </tr> </thead>\n```", "```py\n# Get the column names\nheaders = []\n\n# Find all header columns in <thead> as specified by <th> html tags\nfor col in thead.find_all('th'):\n    headers.append(col.text.strip())\n\n# Dictionary of lists for storing parsed data\ndata = {header:[] for header in headers}\n```", "```py\nimport pandas as pd\n\n# Parse the rows in table body\nfor row in tbody.find_all('tr'):\n    # Find all columns in a row as specified by <th> or <td> html tags\n    cols = row.find_all(['th','td'])\n\n    # enumerate() allows us to loop over an iterable, \n    # and return each item preceded by a counter\n    for i, col in enumerate(cols):\n        # Strip white space around the text\n        value = col.text.strip()\n\n        # Try to convert the columns to float, except the first column\n        if i > 0:\n            value = float(value.replace(',','')) # Remove all commas in \n            # string\n\n        # Append the float number to the dict of lists\n        data[headers[i]].append(value)\n\n# Create a dataframe from the parsed dictionary\ndf = pd.DataFrame(data)\n\n# Show an excerpt of parsed data\ndf.head()\n```", "```py\nimport matplotlib\nmatplotlib.use('SVG') # Change to SVG backend\nimport matplotlib.pyplot as plt\nimport textwrap # Standard library for text wraping\n\n# Create a figure\nfig, ax = plt.subplots(figsize=(6,7))\n\n# Create a list of x ticks positions\nind = range(df.shape[0])\n\n# Plot a bar chart of median usual weekly earnings by educational\n# attainments\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\n\n# Set the x-axis label\nax.set_xlabel('Median weekly earnings (USD)')\n\n# Label the x ticks\n# The tick labels are a bit too long, let's wrap them in 15-char lines\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\n\n# Give extra margin at the bottom to display the tick labels\nfig.subplots_adjust(left=0.3)\n\n# Save the figure in SVG format\nplt.savefig(\"test.svg\")\n```", "```py\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport textwrap # Standard library for text wraping\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\n\n# Specify the url\nurl = \"https://www.bls.gov/emp/ep_table_001.htm\"\n\n# Query the website and get the html response\nresponse = requests.get(url)\n\n# Parse the returned html using BeautifulSoup\nbs = BeautifulSoup(response.text)\n\n# Select the table header by CSS selector\nthead = bs.select(\"#bodytext > table > thead\")[0]\n\n# Select the table body by CSS selector\ntbody = bs.select(\"#bodytext > table > tbody\")[0]\n\n# Get the column names\nheaders = []\n\n# Find all header columns in <thead> as specified by <th> html tags\nfor col in thead.find_all('th'):\n    headers.append(col.text.strip())\n\n# Dictionary of lists for storing parsed data\ndata = {header:[] for header in headers}\n\n# Parse the rows in table body\nfor row in tbody.find_all('tr'):\n    # Find all columns in a row as specified by <th> or <td> html tags\n    cols = row.find_all(['th','td'])\n\n    # enumerate() allows us to loop over an iterable, \n    # and return each item preceded by a counter\n    for i, col in enumerate(cols):\n        # Strip white space around the text\n        value = col.text.strip()\n\n        # Try to convert the columns to float, except the first column\n        if i > 0:\n            value = float(value.replace(',','')) # Remove all commas in \n            # string\n\n        # Append the float number to the dict of lists\n        data[headers[i]].append(value)\n\n# Create a dataframe from the parsed dictionary\ndf = pd.DataFrame(data)\n\n# Create a figure\nfig, ax = plt.subplots(figsize=(6,7))\n\n# Create a list of x ticks positions\nind = range(df.shape[0])\n\n# Plot a bar chart of median usual weekly earnings by educational\n# attainments\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\n\n# Set the x-axis label\nax.set_xlabel('Median weekly earnings (USD)')\n\n# Label the x ticks\n# The tick labels are a bit too long, let's wrap them in 15-char lines\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\n\n# Give extra margin at the bottom to display the tick labels\nfig.subplots_adjust(left=0.3)\n\n# Show the figure in a GUI\nplt.show()\n```", "```py\n# Import Matplotlib radio button widget\nfrom matplotlib.widgets import RadioButtons\n\n# Create axes for holding the radio selectors.\n# supply [left, bottom, width, height] in normalized (0, 1) units\nbax = plt.axes([0.3, 0.9, 0.4, 0.1])\nradio = RadioButtons(bax, ('Weekly earnings', 'Unemployment rate'))\n\n# Define the function for updating the displayed values\n# when the radio button is clicked\ndef radiofunc(label):\n    # Select columns from dataframe, and change axis label depending on\n    # selection\n    if label == 'Weekly earnings':\n        data = df[\"Median usual weekly earnings ($)\"]\n        ax.set_xlabel('Median weekly earnings (USD)')\n    elif label == 'Unemployment rate':\n        data = df[\"Unemployment rate (%)\"]\n        ax.set_xlabel('Unemployment rate (%)')\n\n    # Update the bar heights\n    for i, rect in enumerate(rects):\n        rect.set_width(data[i])\n\n    # Rescale the x-axis range\n    ax.set_xlim(xmin=0, xmax=data.max()*1.1)\n\n    # Redraw the figure\n    plt.draw()\n\n# Attach radiofunc to the on_clicked event of the radio button\nradio.on_clicked(radiofunc)\n```", "```py\n# Import the interactive backend for Jupyter notebook\n%matplotlib notebook\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport textwrap\n\nfig, ax = plt.subplots(figsize=(6,7))\nind = range(df.shape[0])\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\nax.set_xlabel('Median weekly earnings (USD)')\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\nfig.subplots_adjust(left=0.3)\n\n# Show the figure using interactive notebook backend\nplt.show()\n```", "```py\npip install plotly\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, enable_mpl_offline, iplot_mpl\n\n# Plot offline in Jupyter Notebooks, not required for standalone script\n# Note: Must be called before any plotting actions\ninit_notebook_mode()\n\n# Convert mpl plots to locally hosted HTML documents, not required if you\n# are a registered plot.ly user and have a API key\nenable_mpl_offline()\n\n# Create two subplots with shared x-axis\nfig, axarr = plt.subplots(2, sharex=True)\n\n# The code for generating \"df\" is skipped for brevity, please refer to the\n# \"Tkinter-based backend\" section for details of generating \"df\"\nind = np.arange(df.shape[0]) # the x locations for the groups\nwidth = 0.35\n\n# Plot a bar chart of the weekly earnings in the first axes\naxarr[0].bar(ind, df[\"Median usual weekly earnings ($)\"], width)\n\n# Plot a bar chart of the unemployment rate in the second axes\naxarr[1].bar(ind, df[\"Unemployment rate (%)\"], width)\n\n# Set the ticks and labels\naxarr[1].set_xticks(ind)\n# Reduce verbosity of labels by removing \" degree\"\naxarr[1].set_xticklabels([value.replace(\" degree\",\"\") for value in df[\"Educational attainment\"]])\n\n# Offline Interactive plot using plot.ly\n# Note: import and use plotly.offline.plot_mpl instead for standalone\n# Python scripts\niplot_mpl(fig)\n```", "```py\nIOPub data rate exceeded. The notebook server will temporarily stop sending output to the client in order to avoid crashing it.\nTo change this limit, set the config variable\n--NotebookApp.iopub_data_rate_limit.\n```", "```py\njupyter notebook --NotebookApp.iopub_data_rate_limit=1.0e10\n```", "```py\nsudo apt-get install ffmpeg\n```", "```py\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```py\nbrew install ffmpeg\n```", "```py\nimport textwrap \nimport matplotlib.pyplot as plt\nimport random\n# Matplotlib animation module\nfrom matplotlib import animation\n# Used for generating HTML video embed code\nfrom IPython.display import HTML\n\n# Adapted from previous example, codes that are modified are commented\nfig, ax = plt.subplots(figsize=(6,7))\nind = range(df.shape[0])\nrects = ax.barh(ind, df[\"Median usual weekly earnings ($)\"], height=0.5)\nax.set_xlabel('Median weekly earnings (USD)')\nylabels=[textwrap.fill(label,15) for label in df[\"Educational attainment\"]]\nax.set_yticks(ind)\nax.set_yticklabels(ylabels)\nfig.subplots_adjust(left=0.3)\n\n# Change the x-axis range\nax.set_xlim(0,7600)\n```", "```py\n# Add a text annotation to show the current year\ntitle = ax.text(0.5,1.05, \"Median weekly earnings (USD) in 2016\", \n                bbox={'facecolor':'w', 'alpha':0.5, 'pad':5},\n                transform=ax.transAxes, ha=\"center\")\n\n# Animation related stuff\nn=30 #Number of frames\n\n# Function for animating Matplotlib objects\ndef animate(frame):\n    # Simulate 5% annual pay rise \n    data = df[\"Median usual weekly earnings ($)\"] * (1.05 ** frame)\n\n    # Update the bar heights\n    for i, rect in enumerate(rects):\n        rect.set_width(data[i])\n\n    # Update the title\n    title.set_text(\"Median weekly earnings (USD) in {}\".format(2016+frame))\n\n    return rects, title\n\n# Call the animator. Re-draw only the changed parts when blit=True. \n# Redraw all elements when blit=False\nanim=animation.FuncAnimation(fig, animate, blit=False, frames=n)\n\n# Save the animation in MPEG-4 format\nanim.save('test.mp4')\n\n# OR--Embed the video in Jupyter notebook\nHTML(anim.to_html5_video())\n```"]