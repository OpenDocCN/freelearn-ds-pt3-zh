["```py\nimport plotly.express as px\ngapminder = px.data.gapminder()\ngapminder\n```", "```py\npx.scatter(data_frame=gapminder,\n           x='gdpPercap',\n           y='lifeExp',\n           size='pop',\n           facet_col='continent',\n           color='continent',\n           title='Life Expectancy and GDP per capita. 1952 - 2007',\n           labels={'gdpPercap': 'GDP per Capita',\n                   'lifeExp': 'Life Expectancy'},\n           log_x=True,\n           range_y=[20, 100],\n           hover_name='country',\n           animation_frame='year',\n           height=600,\n           size_max=90)\n```", "```py\nimport os\nimport pandas as pd\npd.options.display.max_columns = None\nos.listdir('data')\n['PovStatsSeries.csv',\n 'PovStatsCountry.csv',\n 'PovStatsCountry-Series.csv',\n 'PovStatsData.csv',\n 'PovStatsFootNote.csv']\n```", "```py\nseries = pd.DataFrame('data/'PovStatsSeries.csv')\nprint(series.shape)\nseries.head()\n```", "```py\nseries['Topic'].value_counts()\nPoverty: Poverty rates           45\nPoverty: Shared prosperity       10\nPoverty: Income distribution      8\nHealth: Population: Structure     1\nName: Topic, dtype: int64\n```", "```py\nseries['Unit of measure'].value_counts(dropna=False)\n%             39\nNaN           22\n2011 PPP $     3\nName: Unit of measure, dtype: int64\n```", "```py\n(series\n .groupby('Topic')\n ['Limitations and exceptions']\n .agg(['count', pd.Series.nunique])\n .style.set_caption('Limitations and Exceptions'))\n```", "```py\ncountry =\\\npd.read_csv('data/PovStatsCountry.csv',na_values='',\n                      keep_default_na=False)\nprint(country.shape)\ncountry.head()\n```", "```py\ncountry['Region'].value_counts(dropna=False).to_frame().style.background_gradient('cividis')\n```", "```py\ncountry['Income Group'].value_counts(dropna=False)\nUpper middle income    52\nLower middle income    47\nHigh income            41\nLow income             29\nNaN                    15\nName: Income Group, dtype: int64\n```", "```py\ncountry['is_country'] = country['Region'].notna()\n```", "```py\ncountry[country['Region'].isna()]['Short Name']\n37     IDA countries classified as fragile situations\n42                                East Asia & Pacific\n43                              Europe & Central Asia\n50           Fragile and conflict affected situations\n70                                          IDA total\n92                          Latin America & Caribbean\n93                                         Low income\n95                                Lower middle income\n96                                Low & middle income\n105                        Middle East & North Africa\n107                                     Middle income\n139                                        South Asia\n147                                Sub-Saharan Africa\n170                               Upper middle income\n177                                             World\nName: Short Name, dtype: object\n```", "```py\nfrom unicodedata import lookup\nlookup('LATIN CAPITAL LETTER E')\n'E'\nlookup(\"REGIONAL INDICATOR SYMBOL LETTER A\")\n'A'\n```", "```py\ncountry_codes = country[country['is_country']]['2-alpha code'].dropna().str.lower().tolist()\n```", "```py\ndef flag(letters):\n    if pd.isna(letters) or (letters.lower() not in country_codes):\n        return ''\n    L0 = lookup(f'REGIONAL INDICATOR SYMBOL LETTER {letters[0]}')\n    L1 = lookup(f'REGIONAL INDICATOR SYMBOL LETTER {letters[1]}')\n    return L0 + L1\n```", "```py\ncountry['flag'] =\\\n[flag(code) for code in country['2-alpha code']]\n```", "```py\nfootnote = pd.read_csv('data/PovStatsFootNote.csv')\nfootnote = footnote.drop('Unnamed: 4', axis=1)\nfootnote['Year'] = footnote['Year'].str[2:].astype(int)\nfootnote.columns = ['Country Code', Series Code', 'year', 'footnote']\nfootnote\n```", "```py\ndata = pd.read_csv('data/PovStatsData.csv')\ndata = data.drop('Unnamed: 50', axis=1)\nprint(data.shape)\ndata.sample(3)\n```", "```py\ndata.loc[:, '1974':].isna().mean().mean()\n0.9184470475910692\n```", "```py\nwide_df.melt(id_vars=['country', 'indicator'],\n             value_vars=['2015', '2020'],\n             var_name='year')\n```", "```py\nid_vars =['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code']\ndata_melt = data.melt(id_vars=id_vars,\n                      var_name='year').dropna(subset=['value'])\ndata_melt['year'] = data_melt['year'].astype(int)\nprint(data_melt.shape)\ndata_melt.sample(10)\n```", "```py\nmelted.pivot(index=['year', 'indicator'],\n             columns='country',\n             values='value').reset_index()\n```", "```py\ndata_pivot =\\\ndata_melt.pivot(index=['Country Name', 'Country Code', 'year'],\n                             columns='Indicator Name',\n                             values='value').reset_index()\nprint(data_pivot.shape)\ndata_pivot.sample(5)\n```", "```py\ndata_pivot[['Country Code', 'year']].duplicated().any()\nFalse\n```", "```py\npd.merge(left=left, right=right, \n         left_on='country', \n         right_on='country', \n         how='left')\n```", "```py\npoverty = pd.merge(data_pivot, country, \n                   left_on='Country Code',\n                   right_on='Country Code',\n                   how='left')\nprint(poverty.shape)\npoverty\n```", "```py\npoverty[['Country Code', 'year']].duplicated().any()\nFalse\n```", "```py\ndf = pd.DataFrame({\n    'numbers': [1, 2, 3, 4, 5, 6, 7, 8],\n    'colors': ['blue', 'green', 'orange', 'yellow', 'black', 'gray', 'pink', 'white'],\n    'floats': [1.1, 1.2, 1.3, 2.4, 2.1, 5.6, 6.2, 5.3],\n    'shapes': ['rectangle', 'circle', 'triangle', 'rectangle', 'circle', 'triangle', 'rectangle', 'circle'],\n    'letters': list('AAABBCCC')\n})\ndf\n```", "```py\npx.scatter(df, x='numbers', y='floats')\n```", "```py\nPx.scatter(df,\n           x='numbers',\n           y='floats',\n           color='shapes',\n           symbol='shapes')\n```", "```py\npx.scatter(df,\n           x='numbers',\n           y='floats',\n           color='letters',\n           symbol='letters',\n           size=[35] * 8)\n```", "```py\npx.bar(df, x='letters', y='floats', color='shapes', barmode='group')\n```", "```py\nimport plotly express as px\nfig = px.scatter(x=[1, 2, 3], y=[23, 12, 34])\nfig.add_annotation(x=1, y=23, text='This is the first value')\n```", "```py\n    year = 2010\n    indicator = 'Population, total'\n    grouper = 'Region'\n    ```", "```py\n    df = (poverty[poverty['year'].eq(year)]\n          .sort_values(indicator)\n          .dropna(subset=[indicator, grouper]))\n    ```", "```py\n    px.scatter(data_frame=df,\n               x=indicator,\n               y='Country Name',\n               color=grouper,\n               symbol=grouper,\n               log_x=True,\n               hover_name=df['Short Name'] + ' ' + df['flag'],\n               size=[1]* len(df),\n               title= ' '.join([indicator, 'by', grouper, str(year)]),\n               height=700)\n    ```"]