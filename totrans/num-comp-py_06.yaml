- en: Hello Plotting World!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn programming, we often start with printing the "Hello world!" message.
    For graphical plots that contain all the elements from data, axes, labels, lines
    and ticks, how should we begin?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter gives an overview of Matplotlib's functionalities and latest features.
    We will guide you through the setup of the Matplotlib plotting environment. You
    will learn to create a simple line graph, view, and save your figures. By the
    end of this chapter, you will be confident enough to start building your own plots
    and be ready to learn about customization and more advanced techniques in the
    coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Come and say "Hello!" to the world of plots!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Matplotlib?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting the first simple line graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading data into Matplotlib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting the figure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello Matplotlib!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the world of Matplotlib 2.0! Follow our simple example in the chapter
    and draw your first "Hello world" plot.
  prefs: []
  type: TYPE_NORMAL
- en: What is Matplotlib?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib is a versatile Python library that generates plots for data visualization.
    With the numerous plot types and refined styling options available, it works well
    for creating professional figures for presentations and scientific publications.
    Matplotlib provides a simple way to produce figures to suit different purposes,
    from slideshows, high-quality poster printing, and animations to web-based interactive
    plots. Besides typical 2D plots, basic 3D plotting is also supported.
  prefs: []
  type: TYPE_NORMAL
- en: On the development side, the hierarchical class structure and object-oriented
    plotting interface of Matplotlib make the plotting process intuitive and systematic.
    While Matplotlib provides a native graphical user interface for real-time interaction,
    it can also be easily integrated into popular IPython-based interactive development
    environments, such as Jupyter notebook and PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in Matplotlib 2.0?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib 2.0 features many improvements, including the appearance of default
    styles, image support, and text rendering speed. We have selected a number of
    important changes to highlight later. The details of all new changes can be found
    on the documentation site at [http://matplotlib.org/devdocs/users/whats_new.html](http://matplotlib.org/devdocs/users/whats_new.html).
  prefs: []
  type: TYPE_NORMAL
- en: If you are already using previous versions of Matplotlib, you may want to pay
    more attention to this section to update your coding habits. If you are totally
    new to Matplotlib or even Python, you may jump ahead to start using Matplotlib
    first and revisit here later.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the default style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most prominent change to Matplotlib in version 2.0 is to the default style.
    You can find the list of changes here: [http://matplotlib.org/devdocs/users/dflt_style_changes.html](http://matplotlib.org/devdocs/users/dflt_style_changes.html).
  prefs: []
  type: TYPE_NORMAL
- en: Color cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For quick plotting without having to set colors for each data series, Matplotlib
    uses a list of colors called the default property cycle, whereby each series is
    assigned one of the default colors in the cycle. In Matplotlib 2.0, the list has
    been changed from the original red, green, blue, cyan, magenta, yellow, and black,
    noted as `['b', 'g', 'r', 'c', 'm', 'y', 'k']`, to the current category10 color
    palette introduced by the Tableau software. As implied by the name, the new palette
    has 10 distinct colors suitable for categorical display. The list can be accessed
    by importing Matplotlib and calling `matplotlib.rcParams['axes.prop_cycle']` in
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Colormap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Colormaps are useful in showing gradient. The yellow to blue "viridis" colormap
    is now the default one in Matplotlib 2.0\. This perceptually uniform colormap
    better represents the transition of numerical values visually than the classic
    “jet” scheme. This is a comparison between two colormaps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e118deb-0ae4-458f-a165-452ca08742f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Besides defaulting to a perceptually continuous colormap, qualitative colormaps
    are now available for grouping values into categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/974c7db2-b99c-427b-9249-57b27fd74dbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Points in a scatter plot have a larger default size and no longer have a black
    edge, giving clearer visuals. Different colors in the default color cycle will
    be used for each data series if the color is not specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e3ccf71-b4a0-411a-afce-2195a906740e.png)       ![](img/a62c93bb-b1bb-4b62-aa31-cdafa83ef83c.png)'
  prefs: []
  type: TYPE_IMG
- en: Legend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While previous versions set the legend in the upper-right corner, Matplotlib
    2.0 sets the legend location as "best" by default. It automatically avoids overlapping
    of the legend with the data. The legend box also has rounded corners, lighter
    edges, and a partially transparent background to keep the focus of the readers
    on the data. The curve of square numbers in the classic and current default styles
    demonstrates the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3675c092-b979-4b32-b63e-cc6413b1c7db.png)     ![](img/85585019-81fe-44ca-9a90-0b49c96e076a.png)'
  prefs: []
  type: TYPE_IMG
- en: Line style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dash patterns in line styles can now scale with the line width to display bolder
    dashes for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b534f55a-6289-4c2b-81e5-a41bb8d802d6.png)'
  prefs: []
  type: TYPE_IMG
- en: From the documentation (https://matplotlib.org/users/dflt_style_changes.html#plot)
  prefs: []
  type: TYPE_NORMAL
- en: Patch edges and color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like the dots in the scatter plot shown before, most filled elements no
    longer have a black edge by default, making the graphics less cluttered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50a1086b-7f84-419f-9c9c-2dd1c8b14466.png)'
  prefs: []
  type: TYPE_IMG
- en: Fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default font is now changed from "Bitstream Vera Sans" to "DejaVu Sans".
    The current font supports additional international, math, and symbol characters,
    including emojis.
  prefs: []
  type: TYPE_NORMAL
- en: Improved functionality or performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib 2.0 presents new features that improve the user experience, including
    speed and output quality as well as resource usage.
  prefs: []
  type: TYPE_NORMAL
- en: Improved color conversion API and RGBA support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The alpha channel, which specifies the degree of transparency, is now fully
    supported in Matplotlib 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: Improved image support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib 2.0 now resamples images with less memory and less data type conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Faster text rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is claimed that the speed of text rendering by the Agg backend is increased
    by 20%. We will discuss more on backends in [Chapter 9](20a0f6d7-04b4-4b00-b92c-89841cb2042f.xhtml),
    *Adding Interactivity and Animating Plots*.
  prefs: []
  type: TYPE_NORMAL
- en: Change in the default animation codec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To generate a video output of animated plots, a more efficient codec, H.264,
    is now used by default in place of MPEG-4\. As H.264 has a higher compression
    rate, the smaller output file size permits longer video record time and reduces
    the time and network data needed to load them. Real-time playback of H.264 videos
    is generally more fluent and in better quality than those encoded in MPEG-4.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the settings are changed in Matplotlib v2.0 for convenience or consistency,
    or to avoid unexpected results.
  prefs: []
  type: TYPE_NORMAL
- en: New configuration parameters (rcParams)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New parameters are added, such as `date.autoformatter.year` for date time string
    formatting.
  prefs: []
  type: TYPE_NORMAL
- en: Style parameter blacklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Style files are no longer allowed to configure settings unrelated to the style
    to prevent unexpected consequences. These parameters include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Change in Axes property keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Axes properties `axisbg` and `axis_bgcolor` are replaced by `facecolor`
    to keep the keywords consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting our first graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start with a simple line graph of a curve of squares, that is, *y =
    x²*.
  prefs: []
  type: TYPE_NORMAL
- en: Loading data for plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To visualize data, we should start with "having" some data. While we assume
    you have some nice data on hand to show, we will briefly show you how to load
    it in Python for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: Data structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several common data structures we will keep coming across.
  prefs: []
  type: TYPE_NORMAL
- en: List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'List is a basic Python data type for storing a collection of values. A list
    is created by putting element values inside a square bracket. To reuse our list,
    we can give it a name and store it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When we want to get a series in a greater range, for instance, to get more
    data points for our curve of squares to make it smoother, we may use the Python
    `range()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command will give us all even numbers from 2 to 100 (both inclusive) and
    store it in a list named `evens`.
  prefs: []
  type: TYPE_NORMAL
- en: Numpy array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Very often, we deal with more complex data. If you need a matrix with multiple
    columns or want to perform mathematical operations over all elements in a collection,
    then numpy is for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We abbreviated `numpy` to `np` by convention, keeping our code succinct.
  prefs: []
  type: TYPE_NORMAL
- en: '`np.array()` converts a supported data type, a list in this case, into a Numpy
    array. To produce a numpy array from our `evens` list, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: pandas dataframe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pandas dataframe is useful when we have some non-numerical labels or values
    in our matrix. It does not require homogeneous data, unlike Numpy. Columns can
    be named. There are also functions such as `melt()` and `pivot_table()` that add
    convenience in reshaping the table to facilitate analysis and plotting.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert a list into a pandas dataframe, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can also convert a numpy array into a pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: Loading data from files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While all this gives you a refresher of the data structures we will be working
    on, in real life, instead of inventing data, we read it from data sources. A tab-delimited
    plaintext file is the simplest and most common type of data input. Imagine we
    have a file called `evens.txt` containing the aforementioned even numbers. There
    are two columns. The first column only records unnecessary information. We want
    to load the data in the second column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the dummy text file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c323148c-fbf8-4d28-8115-082b7e1c482e.png)'
  prefs: []
  type: TYPE_IMG
- en: The basic Python way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can initialize an empty list, read the file line by line, split each line,
    and append the second element to our list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you can also do this in a one-liner:'
  prefs: []
  type: TYPE_NORMAL
- en: '`evens = [int(x.split()[1]) for x in open(''evens.txt'').readlines()]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are just trying to go step by step, following the Zen of Python: simple
    is better than complex.'
  prefs: []
  type: TYPE_NORMAL
- en: The Numpy way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is simple when we have a file with only two columns, and only one column
    to read, but it can get more tedious when we have an extended table containing
    thousands of columns and rows and we want to convert them into a Numpy matrix
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Numpy provides a standard one-liner solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the path of the data file. The `delimiter` parameter
    specifies the string used to separate values, which is a tab here. Because `numpy.loadtxt()`
    by default separate values separated by any whitespace into columns by default,
    this argument can be omitted here. We have set it for demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: For `usecols` and `dtype` that specify which columns to read and what data type
    each column corresponds to, you may pass a single value to each, or a sequence
    (such as list) for reading multiple columns.
  prefs: []
  type: TYPE_NORMAL
- en: Numpy also by default skips lines starting with `#`, which typically marks comment
    or header lines. You may change this behavior by setting the `comment` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The pandas way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to Numpy, pandas offers an easy way to load text files into a pandas
    dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here the separation can be denoted by either `sep` or `delimiter`, which is
    set as comma `,` by default (**CSV** stands for **comma-separated values**).
  prefs: []
  type: TYPE_NORMAL
- en: There is a long list of less commonly used options available as to determine
    how different data formats, data types, and errors should be handled. You may
    refer to the documentation at [http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html).
    Besides flat CSV files, Pandas also has other built-in functions for reading other
    common data formats, such as Excel, JSON, HTML, HDF5, SQL, and Google BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: To stay focused on data visualization, we will not dig deep into the methods
    of data cleaning in this book, but this is a survival skill set very helpful in
    data science. If interested, you can check out resources on data handling with
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the Matplotlib pyplot module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Matplotlib package includes many modules, including artist that controls
    the aesthetics, and rcParams for setting default values. The Pyplot module is
    the plotting interface we will mostly deal with, which creates plots of data in
    an object-oriented manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'By convention, we use the `plt` abbreviation when importing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to run the Jupyter Notebook cell magic `%matplotlib inline` to
    embed your figure in the output.
  prefs: []
  type: TYPE_NORMAL
- en: '**Don''t use the pylab module!**'
  prefs: []
  type: TYPE_NORMAL
- en: The use of the pylab module is now discouraged, and generally replaced by the
    **object-oriented** (**OO**) interface. While pylab provides some convenience
    by importing `matplotlib.pyplot` and `numpy` under a single namespace. Many pylab
    examples are still found online today, but it is much better to call the `Matplotlib.pyplot`
    and `numpy` modules separately.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting a curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plotting a line graph of the list can be as simple as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7ae2ad70-b0dc-4501-bd70-3a9b15e70c90.png)'
  prefs: []
  type: TYPE_IMG
- en: When only one parameter is specified, Pyplot assumes the data we input is on
    the y-axis and chooses a scale for the x-axis automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'To plot a graph, call `plt.plot(x,y)` where `x` and `y` are the *x* coordinates
    and *y* coordinates of data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To label the curve with a legend, we add the label information in the `plot`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the figure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, don’t forget to call `plt.show()` to display the figure!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8180536c-5413-43bd-b6b9-437c2f1ee287.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving the figure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have drawn our first figure. Let's save our work! Surely we don't want
    to resort to screen capture. Here is a simple way to do it by calling `pyplot.savefig()`.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to both view the image on screen and save it in file, remember to
    call `pyplot.savefig()` before `pyplot.show()` to make sure you don't save a blank
    canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the output format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pyplot.savefig()` function takes the path of the output file and automatically
    outputs it in the specified extension. For example, `pyplot.savefig(''output.png'')`
    will generate a PNG image. If no extension is specified, an SVG image will be
    generated by default. If the specified format is unsupported, let''s say `.doc`,
    a `ValueError` Python exception will be thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/584d4c63-4c77-4c65-bff0-739b2bac3321.png)'
  prefs: []
  type: TYPE_IMG
- en: PNG (Portable Network Graphics)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compared to JPEG, another common image file format, PNG, has the advantage of
    allowing a transparent background. PNG is widely supported by most image viewers
    and handlers.
  prefs: []
  type: TYPE_NORMAL
- en: PDF (Portable Document Format)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PDF is a standard document format, which you don't have to worry about the
    availability of readers. However, most Office software do not support the import
    of PDF as image.
  prefs: []
  type: TYPE_NORMAL
- en: SVG (Scalable Vector Graphics)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SVG is a vector graphics format that can be scaled without losing details. Hence,
    better quality can be achieved with a smaller file size. It goes well on the web
    with HTML5\. It may not be supported by some primitive image viewers.
  prefs: []
  type: TYPE_NORMAL
- en: Post (Postscript)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Postscript is a page description language for electronic publishing. It is useful
    for batch processing images to publish.
  prefs: []
  type: TYPE_NORMAL
- en: The **Gimp Drawing Kit** (**GDK**) raster graphics rendering is deprecated in
    2.0, which means image formats such as JPG and TIFF are no longer supported with
    the default backend. We will discuss the backends later in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the resolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Resolution measures the details recorded in an image. It determines how much
    you can enlarge your image without losing details. An image with higher resolution
    retains high quality at larger dimensions but also has a bigger file size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the purpose, you may want to output your figures at different
    resolutions. Resolution is measured as the number of color pixel **dot per inch** (**dpi**).
    You may adjust the resolution of a figure output by specifying the `dpi` parameter
    in the `pyplot.savefig()` function, for example, by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'While a higher resolution delivers better image quality, it also means a larger
    file size and demands more computer resources. Here are some references for how
    high should you set your image resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Slideshow presentations: 96 dpi+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are some suggestions by Microsoft for graphics resolution for Powerpoint
    presentations for different screen sizes: [https://support.microsoft.com/en-us/help/827745/how-to-change-the-export-resolution-of-a-powerpoint-slide](https://support.microsoft.com/en-us/help/827745/how-to-change-the-export-resolution-of-a-powerpoint-slide):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Screen height (pixel)** | **Resolution (dpi)** |'
  prefs: []
  type: TYPE_TB
- en: '| 720 | 96 (default) |'
  prefs: []
  type: TYPE_TB
- en: '| 750 | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 1125 | 150 |'
  prefs: []
  type: TYPE_TB
- en: '| 1500 | 200 |'
  prefs: []
  type: TYPE_TB
- en: '| 1875 | 250 |'
  prefs: []
  type: TYPE_TB
- en: '| 2250 | 300 |'
  prefs: []
  type: TYPE_TB
- en: 'Poster presentation: 300 dpi+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web: 72 dpi+ (SVG that can scale responsively is recommended)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned to use Matplotlib to draw a simple line graph.
    We set up the environment, imported data, and output the figure as an image in
    different formats. In the next chapter, you will learn how to visualize online
    data.
  prefs: []
  type: TYPE_NORMAL
