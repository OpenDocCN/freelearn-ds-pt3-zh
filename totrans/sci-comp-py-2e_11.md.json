["```py\nfrom matplotlib.pyplot import *\nfig = figure(figsize = (4,2))\nax = axes([0.1, 0.15, 0.8, 0.7]) # axes for the plot\nomega=float(input('Give a value for $\\omega$ between 1 and 5:\\n'))\nx = linspace(-2*pi, 2*pi, 800)\nax.set_ylim(-1.2, 1.2)\nlines, = ax.plot(x, sin(2.*pi*omega*x))\n```", "```py\nfrom matplotlib.widgets import Slider\nsld_ax = axes([0.2, 0.9, 0.6, 0.05]) # axes for slider\nsld = Slider(sld_ax, '$\\omega$ [Hz]', 1., 5., valinit=1.)\nomega=sld.val\n```", "```py\ndef update_frequency(omega):\n lines.set_ydata(np.sin(2.*pi*omega*x))\n\nsld.on_changed(update_frequency) \n```", "```py\nfrom matplotlib.pyplot import *\nfrom matplotlib.widgets import Slider\n\nfig = figure(figsize = (4,2))\nsld_ax = axes([0.2, 0.9, 0.6, 0.05]) # axes for slider\nax = axes([0.1, 0.15, 0.8, 0.7]) # axes for the plot\nax.xaxis.set_label_text('Time [s]')\nax.yaxis.set_label_text('Amplitude [m]')\nsld = Slider(sld_ax, '$\\omega$ [Hz]', 1., 5., valinit=1.5)\nomega=sld.val\nx = linspace(-2*pi, 2*pi, 800)\nax.set_ylim(-1.2, 1.2)\n# Plot of the initial curve\n# Note, how LaTeX commands and string formatting is combined in the \n# next command\nlines, = ax.plot(x, sin(2.*pi*omega*x), label=f'$\\sin(2\\pi\\; {omega} x)$ ')\nax.legend()\n\ndef update_frequency(omega):\n lines.set_ydata(np.sin(2.*pi*omega*x))\n # A legend is updated by p text box widget set_varroviding tuples \n # with line objects and tuples with labels\n ax.legend((lines,),(f'$\\sin(2\\pi\\; {omega} x)$',)) \n\nsld.on_changed(update_frequency)\n```", "```py\nsld = Slider(sld_ax, label='$\\omega$ [Hz]', valmin=1., valmax=5., \n             valinit=1.5, valfmt='%1.1f', valstep=0.1)\n```", "```py\nsldo_ax = axes([0.95, 0.15, 0.01, 0.6]) # axes for frequency slider\nslda_ax = axes([0.85, 0.15, 0.01, 0.6]) # axes for amplitude slider\n```", "```py\nsld_omega = Slider(sldo_ax, label='$\\omega$ [Hz]', valmin=1., \n                   valmax=5., valinit=1.5, valfmt='%1.1f', \n                   valstep=0.1, orientation='vertical')\nsld_amp = Slider(slda_ax, label='$a$ [m]', valmin=0.5, \n                 valmax=2.5, valinit=1.0, valfmt='%1.1f', \n                 valstep=0.1, orientation='vertical')\n```", "```py\ndef update_frequency(omega):\n    lines.set_ydata(sld_amp.val*sin(2.*pi*omega*x))\n    ax.legend((lines,),(f'${sld_amp.val} \\sin(2\\pi\\; {omega} x)$',)) \n\ndef update_amplitude(amp):\n    lines.set_ydata(amp*sin(2.*pi*sld_omega.val*x))\n    ax.legend((lines,),(f'${amp} \\sin(2\\pi\\; {sld_omega.val} x)$',)) \n    ax.set_ylim(-(amp+0.2), amp+0.2)\n\nsld_omega.on_changed(update_frequency)     \nsld_amp.on_changed(update_amplitude) \n```", "```py\nfrom matplotlib.widgets import Button\nbutton_ax = axes([0.85, 0.01, 0.05, 0.05]) # axes for update button\nbtn = Button(button_ax, 'Update', hovercolor='red')\n```", "```py\ndef update(event):\n    lines.set_ydata(sld_amp.val*sin(2.*pi*sld_omega.val*x))\n    ax.legend((lines,),\n              (f'${sld_amp.val:1.1f} \\sin(2\\pi\\; \\\n              {sld_omega.val:1.1f} x)$',)) \n\nbtn.on_clicked(update)\n```", "```py\nfrom matplotlib.widgets import TextBox\ntextbox_ax=axes([0.85,0.6,0.1,0.15])\ntxtbx=TextBox(textbox_ax, label='', initial='Clicked on:\\nx=--\\ny=--')\n```", "```py\npoints, = ax.plot([], [], 'ro')\n\ndef onclick(event):\n    if event.inaxes == ax:\n       txtbx.set_val(\n           f'clicked on:\\nx={event.xdata:1.1f}\\ny={event.ydata:1.1f}')\n       if event.button==3:  # Mouse button right\n          points.set_xdata([event.xdata])\n          points.set_ydata([event.ydata])\n    else:\n           txtbx.set_val(f'clicked on:\\noutside axes\\n area')\n    fig.canvas.draw_idle() \ncid = fig.canvas.mpl_connect('button_press_event', onclick)\n```"]