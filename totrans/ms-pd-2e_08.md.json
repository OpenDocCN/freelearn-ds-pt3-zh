["```py\n# Creating a series with 6 rows and user-defined index\nser = pd.Series([\"Numpy\", \"Pandas\", \"Sklearn\", \"Tensorflow\", \"Scrapy\", \"Keras\"], \nindex = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"])\n\n# Creating a 6X3 dataframe with defined row and column labels\ndf = pd.DataFrame(np.random.randn(6, 3), columns = [\"colA\", \"colB\", \"colC\"], \nindex = [\"R1\", \"R2\", \"R3\", \"R4\", \"R5\", \"R6\"])\n\n# Creating a panel with 3 items\npan = pd.Panel({\"Item1\": df+1, \"Item2\": df, \"Item3\": df*2})\n```", "```py\n# Subset using the row-label\nIn: ser[\"D\"]\nOut: 'Tensorflow'\n\n# Subset using positional index\nIn: ser[1]\nOut: 'Pandas'\n```", "```py\n# Subset a single column by column name\ndf[\"colB\"]\n```", "```py\n# Accessing a single element in a DataFrame\ndf[\"colB\"][\"R3\"], df[\"colB\"][1]\n```", "```py\n# Subset a panel\npan[\"Item1\"]\n```", "```py\ndf[[\"colA\", \"colB\"]]\n```", "```py\nIn: df.get(\"columnA\", \"NA\")\nOut: 'NA'\n```", "```py\n# Add new column \"colD\"\ndf[\"colD\"] = list(range(len(df)))\ndf\n```", "```py\ndf.colA\n```", "```py\nIn: df.colA.R3\nOut: -2.089066\n```", "```py\nidentifier::= (letter|\"_\") (letter | digit | \"_\")*\nThus, a valid Python identifier cannot contain a space. See the Python Lexical Analysis documents for more details at http://docs.python.org/2.7/reference/lexical_analysis.html#identifiers.\n```", "```py\nser[1:4]\n```", "```py\n# End provided for range slicing\ndf[:2]\n```", "```py\n# Start provided for range slicing\ndf[2:]\n```", "```py\n# Select odd rows\ndf[::2]\n```", "```py\n# Select even rows\ndf[1::2]\n```", "```py\n# Reverse the rows\ndf[::-1]\n```", "```py\nser_loc1 = pd.Series(np.linspace(11, 15, 5))\nser_loc2 = pd.Series(np.linspace(11, 15, 5), index = list(\"abcde\"))\n\n# Indexing with single label\nIn: ser_loc1.loc[2]\nOut: 13.0\nIn: ser_loc2.loc[\"b\"]\nOut: 12.0\n\n# Indexing with a list of labels\nser_loc1.loc[[1, 3, 4]]\n```", "```py\nser_loc2.loc[[\"b\", \"c\", \"d\"]]\n```", "```py\n# Indexing with range slicing\nser_loc1.loc[1:4]\n```", "```py\nser_loc2.loc[\"b\":\"d\"]\n```", "```py\n# Indexing with Boolean arrays\nser_loc1.loc[ser_loc1 > 13]\n```", "```py\n# Create a dataframe with default row-labels\ndf_loc1 = pd.DataFrame(np.linspace(1, 25, 25).reshape(5, 5), columns = [\"Asia\", \"Europe\", \"Africa\", \"Americas\", \"Australia\"])\n\n# Create a dataframe with custom row labels\ndf_loc2 = pd.DataFrame(np.linspace(1, 25, 25).reshape(5, 5), columns = [\"Asia\", \"Europe\", \"Africa\", \"Americas\", \"Australia\"], index = [\"2011\", \"2012\", \"2013\", \"2014\", \"2015\"])\n\n# Indexing with single label\ndf_loc1.loc[:,\"Asia\"]\n```", "```py\ndf_loc1.loc[2, :]\n```", "```py\ndf_loc2.loc[\"2012\", :]\n```", "```py\n# Indexing with a list of labels\ndf_loc1.loc[:,[\"Africa\", \"Asia\"]]\n```", "```py\n# Indexing with range slicing\ndf_loc1.loc[:,\"Europe\":\"Americas\"]\n```", "```py\n# Indexing with Boolean array\ndf_loc2.loc[df_loc2[\"Asia\"] > 11, :]\n```", "```py\n# Indexing with single values.\nIn: df_loc1.iloc[3, 2]\nOut: 18.0\n# Indexing with list of indices\ndf_loc1.iloc[[1, 4], [0, 2, 3]]\n```", "```py\n# Indexing with ranged slicing\ndf_loc2.iloc[3:,:3]\n```", "```py\n# Indexing with Boolean array\ndf_loc2.iloc[(df_loc2[\"Asia\"] > 11).values, :]\n```", "```py\nIn: df_loc2.at[\"2012\", \"Americas\"]\nOut: 9.0\n\nIn: df_loc1.iat[2, 3]\nOut: 14.0\n```", "```py\ndf_loc2.ix[\"2012\":\"2014\", 0:2]\n```", "```py\n    In[950]:sharesIndexDataDF=pd.read_csv('./stock_index_prices.csv')\n    In [951]: sharesIndexDataDF\n    Out[951]:\n      TradingDate  PriceType  Nasdaq     S&P 500  Russell 2000\n    0   2014/02/21   open     4282.17  1841.07  1166.25\n    1   2014/02/21   close     4263.41  1836.25  1164.63\n    2   2014/02/21   high     4284.85  1846.13  1168.43\n    3   2014/02/24   open     4273.32  1836.78  1166.74\n    4   2014/02/24   close     4292.97  1847.61  1174.55\n    5   2014/02/24   high      4311.13  1858.71  1180.29\n    6   2014/02/25   open     4298.48  1847.66  1176.00\n    7   2014/02/25   close     4287.59  1845.12  1173.95\n    8   2014/02/25   high     4307.51  1852.91  1179.43\n    9   2014/02/26   open     4300.45  1845.79  1176.11\n    10   2014/02/26   close     4292.06  1845.16  1181.72\n    11   2014/02/26   high     4316.82  1852.65  1188.06\n    12   2014/02/27   open     4291.47  1844.90  1179.28\n    13   2014/02/27   close     4318.93  1854.29  1187.94\n    14   2014/02/27   high     4322.46  1854.53  1187.94\n    15   2014/02/28   open     4323.52  1855.12 1189.19\n    16   2014/02/28   close     4308.12  1859.45 1183.03\n    17   2014/02/28   high     4342.59  1867.92 1193.50\n```", "```py\nIn[958]:sharesIndexDF=sharesIndexDataDF.set_index(['TradingDate','PriceType']) \n\nIn [959]: mIndex=sharesIndexDF.index; mIndex \n\nOut[959]: MultiIndex\n        [(u'2014/02/21', u'open'), (u'2014/02/21', u'close'), (u'2014/02/21', u'high'), (u'2014/02/24', u'open'), (u'2014/02/24', u'close'), (u'2014/02/24', u'high'), (u'2014/02/25', u'open'), (u'2014/02/25', u'close'), (u'2014/02/25', u'high'), (u'2014/02/26', u'open'), (u'2014/02/26', u'close'), (u'2014/02/26', u'high'), (u'2014/02/27', u'open'), (u'2014/02/27', u'close'), (u'2014/02/27', u'high'), (u'2014/02/28', u'open'), (u'2014/02/28', u'close'), (u'2014/02/28', u'high')]\n\nIn [960]: sharesIndexDF\nOut[960]: Nasdaq  S&P 500   Russell 2000 TradingDate PriceType\n2014/02/21 open   4282.17  1841.07  1166.25\n          close  4263.41  1836.25  1164.63\n          high   4284.85  1846.13  1168.43\n2014/02/24 open         4273.32  1836.78  1166.74\n         close         4292.97  1847.61  1174.55\n         high         4311.13  1858.71  1180.29\n2014/02/25 open         4298.48  1847.66  1176.00\n         close         4287.59  1845.12  1173.95\n         high         4307.51  1852.91  1179.43\n2014/02/26 open         4300.45  1845.79  1176.11\n         close         4292.06  1845.16  1181.72\n         high         4316.82  1852.65  1188.06\n2014/02/27 open        4291.47  1844.90  1179.28\n         close        4318.93  1854.29  1187.94\n         high        4322.46  1854.53  1187.94\n2014/02/28 open        4323.52  1855.12  1189.19\n         close        4308.12  1859.45  1183.03\n         high        4342.59  1867.92  1193.50\n\n```", "```py\n    In [962]: mIndex.get_level_values(0)\n    Out[962]: Index([u'2014/02/21', u'2014/02/21', u'2014/02/21', u'2014/02/24', u'2014/02/24', u'2014/02/24', u'2014/02/25', u'2014/02/25', u'2014/02/25', u'2014/02/26', u'2014/02/26', u'2014/02/26', u'2014/02/27', u'2014/02/27', u'2014/02/27', u'2014/02/28', u'2014/02/28', u'2014/02/28'], dtype=object)\n\n    In [963]: mIndex.get_level_values(1)\n    Out[963]: Index([u'open', u'close', u'high', u'open', u'close', u'high', u'open', u'close', u'high', u'open', u'close', u'high', u'open', u'close', u'high', u'open', u'close', u'high'], dtype=object)\n\n```", "```py\n    In [88]: mIndex.get_level_values(2)\n             ---------------------------------------------------------\n    IndexError                      Traceback (most recent call last)\n    ...\n\n```", "```py\n    In [971]: sharesIndexDF.ix['2014/02/21']\n    Out[971]:       Nasdaq   S&P 500    Russell 2000\n      PriceType\n      open       4282.17  1841.07  1166.25\n      close       4263.41  1836.25  1164.63\n      high       4284.85  1846.13  1168.43\n\n    In [976]: sharesIndexDF.ix['2014/02/21','open']\n    Out[976]: Nasdaq          4282.17\n        S&P 500         1841.07\n        Russell 2000    1166.25\n        Name: (2014/02/21, open), dtype: float64 \n\n```", "```py\n    In [980]: sharesIndexDF.ix['2014/02/21':'2014/02/24']\n    Out[980]:      Nasdaq   S&P 500   Russell 2000\n      TradingDate  PriceType\n      2014/02/21   open  4282.17   1841.07   1166.25\n             close  4263.41   1836.25   1164.63\n             high  4284.85   1846.13   1168.43\n      2014/02/24   open  4273.32   1836.78   1166.74\n             close  4292.97   1847.61   1174.55\n             high  4311.13   1858.71   1180.29\n\n```", "```py\n    In [272]:\n    sharesIndexDF.ix[('2014/02/21','open'):('2014/02/24','open')]\n    ------------------------------------------------------------------\n    KeyError                                  Traceback (most recent call last)\n    <ipython-input-272-65bb3364d980> in <module>()\n    ----> 1 sharesIndexDF.ix[('2014/02/21','open'):('2014/02/24','open')]\n    ...\n    KeyError: 'Key length (2) was greater than MultiIndex lexsort depth (1)'\n\n```", "```py\nIn [984]: sharesIndexDF.sortlevel(0).ix[('2014/02/21','open'):('2014/02/24','open')]\n\nOut[984]:          Nasdaq    S&P 500  Russell 2000\n      TradingDate  PriceType\n      2014/02/21  open      4282.17   1841.07  1166.25\n      2014/02/24  close      4292.97   1847.61  1174.55\n          high      4311.13   1858.71  1180.29\n          open      4273.32   1836.78  1166.74\n\n```", "```py\nIn [985]: sharesIndexDF.ix[[('2014/02/21','close'),('2014/02/24','open')]] \nOut[985]: Nasdaq S&P 500 Russell 2000 TradingDate PriceType 2014/02/21 close 4263.41 1836.25 1164.63 2014/02/24 open 4273.32 1836.78 1166.74 2 rows × 3 columns\n```", "```py\n    In [281]: swappedDF=sharesIndexDF[:7].swaplevel(0, 1, axis=0)\n              swappedDF\n    Out[281]:        Nasdaq    S&P 500  Russell 2000\n      PriceType  TradingDate\n      open        2014/02/21   4282.17  1841.07  1166.25\n      close    2014/02/21   4263.41  1836.25  1164.63\n      high    2014/02/21   4284.85  1846.13  1168.43\n      open    2014/02/24   4273.32  1836.78  1166.74\n      close    2014/02/24   4292.97  1847.61  1174.55\n      high    2014/02/24   4311.13  1858.71  1180.29\n      open        2014/02/25   4298.48  1847.66  1176.00\n      7 rows × 3 columns\n\n```", "```py\n In [285]: reorderedDF=sharesIndexDF[:7].reorder_levels(['PriceType',                                                 'TradingDate'],axis=0)\n reorderedDF\n    Out[285]:        Nasdaq    S&P 500  Russell 2000\n      PriceType  TradingDate\n      open    2014/02/21   4282.17  1841.07  1166.25\n      close    2014/02/21   4263.41  1836.25  1164.63\n      high    2014/02/21   4284.85  1846.13  1168.43\n      open    2014/02/24   4273.32  1836.78  1166.74\n      close    2014/02/24   4292.97  1847.61  1174.55\n      high    2014/02/24   4311.13  1858.71  1180.29\n      open    2014/02/25   4298.48  1847.66  1176.00\n      7 rows × 3 columns\n\n```", "```py\n    In [287]: sharesIndexDF.xs('open',level='PriceType')\n    Out[287]:\n          Nasdaq    S&P 500  Russell 2000\n      TradingDate\n      2014/02/21  4282.17  1841.07  1166.2x5\n      2014/02/24   4273.32  1836.78  1166.74\n      2014/02/25   4298.48  1847.66  1176.00\n      2014/02/26   4300.45  1845.79  1176.11\n      2014/02/27   4291.47  1844.90  1179.28\n      2014/02/28   4323.52  1855.12  1189.19\n      6 rows × 3 columns\n\n```", "```py\n    In [305]: sharesIndexDF.swaplevel(0, 1, axis=0).ix['open']\n    Out[305]:     Nasdaq   S&P 500  Russell 2000\n      TradingDate\n      2014/02/21  4282.17  1841.07  1166.25\n      2014/02/24  4273.32  1836.78  1166.74\n      2014/02/25  4298.48  1847.66  1176.00\n      2014/02/26  4300.45  1845.79  1176.11\n      2014/02/27  4291.47  1844.90  1179.28\n      2014/02/28  4323.52  1855.12  1189.19\n      6 rows × 3 columns\n\n```", "```py\n  In [311]: sharesIndexDataDF.ix[(sharesIndexDataDF['PriceType']=='close') & \\\n                         (sharesIndexDataDF['Nasdaq']>4300) ]\n  Out[311]:        PriceType  Nasdaq   S&P 500   Russell 2000\n      TradingDate\n      2014/02/27   close  4318.93   1854.29   1187.94\n      2014/02/28   close  4308.12   1859.45   1183.03\n      2 rows × 4 columns\n\n```", "```py\nhighSelection=sharesIndexDataDF['PriceType']=='high'  NasdaqHigh=sharesIndexDataDF['Nasdaq']<4300  sharesIndexDataDF.ix[highSelection & NasdaqHigh]\n    Out[316]: TradingDate  PriceType Nasdaq  S&P 500  Russell 2000\n        2014/02/21        high 4284.85  1846.13  1168.43\n```", "```py\n    In[317]:stockSeries=pd.Series(['NFLX','AMZN','GOOG','FB','TWTR'])\n               stockSeries.isin(['AMZN','FB'])\n    Out[317]:0    False\n            1     True\n            2    False\n            3     True\n            4    False\n            dtype: bool\n\n```", "```py\n    In [318]: stockSeries[stockSeries.isin(['AMZN','FB'])]\n    Out[318]: 1    AMZN\n             3      FB\n            dtype: object\n\n```", "```py\n    In [324]: australianMammals=\n                  {'kangaroo': {'Subclass':'marsupial', \n                                  'Species Origin':'native'},\n                   'flying fox' : {'Subclass':'placental', \n                                   'Species Origin':'native'},\n                   'black rat': {'Subclass':'placental', \n                                 'Species Origin':'invasive'},\n                   'platypus' : {'Subclass':'monotreme', \n                                 'Species Origin':'native'},\n                   'wallaby' :  {'Subclass':'marsupial', \n                                 'Species Origin':'native'},\n            'palm squirrel' : {'Subclass':'placental', \n                               'Origin':'invasive'},\n            'anteater':     {'Subclass':'monotreme', 'Origin':'native'},\n            'koala':        {'Subclass':'marsupial', 'Origin':'native'}\n    }\n\n```", "```py\n    In [328]: ozzieMammalsDF=pd.DataFrame(australianMammals)\n    In [346]: aussieMammalsDF=ozzieMammalsDF.T; aussieMammalsDF\n    Out[346]:       Subclass  Origin\n      anteater      monotreme      native\n      black rat     placental   invasive\n      flying fox    placental   native\n      kangaroo      marsupial   native\n      koala          marsupial   native\n      palm squirrel placental   invasive\n      platypus      monotreme      native\n      wallaby   marsupial   native\n      8 rows × 2 columns\n```", "```py\n    In [348]: aussieMammalsDF.isin({'Subclass':['marsupial'],'Origin':['native']})\n    Out[348]:    Subclass Origin\n      anteater   False   True\n      black rat   False   False\n      flying fox   False   True\n      kangaroo   True   True\n      koala      True   True\n      palm squirrel False False\n      platypus   False   True\n      wallaby   True   True\n      8 rows × 2 columns\n\n```", "```py\n    In [349]: nativeMarsupials={'Mammal Subclass':['marsupial'],\n                                'Species Origin':['native']}\n           nativeMarsupialMask=aussieMammalsDF.isin(nativeMarsupials).all(True)\n        aussieMammalsDF[nativeMarsupialMask]\n    Out[349]:      Subclass   Origin\n      kangaroo  marsupial  native\n      koala      marsupial  native\n      wallaby   marsupial  native\n      3 rows × 2 columns\n\n```", "```py\n    In [379]: np.random.seed(100)\n           normvals=pd.Series([np.random.normal() for i in np.arange(10)])\n        normvals\n    Out[379]: 0   -1.749765\n        1    0.342680\n        2    1.153036\n        3   -0.252436\n        4    0.981321\n        5    0.514219\n        6    0.221180\n        7   -1.070043\n        8   -0.189496\n        9    0.255001\n        dtype: float64\n\n    In [381]: normvals[normvals>0]\n    Out[381]: 1    0.342680\n        2    1.153036\n        4    0.981321\n        5    0.514219\n        6    0.221180\n        9    0.255001\n        dtype: float64\n\n    In [382]: normvals.where(normvals>0)\n    Out[382]: 0         NaN\n        1    0.342680\n        2    1.153036\n        3         NaN\n        4    0.981321\n        5    0.514219\n        6    0.221180\n        7         NaN\n        8         NaN\n        9    0.255001\n        dtype: float64\n\n```", "```py\n    In [393]: np.random.seed(100) \n           normDF=pd.DataFrame([[round(np.random.normal(),3) for i in np.arange(5)] for j in range(3)], \n                 columns=['0','30','60','90','120'])\n        normDF\n    Out[393]:  0  30  60  90  120\n      0  -1.750   0.343   1.153  -0.252   0.981\n      1   0.514   0.221  -1.070  -0.189   0.255\n      2  -0.458   0.435  -0.584   0.817   0.673\n      3 rows × 5 columns\n    In [394]: normDF[normDF>0]\n    Out[394]:  0  30  60  90  120\n      0   NaN   0.343   1.153   NaN   0.981\n      1   0.514   0.221   NaN       NaN   0.255\n      2   NaN   0.435   NaN   0.817   0.673\n      3 rows × 5 columns\n    In [395]: normDF.where(normDF>0)\n    Out[395]:  0  30  60  90  120\n      0   NaN   0.343   1.153   NaN   0.981\n      1   0.514   0.221   NaN   NaN   0.255\n      2   NaN   0.435   NaN   0.817   0.673\n      3 rows × 5 columns\n\n```", "```py\n    In [396]: normDF.mask(normDF>0)\n    Out[396]:  0  30  60  90  120\n      0  -1.750  NaN   NaN  -0.252  NaN\n      1   NaN  NaN  -1.070  -0.189  NaN\n      2  -0.458  NaN  -0.584   NaN  NaN\n      3 rows × 5 columns\n\n```", "```py\n    In [939]: stockIndexDataDF=pd.read_csv('./stock_index_data.csv')\n    In [940]: stockIndexDataDF\n    Out[940]:   TradingDate  Nasdaq   S&P 500  Russell 2000\n      0   2014/01/30   4123.13  1794.19  1139.36\n      1   2014/01/31   4103.88  1782.59  1130.88\n      2   2014/02/03   3996.96  1741.89  1094.58\n      3   2014/02/04   4031.52  1755.20  1102.84\n      4   2014/02/05   4011.55  1751.64  1093.59\n      5   2014/02/06   4057.12  1773.43  1103.93\n\n```", "```py\n    In [941]: stockIndexDF=stockIndexDataDF.set_index('TradingDate')\n    In [942]: stockIndexDF\n    Out[942]:    Nasdaq   S&P 500  Russell 2000\n      TradingDate\n      2014/01/30  4123.13   1794.19  1139.36\n      2014/01/31      4103.88   1782.59  1130.88\n      2014/02/03  3996.96   1741.89  1094.58\n      2014/02/04  4031.52   1755.20  1102.84\n      2014/02/05  4011.55   1751.64  1093.59\n      2014/02/06  4057.12   1773.43  1103.93\n\n```", "```py\n    In [409]: stockIndexDF.reset_index()\n    Out[409]:    \n       TradingDate   Nasdaq   S&P 500  Russell 2000\n    0   2014/01/30   4123.13   1794.19   1139.36\n    1   2014/01/31   4103.88   1782.59   1130.88\n    2   2014/02/03   3996.96   1741.89   1094.58\n    3   2014/02/04   4031.52   1755.20   1102.84\n    4   2014/02/05   4011.55   1751.64   1093.59\n    5   2014/02/06   4057.12   1773.43   1103.93\n    6 rows × 4 columns\n\n```"]