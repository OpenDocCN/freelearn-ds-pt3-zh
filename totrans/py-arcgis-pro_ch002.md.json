["```py\nC:\\Projects>C:\\PythonArcGIS\\ArcGIS10.5\\python.exe chapter1.py\n```", "```py\nC:\\Projects>C:\\PythonArcGIS\\ArcGIS10.5\\python.exe chapter1.py arg1 arg2\n```", "```py\nimport os\nfolderpath = \"C:\\Test_folder\"\nif not os.path.exists(folderpath):\n   os.mkdir(folderpath)\n```", "```py\nIf a name variable is using the sys module to accept parameters, here is what the script looks like:\nimport sys\nname = sys.argv[1]\nprint(name)\n```", "```py\nx=0\ny=1\nxy = x+y\nxy_str = str(xy)\n```", "```py\nfor item in datalist:\n    print(item)\nx=0\nwhile x < 1:\n    x+=1\n```", "```py\nlist_var = [1,’1’,1.0]\nfor item in list_var:\n  if type(item) == type(0):\n    print(‘Integer’)\n  elif type(item) == type(‘a’):\n    print(‘String’)\n  else:\n    print(‘Float’) \n```", "```py\nlist_var = [‘s’,’m’,’t’]\nm_var = list_var[0]\n\nname_var = “logan”\ng_var = name_var[0]\n```", "```py\nStr_var = “string”\nint_var = 4\nfloat_var = 5.7\nlist_var = [45,43,24]\ntuple_var = (87.’a’,34)\ndict_var = {‘key’:’value’}\n```", "```py\n# This is a comment\nx = 0 #also a comment\n```", "```py\n>>> str_var = 'red\"\n  File \"<stdin>\", line 1\n    str_var = 'red\"\n                  ^\nSyntaxError: EOL while scanning string literal\n```", "```py\ncounter = 0\nlist_var = [34,54,23,54]\nfor item in list_var:\n    print(item, counter)\n    counter += 1 \n```", "```py\nvariable = 1 # a variable assignment\n```", "```py\nvariable = 1 # a variable assignment\nvariable == 1 # a comparison (that is True)\n```", "```py\n>>> 2var = 34\n  File \"<stdin>\", line 1\n    2var = 34\n     ^\nSyntaxError: invalid syntax\n>>> two_var = 34\n>>> two_var\n34\n```", "```py\ndata_list = [45,56,34,12,2]\nfor item in data_list:\n    print (item * 2)\n90\n112\n68\n24\n4\n```", "```py\nx = 0\nwhile x < 100:\n    x = x + 1   #same as x += 1\n```", "```py\n>>> data_list = ['a','b','c','d','e']\n>>> for count,item in enumerate(data_list):\n...     print(count, item)\n... \n0 a\n1 b\n2 c\n3 d\n4 e\n```", "```py\n>>> x = 0\n>>> while x <100:\n...    x = x + 1\n>>> x\n100\n>>> x = 0\n>>> while x <100:\n...    x += 1\n>>> x\n100\n```", "```py\nlist_var = [1,’1’,1.0]\nfor item in list_var:\n  if type(item) == type(0):\n    print(‘Integer’)\n  elif type(item) == type(‘a’):\n    print(‘String’)\n  else:\n    print(‘Float’) \n```", "```py\nnames = [“Silas”, “Bill”, ”Dara”]\nname_bill = names[1]\n```", "```py\nnames = [“Silas”, “Bill”, ”Dara”]\nname_bill = names[-2]\n```", "```py\n>>> x = 0\n>>> type(x)\n<class ‘int’>\n```", "```py\n>>> string_var = 'the red fox\"\n  File \"<stdin>\", line 1\n    string_var = 'the red fox\"\n                             ^\nSyntaxError: EOL while scanning string literal\n>>> string_var = 'the red fox'\n>>> string_var\n'the red fox'\n```", "```py\n>>> string_var = \"\"\"the red fox chased the\n... dog across the yard\"\"\"\n>>> string_var\n'the red fox chased the\\ndog across the yard'\n```", "```py\n>>> string_var = \"forest\"\n>>> string_var += \" path\" #same as string_var = string_var+ “ path”\n>>> string_var\n'forest path'\n```", "```py\n>>> year = 1980\n>>> day = \"Monday\"\n>>> month = \"Feb\"\n>>> template = \"It was a cold {} in {} {}\"\n>>> template.format(day, month, year)\n'It was a cold Monday in Feb 1980'\n```", "```py\n>>> template = 'It was a cold {day} in {month} {year}'\n>>> template.format(month=month,year=year,day=day)\n'It was a cold Monday in Feb 1980'\n```", "```py\n>>> template = \"{0},{0} oh no,{1} gotta go\"\n>>> template.format(\"Louie\", \"Me\")\n'Louie,Louie oh no,Me gotta go'\n```", "```py\n>>> year = 1980\n>>> day = \"Monday\"\n>>> month = \"Feb\"\n>>> str_lit = f\"It was a cold {day} in {month} {year}\"\n>>> str_lit\n'It was a cold Monday in Feb 1980'\n```", "```py\nstring_list = [‘101 N Main St’,’Eureka’,’Illinois 60133’]\naddress = ‘, ’.join(string_list)\n```", "```py\naddress = ‘101 N Main St’.replace(“St”,”Street”)\n```", "```py\nstr_var = ‘rare’\nstr_index = str_var.find(‘a’) #index 1\nstr_index = str_var.find(‘r’) #index 0\nstr_index = str_var.rfind(‘r’) #index 2\n```", "```py\nname = “Laura”\nname_upper = name.upper()\nname_lower = name.lower()\nname_title = name_lower.title()\n```", "```py\nstr_var = ‘rare’\nstr_index = str_var.index(‘a’) #index 1\nstr_index = str_var.index(‘r’) #index 0\nstr_index = str_var.rindex(‘r’) #index 2\nstr_var.index(‘t’) #this will cause an error\n```", "```py\nlatitude,longitude = “45.123,-95.321”.split(“,”)\naddress_split = ‘101 N Main St’.split()\n```", "```py\n>>> str_var = \"readiness\"\n>>> d_var = str_var[3]\n>>> d_var \n'd'\n```", "```py\n>>> str_var = \"readiness\"\n>>> din_var = str_var[3:6]. #index 6 is e\n>>> din_var\n'din'\n>>> dine_var = str_var[3:7]. #index 7 is s\n>>> dine_var\n'dine'\n```", "```py\n>>> int_var = 50\n>>> int_var * 5\n250\n>>> int_var / 5\n10.0\n>>> int_var ** 2\n2500\n```", "```py\n>>> x = '0'\n>>> y = int(x)\n>>> y\n0\n>>> type(y)\n<type 'int'>\n>>> type(x)\n<type 'str'>\n```", "```py\nPython 2.7.16 (default, Dec 21 2020, 23:00:36) \n>>> 5/3\n1\n```", "```py\nPython 3.8.2 (default, Apr  8 2021, 23:19:18) \n>>> 5/3\n1.6666666666666667\n```", "```py\n>>> x = 5.0\n>>> x * 5\n25.0\n>>> x ** 5\n3125.0\n>>> x/2.3\n2.173913043478261\n```", "```py\n>>> x = '5'\n>>> y = float(x)\n>>> type(y)\n<type 'float'>\n```", "```py\n>>> str_var = \"5\"\n>>> int_var = int(str_var)\n>>> int_var\n5\n>>> float_var = float(int_var)\n>>> float_var\n5.0\n>>> str_var = str(float_var)\n>>> type(str_var)\n'<class 'str'>'\n```", "```py\ntuple_var = (“blue”, 32,[5,7,2],’plod’,{‘name’:’magnus’})\nplod_var = tuple_var[-2]\nmagnus_var = tuple_var[-1][‘name’]\n```", "```py\nlist_var = [‘fast’,’times’,89,4.5,(3,8),{‘we’:’believe’}]\ntimes_var = list_var[1]\n```", "```py\ndict_var = list_var[-1]\nbelieve_var = list_var[-1][‘we’]\n```", "```py\n>>> tuple_var = (\"red\",45,\"left\")\n>>> type(tuple_var)\n<class 'tuple'>\n>>> (\"red\",45,\"left\")[0]\n'red'\n>>> tuple_var[0]\n'red'\n```", "```py\n>>> list_var = [\"blue\",42,\"right\"]\n>>> type(list_var)\n<class 'list'>\n>>> [\"blue\",42,\"right\"][0]\n'blue'\n>>> list_var[0]\n'blue'\n```", "```py\n >>> tuple_copy = tuple(list_var)\n>>> tuple_copy\n('blue', 42, 'right', 'ankle')\n>>> list_copy = list(tuple_copy)\n>>> list_copy\n['blue', 42, 'right', 'ankle']\n```", "```py\nIn this example we see a tuple with three data items sliced to only include the first two items. The string “left” is at index 2 in the tuple, meaning that the last index in the slice will be 2\\. The slice is assigned to variable name tuple_slice: \n>>> tuple_var = (\"red\",45,\"left\")\n>>> tuple_slice = tuple_var[:2]\n>>> tuple_slice\n('red', 45)\n```", "```py\n>>> list_var = [\"blue\",42,\"right\",\"ankle\"]\n>>> list_slice = list_var[2:]\n>>> list_slice\n['right', 'ankle']\n```", "```py\n>>> orig_list = [\"blue\",\"pink\",\"yellow\",\"red\",\"blue\",\"yellow\" ]\n>>> set_var = set(orig_list)\n>>> set_var\n{'pink', 'yellow', 'blue', 'red'}\n>>> set_var[0]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'set' object is not subscriptable\n>>> for item in set_var:\n...     print(item)\n... \npink\nyellow\nblue\nred\n```", "```py\n>>> dict_var = {\"key\":\"value\"}\n>>> dict_var['key']\n'value'\n>>> dict_var = {\"address\":\"123 Main St\", \"color\":\"blue\"}\n>>> dict_var[\"address\"]\n'123 Main St'\n>>> dict_var[\"color\"]\n'blue'\n```", "```py\ndef new_function():\n    return \"hello world\"\n```", "```py\ndef accept_param(value):\n    return value\n```", "```py\ndef accept_param(value=12):\n    return value\n```", "```py\ndef accept_param(value=12):\n    'this function accepts a parameter if different from default'\n    return value\n```", "```py\nclass Object():\n    def __init__(self, name):\n        'accepts a string'\n        self.name = name\n    def get_name(self):\n        'return the name'\n        return self.get_name\n```", "```py\nvirtualenv namenv --python=python3.6\n```", "```py\npyenv install 3.7.7\n```", "```py\nconda create --name snakes python=3.9\n```", "```py\nimport csv\nfrom datetime import timedelta\nfrom arcpy import da.SearchCursor\n```", "```py\nimport csv\nreader = csv.Reader\n```", "```py\nfrom datetime import timedelta\nfrom arcpy import da.SearchCursor\n```", "```py\nfrom datetime import *\nfrom arcpy import *\n```", "```py\nimport csv\nfrom datetime import timedelta\nprint('script imported')\n```", "```py\n>>> print(\"blueberry\")\nblueberry\n>>> x = 0\n>>> print(x)\n0\n```"]