["```py\n`pd.Series(range(3), dtype=pd.Int64Dtype())` \n```", "```py\n`0    0 1    1 2    2 dtype: Int64` \n```", "```py\n`pd.Series(range(3), dtype=pd.Int8Dtype())` \n```", "```py\n`0    0 1    1 2    2 dtype: Int8` \n```", "```py\n`pd.Series([1, pd.NA, 2], dtype=pd.Int64Dtype())` \n```", "```py\n`0       1 1    <NA> 2       2 dtype: Int64` \n```", "```py\n`pd.Series([1, None, 2], dtype=pd.Int64Dtype())` \n```", "```py\n`0       1 1    <NA> 2       2 dtype: Int64` \n```", "```py\n`pd.Series(range(555, 558), dtype=pd.Int16Dtype())` \n```", "```py\n`0    555 1    556 2    557 dtype: Int16` \n```", "```py\n`pd.Series(range(3), dtype=pd.UInt8Dtype())` \n```", "```py\n`0    0 1    1 2    2 dtype: UInt8` \n```", "```py\n`pd.Series([3.14, .333333333, -123.456], dtype=pd.Float64Dtype())` \n```", "```py\n`0        3.14 1    0.333333 2    -123.456 dtype: Float64` \n```", "```py\n`pd.Series([3.14, None, pd.NA], dtype=pd.Float64Dtype())` \n```", "```py\n`0    3.14 1    <NA> 2    <NA> dtype: Float64` \n```", "```py\n`ser1 = pd.Series([1_000_000.123], dtype=pd.Float32Dtype()) ser2 = pd.Series([1_000_000.124], dtype=pd.Float32Dtype()) ser1.eq(ser2)` \n```", "```py\n`0    True dtype: boolean` \n```", "```py\n`pd.Series([True, False, True], dtype=pd.BooleanDtype())` \n```", "```py\n`0     True 1    False 2     True dtype: boolean` \n```", "```py\n`pd.Series([1, 0, 1], dtype=pd.BooleanDtype())` \n```", "```py\n`0     True 1    False 2     True dtype: boolean` \n```", "```py\n`pd.Series([1, pd.NA, None], dtype=pd.BooleanDtype())` \n```", "```py\n`0    True 1    <NA> 2    <NA> dtype: boolean` \n```", "```py\n`pd.Series([\"foo\", \"bar\", \"baz\"], dtype=pd.StringDtype())` \n```", "```py\n`0    foo 1    bar 2    baz dtype: string` \n```", "```py\n`pd.Series([\"foo\", pd.NA, None], dtype=pd.StringDtype())` \n```", "```py\n`0     foo 1    <NA> 2    <NA> dtype: string` \n```", "```py\n`ser = pd.Series([\"xx\", \"YyY\", \"zZzZ\"], dtype=pd.StringDtype()) ser.str.len()` \n```", "```py\n`0    2 1    3 2    4 dtype: Int64` \n```", "```py\n`ser.str.upper()` \n```", "```py\n`0      XX 1     YYY 2    ZZZZ dtype: string` \n```", "```py\n`ser.str.lower()` \n```", "```py\n`0      xx 1     yyy 2    zzzz dtype: string` \n```", "```py\n`ser.str.title()` \n```", "```py\n`0      Xx 1     Yyy 2    Zzzz dtype: string` \n```", "```py\n`ser = pd.Series([\"foo\", \"bar\", \"baz\"], dtype=pd.StringDtype()) ser.str.contains(\"o\")` \n```", "```py\n`0     True 1    False 2    False dtype: boolean` \n```", "```py\n`ser.str.contains(r\"^ba[rz]$\", case=False, regex=True)` \n```", "```py\n`0    False 1     True 2     True dtype: boolean` \n```", "```py\n`ser = pd.Series(range(3)) ser` \n```", "```py\n`0    0 1    1 2    2 dtype: int64` \n```", "```py\n`ser.iloc[1] = None ser` \n```", "```py\n`0    0.0 1    NaN 2    2.0 dtype: float64` \n```", "```py\n`pd.isna(pd.Series([1, np.nan, 2]))` \n```", "```py\n`0    False 1     True 2    False dtype: bool` \n```", "```py\n`pd.isna(pd.Series([1, pd.NA, 2], dtype=pd.Int64Dtype()))` \n```", "```py\n`0    False 1     True 2    False dtype: bool` \n```", "```py\n`ser = pd.Series(range(3), dtype=pd.Int64Dtype()) mask = pd.Series([True, pd.NA, False], dtype=pd.BooleanDtype()) ser[mask]` \n```", "```py\n`0    0 dtype: Int64` \n```", "```py\n`mask = pd.Series([True, None, False]) ser[mask]` \n```", "```py\n`ValueError: Cannot mask with non-boolean array containing NA / NaN values` \n```", "```py\n`mask = pd.Series([True, None, False]) mask = mask.fillna(False).astype(bool) ser[mask]` \n```", "```py\n``/tmp/ipykernel_45649/2987852505.py:2: FutureWarning: Downcasting object dtype arrays on .fillna, .ffill, .bfill is deprecated and will change in a future version. Call result.infer_objects(copy=False) instead. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`  mask = mask.fillna(False).astype(bool) 0    0 dtype: Int64`` \n```", "```py\n`values = [\"foo\", \"bar\", \"baz\"] values_ser = pd.Series(values, dtype=pd.StringDtype())` \n```", "```py\n`ser = values_ser.astype(pd.CategoricalDtype()) ser` \n```", "```py\n`0    foo 1    bar 2    baz dtype: category Categories (3, string): [bar, baz, foo]` \n```", "```py\n`cat = pd.CategoricalDtype(values_ser) ser = pd.Series(values, dtype=cat) ser` \n```", "```py\n`0    foo 1    bar 2    baz dtype: category Categories (3, string): [foo, bar, baz]` \n```", "```py\n`ser.iloc[2] = \"foo\" ser` \n```", "```py\n`0    foo 1    bar 2    foo dtype: category Categories (3, string): [foo, bar, baz]` \n```", "```py\n`ser.iloc[2] = \"qux\"` \n```", "```py\n`TypeError: Cannot setitem on a Categorical with a new category (qux), set the categories first` \n```", "```py\n`shirt_sizes = pd.Series([\"S\", \"M\", \"L\", \"XL\"], dtype=pd.StringDtype()) cat = pd.CategoricalDtype(shirt_sizes, ordered=True) ser = pd.Series([\"XL\", \"L\", \"S\", \"L\", \"S\", \"M\"], dtype=cat) ser < \"L\"` \n```", "```py\n`0    False 1    False 2     True 3    False 4     True 5     True dtype: bool` \n```", "```py\n`accepted_values = pd.Series([\"foo\", \"bar\"], dtype=pd.StringDtype()) cat = pd.CategoricalDtype(accepted_values) ser = pd.Series([\"foo\", \"bar\", \"foo\"], dtype=cat) ser` \n```", "```py\n`0    foo 1    bar 2    foo dtype: category Categories (2, string): [foo, bar]` \n```", "```py\n`ser.cat.codes` \n```", "```py\n`0    0 1    1 2    0 dtype: int8` \n```", "```py\n`ser.cat.categories` \n```", "```py\n`Index(['foo', 'bar'], dtype='string')` \n```", "```py\n`pd.Series([\"foo\", \"bar\", \"baz\"] * 100, dtype=pd.StringDtype()).memory_usage()` \n```", "```py\n`2528` \n```", "```py\n`pd.Series([\"foo\", \"bar\", \"baz\"] * 100, dtype=cat).memory_usage()` \n```", "```py\n`552` \n```", "```py\n`pd.Series([\"foo\", \"bar\", pd.NA], dtype=pd.CategoricalDtype())` \n```", "```py\n`0    foo 1    bar 2    NaN dtype: category Categories (2, object): ['bar', 'foo']` \n```", "```py\n`values = pd.Series([\"foo\", \"bar\"], dtype=pd.StringDtype()) cat = pd.CategoricalDtype(values) pd.Series([\"foo\", \"bar\", pd.NA], dtype=cat)` \n```", "```py\n`0     foo 1     bar 2    <NA> dtype: category Categories (2, string): [foo, bar]` \n```", "```py\n`ser = pd.Series([     \"2024-01-01 00:00:00\",     \"2024-01-02 00:00:01\",     \"2024-01-03 00:00:02\" ], dtype=\"datetime64[ns]\") ser` \n```", "```py\n`0   2024-01-01 00:00:00 1   2024-01-02 00:00:01 2   2024-01-03 00:00:02 dtype: datetime64[ns]` \n```", "```py\n`ser = pd.Series([     \"2024-01-01\",     \"2024-01-02\",     \"2024-01-03\" ], dtype=\"datetime64[ns]\") ser` \n```", "```py\n`0   2024-01-01 1   2024-01-02 2   2024-01-03 dtype: datetime64[ns]` \n```", "```py\n`ser.iloc[1] = \"2024-01-04 00:00:42\" ser` \n```", "```py\n`0   2024-01-01 00:00:00 1   2024-01-04 00:00:42 2   2024-01-03 00:00:00 dtype: datetime64[ns]` \n```", "```py\n`ser.dt.year` \n```", "```py\n`0    2024 1    2024 2    2024 dtype: int32` \n```", "```py\n`ser.dt.month` \n```", "```py\n`0    1 1    1 2    1 dtype: int32` \n```", "```py\n`ser.dt.day` \n```", "```py\n`0    1 1    4 2    3 dtype: int32` \n```", "```py\n`ser.dt.day_of_week` \n```", "```py\n`0    0 1    3 2    2 dtype: int32` \n```", "```py\n`pd.Series([     \"2024-01-01 00:00:01\",     \"2024-01-02 00:00:01\",     \"2024-01-03 00:00:01\" ], dtype=pd.DatetimeTZDtype(tz=\"UTC\"))` \n```", "```py\n`0   2024-01-01 00:00:01+00:00 1   2024-01-02 00:00:01+00:00 2   2024-01-03 00:00:01+00:00 dtype: datetime64[ns, UTC]` \n```", "```py\n`pd.Series([     \"2024-01-01 00:00:01\",     \"2024-01-02 00:00:01\",     \"2024-01-03 00:00:01\" ], dtype=pd.DatetimeTZDtype(tz=\"America/New_York\"))` \n```", "```py\n`0   2024-01-01 00:00:01-05:00 1   2024-01-02 00:00:01-05:00 2   2024-01-03 00:00:01-05:00 dtype: datetime64[ns, America/New_York]` \n```", "```py\n`pd.Series([     \"2024-01-01 00:00:01\",     \"2024-01-02 00:00:01\",     \"2024-01-03 00:00:01\" ], dtype=pd.DatetimeTZDtype(tz=\"-05:00\"))` \n```", "```py\n`0   2024-01-01 00:00:01-05:00 1   2024-01-02 00:00:01-05:00 2   2024-01-03 00:00:01-05:00 dtype: datetime64[ns, UTC-05:00]` \n```", "```py\n`ser_no_tz = pd.Series([     \"2024-01-01 00:00:00\",     \"2024-01-01 00:01:10\",     \"2024-01-01 00:02:42\" ], dtype=\"datetime64[ns]\") ser_et = ser_no_tz.dt.tz_localize(\"America/New_York\") ser_et` \n```", "```py\n`0   2024-01-01 00:00:00-05:00 1   2024-01-01 00:01:10-05:00 2   2024-01-01 00:02:42-05:00 dtype: datetime64[ns, America/New_York]` \n```", "```py\n`ser_pt = ser_et.dt.tz_convert(\"America/Los_Angeles\") ser_pt` \n```", "```py\n`0   2023-12-31 21:00:00-08:00 1   2023-12-31 21:01:10-08:00 2   2023-12-31 21:02:42-08:00 dtype: datetime64[ns, America/Los_Angeles]` \n```", "```py\n`ser_pt.dt.normalize()` \n```", "```py\n`0   2023-12-31 00:00:00-08:00 1   2023-12-31 00:00:00-08:00 2   2023-12-31 00:00:00-08:00 dtype: datetime64[ns, America/Los_Angeles]` \n```", "```py\n`ser = pd.Series([     \"2024-01-01\",     None,     \"2024-01-03\" ], dtype=\"datetime64[ns]\") ser` \n```", "```py\n`0   2024-01-01 1          NaT 2   2024-01-03 dtype: datetime64[ns]` \n```", "```py\n`pd.isna(ser)` \n```", "```py\n`0    False 1     True 2    False dtype: bool` \n```", "```py\n`pd.Series([     \"1500-01-01 00:00:01\",     \"2500-01-01 00:00:01\", ], dtype=\"datetime64[ns]\")` \n```", "```py\n`OutOfBoundsDatetime: Out of bounds nanosecond timestamp: 1500-01-01 00:00:01, at position 0` \n```", "```py\n`pd.Series([     \"1500-01-01 00:00:01\",     \"2500-01-01 00:00:01\", ], dtype=\"datetime64[us]\")` \n```", "```py\n`0   1500-01-01 00:00:01 1   2500-01-01 00:00:01 dtype: datetime64[us]` \n```", "```py\n`ser = pd.Series([     \"2024-01-01\",     \"2024-01-02\",     \"2024-01-03\" ], dtype=\"datetime64[ns]\") ser - pd.Timestamp(\"2023-12-31 12:00:00\")` \n```", "```py\n`0   0 days 12:00:00 1   1 days 12:00:00 2   2 days 12:00:00 dtype: timedelta64[ns]` \n```", "```py\n`ser + pd.Timedelta(\"3 days\")` \n```", "```py\n`0   2024-01-04 1   2024-01-05 2   2024-01-06 dtype: datetime64[ns]` \n```", "```py\n`pd.Series([     \"-1 days\",     \"6 hours\",     \"42 minutes\",     \"12 seconds\",     \"8 milliseconds\",     \"4 microseconds\",     \"300 nanoseconds\", ], dtype=\"timedelta64[ns]\")` \n```", "```py\n`0           -1 days +00:00:00 1             0 days 06:00:00 2             0 days 00:42:00 3             0 days 00:00:12 4      0 days 00:00:00.008000 5      0 days 00:00:00.000004 6   0 days 00:00:00.000000300 dtype: timedelta64[ns]` \n```", "```py\n`pd.Series([     \"1 months\", ], dtype=\"timedelta64[ns]\")` \n```", "```py\n`ValueError: invalid unit abbreviation: months` \n```", "```py\n`ser = pd.Series([     \"2024-01-01\",     \"2024-01-02\",     \"2024-01-03\", ], dtype=pd.ArrowDtype(pa.date32())) ser` \n```", "```py\n`0    2024-01-01 1    2024-01-02 2    2024-01-03 dtype: date32[day][pyarrow]` \n```", "```py\n`ser = pd.Series([     \"9999-12-29\",     \"9999-12-30\",     \"9999-12-31\", ], dtype=pd.ArrowDtype(pa.date32())) ser` \n```", "```py\n`0    9999-12-29 1    9999-12-30 2    9999-12-31 dtype: date32[day][pyarrow]` \n```", "```py\n`df = pd.DataFrame({     \"name\": [\"Alice\", \"Bob\", \"Janice\", \"Jim\", \"Michael\"],     \"years_exp\": [10, 2, 4, 8, 6], }) df` \n```", "```py\n `name      years_exp 0    Alice     10 1    Bob       2 2    Janice    4 3    Jim       8 4    Michael   6` \n```", "```py\n`ser = pd.Series([     [\"Bob\", \"Michael\"],     None,     None,     [\"Janice\"],     None, ], dtype=pd.ArrowDtype(pa.list_(pa.string()))) df[\"direct_reports\"] = ser df` \n```", "```py\n `name      years_exp    direct_reports 0    Alice     10           ['Bob' 'Michael'] 1    Bob       2            <NA> 2    Janice    4            <NA> 3    Jim       8            ['Janice'] 4    Michael   6            <NA>` \n```", "```py\n`ser.list.len()` \n```", "```py\n`0       2 1    <NA> 2    <NA> 3       1 4    <NA> dtype: int32[pyarrow]` \n```", "```py\n`ser.list[0]` \n```", "```py\n`0       Bob 1      <NA> 2      <NA> 3    Janice 4      <NA> dtype: string[pyarrow]` \n```", "```py\n`ser.list.flatten()` \n```", "```py\n`0        Bob 1    Michael 2     Janice dtype: string[pyarrow]` \n```", "```py\n`pd.Series([     \"123456789.123456789\",     \"-987654321.987654321\",     \"99999999.9999999999\", ], dtype=pd.ArrowDtype(pa.decimal128(19, 10)))` \n```", "```py\n`0     123456789.1234567890 1    -987654321.9876543210 2      99999999.9999999999 dtype: decimal128(19, 10)[pyarrow]` \n```", "```py\n`pd.Series([     123456789.123456789,     -987654321.987654321,     99999999.9999999999, ], dtype=pd.ArrowDtype(pa.decimal128(19, 10)))` \n```", "```py\n`0     123456789.1234567910 1    -987654321.9876543283 2     100000000.0000000000 dtype: decimal128(19, 10)[pyarrow]` \n```", "```py\n`import decimal decimal.Decimal(\"99999999.9999999999\") == decimal.Decimal(\"100000000.0\")` \n```", "```py\n`False` \n```", "```py\n`decimal.Decimal(\"99999999.9999999999\") + decimal.Decimal(\"100000000.0\")` \n```", "```py\n`Decimal('199999999.9999999999')` \n```", "```py\n`pd.Series([     decimal.Decimal(\"123456789.123456789\"),     decimal.Decimal(\"-987654321.987654321\"),     decimal.Decimal(\"99999999.9999999999\"), ], dtype=pd.ArrowDtype(pa.decimal128(19, 10)))` \n```", "```py\n`0     123456789.1234567890 1    -987654321.9876543210 2      99999999.9999999999 dtype: decimal128(19, 10)[pyarrow]` \n```", "```py\n`ser = pd.Series([     \"123456789123456789123456789123456789.123456789\" ], dtype=pd.ArrowDtype(pa.decimal256(76, 10))) ser` \n```", "```py\n`0    123456789123456789123456789123456789.1234567890 dtype: decimal256(76, 10)[pyarrow]` \n```", "```py\n`pd.Series([0, 1, 2])` \n```", "```py\n`0    0 1    1 2    2 dtype: int64` \n```", "```py\n`pd.Series([0, None, 2])` \n```", "```py\n`0    0.0 1    NaN 2    2.0 dtype: float64` \n```", "```py\n`pd.Series([0, None, 2], dtype=int)` \n```", "```py\n`TypeError: int() argument must be a string, a bytes-like object or a number, not 'NoneType'` \n```", "```py\n`ser = pd.Series([0, None, 2]) ser.fillna(0).astype(int)` \n```", "```py\n`0    0 1    0 2    2 dtype: int64` \n```", "```py\n`pd.Series([0, None, 2]).fillna(0).astype(int).mean()` \n```", "```py\n`0.6666666666666666` \n```", "```py\n`pd.Series([0, None, 2], dtype=pd.Int64Dtype()).mean()` \n```", "```py\n`1.0` \n```", "```py\n`import timeit func = lambda: pd.Series([0, None, 2]).fillna(0).astype(int).mean() timeit.timeit(func, number=10_000)` \n```", "```py\n`0.9819313539992436` \n```", "```py\n`func = lambda: pd.Series([0, None, 2], dtype=pd.Int64Dtype()).mean() timeit.timeit(func, number=10_000)` \n```", "```py\n`0.6182142379984725` \n```", "```py\n`pd.Series([True, False])` \n```", "```py\n`0     True 1    False dtype: bool` \n```", "```py\n`pd.Series([True, False, None])` \n```", "```py\n`0     True 1    False 2     None dtype: object` \n```", "```py\n`pd.Series([True, False, None, \"one of these things\", [\"is not like\"], [\"the other\"]])` \n```", "```py\n`0                   True 1                  False 2                   None 3    one of these things 4          [is not like] 5            [the other] dtype: object` \n```", "```py\n`pd.Series([True, False, None], dtype=pd.BooleanDtype())` \n```", "```py\n`0     True 1    False 2     <NA> dtype: boolean` \n```", "```py\n`pd.Series([\"foo\", \"bar\", \"baz\"])` \n```", "```py\n`0    foo 1    bar 2    baz dtype: object` \n```", "```py\n`ser = pd.Series([\"foo\", \"bar\", \"baz\"]) ser.iloc[2] = 42 ser` \n```", "```py\n`0    foo 1    bar 2     42 dtype: object` \n```", "```py\n`ser = pd.Series([\"foo\", \"bar\", \"baz\"], dtype=pd.StringDtype()) ser.iloc[2] = 42` \n```", "```py\n`TypeError: Cannot set non-string value '42' into a StringArray.` \n```", "```py\n`alist = [42, \"foo\", [\"sub\", \"list\"], {\"key\": \"value\"}] ser = pd.Series(alist) ser` \n```", "```py\n`0                  42 1                 foo 2         [sub, list] 3    {'key': 'value'} dtype: object` \n```", "```py\n`df = pd.DataFrame([     [\"foo\", 1, 123.45],     [\"bar\", 2, 333.33],     [\"baz\", 3, 999.99], ], columns=list(\"abc\")) df` \n```", "```py\n `a     b   c 0   foo   1   123.45 1   bar   2   333.33 2   baz   3   999.99` \n```", "```py\n`df.dtypes` \n```", "```py\n`a     object b      int64 c    float64 dtype: object` \n```", "```py\n`df.astype({     \"a\": pd.StringDtype(),     \"b\": pd.Int64Dtype(),     \"c\": pd.Float64Dtype(), }).dtypes` \n```", "```py\n`a    string[python] b             Int64 c           Float64 dtype: object` \n```", "```py\n`df.convert_dtypes(dtype_backend=\"numpy_nullable\").dtypes` \n```", "```py\n`a    string[python] b             Int64 c           Float64 dtype: object` \n```"]