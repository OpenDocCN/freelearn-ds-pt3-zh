["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport scipy.stats as scistat\ncovidtotals = pd.read_csv(\"data/covidtotals.csv\")\ncovidtotals.set_index(\"iso_code\", inplace=True)\ntotvars = ['location','total_cases',\n...   'total_deaths','total_cases_pm',\n...   'total_deaths_pm']\ndemovars = ['population','pop_density',\n...   'median_age','gdp_per_capita',\n...    'hosp_beds','hum_dev_ind'] \n```", "```py\ncovidtotalsonly = covidtotals.loc[:, totvars]\ncovidtotalsonly.describe() \n```", "```py\n total_cases  total_deaths  total_cases_pm  total_deaths_pm\ncount               231           231             231              231\nmean          3,351,599        30,214         206,178            1,262\nstd          11,483,212       104,779        2 03,858            1,315\nmin                   4             0             354                0\n25%              25,672           178          21,822              141\n50%             191,496         1,937         133,946              827\n75%           1,294,286        14,150         345,690            1,998\nmax         103,436,829     1,127,152         763,475            6,508 \n```", "```py\n    covidtotalsonly.quantile(np.arange(0.0, 1.1, 0.1),\n       numeric_only=True) \n    ```", "```py\n     total_cases  total_deaths  total_cases_pm  total_deaths_pm\n    0.0           4.0           0.0           354.5              0.0\n    0.1       8,359.0          31.0         3,138.6             32.9\n    0.2      17,181.0         126.0        10,885.7            105.3\n    0.3      38,008.0         294.0        35,834.6            210.5\n    0.4      74,129.0         844.0        86,126.2            498.8\n    0.5     191,496.0       1,937.0       133,946.3            827.0\n    0.6     472,755.0       4,384.0       220,429.4          1,251.3\n    0.7   1,041,111.0       9,646.0       293,737.4          1,697.6\n    0.8   1,877,065.0      21,218.0       416,608.1          2,271.7\n    0.9   5,641,992.0      62,288.0       512,388.4          3,155.9\n    1.0 103,436,829.0   1,127,152.0       763,475.4          6,507.7 \n    ```", "```py\ncovidtotalsonly.skew(numeric_only=True) \n```", "```py\ntotal_cases       6.3\ntotal_deaths      7.1\ntotal_cases_pm    0.8\ntotal_deaths_pm   1.3\ndtype: float64 \n```", "```py\ncovidtotalsonly.kurtosis(numeric_only=True) \n```", "```py\ntotal_cases       47.1\ntotal_deaths      61.7\ntotal_cases_pm    -0.4\ntotal_deaths_pm    1.3\ndtype: float64 \n```", "```py\ndef testnorm(var, df):\n  stat, p = scistat.shapiro(df[var])\n  return p\nprint(\"total cases: %.5f\" % testnorm(\"total_cases\", covidtotalsonly))\nprint(\"total deaths: %.5f\" % testnorm(\"total_deaths\", covidtotalsonly))\nprint(\"total cases pm: %.5f\" % testnorm(\"total_cases_pm\", covidtotalsonly))\nprint(\"total deaths pm: %.5f\" % testnorm(\"total_deaths_pm\", covidtotalsonly)) \n```", "```py\ntotal cases: 0.00000\ntotal deaths: 0.00000\ntotal cases pm: 0.00000\ntotal deaths pm: 0.00000 \n```", "```py\nsm.qqplot(covidtotalsonly[['total_cases']]. \\\n...   sort_values(['total_cases']), line='s')\nplt.title(\"QQ Plot of Total Cases\")\nsm.qqplot(covidtotals[['total_cases_pm']]. \\\n...   sort_values(['total_cases_pm']), line='s')\nplt.title(\"QQ Plot of Total Cases Per Million\")\nplt.show() \n```", "```py\nthirdq, firstq = covidtotalsonly.total_cases.quantile(0.75), covidtotalsonly.total_cases.quantile(0.25)\ninterquartilerange = 1.5*(thirdq-firstq)\noutlierhigh, outlierlow = interquartilerange+thirdq, firstq-interquartilerange\nprint(outlierlow, outlierhigh, sep=\" <--> \") \n```", "```py\n-1877250 <--> 3197208 \n```", "```py\ndef getoutliers():\n...   dfout = pd.DataFrame(columns=covidtotals. \\\n...     columns, data=None)\n...   for col in covidtotalsonly.columns[1:]:\n...     thirdq, firstq = covidtotalsonly[col].\\\n...       quantile(0.75),covidtotalsonly[col].\\\n...       quantile(0.25)\n...     interquartilerange = 1.5*(thirdq-firstq)\n...     outlierhigh, outlierlow = \\\n...       interquartilerange+thirdq, \\\n...       firstq-interquartilerange\n...     df = covidtotals.loc[(covidtotals[col]> \\\n...       outlierhigh) | (covidtotals[col]< \\\n...       outlierlow)]\n...     df = df.assign(varname = col,\n...       threshlow = outlierlow,\n...       threshhigh = outlierhigh)\n...     dfout = pd.concat([dfout, df])\n...   return dfout\n...\noutliers = getoutliers()\noutliers.varname.value_counts() \n```", "```py\ntotal_deaths          39\ntotal_cases           33\ntotal_deaths_pm        4\nName: varname, dtype: int64 \n```", "```py\noutliers.to_excel(\"views/outlierscases.xlsx\") \n```", "```py\noutliers.loc[outliers.varname==\"total_deaths_pm\",\n  ['location','total_deaths_pm','total_cases_pm',\n   'median_age','hum_dev_ind']]. \\\n  sort_values(['total_deaths_pm'], ascending=False) \n```", "```py\n location      total_deaths_pm  \\\nPER                    Peru              6,507.7  \nBGR                Bulgaria              5,703.5  \nBIH  Bosnia and Herzegovina              5,066.3  \nHUN                 Hungary              4,918.3  \n           total_cases_pm    median_age    hum_dev_ind \nPER             133,239.0          29.1            0.8 \nBGR             195,767.9          44.7            0.8 \nBIH             124,806.3          42.5            0.8 \nHUN             223,685.2          43.4            0.9 \n```", "```py\ncovidtotals[['total_deaths_pm','median_age',\n  'hum_dev_ind']]. \\\n  quantile([0.25,0.5,0.75]) \n```", "```py\n total_deaths_pm  median_age  hum_dev_ind\n0.25           141.18       22.05         0.60\n0.50           827.05       29.60         0.74\n0.75         1,997.51       38.70         0.83 \n```", "```py\n    plt.hist(covidtotalsonly['total_cases']/1000, bins=7)\n    plt.title(\"Total COVID-19 Cases (thousands)\")\n    plt.xlabel('Cases')\n    plt.ylabel(\"Number of Countries\")\n    plt.show() \n    ```", "```py\n    covidlogs = covidtotalsonly.copy()\n    for col in covidlogs.columns[1:]:\n    ...   covidlogs[col] = np.log1p(covidlogs[col])\n    plt.hist(covidlogs['total_cases'], bins=7)\n    plt.title(\"Total COVID-19 Cases (log)\")\n    plt.xlabel('Cases')\n    plt.ylabel(\"Number of Countries\")\n    plt.show() \n    ```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True) \n    ```", "```py\ncovidtotals.corr(method=\"pearson\", numeric_only=True) \n```", "```py\n total_cases  total_deaths  \\\ntotal_cases             1.00          0.76  \ntotal_deaths            0.76          1.00  \ntotal_cases_pm          0.10          0.01  \ntotal_deaths_pm         0.15          0.27  \npopulation              0.70          0.47  \npop_density            -0.03         -0.04  \nmedian_age              0.29          0.19  \ngdp_per_capita          0.19          0.13  \nhosp_beds               0.21          0.05  \nvac_per_hund            0.02         -0.07  \naged_65_older           0.29          0.19  \nlife_expectancy         0.19          0.11  \nhum_dev_ind             0.26          0.21  \n                 total_cases_pm  ...  aged_65_older  \\\ntotal_cases                0.10  ...           0.29  \ntotal_deaths               0.01  ...           0.19  \ntotal_cases_pm             1.00  ...           0.72  \ntotal_deaths_pm            0.44  ...           0.68  \npopulation                -0.13  ...          -0.01  \npop_density                0.19  ...           0.07  \nmedian_age                 0.74  ...           0.92  \ngdp_per_capita             0.66  ...           0.51  \nhosp_beds                  0.48  ...           0.65  \nvac_per_hund               0.24  ...           0.35  \naged_65_older              0.72  ...           1.00  \nlife_expectancy            0.69  ...           0.73  \nhum_dev_ind                0.76  ...           0.78  \n                 life_expectancy  hum_dev_ind \ntotal_cases                 0.19         0.26 \ntotal_deaths                0.11         0.21 \ntotal_cases_pm              0.69         0.76 \ntotal_deaths_pm             0.49         0.60 \npopulation                 -0.04        -0.02 \npop_density                 0.20         0.14 \nmedian_age                  0.83         0.90 \ngdp_per_capita              0.68         0.75 \nhosp_beds                   0.46         0.57 \nvac_per_hund                0.67         0.51 \naged_65_older               0.73         0.78 \nlife_expectancy             1.00         0.91 \nhum_dev_ind                 0.91         1.00 \n[13 rows x 13 columns] \n```", "```py\ncovidtotals['total_cases_q'] = pd.\\\n...   qcut(covidtotals['total_cases'],\n...   labels=['very low','low','medium',\n...   'high','very high'], q=5, precision=0)\ncovidtotals['total_deaths_q'] = pd.\\\n...   qcut(covidtotals['total_deaths'],\n...   labels=['very low','low','medium',\n...   'high','very high'], q=5, precision=0)\npd.crosstab(covidtotals.total_cases_q,\n...   covidtotals.total_deaths_q) \n```", "```py\ntotal_deaths_q  very low    low     medium    high    very high\ntotal_cases_q                                        \nvery low              36     10          1       0            0\nlow                   11     26          8       1            0\nmedium                 0      9         27      10            0\nhigh                   0      1          8      31            6\nvery high              0      0          2       4           40 \n```", "```py\ncovidtotals.loc[(covidtotals. \\\n  total_cases_q==\"high\") & \\\n  (covidtotals.total_deaths_q==\"low\")].T \n```", "```py\niso_code                QAT\nlastdate         2023-06-25\nlocation              Qatar\ntotal_cases      514,524.00\ntotal_deaths         690.00\ntotal_cases_pm   190,908.72\ntotal_deaths_pm      256.02\npopulation          2695131\npop_density          227.32\nmedian_age            31.90\ngdp_per_capita   116,935.60\nhosp_beds              1.20\nvac_per_hund            NaN\naged_65_older          1.31\nlife_expectancy       80.23\nhum_dev_ind            0.85\nregion            West Asia \n```", "```py\nax = sns.regplot(x=covidtotals.total_cases/1000, y=covidtotals.total_deaths)\nax.set(xlabel=\"Cases (thousands)\", ylabel=\"Deaths\", title=\"Total COVID-19 Cases and Deaths by Country\")\nplt.show() \n```", "```py\ncovidtotals.loc[(covidtotals.total_cases<40000000) \\\n  & (covidtotals.total_deaths>400000)].T \n```", "```py\niso_code                   BRA             RUS\nlastdate            2023-10-01      2024-01-28\nlocation                Brazil          Russia\ntotal_cases      37,519,960.00   23,774,451.00\ntotal_deaths        702,116.00      401,884.00\ntotal_cases_pm      174,257.35      164,286.55\ntotal_deaths_pm       3,260.90        2,777.11\npopulation           215313504       144713312\npop_density              25.04            8.82\nmedian_age               33.50           39.60\ngdp_per_capita       14,103.45       24,765.95\nhosp_beds                 2.20            8.05\nvac_per_hund               NaN             NaN\naged_65_older             8.55           14.18\nlife_expectancy          75.88           72.58\nhum_dev_ind               0.77            0.82\nregion           South America  Eastern Europe \n```", "```py\ncovidtotals.loc[(covidtotals.total_cases>30000000) \\\n  & (covidtotals.total_deaths<100000)].T \n```", "```py\niso_code                  JPN           KOR\nlastdate           2023-05-14    2023-09-10\nlocation                Japan   South Korea\ntotal_cases     33,803,572.00 34,571,873.00\ntotal_deaths        74,694.00     35,934.00\ntotal_cases_pm     272,715.69    667,207.06\ntotal_deaths_pm        602.61        693.50\npopulation          123951696      51815808\npop_density            347.78        527.97\nmedian_age              48.20         43.40\ngdp_per_capita      39,002.22     35,938.37\nhosp_beds               13.05         12.27\nvac_per_hund              NaN           NaN\naged_65_older           27.05         13.91\nlife_expectancy         84.63         83.03\nhum_dev_ind              0.92          0.92\nregion              East Asia     East Asia \n```", "```py\n    ax = sns.regplot(x=\"total_cases_pm\", y=\"total_deaths_pm\", data=covidtotals)\n    ax.set(xlabel=\"Cases Per Million\", ylabel=\"Deaths Per Million\", title=\"Total COVID-19 Cases per Million and Deaths per Million by Country\")\n    plt.show() \n    ```", "```py\n    import pandas as pd\n    nls97 = pd.read_csv(\"data/nls97f.csv\", low_memory=False)\n    nls97.set_index(\"personid\", inplace=True) \n    ```", "```py\nnls97[['wageincome20','highestgradecompleted',\n  'highestdegree']].head(3).T \n```", "```py\npersonid                     135335          999406  \\\nwageincome20                    NaN         115,000  \nhighestgradecompleted           NaN              14  \nhighestdegree          4\\. Bachelors  2\\. High School  \npersonid                     151672 \nwageincome20                    NaN \nhighestgradecompleted            16 \nhighestdegree          4\\. Bachelors \n```", "```py\nnls97.loc[:, \"weeksworked18\":\"weeksworked22\"].head(3).T \n```", "```py\npersonid       135335  999406  151672\nweeksworked18     NaN      52      52\nweeksworked19     NaN      52       9\nweeksworked20     NaN      52       0\nweeksworked21     NaN      46       0\nweeksworked22     NaN     NaN       3 \n```", "```py\nnls97.loc[:, \"colenroct15\":\"colenrfeb22\"].head(2).T \n```", "```py\npersonid              135335           999406\ncolenroct15  1\\. Not enrolled  1\\. Not enrolled\ncolenrfeb16              NaN  1\\. Not enrolled\ncolenroct16              NaN  1\\. Not enrolled\ncolenrfeb17              NaN  1\\. Not enrolled\ncolenroct17              NaN  1\\. Not enrolled\ncolenrfeb18              NaN  1\\. Not enrolled\ncolenroct18              NaN  1\\. Not enrolled\ncolenrfeb19              NaN  1\\. Not enrolled\ncolenroct19              NaN  1\\. Not enrolled\ncolenrfeb20              NaN  1\\. Not enrolled\ncolenroct20              NaN  1\\. Not enrolled\ncolenrfeb21              NaN  1\\. Not enrolled\ncolenroct21              NaN  1\\. Not enrolled\ncolenrfeb22              NaN              NaN \n```", "```py\nnls97.loc[(nls97.weeksworked20==0) &\n   (nls97.wageincome20>0),\n  ['weeksworked20','wageincome20']] \n```", "```py\n weeksworked20  wageincome20\npersonid                            \n674877                0        40,000\n692251                0        12,000\n425230                0       150,000\n391939                0        10,000\n510545                0        72,000\n                    ...           ...\n947109                0         1,000\n706862                0        85,000\n956396                0       130,000\n907078                0        10,000\n274042                0       130,000\n[132 rows x 2 columns] \n```", "```py\nnls97.filter(like=\"colenr\").\\\n  apply(lambda x: x.str[0:1]=='3').\\\n  head(2).T \n```", "```py\npersonid     135335  999406\ncolenrfeb97   False   False\ncolenroct97   False   False\ncolenrfeb98   False   False\ncolenroct98   False   False\ncolenrfeb99   False   False\ncolenroct99    True   False\ncolenrfeb00    True   False\ncolenroct00    True    True\ncolenrfeb01    True    True\ncolenroct01    True   False\ncolenrfeb02    True   False\ncolenroct02    True    True\ncolenrfeb03    True    True \n```", "```py\nnls97.filter(like=\"colenr\").\\\n  apply(lambda x: x.str[0:1]=='3').\\\n  any(axis=1).head(2) \n```", "```py\npersonid\n135335    True\n999406    True\ndtype: bool \n```", "```py\nnobach = nls97.loc[nls97.filter(like=\"colenr\").\\\n  apply(lambda x: x.str[0:1]=='4').\\\n  any(axis=1) & ~nls97.filter(like=\"colenr\").\\\n  apply(lambda x: x.str[0:1]=='3').\\\n  any(axis=1), \"colenrfeb17\":\"colenrfeb22\"]\nlen(nobach) \n```", "```py\n24 \n```", "```py\nnobach.head(2).T \n```", "```py\npersonid              793931               787976\n.....abbreviated to save space\ncolenrfeb01        1\\. Not enrolled        1\\. Not enrolled\ncolenroct01      2\\. 2-year college        1\\. Not enrolled\ncolenrfeb02      2\\. 2-year college        1\\. Not enrolled\ncolenroct02      2\\. 2-year college        1\\. Not enrolled\ncolenrfeb03      2\\. 2-year college        1\\. Not enrolled\ncolenroct03        1\\. Not enrolled        1\\. Not enrolled\ncolenrfeb04      2\\. 2-year college        1\\. Not enrolled\ncolenroct04    4\\. Graduate program        1\\. Not enrolled\ncolenrfeb05    4\\. Graduate program        1\\. Not enrolled\n.....\ncolenrfeb14        1\\. Not enrolled        1\\. Not enrolled\ncolenroct14        1\\. Not enrolled      2\\. 2-year college\ncolenrfeb15        1\\. Not enrolled      2\\. 2-year college\ncolenroct15        1\\. Not enrolled      2\\. 2-year college\ncolenrfeb16        1\\. Not enrolled        1\\. Not enrolled\ncolenroct16        1\\. Not enrolled    4\\. Graduate program\ncolenrfeb17        1\\. Not enrolled    4\\. Graduate program\ncolenroct17        1\\. Not enrolled    4\\. Graduate program\ncolenrfeb18        1\\. Not enrolled    4\\. Graduate program\ncolenroct18        1\\. Not enrolled        1\\. Not enrolled\n..... \n```", "```py\nnls97.highestdegree.value_counts().sort_index() \n```", "```py\nhighestdegree\n0\\. None             877\n1\\. GED             1167\n2\\. High School     3531\n3\\. Associates       766\n4\\. Bachelors       1713\n5\\. Masters          704\n6\\. PhD               64\n7\\. Professional     130\nName: count, dtype: int64 \n```", "```py\nno4yearenrollment = \\\n...   nls97.loc[nls97.highestdegree.str[0:1].\\\n...   isin(['4','5','6','7']) & \\\n...   ~nls97.filter(like=\"colenr\").\\\n...   apply(lambda x: x.str[0:1]=='3').\\\n...   any(axis=1), \"colenrfeb97\":\"colenrfeb22\"]\nlen(no4yearenrollment) \n```", "```py\n42 \n```", "```py\nno4yearenrollment.head(2).T \n```", "```py\npersonid                 417244               124616\n.....abbreviated to save space\ncolenroct04     1\\. Not enrolled    2\\. 2-year college\ncolenrfeb05     1\\. Not enrolled    2\\. 2-year college\ncolenroct05     1\\. Not enrolled      1\\. Not enrolled\ncolenrfeb06     1\\. Not enrolled      1\\. Not enrolled\ncolenroct06     1\\. Not enrolled      1\\. Not enrolled\ncolenrfeb07     1\\. Not enrolled      1\\. Not enrolled\ncolenroct07     1\\. Not enrolled      1\\. Not enrolled\ncolenrfeb08     1\\. Not enrolled      1\\. Not enrolled\ncolenroct08     1\\. Not enrolled      1\\. Not enrolled\ncolenrfeb09   2\\. 2-year college      1\\. Not enrolled\ncolenroct09   2\\. 2-year college      1\\. Not enrolled\ncolenrfeb10   2\\. 2-year college      1\\. Not enrolled\ncolenroct10   2\\. 2-year college      1\\. Not enrolled\ncolenrfeb11   2\\. 2-year college      1\\. Not enrolled\ncolenroct11   2\\. 2-year college      1\\. Not enrolled\ncolenrfeb12   2\\. 2-year college      1\\. Not enrolled\ncolenroct12     1\\. Not enrolled      1\\. Not enrolled\ncolenrfeb13     1\\. Not enrolled      1\\. Not enrolled \n```", "```py\nhighwages = \\\n nls97.loc[nls97.wageincome20 >\n nls97.wageincome20.mean()+ \\\n (nls97.wageincome20.std()*3),\n ['wageincome20']]\nhighwages \n```", "```py\n wageincome20\npersonid              \n989896         380,288\n718416         380,288\n693498         380,288\n811201         380,288\n553982         380,288\n               ...\n303838         380,288\n366297         380,288\n436132         380,288\n964406         380,288\n433818         380,288\n[104 rows x 1 columns] \n```", "```py\nworkchanges = nls97.loc[~nls97.loc[:,\n  \"weeksworked16\":\"weeksworked20\"].mean(axis=1).\\\n  between(nls97.weeksworked21*0.5,\\\n  nls97.weeksworked21*2) \\\n  & ~nls97.weeksworked21.isnull(),\n  \"weeksworked16\":\"weeksworked21\"]\nlen(workchanges) \n```", "```py\n1099 \n```", "```py\nworkchanges.head(6).T \n```", "```py\npersonid       151672  620126  ...  692251  483488\nweeksworked16      53      45  ...       0      53\nweeksworked17      52       0  ...       0      52\nweeksworked18      52       0  ...       0      52\nweeksworked19       9       0  ...       0      52\nweeksworked20       0       0  ...       0      15\nweeksworked21       0       0  ...      51      13\n[6 rows x 6 columns] \n```", "```py\nltgrade12 = nls97.loc[nls97.highestgradecompleted<12, ['highestgradecompleted','highestdegree']]\npd.crosstab(ltgrade12.highestgradecompleted, ltgrade12.highestdegree) \n```", "```py\nhighestdegree           0\\. None    1\\. GED  \\\nhighestgradecompleted                   \n5                             0         0  \n6                            11         4  \n7                            23         7  \n8                           108        82  \n9                            98       182  \n10                          105       207  \n11                          113       204  \nhighestdegree          2\\. High School  3\\. Associates \nhighestgradecompleted                                \n5                                   1              0 \n6                                   0              1 \n7                                   1              0 \n8                                   7              0 \n9                                   8              1 \n10                                 14              1 \n11                                 42              2 \n```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import statsmodels.api as sm\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True) \n    ```", "```py\nxvars = ['pop_density','median_age','gdp_per_capita']\ncovidanalysis = covidtotals.loc[:,['total_cases_pm'] + xvars].dropna()\ncovidanalysis.describe() \n```", "```py\n total_cases_pm  pop_density  median_age  gdp_per_capita\ncount                  180          180         180             180\nmean               167,765          204          30          18,290\nstd                190,965          631           9          19,392\nmin                    354            2          15             661\n25%                 11,931           36          22           3,790\n50%                 92,973           82          29          11,822\n75%                263,162          205          38          26,785\nmax                763,475        7,916          48          116,936 \n```", "```py\ndef getlm(df):\n...   Y = df.total_cases_pm\n...   X = df[['pop_density',\n        'median_age','gdp_per_capita']]\n...   X = sm.add_constant(X)\n...   return sm.OLS(Y, X).fit()\n...\nlm = getlm(covidanalysis)\nlm.summary() \n```", "```py\n coef       std err         t      P>|t|\n----------------------------------------------------------------\nConst              -2.382e+05      3.41e+04    -6.980      0.000\npop_density           12.4060        14.664     0.846      0.399\nmedian_age              11570      1291.446     8.956      0.000\ngdp_per_capita         2.9674         0.621     4.777      0.000 \n```", "```py\ninfluence = lm.get_influence().summary_frame()\ninfluence.loc[influence.cooks_d>0.5, ['cooks_d']] \n```", "```py\n cooks_d\niso_code         \nQAT          0.70\nSGP          3.12 \n```", "```py\ncovidanalysis.loc[influence.cooks_d>0.5] \n```", "```py\n total_cases_pm  pop_density  median_age  gdp_per_capita\niso_code                                                        \nQAT             190,909          227          32         116,936\nSGP             531,184        7,916          42          85,535 \n```", "```py\nfig, ax = plt.subplots(figsize=(8,8))\nsm.graphics.influence_plot(lm, ax = ax, alpha=5, criterion=\"cooks\")\nplt.show() \n```", "```py\ncovidanalysisminusoutliers = covidanalysis.loc[influence.cooks_d<0.5]\nlm = getlm(covidanalysisminusoutliers)\nlm.summary() \n```", "```py\n coef    std err          t      P>|t|\n--------------------------------------------------------------\nconst              -2.158e+05   3.43e+04     -6.288      0.000\npop_density           61.2396     34.260      1.788      0.076\nmedian_age          9968.5170   1346.416      7.404      0.000\ngdp_per_capita         4.1112      0.704      5.841      0.000 \n```", "```py\n    import pandas as pd\n    from pyod.models.knn import KNN\n    from sklearn.preprocessing import StandardScaler\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True) \n    ```", "```py\n    standardizer = StandardScaler()\n    analysisvars = ['location','total_cases_pm',\n    ...   'total_deaths_pm',  'pop_density',\n    ...   'median_age','gdp_per_capita']\n    covidanalysis = covidtotals.loc[:, analysisvars].dropna()\n    covidanalysisstand = standardizer.fit_transform(covidanalysis.iloc[:, 1:]) \n    ```", "```py\nclf_name = 'KNN'\nclf = KNN(contamination=0.1)\nclf.fit(covidanalysisstand) \n```", "```py\nKNN(algorithm='auto', contamination=0.1, leaf_size=30, method='largest',\n  metric='minkowski', metric_params=None, n_jobs=1, n_neighbors=5, p=2,\n  radius=1.0) \n```", "```py\ny_pred = clf.labels_\ny_scores = clf.decision_scores_ \n```", "```py\npred = pd.DataFrame(zip(y_pred, y_scores),\n...   columns=['outlier','scores'],\n...   index=covidanalysis.index)\npred.sample(10, random_state=2) \n```", "```py\n outlier  scores\niso_code                 \nBHR             1    2.69\nBRA             0    0.75\nZWE             0    0.21\nBGR             1    1.62\nCHN             0    0.94\nBGD             1    1.52\nGRD             0    0.68\nUZB             0    0.37\nMMR             0    0.37\nECU             0    0.58 \n```", "```py\npred.outlier.value_counts() \n```", "```py\n0    162\n1     18\nName: outlier, dtype: int64 \n```", "```py\npred.groupby(['outlier'])[['scores']].agg(['min','median','max']) \n```", "```py\nscores                      \n          min   median   max\noutlier                     \n0         0.08   0.60   1.40\n1         1.42   1.65  11.94 \n```", "```py\ncovidanalysis.join(pred).\\\n...   loc[pred.outlier==1,\\\n...   ['location','total_cases_pm',\n...   'total_deaths_pm','scores']].\\\n...   sort_values(['scores'],\n...   ascending=False).head(10) \n```", "```py\n location  total_cases_pm  \\\niso_code                                        \nSGP                  Singapore      531,183.84  \nQAT                      Qatar      190,908.72  \nBHR                    Bahrain      473,167.02  \nLUX                 Luxembourg      603,439.46  \nPER                       Peru      133,239.00  \nBRN                     Brunei      763,475.44  \nMDV                   Maldives      356,423.66  \nMLT                      Malta      227,422.82  \nARE       United Arab Emirates      113,019.21  \nBGR                   Bulgaria      195,767.89  \n          total_deaths_pm  scores \niso_code                          \nSGP                346.64   11.94 \nQAT                256.02    3.04 \nBHR              1,043.31    2.69 \nLUX              1,544.16    2.49 \nPER              6,507.66    2.27 \nBRN                396.44    2.26 \nMDV                603.29    1.98 \nMLT              1,687.63    1.96 \nARE                248.81    1.69 \nBGR              5,703.52    1.62 \n```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.ensemble import IsolationForest\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True) \n    ```", "```py\nanalysisvars = ['location','total_cases_pm','total_deaths_pm',\n...   'pop_density','median_age','gdp_per_capita']\nstandardizer = StandardScaler()\ncovidtotals.isnull().sum() \n```", "```py\nlastdate             0\nlocation             0\ntotal_cases          0\ntotal_deaths         0\ntotal_cases_pm       0\ntotal_deaths_pm      0\npopulation           0\npop_density         11\nmedian_age          24\ngdp_per_capita      27\nhosp_beds           45\nregion               0\ndtype: int64 \n```", "```py\ncovidanalysis = covidtotals.loc[:, analysisvars].dropna()\ncovidanalysisstand = standardizer.fit_transform(covidanalysis.iloc[:, 1:]) \n```", "```py\nclf=IsolationForest(n_estimators=100,\n  max_samples='auto', contamination=.1,\n  max_features=1.0)\nclf.fit(covidanalysisstand) \n```", "```py\nIsolationForest(contamination=0.1) \n```", "```py\ncovidanalysis['anomaly'] = \\\n  clf.predict(covidanalysisstand)\ncovidanalysis['scores'] = \\\n  clf.decision_function(covidanalysisstand)\ncovidanalysis.anomaly.value_counts() \n```", "```py\n1          156\n-1          18\nName: anomaly, dtype: int64 \n```", "```py\ninlier, outlier = \\\n  covidanalysis.loc[covidanalysis.anomaly==1],\\\n  covidanalysis.loc[covidanalysis.anomaly==-1]\noutlier[['location','total_cases_pm',\n  'total_deaths_pm','median_age',\n  'gdp_per_capita','scores']].\\\n  sort_values(['scores']).\\\n  head(10) \n```", "```py\n location  total_cases_pm  total_deaths_pm  \\\niso_code                                               \nSGP        Singapore      531,183.84           346.64  \nBHR          Bahrain      473,167.02         1,043.31  \nBRN           Brunei      763,475.44           396.44  \nQAT            Qatar      190,908.72           256.02  \nPER             Peru      133,239.00         6,507.66  \nMLT            Malta      227,422.82         1,687.63  \nMDV         Maldives      356,423.66           603.29  \nLUX       Luxembourg      603,439.46         1,544.16  \nBGR         Bulgaria      195,767.89         5,703.52  \nBGD       Bangladesh       11,959.46           172.22  \n          median_age  gdp_per_capita  scores \niso_code                                     \nSGP            42.40       85,535.38   -0.26 \nBHR            32.40       43,290.71   -0.09 \nBRN            32.40       71,809.25   -0.09 \nQAT            31.90      116,935.60   -0.08 \nPER            29.10       12,236.71   -0.08 \nMLT            42.40       36,513.32   -0.06 \nMDV            30.60       15,183.62   -0.06 \nLUX            39.70       94,277.96   -0.06 \nBGR            44.70       18,563.31   -0.04 \nBGD            27.50        3,523.98   -0.04 \n```", "```py\n    ax = plt.axes(projection='3d')\n    ax.set_title('Isolation Forest Anomaly Detection')\n    ax.set_zlabel(\"Cases Per Million\")\n    ax.set_xlabel(\"GDP Per Capita\")\n    ax.set_ylabel(\"Median Age\")\n    ax.scatter3D(inlier.gdp_per_capita, inlier.median_age, inlier.total_cases_pm, label=\"inliers\", c=\"blue\")\n    ax.scatter3D(outlier.gdp_per_capita, outlier.median_age, outlier.total_cases_pm, label=\"outliers\", c=\"red\")\n    ax.legend()\n    plt.tight_layout()\n    plt.show() \n    ```", "```py\n    import pandas as pd\n    from pandasai.llm.openai import OpenAI\n    from pandasai import SmartDataframe\n    llm = OpenAI(api_token=\"Your API key\") \n    ```", "```py\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotalssdf = SmartDataframe(covidtotals, config={\"llm\": llm}) \n    ```", "```py\n    covidtotalssdf.chat(\"Plot histogram of total cases per million\") \n    ```", "```py\n    covidtotalssdf.chat(\"Show box plot of total cases per million\") \n    ```", "```py\n    covidtotalssdf.chat(\"regplot total_deaths_pm on total_cases_pm\") \n    ```", "```py\n    covidtotalssdf.chat(\"Show total cases per million for 7 highest values and 7 lowest values of total cases per million sorted by total cases per million\") \n    ```", "```py\n     iso_code                       location             total_cases_pm\n    190      SVN                       Slovenia                    639,408\n    67       FRO                 Faeroe Islands                    652,484\n    194      KOR                    South Korea                    667,207\n    12       AUT                        Austria                    680,263\n    180      SMR                     San Marino                    750,727\n    52       CYP                         Cyprus                    760,161\n    30       BRN                         Brunei                    763,475\n    228      YEM                          Yemen                        354\n    148      NER                          Niger                        363\n    40       TCD                           Chad                        434\n    204      TZA                       Tanzania                        660\n    186      SLE                   Sierra Leone                        904\n    32       BFA                   Burkina Faso                        975\n    54       COD   Democratic Republic of Congo                      1,003 \n    ```", "```py\n    covidtotalssdf.chat(\"Show total cases per million for locations with highest total cases per million in each region\") \n    ```", "```py\n     location       total_cases_pm\n    region                                              \n    Caribbean                       Martinique              626,793\n    Central Africa       Sao Tome and Principe               29,614\n    Central America                 Costa Rica              237,539\n    Central Asia                       Armenia              162,356\n    East Africa                        Reunion              507,765\n    East Asia                           Brunei              763,475\n    Eastern Europe                      Cyprus              760,161\n    North Africa                       Tunisia               93,343\n    North America    Saint Pierre and Miquelon              582,158\n    Oceania / Aus                          Niue             508,709\n    South America              Falkland Islands             505,919\n    South Asia                          Bahrain             473,167\n    Southern Africa                Saint Helena             401,037\n    West Africa                      Cape Verde             108,695\n    West Asia                            Israel             512,388\n    Western Europe                   San Marino             750,727 \n    ```", "```py\n    covidtotalssdf.chat(\"Show total cases per million and total deaths per million for locations with high total_cases_pm and low total_deaths_pm\") \n    ```", "```py\n     location       total_cases_pm  total_deaths_pm\n    30            Brunei              763,475              396\n    46      Cook Islands              422,910              117\n    68  Falkland Islands              505,919                0\n    81         Greenland              211,899              372\n    93           Iceland              562,822              499\n    126 Marshall Islands              387,998              409\n    142            Nauru              424,947               79\n    150             Niue              508,709                0\n    156            Palau              346,439              498\n    167            Qatar              190,909              256\n    172 Saint Barthelemy              500,910              455\n    173     Saint Helena              401,037                0\n    177 Saint Pierre and Miquelon     582,158              340\n    187        Singapore              531,184              347\n    209            Tonga              158,608              112\n    214           Tuvalu              259,638               88\n    217 United Arab Emirates          113,019              249\n    226          Vietnam              118,387              440 \n    ```", "```py\nimport pandas as pd\n# Filter rows with high total_cases_pm and low total_deaths_pm\nfiltered_df = dfs[0][(dfs[0]['total_cases_pm'] > 100000) & (dfs[0]['total_deaths_pm'] < 500)]\n# Select only the required columns\nresult_df = filtered_df[['location', 'total_cases_pm', 'total_deaths_pm']]\nresult = {\"type\": \"dataframe\", \"value\": result_df}\n            ```", "```py\n\n```", "```py\nfiltered_df = dfs[0][(dfs[0]['total_cases_pm'] > 100000) & (dfs[0]['total_deaths_pm'] < 500)]\nresult_df = filtered_df[['location', 'total_cases_pm', 'total_deaths_pm']]\nresult = {'type': 'dataframe', 'value': result_df} \n```"]