["```py\ndef closest(position, positions):\n    x0, y0 = position\n    dbest, ibest = None, None\n    for i, (x, y) in enumerate(positions):\n        # squared Euclidean distance from every position to the position of interest\n        d = (x - x0) ** 2 + (y - y0) ** 2\n        if dbest is None or d < dbest:\n            dbest, ibest = d, i\n    return ibest\n```", "```py\nIn [1]: import random\nIn [2]: positions = [(random.random(), random.random()) for _ in xrange(10000000)]\n\n```", "```py\nIn [3]: %timeit closest((.5, .5), positions)\n1 loops, best of 3: 16.4 s per loop.\n\n```", "```py\nIn [1]: %pylab\n\n```", "```py\nIn [2]: positions = rand(10000000,2)\n\n```", "```py\nIn [3]: type(positions)\nOut[3]: numpy.ndarray\nIn [4]: positions.ndim, positions.shape\nOut[4]: 2, (10000000, 2)\n\n```", "```py\nIn [5]: x, y = positions[:,0], positions[:,1]\n\n```", "```py\nIn [6]: distances = (x - .5) ** 2 + (y - .5) ** 2\n\n```", "```py\nIn [7]: %timeit exec(In[6])\n1 loops, best of 3: 508 ms per loop\n\n```", "```py\nIn [8]: %timeit ibest = distances.argmin()\n1 loops, best of 3: 20 ms per loop\n\n```", "```py\nIn [1]: x = array([1, 2, 3])\nIn [2]: x.shape\nOut[2]: (3,)\nIn [3]: x.dtype\nOut[3]: dtype('int32')\n\n```", "```py\nIn [4]: x = array([1, 2, 3], dtype=float64)\nIn [5]: x.dtype\nOut[5]: dtype('float64')\n\n```", "```py\nIn [6]: array([[1, 2, 3], [4, 5, 6]])\nOut[6]:\narray([[1, 2, 3],\n [4, 5, 6]])\n\n```", "```py\ndef mul1(n):\n    return array([[(i + 1) * (j + 1) for i in xrange(n)] for j in xrange(n)])\n```", "```py\nIn [7]: mul1(4)\nOut[7]:\narray([[ 1,  2,  3,  4],\n [ 2,  4,  6,  8],\n [ 3,  6,  9, 12],\n [ 4,  8, 12, 16]])\nIn [8]: %timeit mul1(100)\n100 loops, best of 3: 5.14 ms per loop\n\n```", "```py\nIn [1]: x = zeros(100)\n\n```", "```py\nIn [2]: x = zeros((10, 10))\n\n```", "```py\nIn [5]: arange(2, 10, 2)\nOut[5]:\narray([2, 4, 6, 8])\n\n```", "```py\nIn [1]: rand(2, 5)\nOut[1]:\narray([[ 0.925,  0.849,  0.858,  0.269,  0.644],\n [ 0.796,  0.001,  0.183,  0.397,  0.788]])\n\n```", "```py\nIn [1]: np.fromstring('1 2 5 10', dtype=int, sep=' ')\nOut[1]: array([ 1,  2,  5, 10])\n\n```", "```py\nIn [1]: cd fbdata\nIn [2]: loadtxt('0.edges')\nOut[2]:\narray([[ 236.,  186.],\n ...,\n [ 291.,  339.]])\n\n```", "```py\nIn [1]: import urllib2, zipfile\nIn [2]: url = 'http://ipython.rossant.net/'\nIn [3]: filename = 'cities.zip'\nIn [4]: downloaded = urllib2.urlopen(url + filename)\nIn [5]: folder = 'data'\nIn [6]: mkdir $folder\nIn [7]: with open(filename, 'wb') as f:\n f.write(downloaded.read())\nIn [8]: with zipfile.ZipFile(filename) as zip:\n zip.extractall(folder)\n\n```", "```py\nIn [9]: import pandas as pd\nIn [10]: filename = 'data/worldcitiespop.txt'\nIn [11]: data = pd.read_csv(filename)\n\n```", "```py\nIn [12]: type(data)\nOut[12]: pandas.core.frame.DataFrame\n\n```", "```py\nIn [13]: data.shape, data.keys()\nOut[13]: ((3173958, 7),\n Index([Country, City, AccentCity, Region, Population, Latitude, Longitude], dtype=object))\n\n```", "```py\nIn [14]: data.tail()\n\n```", "```py\nIn [15]: data.AccentCity\nOut[15]:\n0                  Aixas\n1             Aixirivali\n...\n3173956              Zuzumba\n3173957           Zvishavane\nName: AccentCity, Length: 3173958\n\n```", "```py\nIn [16]: data.AccentCity[30000]\nOut[16]: 'Howasiyan'\n\n```", "```py\nIn [17]: data[data.AccentCity=='New York']\nOut[17]:\n Country      City AccentCity Region  Population   Latitude   Longitude\n998166       gb  new york   New York     H7         NaN  53.083333   -0.150000\n...\n2990572      us  new york   New York     NY     8107916  40.714167  -74.006389\n\n```", "```py\nIn [18]: ny = 2990572\nIn [19]: data.ix[ny]\nOut[19]:\nCountry             us\nCity          new york\nAccentCity    New York\nRegion              NY\nPopulation     8107916\nLatitude      40.71417\nLongitude    -74.00639\nName: 2990572\n\n```", "```py\nIn [20]: population = array(data.Population)\nIn [21]: population.shape\nOut[21]: (3173958,)\n\n```", "```py\nIn [22]: population[ny]\nOut[22]: 8107916.0\n\n```", "```py\nIn [23]: isnan(population)\nOut[23]: array([ True,  True,  True, ...,  True,  True, False], dtype=bool)\nIn [24]: x = population[~_]\nIn [25]: len(x), len(x) / float(len(population))\nOut[25]: (47980, 0.015)\n\n```", "```py\nIn [1]: x = rand(5)\nIn [2]: x\nOut[2]: array([ 0.5  ,  0.633,  0.158,  0.862,  0.35 ])\nIn [3]: y = x[::2]\nIn [4]: y\nOut[4]: array([ 0.5  ,  0.158,  0.35 ])\nIn [5]: y[0] = 1\nIn [6]: x\nOut[6]: array([ 1\\.   ,  0.633,  0.158,  0.862,  0.35 ])\n\n```", "```py\nIn [7]: ind = [0, 1, 0, 2]\nIn [8]: x[ind]\nOut[8]: array([ 1\\.   ,  0.633,  1\\.   ,  0.158])\n\n```", "```py\nIn [1]: rand(6)\nOut[1]: array([ 0.872,  0.257,  0.083,  0.788,  0.931,  0.232])\nIn [2]: x.reshape((2, 3))\narray([[ 0.872,  0.257,  0.083],\n [ 0.788,  0.931,  0.232]])\n\n```", "```py\nIn [1]: x = arange(3)\nIn [2]: tile(x, (2, 1))\nOut[2]:\narray([[0, 1, 2],\n [0, 1, 2]])\nIn [3]: repeat(x, 2)\nOut[3]:\narray([0, 0, 1, 1, 2, 2])\n\n```", "```py\ndef mul2(n):\n    M = arange(1, n + 1).reshape((-1, 1))\n    M = tile(M, (1, n))\n    N = arange(1, n + 1).reshape((1, -1))\n    N = tile(N, (n, 1))\n    return M * N\n```", "```py\nIn [1]: %timeit mul2(100)\n10000 loops, best of 3: 188 us per loop\n\n```", "```py\nIn [1]: x = arange(6)\nIn [2]: split(x, 2)\nOut[2]:\n[array([0, 1, 2]), array([3, 4, 5])]\nIn [3]: split(x, [2,5])\nOut[3]:\n[array([0, 1]), array([2, 3, 4]), array([5])]\n\n```", "```py\ndef mul3(n):\n    M = arange(1, n + 1).reshape((-1, 1))\n    N = arange(1, n + 1).reshape((1, -1))\n    return M * N\n```", "```py\nIn [1]: timeit mul3(100)\n10000 loops, best of 3: 71.8 us per loop\n\n```", "```py\nIn [26]: def locate(x, y):\n # locations is a Ncities x 2 array with the cities positions\n locations = data[['Latitude','Longitude']].as_matrix()\n d = locations - array([x, y])\n # squared distances from every city to the position (x,y)\n distances = d[:,0] ** 2 + d[:,1] ** 2\n # closest in the index of the city achieving the minimum distance to the position (x,y)\n closest = distances.argmin()\n # we return the name of that city\n return data.AccentCity[closest]\nIn [27]: print(locate(48.861, 2.3358))\nParis\n\n```", "```py\nIn [28]: population.describe()\ncount       47980.000000\nmean        47719.570634\nstd        302888.715626\nmin             7.000000\n25%          3732.000000\n50%         10779.000000\n75%         27990.500000\nmax      31480498.000000\n\n```"]