- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Optimizing Streamlit Web App UX with Customization and UI Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 8*](B21147_08.xhtml#_idTextAnchor091), we started the development
    of a new web application, *Covid-19 Detection Tool*. We have already created the
    virtual environment and the application skeleton, together with some basic decorations.
    It’s time now to focus on the three main sections of our new tool: **Image Enhancement**,
    **Diagnosis**, and **Disclaimer** **and Info**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Contrast** and **Brightness** are UI elements that allow users to adjust
    the contrast and brightness of images. These features can help improve the visibility
    and clarity of the displayed image. Sliders and radio buttons are widgets that
    allow users to interact with and manipulate data within the web app. Sliders allow
    users to set a value within a range by dragging a slider button, while radio buttons
    allow users to select a single option from a group of options. Overall, contrast,
    brightness, sliders, and radio buttons are powerful UI features that enable us
    to create very engaging and interactive web applications for COVID-19 detection.
    In the case of applications that make predictions or forecasts, such as the one
    we are building together, it’s always very important to add a *Disclaimer* in
    order to not provide any kind of wrong message to the users.'
  prefs: []
  type: TYPE_NORMAL
- en: By developing these new features, we have the chance to learn how to use the
    more advanced techniques and skills of Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with more advanced web app features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the **Image Enhancement** section using the Pillow library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the **Disclaimer and** **Info** section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll use the following libraries, packages, and tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pillow
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code in the chapter can be accessed through the following GitHub link:
    [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/f1bd9c354072092c268f27621680c858ce93c823/Chapter09](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/f1bd9c354072092c268f27621680c858ce93c823/Chapter09)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with more advanced web app features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 8*](B21147_08.xhtml#_idTextAnchor091), we stopped our development
    at the point shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1: Chapter09 starting point](img/B21147_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Chapter09 starting point'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s start working on the menu’s three voices: **Image Enhancement**,
    **Diagnosis**, and **Disclaimer and Info**. Before that, since we are entering
    some advanced features of Streamlit and considering that new versions are released
    quite often, it’s very important to remember how Streamlit’s official documentation
    ([https://docs.streamlit.io/](https://docs.streamlit.io/)) is always the best
    place to get detailed info about all the available components and APIs; for example,
    in case you have any doubts about, let’s say, the **Image** widget, you can just
    search for it in the **API reference** menu on the left side of the official documentation
    page or directly in the search bar in the top-right corner and check out all the
    results.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2: Streamlit’s official documentation](img/B21147_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Streamlit’s official documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s open our code in Sublime Text and let’s continue with our development
    since, at the moment, we have only an empty menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already defined a list of voices for our menu, which is called `activities`,
    and an `if` clause that checks which of these voices has been selected and put
    in a variable named `choice`; our job now is to write the business logic for each
    one of these three possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3: The points where the business logic has to be inserted](img/B21147_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: The points where the business logic has to be inserted'
  prefs: []
  type: TYPE_NORMAL
- en: 'We know very well that `pass` is just a placeholder, so we can start our coding
    from the first one of the menu voices: **Image Enhancement**.'
  prefs: []
  type: TYPE_NORMAL
- en: Images can be enhanced in many ways – for example, by changing their brightness
    or contrast. So we can use some radio buttons in the sidebar to give the user
    the faculty to choose what kind of enhancement they want to perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The radio buttons, as we should know, have a couple of mandatory arguments:
    a label (a title) and a list of all the items that can be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4: Radio button for Image Enhancement](img/B21147_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Radio button for Image Enhancement'
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, the list of items in the radio button contains all the features we
    want to show on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5: Radio button in the browser](img/B21147_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Radio button in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s quite clear that now we need some `if` clauses. This is because if the
    `enhance_type` variable is `Original`, we need to do something; if it’s `Contrast`,
    we need to do something different, and if it’s `Brightness`, we need to do something
    else:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: If clauses for “Image Enhancement”](img/B21147_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: If clauses for “Image Enhancement”'
  prefs: []
  type: TYPE_NORMAL
- en: As already said, `pass` is just a placeholder, so let’s take care of these `if`
    clauses one by one. The first one is `Contrast`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Image Enhancement section using the Pillow library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Among the libraries we imported at the beginning, there is `ImageEnhance` that
    can actually take care of all the features related to any kind of image enhancement
    for us. This means that we can use the `Contrast` and `Brightness` methods already
    included in Pillow’s `ImageEnhance` module because all the functions we need,
    and many others, have been already implemented for us.
  prefs: []
  type: TYPE_NORMAL
- en: Pillow, or **Python Imaging Library**, is a very powerful library and it can
    do more than the things we are showing in this book. For this reason, we suggest
    taking a look at its official page on PyPI ([https://pypi.org/project/Pillow/](https://pypi.org/project/Pillow/))
    and reading all the documentation contained there.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: The Pillow page on PyPI](img/B21147_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: The Pillow page on PyPI'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with `Contrast`.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in *Figure 9**.8*, managing `Contrast` with Pillow’s methods is really
    very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8: The Contrast feature](img/B21147_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: The Contrast feature'
  prefs: []
  type: TYPE_NORMAL
- en: In the `if` case immediately after the subheader, we start by adding a *slider*.
    The values on this slider go from `0.5` to `5.0`; you can play with this range
    to check the different behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: After adding the slider, we need to instantiate an `ImageEnhance.Contrast` object
    using the image we opened previously (`our_image`) with `file_uploader`. Then,
    we apply the `enhance` method to this image with the value selected by using the
    slider.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the result is printed on the screen thanks to `st.image`, one of Streamlit’s
    classic widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result from the browser’s perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9: The Contrast feature in action](img/B21147_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: The Contrast feature in action'
  prefs: []
  type: TYPE_NORMAL
- en: It gives a very nice result, and managing this kind of image enhancement with
    Pillow is really very easy.
  prefs: []
  type: TYPE_NORMAL
- en: As we just saw, Pillow contains the `Contrast` function out of the box. So,
    it’s quite obvious to imagine that it contains a `Brightness` function as well.
  prefs: []
  type: TYPE_NORMAL
- en: Brightness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In fact, the code we need to write for the `Brightness` feature is more or
    less the same as that for the `Contrast` feature. We can type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10: The Brightness feature](img/B21147_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: The Brightness feature'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code is exactly the same as the code we wrote for `Contrast`,
    but this time, we are using the `ImageEnhance.Brightness` method instead of the
    `ImageEnhance.Contrast` method.
  prefs: []
  type: TYPE_NORMAL
- en: So, once again, we set a value for the brightness using a slider, create an
    `enhancer` object from the image opened thanks to `file_uploader`, apply the brightness
    to this image, and print the result on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result in our web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11: The Brightness feature in action](img/B21147_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: The Brightness feature in action'
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, `Brightness` and `Contrast`, you can change the strength of the
    effect by selecting different values using the slider, and if you don’t like the
    outcome, you can always change the range that we set as `0.5` to `5.0`.
  prefs: []
  type: TYPE_NORMAL
- en: The final option we can select using the radio button is `Original`.
  prefs: []
  type: TYPE_NORMAL
- en: Original
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the case of the `file_uploader` and show it on the screen. The code is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12: The Original Image feature](img/B21147_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.12: The Original Image feature'
  prefs: []
  type: TYPE_NORMAL
- en: If you want, you can try to set the `use_column_width` argument in `st.image`
    to `False` and check the result, or, if you prefer, you can specify a width size
    different from `600`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13: The Original Image feature in action](img/B21147_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: The Original Image feature in action'
  prefs: []
  type: TYPE_NORMAL
- en: With the **Original** image feature, we can consider the **Image Enhancement**
    voice of the menu completed. Thanks to the Pillow library, we could implement
    all features of this voice in a very smooth way. This is one of the best aspects
    of Python, and you can always find a nice package that already has all the features
    you need!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to the **Disclaimer and Info** section. The **Diagnosis** section
    is a little bit more complex, so we will leave that for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Disclaimer and Info section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dealing with applications that provide predictions, especially health predictions,
    can be a little bit dangerous, so a good practice is to write down a disclaimer
    to avoid any kind of misunderstanding.
  prefs: []
  type: TYPE_NORMAL
- en: The disclaimer of this web application, named **Disclaimer and Info**, also
    serves the function of providing some information about the model used to predict
    COVID-19 from images and about the dataset that was used to train that model.
  prefs: []
  type: TYPE_NORMAL
- en: In short, the main purpose of the disclaimer is to clarify that the application
    is just a demo of Streamlit’s capabilities and doesn’t have any value from a medical
    point of view. Additionally, the disclaimer also contains some information about
    the AI model used to make the predictions.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 10*](B21147_10.xhtml#_idTextAnchor109), we will see that every
    time we need to make predictions, a good strategy is to use a machine learning
    model.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, the model used in our web application is a so-called `tensorflow`
    and using a dataset comprising 206 images of affected people and 206 images of
    healthy individuals.
  prefs: []
  type: TYPE_NORMAL
- en: Additional information
  prefs: []
  type: TYPE_NORMAL
- en: CNNs are particular neural network architectures that perform very well with
    problems related to images, such as image classification. What we want to do with
    this application is precisely the classification of images, specifically X-ray
    images of the chest, to discover whether or not they show cases of COVID-19\.
    Discovering whether or not a given image represents a COVID-19 case is a classic
    problem of binary classification, which means understanding whether something
    is true or false. CNNs are very good classifiers for this type of task. However,
    for better performance, they need a large number of images, so a big dataset is
    required to train these models.
  prefs: []
  type: TYPE_NORMAL
- en: The CNN we used performs quite well, even if it was trained with a limited number
    of images. The model performs well when classifying images representing COVID-19
    cases and healthy individuals, but its predictive performance is poor for images
    representing SARS cases (SARS is rather close to Covid-19).
  prefs: []
  type: TYPE_NORMAL
- en: 'The disclaimer has to be inserted in the `else` part of the `if` clause related
    to the menu, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14: The insertion point of the disclaimer](img/B21147_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: The insertion point of the disclaimer'
  prefs: []
  type: TYPE_NORMAL
- en: We can decide to write this disclaimer in many ways, but a very easy one is
    just to use some `st.write` objects. In this way, we can have very clear, well-presented,
    formatted text, and we can add links to some websites that can be used as references.
    We are using the **Markdown** syntax, so it’s possible to use bold, italics, bullet
    points, lists, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The websites linked in the text are real websites that inspired the author to
    create this tool during the first COVID-19 lockdown. If you want to check them
    out, they are quite interesting!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code we can use to add the disclaimer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15: The code used for the Disclaimer section](img/B21147_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: The code used for the Disclaimer section'
  prefs: []
  type: TYPE_NORMAL
- en: Actually, this code is just a proposal. You don’t need to copy it in your version
    of the *COVID-19 Detection Tool* web application. You can modify it as you like,
    and if you decide to use another model to make the predictions (nowadays, it’s
    quite easy to find several pretrained models online, for example, [https://ieeexplore.ieee.org/document/9340145](https://ieeexplore.ieee.org/document/9340145)
    or [https://www.nature.com/articles/s41598-023-33685-z](https://www.nature.com/articles/s41598-023-33685-z)),
    you can insert the information about your own version and your new model, together
    with an explanation about its performances and accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the **Disclaimer** section for my version of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 9.16: The \uFEFFdisclaimer in the browser](img/B21147_09_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: The disclaimer in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: The result is very clean and neat because we used headers, bold, lists with
    bullet points, and hyperlinks to external websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, let’s print the code we have implemented up to now in order to be
    sure that everything for our web application is written correctly without mistakes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17: The first part of the code](img/B21147_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: The first part of the code'
  prefs: []
  type: TYPE_NORMAL
- en: To recap, in *Figure 9**.17*, we have the first part of the code, where we import
    all the relevant libraries, set up the page title and icon, define the `main`
    function, and inside it, we put an image in the sidebar together with the menu
    of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'This menu contains three voices: **Image Enhancement**, **Diagnosis**, and
    **Disclaimer and Info**. Inside **Image Enhancement**, we can select between three
    options: **Original**, **Contrast**, and **Brightness**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18: The second part of the code](img/B21147_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: The second part of the code'
  prefs: []
  type: TYPE_NORMAL
- en: In the second part of the code, shown in *Figure 9**.18*, we complete the **Disclaimer
    and Info** and **About the Author** sections, while we leave the **Diagnosis**
    part blank for now.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have completed two of the three voices composing the menu
    of our *COVID-19 Detection Tool* web application.
  prefs: []
  type: TYPE_NORMAL
- en: To deal with the **Image Enhancement** voice, we leveraged the Pillow library,
    which is a very powerful library that makes it possible to manage some quite powerful
    functions, such as image contrast and brightness, with very few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: We also created multiple selections for the user, adopting radio buttons and
    `if` clauses. Radio buttons are a very clean and powerful way to propose selections,
    and there is no way to put any kind of ambiguity in the process.
  prefs: []
  type: TYPE_NORMAL
- en: Using sliders in combination with image visualization is a powerful tool to
    adjust various parameters, such as contrast and brightness. Sliders provide the
    user with the ability to precisely and continuously select the desired value for
    any given parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Another important trick to underline is that every time we modified images (for
    example, to perform brightness adjustments), we worked on their copies and not
    on the original image. In this way, it was quite simple to move back to the original
    situation just showing the image that was loaded thanks to `file_uploader`.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how well-formatted text that leverages the Markdown syntax can
    be full of information to the user – for example, to show the technologies used
    and the sources and documents of inspiration. For sure, this clean and nicely
    formatted text is the perfect way to create disclaimers to avoid any future problems.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to integrate artificial intelligence
    and machine learning models into our web applications.
  prefs: []
  type: TYPE_NORMAL
