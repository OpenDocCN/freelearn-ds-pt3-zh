["```py\nbunzip2 hapmap3_r3_b36_fwd.consensus.qc.poly.map.gz\nbunzip2 hapmap3_r3_b36_fwd.consensus.qc.poly.ped.gz\n```", "```py\n    from collections import defaultdict\n    f = open('relationships_w_pops_041510.txt')\n    pop_ind = defaultdict(list)\n    f.readline() # header\n    offspring = []\n    for l in f:\n        toks = l.rstrip().split('\\t')\n        fam_id = toks[0]\n        ind_id = toks[1]\n        mom = toks[2]\n        dad = toks[3]\n        if mom != '0' or dad != '0':\n            offspring.append((fam_id, ind_id))\n        pop = toks[-1]\n    pop_ind[pop].append((fam_id, ind_id))\n    f.close()\n    ```", "```py\n    import os\n    os.system('plink2 --pedmap hapmap3_r3_b36_fwd.consensus.qc.poly --out hapmap10 --thin 0.1 --geno 0.1 --export ped')\n    os.system('plink2 --pedmap hapmap3_r3_b36_fwd.consensus.qc.poly --out hapmap1 --thin 0.01 --geno 0.1 --export ped')\n    ```", "```py\n!plink2 --pedmap hapmap3_r3_b36_fwd.consensus.qc.poly --out hapmap10 --thin 0.1 --geno 0.1 --export ped\n!plink2 --pedmap hapmap3_r3_b36_fwd.consensus.qc.poly --out hapmap1 --thin 0.01 --geno 0.1 --export ped\n```", "```py\n    def get_non_auto_SNPs(map_file, exclude_file):\n        f = open(map_file)\n        w = open(exclude_file, 'w')\n        for l in f:\n            toks = l.rstrip().split('\\t')\n            try:\n                chrom = int(toks[0])\n            except ValueError:\n                rs = toks[1]\n                w.write('%s\\n' % rs)\n        w.close()\n    get_non_auto_SNPs('hapmap1.map', 'exclude1.txt')\n    get_non_auto_SNPs('hapmap10.map', 'exclude10.txt')\n    os.system('plink2 –-pedmap hapmap1 --out hapmap1_auto --exclude exclude1.txt --export ped')\n    os.system('plink2 --pedmap hapmap10 --out hapmap10_auto --exclude exclude10.txt --export ped')\n    ```", "```py\n    os.system('plink2 --pedmap hapmap10_auto --filter-founders --out hapmap10_auto_noofs --export ped')\n    ```", "```py\n    os.system('plink2 --pedmap hapmap10_auto_noofs --indep-pairwise 50 10 0.1 --out keep --export ped')\n    os.system('plink2 --pedmap hapmap10_auto_noofs --extract keep.prune.in --recode --out hapmap10_auto_noofs_ld --export ped')\n    ```", "```py\n    os.system('plink2 --file hapmap10_auto_noofs_ld --recode12 tab --out hapmap10_auto_noofs_ld_12 --export ped 12')\n    os.system('plink2 --make-bed --file hapmap10_auto_noofs_ld --out hapmap10_auto_noofs_ld')\n    ```", "```py\n    os.system('plink2 --pedmap hapmap10_auto_noofs --chr 2 --out hapmap10_auto_noofs_2 --export ped')\n    ```", "```py\n    import numpy as np\n    from sgkit.io import plink\n    data = plink.read_plink(path='hapmap10_auto_noofs_ld', fam_sep='\\t')\n    ```", "```py\n    data\n    ```", "```py\n    print(data.dims)\n    ```", "```py\nFrozen({'variants': 56241, 'alleles': 2, 'samples': 1198, 'ploidy': 2})\n```", "```py\n    print(len(data.sample_id.values))\n    print(data.sample_id.values)\n    print(data.sample_family_id.values)\n    print(data.sample_sex.values)\n    ```", "```py\n1198\n['NA19916' 'NA19835' 'NA20282' ... 'NA18915' 'NA19250' 'NA19124']\n['2431' '2424' '2469' ... 'Y029' 'Y113' 'Y076']\n[1 2 2 ... 1 2 1]\n```", "```py\n    print(data.contigs)\n    ```", "```py\n['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']\n```", "```py\n    print(len(data.variant_contig.values))\n    print(data.variant_contig.values)\n    print(data.variant_position.values)\n    print(data.variant_allele.values)\n    print(data.variant_id.values)\n    ```", "```py\n56241\n[ 0  0  0 ... 21 21 21]\n[  557616   782343   908247 ... 49528105 49531259 49559741]\n[[b'G' b'A']\n ...\n [b'C' b'A']]\n['rs11510103' 'rs2905036' 'rs13303118' ... 'rs11705587' 'rs7284680'\n 'rs2238837']\n```", "```py\n    call_genotype = data.call_genotype.values\n    print(call_genotype.shape)\n    first_individual = call_genotype[:,0,:]\n    first_variant = call_genotype[0,:,:]\n    first_variant_of_first_individual = call_genotype[0,0,:]\n    print(first_variant_of_first_individual)\n    print(data.sample_family_id.values[0], data.sample_id.values[0])\n    print(data.variant_allele.values[0])\n    ```", "```py\n    import numpy as np\n    import xarray as xr\n    import sgkit as sg\n    from sgkit.io import plink\n\n    data = plink.read_plink(path='hapmap10_auto_noofs_ld', fam_sep='\\t')\n    ```", "```py\n    variant_stats = sg.variant_stats(data)\n    variant_stats\n    ```", "```py\n    variant_stats.variant_call_rate.to_series().describe()\n    ```", "```py\ncount    56241.000000\nmean         0.997198\nstd          0.003922\nmin          0.964107\n25%          0.996661\n50%          0.998331\n75%          1.000000\nmax          1.000000\nName: variant_call_rate, dtype: float64\n```", "```py\n    sample_stats = sg.sample_stats(data)\n    sample_stats\n    ```", "```py\n    sample_stats.sample_call_rate.to_series().hist()\n    ```", "```py\n    from collections import defaultdict\n    from pprint import pprint\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    import pandas as pd\n    import xarray as xr\n    import sgkit as sg\n    from sgkit.io import plink\n\n    data = plink.read_plink(path='hapmap10_auto_noofs_ld', fam_sep='\\t')\n    ```", "```py\n    f = open('relationships_w_pops_041510.txt')\n    pop_ind = defaultdict(list)\n    f.readline()  # header\n    for line in f:\n        toks = line.rstrip().split('\\t')\n        fam_id = toks[0]\n        ind_id = toks[1]\n        pop = toks[-1]\n        pop_ind[pop].append((fam_id, ind_id))\n    pops = list(pop_ind.keys())\n    ```", "```py\n    def assign_cohort(pops, pop_ind, sample_family_id, sample_id):\n        cohort = []\n        for fid, sid in zip(sample_family_id, sample_id):\n            processed = False\n            for i, pop in enumerate(pops):\n                if (fid, sid) in pop_ind[pop]:\n                    processed = True\n                    cohort.append(i)\n                    break\n            if not processed:\n                raise Exception(f'Not processed {fid}, {sid}')\n        return cohort\n    cohort = assign_cohort(pops, pop_ind, data.sample_family_id.values, data.sample_id.values)\n    data['sample_cohort'] = xr.DataArray(\n        cohort, dims='samples')\n    ```", "```py\n    cohort_allele_frequency = sg.cohort_allele_frequencies(data)['cohort_allele_frequency'].values\n    monom = {}\n    for i, pop in enumerate(pops):\n        monom[pop] = len(list(filter(lambda x: x, np.isin(cohort_allele_frequency[:, i, 0], [0, 1]))))\n    pprint(monom)\n    ```", "```py\n{'ASW': 3332,\n 'CEU': 8910,\n 'CHB': 11130,\n 'CHD': 12321,\n 'GIH': 8960,\n 'JPT': 13043,\n 'LWK': 3979,\n 'MEX': 6502,\n 'MKK': 3490,\n 'TSI': 8601,\n 'YRI': 5172}\n```", "```py\n    mafs = {}\n    for i, pop in enumerate(pops):\n        min_freqs = map(\n            lambda x: x if x < 0.5 else 1 - x,\n            filter(\n                lambda x: x not in [0, 1],\n                cohort_allele_frequency[:, i, 0]))\n        mafs[pop] = pd.Series(min_freqs)\n    ```", "```py\n    maf_plot, maf_ax = plt.subplots(nrows=2, sharey=True)\n    mafs['YRI'].hist(ax=maf_ax[0], bins=50)\n    maf_ax[0].set_title('*YRI*')\n    mafs['JPT'].hist(ax=maf_ax[1], bins=50)\n    maf_ax[1].set_title('*JPT*')\n    maf_ax[1].set_xlabel('MAF')\n    ```", "```py\n    fst = sg.Fst(data)\n    fst = fst.assign_coords({\"cohorts_0\": pops, \"cohorts_1\": pops})\n    ```", "```py\n    remove_nan = lambda data: filter(lambda x: not np.isnan(x), data)\n    ceu_chb = pd.Series(remove_nan(fst.stat_Fst.sel(cohorts_0='CEU', cohorts_1='CHB').values))\n    chb_chd = pd.Series(remove_nan(fst.stat_Fst.sel(cohorts_0='CHB', cohorts_1='CHD').values))\n    ceu_chb.describe()\n    chb_chd.describe()\n    ```", "```py\n    mean_fst = {}\n    for i, pop_i in enumerate(pops):\n        for j, pop_j in enumerate(pops):\n            if j <= i:\n                continue\n            pair_fst = pd.Series(remove_nan(fst.stat_Fst.sel(cohorts_0=pop_i, cohorts_1=pop_j).values))\n            mean = pair_fst.mean()\n            mean_fst[(pop_i, pop_j)] = mean\n    min_pair = min(mean_fst.values())\n    max_pair = max(mean_fst.values())\n    ```", "```py\n    sns.set_style(\"white\")\n    num_pops = len(pops)\n    arr = np.ones((num_pops - 1, num_pops - 1, 3), dtype=float)\n    fig = plt.figure(figsize=(16, 9))\n    ax = fig.add_subplot(111)\n    for row in range(num_pops - 1):\n        pop_i = pops[row]\n        for col in range(row + 1, num_pops):\n            pop_j = pops[col]\n            val = mean_fst[(pop_i, pop_j)]\n            norm_val = (val - min_pair) / (max_pair - min_pair)\n            ax.text(col - 1, row, '%.3f' % val, ha='center')\n            if norm_val == 0.0:\n                arr[row, col - 1, 0] = 1\n                arr[row, col - 1, 1] = 1\n                arr[row, col - 1, 2] = 0\n            elif norm_val == 1.0:\n                arr[row, col - 1, 0] = 1\n                arr[row, col - 1, 1] = 0\n                arr[row, col - 1, 2] = 1\n            else:\n                arr[row, col - 1, 0] = 1 - norm_val\n                arr[row, col - 1, 1] = 1\n                arr[row, col - 1, 2] = 1\n    ax.imshow(arr, interpolation='none')\n    ax.set_title('Multilocus Pairwise FST')\n    ax.set_xticks(range(num_pops - 1))\n    ax.set_xticklabels(pops[1:])\n    ax.set_yticks(range(num_pops - 1))\n    ax.set_yticklabels(pops[:-1])\n    ```", "```py\npip install pygenomics\n```", "```py\n    f = open('relationships_w_pops_041510.txt')\n    ind_pop = {}\n    f.readline() # header\n    for l in f:\n        toks = l.rstrip().split('\\t')\n        fam_id = toks[0]\n        ind_id = toks[1]\n        pop = toks[-1]\n        ind_pop['/'.join([fam_id, ind_id])] = pop\n    f.close()\n    ind_pop['2469/NA20281'] = ind_pop['2805/NA20281']\n    ```", "```py\n    from genomics.popgen.plink.convert import to_eigen\n    to_eigen('hapmap10_auto_noofs_ld_12', 'hapmap10_auto_noofs_ld_12')\n    ```", "```py\n    from genomics.popgen.pca import smart\n    ctrl = smart.SmartPCAController('hapmap10_auto_noofs_ld_12')\n    ctrl.run()\n    wei, wei_perc, ind_comp = smart.parse_evec('hapmap10_auto_noofs_ld_12.evec', 'hapmap10_auto_noofs_ld_12.eval')\n    ```", "```py\n    from genomics.popgen.pca import plot\n    plot.render_pca(ind_comp, 1, 2, cluster=ind_pop)\n    ```", "```py\npip install pygenomics\n```", "```py\n    k_range = range(2, 10)  # 2..9\n    ```", "```py\n    for k in k_range:\n        os.system('admixture --cv=10 hapmap10_auto_noofs_ld.bed %d > admix.%d' % (k, k))\n    ```", "```py\n    f = open('hapmap10_auto_noofs_ld.fam')\n    ind_order = []\n    for l in f:\n        toks = l.rstrip().replace(' ', '\\t').split('\\t')\n        fam_id = toks[0]\n        ind_id = toks[1]\n        ind_order.append((fam_id, ind_id))\n    f.close()\n    ```", "```py\n    import matplotlib.pyplot as plt\n    CVs = []\n    for k in k_range:\n        f = open('admix.%d' % k)\n        for l in f:\n            if l.find('CV error') > -1:\n                CVs.append(float(l.rstrip().split(' ')[-1]))\n                break\n        f.close()\n    fig = plt.figure(figsize=(16, 9))\n    ax = fig.add_subplot(111)\n    ax.set_title('Cross-Validation error')\n    ax.set_xlabel('K')\n    ax.plot(k_range, CVs)\n    ```", "```py\n    f = open('relationships_w_pops_041510.txt')\n    pop_ind = defaultdict(list)\n    f.readline() # header\n    for l in f:\n       toks = l.rstrip().split('\\t')\n       fam_id = toks[0]\n       ind_id = toks[1]\n       if (fam_id, ind_id) not in ind_order:\n          continue\n       mom = toks[2]\n       dad = toks[3]\n       if mom != '0' or dad != '0':\n          continue\n     pop = toks[-1]\n     pop_ind[pop].append((fam_id, ind_id))\n    f.close()\n    ```", "```py\n    def load_Q(fname, ind_order):\n        ind_comps = {}\n        f = open(fname)\n        for i, l in enumerate(f):\n            comps = [float(x) for x in l.rstrip().split(' ')]\n            ind_comps[ind_order[i]] = comps\n        f.close()\n        return ind_comps\n    comps = {}\n    for k in k_range:\n        comps[k] = load_Q('hapmap10_auto_noofs_ld.%d.Q' % k, ind_order)\n    ```", "```py\n    from genomics.popgen.admix import cluster\n    ordering = {}\n    for k in k_range:\n        ordering[k] = cluster(comps[k], pop_ind)\n    ```", "```py\n    from genomics.popgen.admix import plot\n    plot.single(comps[4], ordering[4])\n    fig = plt.figure(figsize=(16, 9))\n    plot.stacked(comps, ordering[7], fig)\n    ```"]