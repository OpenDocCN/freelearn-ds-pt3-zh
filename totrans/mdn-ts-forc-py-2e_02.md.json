["```py\n# Generate the time axis with sequential numbers upto 200\ntime = np.arange(200)\n# Sample 200 hundred random values\nvalues = np.random.randn(200)*100\nplot_time_series(time, values, \"White Noise\") \n```", "```py\n# Setting the correlation coefficient\nr = 0.4\n# Generate the time axis\ntime = np.arange(200)\n# Generate white noise\nwhite_noise = np.random.randn(200)*100\n# Create Red Noise by introducing correlation between subsequent values in the white noise\nvalues = np.zeros(200)\nfor i, v in enumerate(white_noise):\n    if i==0:\n        values[i] = v\n    else:\n        values[i] = r*values[i-1]+ np.sqrt((1-np.power(r,2))) *v\nplot_time_series(time, values, \"Red Noise Process\") \n```", "```py\n#Sinusoidal Signal with Amplitude=1.5 & Frequency=0.25\nsignal_1 =ts.signals.Sinusoidal(amplitude=1.5, frequency=0.25)\n#Sinusoidal Signal with Amplitude=1 & Frequency=0\\. 5\nsignal_2 = ts.signals.Sinusoidal(amplitude=1, frequency=0.5)\n#Generating the time series\nsamples_1, regular_time_samples, signals_1, errors_1 = generate_timeseries(signal=signal_1)\nsamples_2, regular_time_samples, signals_2, errors_2 = generate_timeseries(signal=signal_2)\nplot_time_series(regular_time_samples,\n                 [samples_1, samples_2],\n                 \"Sinusoidal Waves\",\n                 legends=[\"Amplitude = 1.5 | Frequency = 0.25\", \"Amplitude = 1 | Frequency = 0.5\"]) \n```", "```py\nSinusoidal class:\n```", "```py\n# PseudoPeriodic signal with Amplitude=1 & Frequency=0.25\nsignal = ts.signals.PseudoPeriodic(amplitude=1, frequency=0.25)\n#Generating Timeseries\nsamples, regular_time_samples, signals, errors = generate_timeseries(signal=signal)\nplot_time_series(regular_time_samples,\n                 samples,\n                 \"Pseudo Periodic\") \n```", "```py\n# We have re-implemented the class in src because of a bug in TimeSynth\nfrom src.synthetic_ts.autoregressive import AutoRegressive\n# Autoregressive signal with parameters 1.5 and -0.75\n# y(t) = 1.5*y(t-1) - 0.75*y(t-2)\nsignal= AutoRegressive(ar_param=[1.5, -0.75])\n#Generate Timeseries\nsamples, regular_time_samples, signals, errors = generate_timeseries(signal=signal)\nplot_time_series(regular_time_samples,\n                 samples,\n                 \"Auto Regressive\") \n```", "```py\n#Generating Pseudo Periodic Signal\npseudo_samples, regular_time_samples, _, _ = generate_timeseries(signal=ts.signals.PseudoPeriodic(amplitude=1, frequency=0.25), noise=ts.noise.GaussianNoise(std=0.3))\n# Generating an Autoregressive Signal\nar_samples, regular_time_samples, _, _ = generate_timeseries(signal= AutoRegressive(ar_param=[1.5, -0.75]))\n# Combining the two signals using a mathematical equation\nts = pseudo_samples*2+ar_samples\nplot_time_series(regular_time_samples,\n                 ts,\n                 \"Pseudo Periodic with AutoRegression and White Noise\") \n```", "```py\n# Sinusoidal Signal with Amplitude=1 & Frequency=0.25\nsignal=ts.signals.Sinusoidal(amplitude=1, frequency=0.25)\n# White Noise with standard deviation = 0.3\nnoise=ts.noise.GaussianNoise(std=0.3)\n# Generate the time series\nsinusoidal_samples, regular_time_samples, _, _ = generate_timeseries(signal=signal, noise=noise)\n# Regular_time_samples is a linear increasing time axis and can be used as a trend\ntrend = regular_time_samples*0.4\n# Combining the signal and trend\nts = sinusoidal_samples+trend\nplot_time_series(regular_time_samples,\n                 ts,\n                 \"Sinusoidal with Trend and White Noise\") \n```"]