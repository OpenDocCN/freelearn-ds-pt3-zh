["```py\n    import pandas as pd\n    ```", "```py\n    data = {\n      'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n      'Age': [25, 30, None, 28, 22],\n      'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],\n      'City': ['New York', 'Los Angeles', 'Chicago', None, 'San Francisco']\n    }\n    ```", "```py\n    df = pd.DataFrame(data)\n    ```", "```py\n    completeness = df.isnull().sum()\n    ```", "```py\n    total_records = len(df)\n    completeness_percentage = (1- completeness / total_records) * 100\n    ```", "```py\n    Completeness Check:\n    Name      0\n    Age       1\n    Gender    0\n    City      1\n    Completeness Percentage:\n    Name      100.0\n    Age        80.0\n    Gender    100.0\n    City       80.0\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    data = {\n      'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n      'Age': [25, 30, 28, 28, 22],\n      'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],\n      'City': ['New York', 'Los Angeles', 'Chicago', 'New York', 'San Francisco']\n    }\n    # Reference dataset for accuracy comparison\n    reference_data = {\n      'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n      'Age': [25, 30, 29, 28, 22],\n      'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],\n      'City': ['New York', 'Los Angeles', 'Chicago', 'New York', 'San Francisco']\n    }\n    ```", "```py\n    df = pd.DataFrame(data)\n    reference_df = pd.DataFrame(reference_data)\n    ```", "```py\n    accuracy_check = df == reference_df\n    ```", "```py\n    accuracy_percentage = accuracy_check.mean() * 100\n    ```", "```py\n    # Display the accuracy results\n    print(\"Accuracy Check:\")\n    print(accuracy_check)\n    print(\"\\nAccuracy Percentage:\")\n    print(accuracy_percentage)\n    ```", "```py\n    Accuracy Check:\n       Name    Age  Gender  City\n    0  True   True    True  True\n    1  True   True    True  True\n    2  True  False    True  True\n    3  True   True    True  True\n    4  True   True    True  True\n    Accuracy Percentage:\n    Name      100.0\n    Age        80.0\n    Gender    100.0\n    City      100.0\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    from datetime import datetime, timedelta\n    ```", "```py\n    np.random.seed(0) # For reproducibility\n    n_samples = 100\n    start_time = datetime(2023, 10, 25, 9, 0, 0)\n    end_time = datetime(2023, 10, 25, 16, 0, 0)\n    timestamps = [start_time + timedelta(minutes=np.random.randint(0, (end_time - start_time).total_seconds() / 60)) for _ in range(n_samples)]\n    values = np.random.randint(50, 101, n_samples)\n    df = pd.DataFrame({'Timestamp': timestamps, 'Value': values})\n    ```", "```py\n    reference_timestamp = datetime(2023, 10, 25, 12, 0, 0)\n    ```", "```py\n    timeliness_threshold = 30\n    ```", "```py\n    df['Timeliness'] = (reference_timestamp - df['Timestamp']).dt.total_seconds() / 60\n    df['Timely'] = df['Timeliness'] <= timeliness_threshold\n    ```", "```py\n    average_timeliness = df['Timeliness'].mean()\n    ```", "```py\n    Dataset with Timestamps:\n                Timestamp  Value  Timeliness  Timely\n    0 2023-10-25 11:52:00     71         8.0    True\n    1 2023-10-25 09:47:00     98       133.0    False\n    2 2023-10-25 10:57:00     99        63.0    False\n    3 2023-10-25 12:12:00     55       -12.0    True\n    4 2023-10-25 14:23:00     91      -143.0    True\n    Average Timeliness (in minutes): -23.8\n    Percentage of Timely Records: 61.0 %\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    data = {\n      'ProductID': [1, 2, 3, 4, 5],\n      'ProductName': ['PROD001', 'PROD002', 'Product003', 'PROD004', 'PROD005'],\n    }\n    df = pd.DataFrame(data)\n    ```", "```py\n    expected_prefix = \"PROD\"\n    ```", "```py\n    inconsistent_mask = ~df['ProductName'].str.startswith(expected_prefix)\n    df['Consistency'] = ~inconsistent_mask\n    ```", "```py\n    consistent_percentage = (df['Consistency'].sum() / len(df)) * 100\n    ```", "```py\n    print(\"Dataset with Consistency Check:\")\n    print(df)\n    ```", "```py\n    Dataset with Consistency Check:\n       ProductID  ProductName  Consistency\n    0          1     PROD001         True\n    1          2     PROD002         True\n    2          3  Product003         False\n    3          4     PROD004         True\n    4          5     PROD005         True\n    Percentage of Consistent Rows: 80.00%\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    # Create a sample dataset\n    data = {\n        'Email': ['john.doe@example.com', 'jane.smith@example.com', \n        'james.doe@example.com', 'susan.brown@example.com'],\n    }\n    df = pd.DataFrame(data)\n    ```", "```py\n    # Check uniqueness and create a Boolean mask for duplicated email addresses\n    duplicated_mask = df['Email'].duplicated(keep='first')\n    # Create a new column to indicate uniqueness\n    df['Uniqueness'] = ~duplicated_mask\n    ```", "```py\n    unique_percentage = (df['Uniqueness'].sum() / len(df)) * 100\n    ```", "```py\n    Dataset with Uniqueness Check:\n                         Email  Uniqueness\n    0     john.doe@example.com        True\n    1   jane.smith@example.com        True\n    2    james.doe@example.com        True\n    3  susan.brown@example.com        True\n    Percentage of Unique Records: 100.00%\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    data = {\n        'EmployeeID': [101, 102, 103, 101, 104, 105, 102],\n        'FirstName': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Bob'],\n        'LastName': ['Smith', 'Johnson', 'Brown', 'Davis', 'Lee', 'White', 'Johnson'],\n    }\n    df = pd.DataFrame(data)\n    ```", "```py\n    duplicated_mask = df.duplicated(subset='EmployeeID', keep='first')\n    ```", "```py\n    df['IsDuplicate'] = duplicated_mask\n    ```", "```py\n    duplicate_percentage = (df['IsDuplicate'].sum() / len(df)) * 100\n    ```", "```py\n       EmployeeID  FirstName  LastName  IsDuplicate\n    0         101     Alice    Smith        False\n    1         102       Bob  Johnson        False\n    2         103   Charlie    Brown        False\n    3         101     David    Davis         True\n    4         104       Eve      Lee        False\n    5         105     Frank    White        False\n    6         102       Bob  Johnson         True\n    Percentage of Duplicate Records: 28.57%\n    ```", "```py\n    import random\n    ```", "```py\n    def simulate_data_usage():\n        num_users = 500\n        data_utilization_rates = [random.uniform(20, 90) for _ in range(num_users)]\n        data_requests = [random.randint(1, 100) for _ in range(num_users)]\n        organization_data_utilization_rate = sum(data_utilization_rates) / num_users\n        total_data_requests = sum(data_requests)\n        user_satisfaction_scores = [for _ in range(num_users)]\n        avg_user_satisfaction_score = sum(user_satisfaction_scores) / num_users\n        return {\n            \"data_utilization_rates\": data_utilization_rates,\n            \"organization_data_utilization_rate\": organization_data_utilization_rate,\n            \"data_requests\": data_requests,\n            \"total_data_requests\": total_data_requests,\n            \"user_satisfaction_scores\": user_satisfaction_scores,\n            \"avg_user_satisfaction_score\": avg_user_satisfaction_score,\n    }\n    ```", "```py\n    data_usage_metrics = simulate_data_usage()\n    ```", "```py\n    Organization Data Utilization Rate:\n    54.83%\n    Total Number of Data Requests or Queries:\n    25794\n    Average User Satisfaction Score:\n    2.93\n    ```", "```py\n    import random\n    ```", "```py\n    def simulate_data_compliance(num_records):\n      data_records = []\n      compliant_count = 0  # Counter for compliant records\n    ```", "```py\n      for _ in range(num_records):\n        # Generate a random record (e.g., containing age and consent fields)\n        age = random.randint(18, 100)\n        consent_given = random.choice([True, False])\n    ```", "```py\n        age_rule = age >= 18\n        consent_rule = age >= 18 and consent_given\n    ```", "```py\n        age_compliant = \"Age Compliant\" if age_rule else \"Age Non-Compliant\"\n        consent_compliant = \"Consent Compliant\" if consent_rule else \"Consent Non-Compliant\"\n        # Define overall compliance status\n        compliance_status = \"Compliant\" if age_rule and consent_rule else \"Non-Compliant\"\n    ```", "```py\n        # Count compliant records\n        if compliance_status == \"Compliant\":\n          compliant_count += 1\n        data_records.append({\n            \"Age\": age,\n            \"Consent Given\": consent_given,\n            \"Age Compliance\": age_compliant,\n            \"Consent Compliance\": consent_compliant,\n            \"Overall Compliance Status\": compliance_status\n        })\n    ```", "```py\n      # Calculate the percentage of compliant records\n      percentage_compliant = (compliant_count / num_records) * 100\n      return data_records, percentage_compliant\n    ```", "```py\n    # Define the number of data records to simulate\n    num_records = 100\n    # Simulate data compliance checks\n    data_records, percentage_compliant = simulate_data_compliance(num_records)\n    ```", "```py\n    # Display the results for a sample of data records and the percentage of compliance\n    sample_size = 10\n    for record in data_records[:sample_size]:\n        print(record)\n    print(f\"\\nPercentage of Compliant Records: {percentage_compliant:.2f}%\")\n    ```", "```py\n    Percentage of Compliant Records: 49.00%\n    ```"]