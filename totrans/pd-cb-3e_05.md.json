["```py\n`ser = pd.Series(range(3), dtype=pd.Int64Dtype()) ser` \n```", "```py\n`0    0 1    1 2    2 dtype: Int64` \n```", "```py\n`ser + 42` \n```", "```py\n`0    42 1    43 2    44 dtype: Int64` \n```", "```py\n`ser - 42` \n```", "```py\n`0    -42 1    -41 2    -40 dtype: Int64` \n```", "```py\n`ser * 2` \n```", "```py\n`0    0 1    2 2    4 dtype: Int64` \n```", "```py\n`ser / 2` \n```", "```py\n`0    0.0 1    0.5 2    1.0 dtype: Float64` \n```", "```py\n`ser2 = pd.Series(range(10, 13), dtype=pd.Int64Dtype()) ser + ser2` \n```", "```py\n`0    10 1    12 2    14 dtype: Int64` \n```", "```py\n`ser1 = pd.Series([1., 2., 3.], dtype=pd.Float64Dtype()) ser2 = pd.Series([4., pd.NA, 6.], dtype=pd.Float64Dtype()) ser1.add(ser2)` \n```", "```py\n`0     5.0 1    <NA> 2     9.0 dtype: Float64` \n```", "```py\n`ser1.add(ser2, fill_value=0.)` \n```", "```py\n`0    5.0 1    2.0 2    9.0 dtype: Float64` \n```", "```py\n`ser1 = pd.Series(range(3), dtype=pd.Int64Dtype()) ser2 = pd.Series(range(3), dtype=pd.Int64Dtype()) ser1 + ser2` \n```", "```py\n`0    0 1    2 2    4 dtype: Int64` \n```", "```py\n`ser3 = pd.Series([2, 4], dtype=pd.Int64Dtype()) ser1 + ser3` \n```", "```py\n`0       2 1       5 2    <NA> dtype: Int64` \n```", "```py\n`ser4 = pd.Series([2, 4, 8], index=[1, 2, 3], dtype=pd.Int64Dtype()) ser1 + ser4` \n```", "```py\n`0    <NA> 1       3 2       6 3    <NA> dtype: Int64` \n```", "```py\n`ser5 = pd.Series([2, 4, 8], index=[0, 1, 1], dtype=pd.Int64Dtype()) ser1 + ser5` \n```", "```py\n`0       2 1       5 1       9 2    <NA> dtype: Int64` \n```", "```py\n`WITH ser1 AS (   SELECT * FROM (     VALUES       (0, 0),       (1, 1),       (2, 2)    ) AS t(index, val1) ), ser5 AS (   SELECT * FROM (     VALUES       (0, 2),       (1, 4),       (1, 8)    ) AS t(index, val2) ) SELECT * FROM ser1 FULL OUTER JOIN ser5 USING(index);` \n```", "```py\n`index | val1 | val2 ------+------+------     0 |    0 |    2     1 |    1 |    8     1 |    1 |    4     2 |    2 | (4 rows)` \n```", "```py\n`WITH ser1 AS (   SELECT * FROM (     VALUES       (0, 0),       (1, 1),       (2, 2)    ) AS t(index, val1) ), ser5 AS (   SELECT * FROM (     VALUES       (0, 2),       (1, 4),       (1, 8)    ) AS t(index, val2) ) SELECT index, val1 + val2 AS value FROM ser1 FULL OUTER JOIN ser5 USING(index);` \n```", "```py\n`index | value ------+-------     0 |     2     1 |     9     1 |     5     2 | (4 rows)` \n```", "```py\n`np.random.seed(42) df = pd.DataFrame(     np.random.randn(3, 3),     columns=[\"col1\", \"col2\", \"col3\"],     index=[\"row1\", \"row2\", \"row3\"], ).convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `col1         col2         col3 row1    0.496714    -0.138264     0.647689 row2    1.52303     -0.234153    -0.234137 row3    1.579213     0.767435    -0.469474` \n```", "```py\n`df + 1` \n```", "```py\n `col1        col2        col3 row1    1.496714    0.861736    1.647689 row2    2.52303     0.765847    0.765863 row3    2.579213    1.767435    0.530526` \n```", "```py\n`df * 2` \n```", "```py\n `col1        col2          col3 row1    0.993428    -0.276529     1.295377 row2    3.04606     -0.468307    -0.468274 row3    3.158426     1.534869    -0.938949` \n```", "```py\n`ser = pd.Series(     [20, 10, 0],     index=[\"col1\", \"col2\", \"col3\"],     dtype=pd.Int64Dtype(), ) ser` \n```", "```py\n`col1    20 col2    10 col3     0 dtype: Int64` \n```", "```py\n`df + ser` \n```", "```py\n `col1         col2        col3 row1    20.496714    9.861736    0.647689 row2    21.52303     9.765847   -0.234137 row3    21.579213    10.767435  -0.469474` \n```", "```py\n`ser = pd.Series(     [20, 10, 0, 42],     index=[\"col1\", \"col2\", \"col3\", \"new_column\"],     dtype=pd.Int64Dtype(), ) ser + df` \n```", "```py\n `col1        col2        col3        new_column row1    20.496714   9.861736    0.647689    NaN row2    21.52303    9.765847    -0.234137   NaN row3    21.579213   10.767435   -0.469474   NaN` \n```", "```py\n`ser = pd.Series(     [20, 10, 0, 42],     index=[\"row1\", \"row2\", \"row3\", \"row4\"],     dtype=pd.Int64Dtype(), ) ser` \n```", "```py\n`row1    20 row2    10 row3     0 row4    42 dtype: Int64` \n```", "```py\n`df.add(ser, axis=0)` \n```", "```py\n `col1        col2        col3 row1    20.496714   19.861736   20.647689 row2    11.52303    9.765847    9.765863 row3    1.579213    0.767435   -0.469474 row4    <NA>        <NA>        <NA>` \n```", "```py\n`df * df` \n```", "```py\n `col1       col2        col3 row1    0.246725   0.019117    0.4195 row2    2.31962    0.054828    0.05482 row3    2.493913   0.588956    0.220406` \n```", "```py\n`np.random.seed(42) df2 = pd.DataFrame(np.random.randn(3, 3)) df2 = df2.convert_dtypes(dtype_backend=\"numpy_nullable\") df2` \n```", "```py\n `0            1             2 0    0.496714     -0.138264     0.647689 1    1.52303      -0.234153    -0.234137 2    1.579213      0.767435    -0.469474` \n```", "```py\n`df + df2` \n```", "```py\n `col1    col2    col3    0       1       2 row1    <NA>    <NA>    <NA>    <NA>    <NA>    <NA> row2    <NA>    <NA>    <NA>    <NA>    <NA>    <NA> row3    <NA>    <NA>    <NA>    <NA>    <NA>    <NA> 0       <NA>    <NA>    <NA>    <NA>    <NA>    <NA> 1       <NA>    <NA>    <NA>    <NA>    <NA>    <NA> 2       <NA>    <NA>    <NA>    <NA>    <NA>    <NA>` \n```", "```py\n`np.random.seed(42) ser = pd.Series(np.random.rand(10_000), dtype=pd.Float64Dtype())` \n```", "```py\n`print(f\"Count is: {ser.count()}\") print(f\"Mean value is: {ser.mean()}\") print(f\"Standard deviation is: {ser.std()}\") print(f\"Minimum value is: {ser.min()}\") print(f\"Maximum value is: {ser.max()}\") print(f\"Summation is: {ser.sum()}\")` \n```", "```py\n`Count is: 10000 Mean value is: 0.49415955768429964 Standard deviation is: 0.2876301265269928 Minimum value is: 1.1634755366141114e-05 Maximum value is: 0.9997176732861306 Summation is: 4941.595576842997` \n```", "```py\n`print(f\"Count is: {ser.agg('count')}\") print(f\"Mean value is: {ser.agg('mean')}\") print(f\"Standard deviation is: {ser.agg('std')}\") print(f\"Minimum value is: {ser.agg('min')}\") print(f\"Maximum value is: {ser.agg('max')}\") print(f\"Summation is: {ser.agg('sum')}\")` \n```", "```py\n`Count is: 10000 Mean value is: 0.49415955768429964 Standard deviation is: 0.2876301265269928 Minimum value is: 1.1634755366141114e-05 Maximum value is: 0.9997176732861306 Summation is: 4941.595576842997` \n```", "```py\n`ser.agg([\"min\", \"max\"])` \n```", "```py\n`min    0.000012 max    0.999718 dtype: float64` \n```", "```py\n`np.random.seed(42) df = pd.DataFrame(     np.random.randn(10_000, 6),     columns=list(\"abcdef\"), ).convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `a          b         c         d          e          f 0    0.496714  -0.138264  0.647689  1.523030  -0.234153  -0.234137 1    1.579213   0.767435 -0.469474  0.542560  -0.463418  -0.465730 2    0.241962  -1.913280 -1.724918 -0.562288  -1.012831   0.314247 3   -0.908024  -1.412304  1.465649 -0.225776   0.067528  -1.424748 4   -0.544383   0.110923 -1.150994  0.375698  -0.600639  -0.291694 …     …         …         …         …         …         … 9995  1.951254  0.324704  1.937021 -0.125083  0.589664   0.869128 9996  0.624062 -0.317340 -1.636983  2.390878 -0.597118   2.670553 9997 -0.470192  1.511932  0.718306  0.764051 -0.495094  -0.273401 9998 -0.259206  0.274769 -0.084735 -0.406717 -0.815527  -0.716988 9999  0.533743 -0.701856 -1.099044  0.141010 -2.181973  -0.006398 10000 rows × 6 columns` \n```", "```py\n`df.sum()` \n```", "```py\n`a    -21.365908 b     -7.963987 c    152.032992 d   -180.727498 e     29.399311 f     25.042078 dtype: Float64` \n```", "```py\n`df.sum(axis=1)` \n```", "```py\n`0       2.060878 1       1.490586 2      -4.657107 3      -2.437675 4      -2.101088          ...    9995     5.54669 9996     3.134053 9997     1.755601 9998    -2.008404 9999    -3.314518 Length: 10000, dtype: Float64` \n```", "```py\n`df.agg([\"min\", \"max\"])` \n```", "```py\n `a         b         c         d         e         f min  -4.295391 -3.436062 -3.922400 -4.465604 -3.836656 -4.157734 max   3.602415  3.745379  3.727833  4.479084  3.691625  3.942331` \n```", "```py\n`def mean_and_add_42(ser: pd.Series):     return ser.mean() + 42 def mean_and_sub_42(ser: pd.Series):     return ser.mean() - 42 np.random.seed(42) ser = pd.Series(np.random.rand(10_000), dtype=pd.Float64Dtype()) ser.agg([mean_and_add_42, mean_and_sub_42])` \n```", "```py\n`mean_and_add_42    42.49416 mean_and_sub_42   -41.50584 dtype: float64` \n```", "```py\n`ser = pd.Series([-1, 0, 1], dtype=pd.Int64Dtype())` \n```", "```py\n`def adds_one(ser: pd.Series) -> pd.Series:     return ser + 1 ser.transform([\"abs\", adds_one])` \n```", "```py\n `abs    adds_one 0    1      0 1    0      1 2    1      2` \n```", "```py\n`df = pd.DataFrame(     np.arange(-5, 4, 1).reshape(3, -1) ).convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `0    1    2 0   -5   -4   -3 1   -2   -1    0 2    1    2    3` \n```", "```py\n`df.transform(\"abs\")` \n```", "```py\n `0    1    2 0    5    4    3 1    2    1    0 2    1    2    3` \n```", "```py\n`def add_42(ser: pd.Series):     return ser + 42 df.transform([\"abs\", add_42])` \n```", "```py\n `0       1       2     abs  add_42  abs  add_42  abs  add_42 0   5      37    4      38    3      39 1   2      40    1      41    0      42 2   1      43    2      44    3      45` \n```", "```py\n`ser = pd.Series([123.45, [100, 113], 142.0, [110, 113, 119]]) ser` \n```", "```py\n`0             123.45 1         [100, 113] 2              142.0 3    [110, 113, 119] dtype: object` \n```", "```py\n`def custom_average(value):     if isinstance(value, list):         return sum(value) / len(value)     return value` \n```", "```py\n`ser.map(custom_average)` \n```", "```py\n`0    123.45 1    106.50 2    142.00 3    114.00 dtype: float64` \n```", "```py\n`df = pd.DataFrame([     [2., [1, 2], 3.],     [[4, 5], 5, 7.],     [1, 4, [1, 1, 5.5]], ]) df` \n```", "```py\n `0         1              2 0       2.0    [1, 2]            3.0 1    [4, 5]         5            7.0 2         1         4    [1, 1, 5.5]` \n```", "```py\n`df.map(custom_average)` \n```", "```py\n `0      1     2 0    2.0    1.5   3.0 1    4.5    5.0   7.0 2    1.0    4.0   2.5` \n```", "```py\n`ser.transform(custom_average)` \n```", "```py\n`0    123.45 1    106.50 2    142.00 3    114.00 dtype: float64` \n```", "```py\n`df.transform(custom_average)` \n```", "```py\n `0        1             2 0       2.0   [1, 2]           3.0 1    [4, 5]        5           7.0 2         1        4   [1, 1, 5.5]` \n```", "```py\n`def custom_average(value):     if isinstance(value, list):         return sum(value) / len(value)     return value` \n```", "```py\n`def custom_average(value):     if isinstance(value, (pd.Series, pd.DataFrame)):         raise TypeError(\"Received a pandas object - expected a single value!\")     if isinstance(value, list):         return sum(value) / len(value)     return value` \n```", "```py\n`df.transform(custom_average)` \n```", "```py\n`TypeError: Received a pandas object - expected a single value!` \n```", "```py\n`def debug_apply(value):     print(f\"Apply was called with value:\\n{value}\")` \n```", "```py\n`ser = pd.Series(range(3), dtype=pd.Int64Dtype()) ser.apply(debug_apply)` \n```", "```py\n`Apply was called with value: 0 Apply was called with value: 1 Apply was called with value: 2 0    None 1    None 2    None dtype: object` \n```", "```py\n`ser.map(debug_apply)` \n```", "```py\n`Apply was called with value: 0 Apply was called with value: 1 Apply was called with value: 2 0    None 1    None 2    None dtype: object` \n```", "```py\n`df = pd.DataFrame(     np.arange(6).reshape(3, -1),     columns=list(\"ab\"), ).convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `a     b 0     0     1 1     2     3 2     4     5` \n```", "```py\n`df.apply(debug_apply)` \n```", "```py\n`Apply was called with value: 0    0 1    2 2    4 Name: a, dtype: Int64 Apply was called with value: 0    1 1    3 2    5 Name: b, dtype: Int64 a    None b    None dtype: object` \n```", "```py\n`def debug_apply_and_return(value):     print(value)     return value df.apply(debug_apply_and_return)` \n```", "```py\n`0    0 1    2 2    4 Name: a, dtype: Int64 0    1 1    3 2    5 Name: b, dtype: Int64       a    b 0     0    1 1     2    3 2     4    5` \n```", "```py\n`ser = pd.Series([\"a\", \"b\", \"c\", \"a\", \"c\", \"a\"], dtype=pd.StringDtype()) ser.value_counts()` \n```", "```py\n`a    3 c    2 b    1 Name: count, dtype: Int64` \n```", "```py\n`ser = pd.Series([0, 42, 84], dtype=pd.Int64Dtype()) ser.describe()` \n```", "```py\n`count     3.0 mean     42.0 std      42.0 min       0.0 25%      21.0 50%      42.0 75%      63.0 max      84.0 dtype: Float64` \n```", "```py\n`ser.describe(percentiles=[.10, .44, .67])` \n```", "```py\n`count      3.0 mean      42.0 std       42.0 min        0.0 10%        8.4 44%      36.96 50%       42.0 67%      56.28 max       84.0 dtype: Float64` \n```", "```py\n`df = pd.DataFrame([     [\"Jane\", 34],     [\"John\", 18],     [\"Jamie\", 22],     [\"Jessica\", 36],     [\"Jackie\", 33],     [\"Steve\", 40],     [\"Sam\", 30],     [\"Stephanie\", 66],     [\"Sarah\", 55],     [\"Aaron\", 22],     [\"Erin\", 28],     [\"Elsa\", 37], ], columns=[\"name\", \"age\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df.head()` \n```", "```py\n `name       age 0       Jane       34 1       John       18 2       Jamie      22 3       Jessica    36 4       Jackie     33` \n```", "```py\n`pd.cut(df[\"age\"], 4)` \n```", "```py\n`0       (30.0, 42.0] 1     (17.952, 30.0] 2     (17.952, 30.0] 3       (30.0, 42.0] 4       (30.0, 42.0] 5       (30.0, 42.0] 6     (17.952, 30.0] 7       (54.0, 66.0] 8       (54.0, 66.0] 9     (17.952, 30.0] 10    (17.952, 30.0] 11      (30.0, 42.0] Name: age, dtype: category Categories (4, interval[float64, right]): [(17.952, 30.0] < (30.0, 42.0] < (42.0, 54.0] < (54.0, 66.0]]` \n```", "```py\n`pd.cut(df[\"age\"], 4, precision=0)` \n```", "```py\n`0     (30.0, 42.0] 1     (18.0, 30.0] 2     (18.0, 30.0] 3     (30.0, 42.0] 4     (30.0, 42.0] 5     (30.0, 42.0] 6     (18.0, 30.0] 7     (54.0, 66.0] 8     (54.0, 66.0] 9     (18.0, 30.0] 10    (18.0, 30.0] 11    (30.0, 42.0] Name: age, dtype: category Categories (4, interval[float64, right]): [(18.0, 30.0] < (30.0, 42.0] < (42.0, 54.0] < (54.0, 66.0]]` \n```", "```py\n`pd.cut(df[\"age\"], [10, 20, 30, 40, 50, 60, 70])` \n```", "```py\n`0     (30, 40] 1     (10, 20] 2     (20, 30] 3     (30, 40] 4     (30, 40] 5     (30, 40] 6     (20, 30] 7     (60, 70] 8     (50, 60] 9     (20, 30] 10    (20, 30] 11    (30, 40] Name: age, dtype: category Categories (6, interval[int64, right]): [(10, 20] < (20, 30] < (30, 40] < (40, 50] < (50, 60] < (60, 70]]` \n```", "```py\n`pd.cut(df[\"age\"], [10, 20, 30, 40, 50, 60, 999])` \n```", "```py\n`0      (30, 40] 1      (10, 20] 2      (20, 30] 3      (30, 40] 4      (30, 40] 5      (30, 40] 6      (20, 30] 7     (60, 999] 8      (50, 60] 9      (20, 30] 10     (20, 30] 11     (30, 40] Name: age, dtype: category Categories (6, interval[int64, right]): [(10, 20] < (20, 30] < (30, 40] < (40, 50] < (50, 60] < (60, 999]]` \n```", "```py\n`pd.cut(     df[\"age\"],     [10, 20, 30, 40, 50, 60, 999],     labels=[\"10-20\", \"20-30\", \"30-40\", \"40-50\", \"50-60\", \"60+\"], )` \n```", "```py\n`0     30-40 1     10-20 2     20-30 3     30-40 4     30-40 5     30-40 6     20-30 7       60+ 8     50-60 9     20-30 10    20-30 11    30-40 Name: age, dtype: category Categories (6, object): ['10-20' < '20-30' < '30-40' < '40-50' < '50-60' < '60+']` \n```", "```py\n`df.assign(age_bin=lambda x: pd.cut(x[\"age\"], [10, 20, 30, 40, 50, 60, 999]))` \n```", "```py\n `name        age     age_bin 0       Jane        34      (30, 40] 1       John        18      (10, 20] 2       Jamie       22      (20, 30] 3       Jessica     36      (30, 40] 4       Jackie      33      (30, 40] 5       Steve       40      (30, 40] 6       Sam         30      (20, 30] 7       Stephanie   66     (60, 999] 8       Sarah       55      (50, 60] 9       Aaron       22      (20, 30] 10      Erin        28      (20, 30] 11      Elsa        37      (30, 40]` \n```", "```py\n`df.assign(     age_bin=lambda x: pd.cut(x[\"age\"], [10, 20, 30, 40, 50, 60, 999], right=False) )` \n```", "```py\n `name      age   age_bin 0       Jane      34    [30, 40) 1       John      18    [10, 20) 2       Jamie     22    [20, 30) 3       Jessica   36    [30, 40) 4       Jackie    33    [30, 40) 5       Steve     40    [40, 50) 6       Sam       30    [30, 40) 7       Stephanie 66    [60, 999) 8       Sarah     55    [50, 60) 9       Aaron     22    [20, 30) 10      Erin      28    [20, 30) 11      Elsa      37    [30, 40)` \n```", "```py\n`ser = pd.Series([     \"green\",     \"brown\",     \"blue\",     \"amber\",     \"hazel\",     \"amber\",     \"green\",     \"blue\",     \"green\", ], name=\"eye_colors\", dtype=pd.StringDtype()) ser` \n```", "```py\n`0    green 1    brown 2     blue 3    amber 4    hazel 5    amber 6    green 7     blue 8    green Name: eye_colors, dtype: string` \n```", "```py\n`pd.get_dummies(ser)` \n```", "```py\n `amber   blue    brown   green   hazel 0       False   False   False   True    False 1       False   False   True    False   False 2       False   True    False   False   False 3       True    False   False   False   False 4       False   False   False   False   True 5       True    False   False   False   False 6       False   False   False   True    False 7       False   True    False   False   False 8       False   False   False   True    False` \n```", "```py\n`pd.get_dummies(ser, prefix=\"is\")` \n```", "```py\n `is_amber  is_blue  is_brown  is_green  is_hazel 0       False     False    False     True      False 1       False     False    True      False     False 2       False     True     False     False     False 3       True      False    False     False     False 4       False     False    False     False     True 5       True      False    False     False     False 6       False     False    False     True      False 7       False     True     False     False     False 8       False     False    False     True      False` \n```", "```py\n`df = pd.DataFrame(...) df1 = do_something(df) df2 = do_another_thing(df1) df3 = do_yet_another_thing(df2)` \n```", "```py\n`df = pd.DataFrame(...) df = do_something(df) df = do_another_thing(df) df = do_yet_another_thing(df)` \n```", "```py\n`(     pd.DataFrame(...)     .pipe(do_something)     .pipe(do_another_thing)     .pipe(do_yet_another_thing) )` \n```", "```py\n`df = pd.DataFrame({     \"col1\": pd.Series([1, 2, 3], dtype=pd.Int64Dtype()),     \"col2\": pd.Series([\"a\", \"b\", \"c\"], dtype=pd.StringDtype()), }) df` \n```", "```py\n `col1   col2 0     1      a 1     2      b 2     3      c` \n```", "```py\n`def change_col1(df: pd.DataFrame) -> pd.DataFrame:     return df.assign(col1=pd.Series([4, 5, 6], dtype=pd.Int64Dtype())) def change_col2(df: pd.DataFrame) -> pd.DataFrame:     return df.assign(col2=pd.Series([\"X\", \"Y\", \"Z\"], dtype=pd.StringDtype()))` \n```", "```py\n`df2 = change_col1(df) df3 = change_col2(df2) df3` \n```", "```py\n `col1   col2 0    4      X  1    5      Y 2    6      Z` \n```", "```py\n`change_col2(change_col1(df))` \n```", "```py\n `col1   col2 0     4      X 1     5      Y 2     6      Z` \n```", "```py\n`df.pipe(change_col1).pipe(change_col2)` \n```", "```py\n `col1    col2 0       4       X 1       5       Y 2       6       Z` \n```", "```py\n`from typing import Literal def change_col2(         df: pd.DataFrame,         str_case: Literal[\"upper\", \"lower\"] ) -> pd.DataFrame:     if str_case == \"upper\":         values = [\"X\", \"Y\", \"Z\"]     else:         values = [\"x\", \"y\", \"z\"]     return df.assign(col2=pd.Series(values, dtype=pd.StringDtype()))` \n```", "```py\n`df.pipe(change_col2, str_case=\"lower\")` \n```", "```py\n `col1    col2 0      1       x 1      2       y 2      3       z` \n```", "```py\n`df = pd.read_csv(     \"data/movie.csv\",     usecols=[\"movie_title\", \"imdb_score\", \"budget\", \"gross\"],     dtype_backend=\"numpy_nullable\", ) df.head()` \n```", "```py\n `gross          movie_title                          budget        imdb_score 0      760505847.0    Avatar                              237000000.0    7.9 1      309404152.0    Pirates of the Caribbean: At World's End  300000000.0    7.1 2      200074175.0    Spectre                             245000000.0    6.8 3      448130642.0    The Dark Knight Rises              250000000.0    8.5 4      <NA>           Star Wars: Episode VII - The Force Awakens  <NA>      7.1` \n```", "```py\n`df.nlargest(100, \"imdb_score\").head()` \n```", "```py\n `gross        movie_title              budget      imdb_score 2725    <NA>         Towering Inferno         <NA>        9.5 1920    28341469.0   The Shawshank Redemption  25000000.0  9.3 3402    134821952.0  The Godfather            6000000.0   9.2 2779    447093.0     Dekalog                  <NA>        9.1 4312    <NA>         Kickboxer: Vengeance     17000000.0  9.1` \n```", "```py\n`df.nlargest(100, \"imdb_score\").nsmallest(5, \"budget\")` \n```", "```py\n `gross       movie_title              budget       imdb_score 4804    <NA>        Butterfly Girl           180000.0     8.7 4801    925402.0    Children of Heaven       180000.0     8.5 4706    <NA>        12 Angry Men             350000.0     8.9 4550    7098492.0   A Separation             500000.0     8.4 4636    133778.0    The Other Dream Team     500000.0     8.4` \n```", "```py\n`df.nlargest(10, \"imdb_score\")` \n```", "```py\n `gross   movie_title     budget  imdb_score 2725    <NA>    Towering Inferno        <NA>     9.5 1920    28341469.0      The Shawshank Redemption        25000000.0     9.3 3402    134821952.0     The Godfather   6000000.0       9.2 2779    447093.0        Dekalog    <NA>    9.1 4312    <NA>    Kickboxer: Vengeance    17000000.0      9.1 66      533316061.0     The Dark Knight 185000000.0     9.0 2791    57300000.0      The Godfather: Part II     13000000.0      9.0 3415    <NA>    Fargo   <NA>    9.0 335     377019252.0     The Lord of the Rings: The Return of the King   94000000.0     8.9 1857    96067179.0      Schindler's List        22000000.0      8.9` \n```", "```py\n`df[df[\"imdb_score\"] >= 8.9]` \n```", "```py\n `gross   movie_title     budget  imdb_score 66      533316061.0     The Dark Knight 185000000.0      9.0 335     377019252.0     The Lord of the Rings: The Return of the King   94000000.0     8.9 1857    96067179.0      Schindler's List        22000000.0      8.9 1920    28341469.0      The Shawshank Redemption       25000000.0      9.3 2725    <NA>    Towering Inferno        <NA>    9.5 2779    447093.0        Dekalog <NA>    9.1 2791    57300000.0      The Godfather: Part II      13000000.0    9.0 3295    107930000.0     Pulp Fiction    8000000.0       8.9 3402    134821952.0     The Godfather   6000000.0       9.2 3415    <NA>    Fargo   <NA>    9.0 4312    <NA>    Kickboxer: Vengeance    17000000.0      9.1 4397    6100000.0       The Good, the Bad and the Ugly    1200000.0      8.9 4706    <NA>    12 Angry Men     350000.0      8.9` \n```", "```py\n`df.nlargest(10, [\"imdb_score\", \"gross\"])` \n```", "```py\n `gross   movie_title     budget  imdb_score 2725    <NA>    Towering Inferno        <NA>     9.5 1920    28341469.0      The Shawshank Redemption        25000000.0      9.3 3402    134821952.0     The Godfather   6000000.0       9.2 2779    447093.0        Dekalog    <NA>    9.1 4312    <NA>    Kickboxer: Vengeance    17000000.0      9.1 66      533316061.0     The Dark Knight    185000000.0     9.0 2791    57300000.0      The Godfather: Part II    13000000.0        9.0 3415    <NA>    Fargo   <NA>    9.0 335     377019252.0     The Lord of the Rings: The Return of the King   94000000.0      8.9 3295    107930000.0     Pulp Fiction    8000000.0       8.9` \n```", "```py\n`df = pd.read_csv(     \"data/NVDA.csv\",     usecols=[\"Date\", \"Close\"],     parse_dates=[\"Date\"],     index_col=[\"Date\"],     dtype_backend=\"numpy_nullable\", ) df.head()` \n```", "```py\n`ValueError: not all elements from date_cols are numpy arrays` \n```", "```py\n`df = pd.read_csv(     \"data/NVDA.csv\",     usecols=[\"Date\", \"Close\"],     parse_dates=[\"Date\"],     index_col=[\"Date\"], ).convert_dtypes(dtype_backend=\"numpy_nullable\") df.head()` \n```", "```py\n `Close Date 2020-01-02     59.977501 2020-01-03     59.017502 2020-01-06     59.264999 2020-01-07     59.982498 2020-01-08     60.095001` \n```", "```py\n`ser = df.squeeze() ser.head()` \n```", "```py\n`Date 2020-01-02    59.977501 2020-01-03    59.017502 2020-01-06    59.264999 2020-01-07    59.982498 2020-01-08    60.095001 Name: Close, dtype: float64` \n```", "```py\n`ser_cummax = ser.cummax() ser_cummax.head()` \n```", "```py\n`Date 2020-01-02    59.977501 2020-01-03    59.977501 2020-01-06    59.977501 2020-01-07    59.982498 2020-01-08    60.095001 Name: Close, dtype: float64` \n```", "```py\n`ser.cummax().mul(0.9).head()` \n```", "```py\n`Date 2020-01-02    53.979751 2020-01-03    53.979751 2020-01-06    53.979751 2020-01-07    53.984248 2020-01-08    54.085501 Name: Close, dtype: float64` \n```", "```py\n`ser.cummin().mul(1.1).head()` \n```", "```py\n`Date 2020-01-02    65.975251 2020-01-03    64.919252 2020-01-06    64.919252 2020-01-07    64.919252 2020-01-08    64.919252 Name: Close, dtype: float64` \n```", "```py\n`stop_prices = ser.cummax().mul(0.9) ser[ser <= stop_prices]` \n```", "```py\n`Date 2020-02-24     68.320000 2020-02-25     65.512497 2020-02-26     66.912498 2020-02-27     63.150002 2020-02-28     67.517502                  ...     2023-10-27    405.000000 2023-10-30    411.609985 2023-10-31    407.799988 2023-11-01    423.250000 2023-11-02    435.059998 Name: Close, Length: 495, dtype: float64` \n```", "```py\n`(ser <= stop_prices).idxmax()` \n```", "```py\n`Timestamp('2020-02-24 00:00:00')` \n```", "```py\n`df = pd.read_parquet(     \"data/mlb_batting_summaries.parquet\", ).set_index(\"id\") df` \n```", "```py\n `ab      r       h       hr id  abadf001        0       0       0       0 abboa001        0       0       0       0 abboc001        3       0       1       0 abrac001        847     116     208     20 abrea001        0       0       0       0 …               …       …       …       … zimmk001        0       0       0       0 zimmr001        255     27      62      14 zubet001        1       0       0       0 zunig001        0       0       0       0 zunim001        572     82      111     41 2183 rows × 4 columns` \n```", "```py\n`df.idxmax()` \n```", "```py\n`ab    semim001 r     freef001 h     freef001 hr    judga001 dtype: string` \n```", "```py\n`best_players = df.idxmax().unique() mask = df.index.isin(best_players) df[mask]` \n```", "```py\n `ab      r       h       hr id freef001  1849    368     590     81 judga001  1487    301     433    138 semim001  1979    338     521    100` \n```", "```py\n`df[mask].style.highlight_max()` \n```", "```py\n`df = pd.read_parquet(     \"data/runs_scored_by_team.parquet\", ).set_index([\"year\", \"team\"]) df` \n```", "```py\n `1    2    3    …    7    8    9 year  team 2000  ANA  124  107  100  …   77   76   54       ARI  110  106  109  …   72   68   40       ATL  113  125  124  …   77   74   39       BAL  106  106   92  …   83   78   74       BOS   99  107   99  …   75   66   62 …     …    …    …    …    …   …    …    … 2023  SLN  105   91   85  …   70   55   74       TBA  121  120   93  …   78   95   98       TEX  126  115   91  …   80   87   81       TOR   91   97   85  …   64   70   79       WAS  110   90   87  …   63   67   64 720 rows × 9 columns` \n```", "```py\n`df.idxmax(axis=1)` \n```", "```py\n`year  team 2000  ANA     1       ARI     1       ATL     2       BAL     1       BOS     4             ... 2023  SLN     1       TBA     1       TEX     1       TOR     2       WAS     1 Length: 720, dtype: object` \n```", "```py\n`df.idxmax(axis=1).value_counts(normalize=True)` \n```", "```py\n`1    0.480556 2    0.208333 3    0.202778 4    0.088889 5    0.018056 6    0.001389 Name: proportion, dtype: float64` \n```", "```py\n`mask = df.idxmax(axis=1).eq(\"1\") df[mask].drop(columns=[\"1\"]).idxmax(axis=1).value_counts(normalize=True)` \n```", "```py\n`2    0.497110 3    0.280347 4    0.164740 5    0.043353 6    0.014451 Name: proportion, dtype: float64` \n```"]