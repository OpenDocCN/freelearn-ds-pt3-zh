- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Python Coding Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start coding with Streamlit, we need to prepare our environment.
    Setting up a Python coding environment, especially in Linux (for example, Ubuntu),
    can be done in a few simple steps: update (or install) Python, install a code
    editor or IDE (maybe something free, such as **Sublime Text**), set up a virtual
    environment (in the book, we are using **pipenv**, but any other would be good),
    and install dependencies. After these steps, we should have a fully functional
    Python coding environment (in Ubuntu or any other **operating system** (**OS**))
    that’s ready to use for our web application’s development.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is all about the environment setup. We need to prepare all the
    tools needed to make our developments with Streamlit smooth and productive. So,
    first of all, we are dealing with the choice of OS, which can be real or virtual,
    and either Windows, macOS, or Linux (our preferred solution). Next, we have to
    decide what kind of editor or **integrated development environment** (**IDE**)
    to use for coding. Some of them are very advanced and expensive, and some others
    are a little bit simpler but free. Finally, we’ll talk about virtual environments
    and the advantages of using them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDE selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a virtual environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be using the following libraries, packages, and tools:'
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv`-pipes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s extremely important to have a very well-working environment. The OS is
    the place where everything is supposed to run. Even if the first choice we are
    asked to make is in regard to the OS to be used, we can say that from this point
    of view, we are lucky, because Streamlit is a framework in Python. This programming
    language works more or less on any OS, so we are really free to select what we
    want – for example, macOS, Windows, any Linux distribution, or, if you like, even
    any BSD flavor.
  prefs: []
  type: TYPE_NORMAL
- en: For several reasons that we are going to explain shortly, we prefer Ubuntu,
    and if you are concerned about its usage or about installing it, take it easy
    because first of all, it’s really easy to use. And, if you don’t want to, you
    don’t need to install it on your machine as an exclusive and unique OS as you
    can use virtualization software, a very useful tool that makes it possible to
    run an OS inside another OS! Moreover, knowing how to manage a virtualization
    tool and install on it any kind of OS can be a very useful skill for the future!
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we need not only the OS but, among other tools, an IDE, the best choice
    may be to adopt free tools in order to keep our costs very low. So, in order to
    minimize our expenses, I suggest you use Ubuntu, a very user-friendly and easy-to-use-and-install
    Linux distribution. You can download it from Ubuntu’s official website ([https://ubuntu.com/](https://ubuntu.com/))
    and install it on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: Ubuntu home page](img/B21147_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Ubuntu home page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider using virtualization software if you prefer not to install Ubuntu
    alongside your primary OS in a “dual boot mode” and avoid the need to choose between
    Linux distributions when starting your computer. The choice of which valid solution
    to use ultimately depends on your preferences. The main objective is to enable
    you to run Ubuntu within your primary OS, treating it as a regular software program.
    A very valid solution, once again free, is Oracle VirtualBox, which works for
    any kind of OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2: VirtualBox home page](img/B21147_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: VirtualBox home page'
  prefs: []
  type: TYPE_NORMAL
- en: 'It doesn’t matter whether you have a real Ubuntu OS or a virtualized version
    of it; it’s just important that you are able to start and use it. When you run
    your freshly installed Linux Ubuntu, please update it by typing the following
    command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it’s time to check whether Python is installed on the system, so open
    the terminal and simply type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get some content such as that in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: Python 3 in Ubuntu’s terminal](img/B21147_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Python 3 in Ubuntu’s terminal'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Python 3 is already installed in Ubuntu, and when we type `python3`,
    we can enter Python and start coding. In *Figure 2**.3*, we just printed a nice
    `Hello Streamlit!` message and then quit.
  prefs: []
  type: TYPE_NORMAL
- en: If you encounter an error while typing `python3`, it is possible that your system
    has Python available as `python` without the `3`. In such cases, you should use
    `python` instead of `python3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s check whether `pip` is installed in our Ubuntu box. Type in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If `pip` is not installed, we can install it by typing in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following figure, we can see how easy the `pip` installation is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4: pip3 installation](img/B21147_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: pip3 installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, just to get familiar with `pip`, we will install a couple of tools that
    will be quite useful in the future: `tree` and `terminator`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tree` is a simple tool to visualize files and folders in the terminal as trees.
    We can install it by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And once the installation is completed, just type `tree` and you will have
    a nice tree view of the working directory, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5: The “tree” command](img/B21147_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: The “tree” command'
  prefs: []
  type: TYPE_NORMAL
- en: '`terminator` is an alternative terminal that has some advanced features, such
    as horizontal and vertical splits, focus shifting, and zooming and preferences
    settings, but the most important one for sure is the possibility of splitting
    the screen into tiles as many times as we want. Let’s install it by typing the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, once the installation is finished, just type `terminator`. As you can
    see in the following figure, by just right-clicking, you can create as many tiles
    with new terminals as you want, both vertically and horizontally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6: Terminator and its tiles](img/B21147_02_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Terminator and its tiles'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, what is important is having Python running. We prefer running it on
    Ubuntu just to keep things cheap and simple, but if you want to use your own OS
    it’s no problem at all. Just double-check whether you have the Python 3 version
    installed and if not, please download it from Python’s official website ([https://www.python.org/](https://www.python.org/))
    and then install it (please get the version specific to your OS):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7: Python website](img/B21147_02_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Python website'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have done more or less 50% of the job, since we have a fresh
    OS with Python and the `pip` installation, together with a couple of nice tools
    such as terminator and tree. What we are still missing is a beautiful editor,
    so let’s get one!
  prefs: []
  type: TYPE_NORMAL
- en: IDE selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a good IDE is very important for coding in Python. It provides many useful
    features that help you write code faster and with fewer errors, and keeps your
    code clean and well organized. For example, the autocomplete feature saves a lot
    of time by suggesting code completions as you type. This reduces typing errors.
    Syntax highlighting makes the code easier to read by coloring different elements.
    Powerful debugging tools in the IDE make debugging easier and faster. Refactoring
    features help keep the code organized and readable. Linting checks your code for
    stylistic issues, improving the quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the market, there are several excellent tools such as PyCharm and VSCode,
    but these tools are usually heavy and a little bit expensive. For the sake of
    our coding sessions, we can use a quite light application that, at least at the
    beginning, can be installed and used at no cost: Sublime Text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sublime Text has many nice features that you can explore by yourself, including
    programming language recognition and syntax highlighting. You can install it directly
    from its home page ([https://www.sublimetext.com/](https://www.sublimetext.com/))
    by carefully following the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8: Sublime Text home page](img/B21147_02_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Sublime Text home page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, from your working directory in Terminator, just type `subl .` and Sublime
    Text will open up. Please select **Python** in the extension list in the bottom-right
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9: Python syntax selection in Sublime Text](img/B21147_02_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Python syntax selection in Sublime Text'
  prefs: []
  type: TYPE_NORMAL
- en: Considering that Python is available and Sublime Text is installed, we could
    start coding with Streamlit immediately, but this is not the best option. In Python,
    every time we start a new project, we tend to install some specific new packages
    and libraries, and if we install this new stuff every time into the same basic
    environment, sooner or later, our environment will be a total mess. A very clean
    way to avoid this potential mess is the usage of virtual environments, so let’s
    see what they are.
  prefs: []
  type: TYPE_NORMAL
- en: What is a virtual environment?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtual environments are useful tools in Python development that allow you to
    isolate package installations related to a specific project from the main system’s
    Python installation. This means you can have separate environments with different
    package dependencies for different projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a virtual environment is easy using the `venv` module in the Python
    standard library. The basic steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the virtual environment by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Activate the virtual environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Unix/Linux systems, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: pip install package-name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you are done, you can deactivate the environment and switch back to the
    global Python install with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Virtual environments make it easy to try out different package combinations
    for your projects without interfering with the global Python install or other
    virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to have a complete view of virtual environments in Python, please
    check the Real Python website ([https://realpython.com/python-virtual-environments-a-primer/#use-third-party-tools](https://realpython.com/python-virtual-environments-a-primer/#use-third-party-tools)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10: Python virtual environments on the Real Python website](img/B21147_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Python virtual environments on the Real Python website'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the built-in `venv` module, there are several third-party tools
    such as `virtualenv` and `pipenv` for managing virtual environments in Python.
    The following bullets list the various benefits of using these third-party tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '`virtualenv` and `pipenv` tools come with some additional convenience features
    that make them easier to use than the `venv` module. For example, `pipenv` automatically
    creates a **Pipfile** to track package dependencies and versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv` manages both the environment and package dependencies, making your
    setup fully reproducible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`venv` as `pipenv` has features to help manage development dependencies separately
    from production dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`venv` module is a newer addition to the Python standard library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`virtualenv` and `pipenv` are third-party tools, they can work with different
    Python versions, unlike `venv`, which is tied to a specific Python installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, in summary, while the `venv` module is part of the Python standard library,
    third-party tools such as `poetry``pipenv` offer more features, flexibility, and
    compatibility for managing your virtual environments. But for simple needs, the
    `venv` module works well and has the benefit of being built into Python itself.
  prefs: []
  type: TYPE_NORMAL
- en: All the reasons mentioned in the preceding list are enough to make `pipenv`
    our choice for the management and creation of virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we’ll proceed with the `pipenv` installation and with the description of
    its main commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install `pipenv` together with `pipenv-pipes` by just typing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s create a testing directory named `pipenvtest1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'With list or tree, we can check whether this folder is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the output shown in *Figure 2**.11*. It tells us that, at the moment,
    there are no virtual environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11: pipenv --venv](img/B21147_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: pipenv --venv'
  prefs: []
  type: TYPE_NORMAL
- en: 'When executing the `pipenv shell` command at this point, `pipenv` will search
    for a file called `Pipfile` in the present directory. This file is needed for
    the creation of the virtual environment. If there is no Pipfile, it will be created
    together with the virtual environment and we will get a successfully created virtual
    environment message on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12: Virtual environment creation](img/B21147_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: Virtual environment creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, by launching Sublime Text from the working directory, we can see that
    a `Pipfile` has been created and we can explore its content. It contains all the
    information about the virtual environment such as the Python version, installed
    packages (empty at the moment), and dev packages (empty as well):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13: The Pipfile content](img/B21147_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: The Pipfile content'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install any package in our new virtual environment, we just have to type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we can try with `numpy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14: Packages installation](img/B21147_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Packages installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can read on the screen, the package has been successfully installed,
    the `Pipfile` has been updated, it now contains `numpy`, and a new `Pipfile.lock`
    file, containing the list of all the hashes and dependencies, has been created
    and updated. Let’s see it in Sublime Text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15: Pipfile with packages and Pipfile.lock](img/B21147_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Pipfile with packages and Pipfile.lock'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another very interesting option is to create a requirements file in the `Pipfile.lock`
    file that will be very useful when we deploy our web applications. So, to create
    a `requirements.txt` file, we can simply type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that starting from `pipenv` version 2022.8.13, the previous command
    has been replaced with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside `pipenv`, we can run any kind of command just by using the `run` instruction.
    So, if we want to run, let’s say Python, we can just type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By running the `pipenv check` command, you can examine package updates, and
    if any are found the updates will be executed accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Uninstalling a package (and removing it from the Pipfile) is very simple. In
    fact, we just have to type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to `pipenv`, we have also installed `pipenv`-pipes, which is an
    intriguing tool. By typing `pipes` in the terminal, we can obtain a list of the
    installed virtual environments. We can then navigate through the list using the
    cursor to select the desired virtual environment for activation, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16: Pipes](img/B21147_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Pipes'
  prefs: []
  type: TYPE_NORMAL
- en: When we are in a virtual environment and want to close it to come back to the
    original status, we just have to type `exit` in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove a virtual environment, we can navigate to its directory and execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This command removes the virtual environment without deleting the files in
    the directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17: Virtual environment deletion](img/B21147_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: Virtual environment deletion'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to remove the directory with all its files, we have to do it manually.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we prepared the ground for our next activities. We learned
    how to create a developing environment while keeping costs very low (almost free).
    So, we decided to use Ubuntu as our main OS. After that, we made sure to have
    Python already available and installed `pip`. The selection of the IDE was quite
    straightforward since we chose Sublime Text, a quite light, powerful, and advanced
    text editor.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we focused on Python’s virtual environment. In this case, our choice
    was `pipenv` because it is quite powerful, easy to use, and full of advanced features.
    We spent some time on a quite complete overview of this tool and its main features
    and instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, everything is ready, so finally, in the next chapter, we are going to take
    a kind of crash course on the basic features of Streamlit. Are you ready?
  prefs: []
  type: TYPE_NORMAL
