["```py\n>>> movie = pd.read_csv('data/movie.csv', index_col='movie_title')\n>>> movie.head()\n```", "```py\n>>> movie_2_hours = movie['duration'] > 120\n>>> movie_2_hours.head(10)\nmovie_title\nAvatar                                         True\nPirates of the Caribbean: At World's End       True\nSpectre                                        True\nThe Dark Knight Rises                          True\nStar Wars: Episode VII - The Force Awakens    False\nJohn Carter                                    True\nSpider-Man 3                                   True\nTangled                                       False\nAvengers: Age of Ultron                        True\nHarry Potter and the Half-Blood Prince         True\nName: duration, dtype: bool\n```", "```py\n>>> movie_2_hours.sum()\n1039\n```", "```py\n>>> movie_2_hours.mean()\n0.2114\n```", "```py\n>>> movie['duration'].dropna().gt(120).mean()\n.2112\n```", "```py\n>>> movie_2_hours.describe()\ncount      4916\nunique        2\ntop       False\nfreq       3877\nName: duration, dtype: object\n```", "```py\n>>> movie_2_hours.value_counts(normalize=True)\nFalse    0.788649\nTrue     0.211351\nName: duration, dtype: float64\n```", "```py\n>>> actors = movie[['actor_1_facebook_likes', \n                    'actor_2_facebook_likes']].dropna()\n>>> (actors['actor_1_facebook_likes'] > \n     actors['actor_2_facebook_likes']).mean()\n.978\n```", "```py\n>>> movie = pd.read_csv('data/movie.csv', index_col='movie_title')\n```", "```py\n>>> criteria1 = movie.imdb_score > 8\n>>> criteria2 = movie.content_rating == 'PG-13'\n>>> criteria3 = ((movie.title_year < 2000) | \n                 (movie.title_year > 2009))\n\n>>> criteria2.head()     # all criteria Series look similar\nmovie_title\nAvatar                                         True\nPirates of the Caribbean: At World's End       True\nSpectre                                        True\nThe Dark Knight Rises                          True\nStar Wars: Episode VII - The Force Awakens    False\nName: content_rating, dtype: bool\n```", "```py\n>>> criteria_final = criteria1 & criteria2 & criteria3\n>>> criteria_final.head()\nmovie_title\nAvatar                                        False\nPirates of the Caribbean: At World's End      False\nSpectre                                       False\nThe Dark Knight Rises                          True\nStar Wars: Episode VII - The Force Awakens    False\ndtype: bool\n```", "```py\n>>> 5 < 10 and 3 > 4\nFalse \n```", "```py\n>>> 5 < 10 and 3 > 4\n>>> True and 3 > 4\n>>> True and False\n>>> False\n```", "```py\n>>> movie.title_year < 2000 | movie.title_year > 2009\nTypeError: cannot compare a dtyped [float64] array with a scalar of type [bool]\n```", "```py\n>>> movie = pd.read_csv('data/movie.csv', index_col='movie_title')\n>>> crit_a1 = movie.imdb_score > 8\n>>> crit_a2 = movie.content_rating == 'PG-13'\n>>> crit_a3 = (movie.title_year < 2000) | (movie.title_year > 2009)\n>>> final_crit_a = crit_a1 & crit_a2 & crit_a3\n```", "```py\n>>> crit_b1 = movie.imdb_score < 5\n>>> crit_b2 = movie.content_rating == 'R'\n>>> crit_b3 = ((movie.title_year >= 2000) & \n               (movie.title_year <= 2010))\n>>> final_crit_b = crit_b1 & crit_b2 & crit_b3\n```", "```py\n>>> final_crit_all = final_crit_a | final_crit_b\n>>> final_crit_all.head()\nmovie_title\nAvatar                                        False\nPirates of the Caribbean: At World's End      False\nSpectre                                       False\nThe Dark Knight Rises                          True\nStar Wars: Episode VII - The Force Awakens    False\ndtype: bool\n```", "```py\n>>> movie[final_crit_all].head()\n```", "```py\n>>> cols = ['imdb_score', 'content_rating', 'title_year']\n>>> movie_filtered = movie.loc[final_crit_all, cols]\n>>> movie_filtered.head(10)\n```", "```py\n>>> final_crit_a2 = (movie.imdb_score > 8) & \\\n                    (movie.content_rating == 'PG-13') & \\\n                    ((movie.title_year < 2000) | \n                     (movie.title_year > 2009))\n>>> final_crit_a2.equals(final_crit_a)\nTrue\n```", "```py\n>>> college = pd.read_csv('data/college.csv')\n>>> college[college['STABBR'] == 'TX'].head()\n```", "```py\n>>> college2 = college.set_index('STABBR')\n>>> college2.loc['TX'].head()\n```", "```py\n>>> %timeit college[college['STABBR'] == 'TX']\n1.43 ms ± 53.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n\n>>> %timeit college2.loc['TX']\n526 µs ± 6.67 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```", "```py\n>>> %timeit college2 = college.set_index('STABBR')\n1.04 ms ± 5.37 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```", "```py\n>>> states = ['TX', 'CA', 'NY']\n>>> college[college['STABBR'].isin(states)]\n>>> college2.loc[states]\n```", "```py\n>>> college = pd.read_csv('data/college.csv')\n>>> college2 = college.set_index('STABBR')\n>>> college2.index.is_monotonic\nFalse\n```", "```py\n>>> college3 = college2.sort_index()\n>>> college3.index.is_monotonic\nTrue\n```", "```py\n>>> %timeit college[college['STABBR'] == 'TX']\n1.43 ms ± 53.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n\n>>> %timeit college2.loc['TX']\n526 µs ± 6.67 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n\n>>> %timeit college3.loc['TX']\n183 µs ± 3.67 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```", "```py\n>>> college_unique = college.set_index('INSTNM')\n>>> college_unique.index.is_unique\nTrue\n```", "```py\n>>> college[college['INSTNM'] == 'Stanford University']\n```", "```py\n>>> college_unique.loc['Stanford University']\nCITY                  Stanford\nSTABBR                      CA\nHBCU                         0\n...\nUG25ABV                 0.0401\nMD_EARN_WNE_P10          86000\nGRAD_DEBT_MDN_SUPP       12782\nName: Stanford University, dtype: object\n```", "```py\n>>> %timeit college[college['INSTNM'] == 'Stanford University']\n1.3 ms ± 56.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n\n>>> %timeit college_unique.loc['Stanford University']\n157 µs ± 682 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n```", "```py\n>>> college.index = college['CITY'] + ', ' + college['STABBR']\n>>> college = college.sort_index()\n>>> college.head()\n```", "```py\n>>> college.loc['Miami, FL'].head()\n```", "```py\n>>> %%timeit \n>>> crit1 = college['CITY'] == 'Miami' \n>>> crit2 = college['STABBR'] == 'FL'\n>>> college[crit1 & crit2]\n2.43 ms ± 80.4 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n>>> %timeit college.loc['Miami, FL']\n197 µs ± 8.69 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n```", "```py\n>>> slb = pd.read_csv('data/slb_stock.csv', index_col='Date', \n                     parse_dates=['Date'])\n>>> slb.head()\n```", "```py\n>>> slb_close = slb['Close']\n>>> slb_summary = slb_close.describe(percentiles=[.1, .9])\n>>> slb_summary\ncount    1895.000000\nmean       79.121905\nstd        11.767802\nmin        51.750000\n10%        64.892000\n50%        78.000000\n90%        93.248000\nmax       117.950000\nName: Close, dtype: float64\n```", "```py\n>>> upper_10 = slb_summary.loc['90%']\n>>> lower_10 = slb_summary.loc['10%']\n>>> criteria = (slb_close < lower_10) | (slb_close > upper_10)\n>>> slb_top_bottom_10 = slb_close[criteria]\n```", "```py\n>>> slb_close.plot(color='black', figsize=(12,6))\n>>> slb_top_bottom_10.plot(marker='o', style=' ',\n                           ms=4, color='lightgray')\n\n>>> xmin = criteria.index[0]\n>>> xmax = criteria.index[-1]\n>>> plt.hlines(y=[lower_10, upper_10], xmin=xmin,\n               xmax=xmax, color='black')\n```", "```py\n>>> slb_close.plot(color='black', figsize=(12,6))\n>>> plt.hlines(y=[lower_10, upper_10], \n               xmin=xmin, xmax=xmax,color='lightgray')\n>>> plt.fill_between(x=criteria.index, y1=lower_10,\n                     y2=slb_close.values, color='black')\n>>> plt.fill_between(x=criteria.index,y1=lower_10,\n                     y2=slb_close.values, where=slb_close < lower_10,\n                     color='lightgray')\n>>> plt.fill_between(x=criteria.index, y1=upper_10, \n                     y2=slb_close.values, where=slb_close > upper_10,\n                     color='lightgray')\n```", "```py\nSELECT\n    UNIQUE_ID,\n    DEPARTMENT,\n    GENDER,\n    BASE_SALARY\nFROM\n    EMPLOYEE\nWHERE\n    DEPARTMENT IN ('Houston Police Department-HPD', \n                   'Houston Fire Department (HFD)') AND\n    GENDER = 'Female' AND \n    BASE_SALARY BETWEEN 80000 AND 120000;\n```", "```py\n>>> employee = pd.read_csv('data/employee.csv')\n```", "```py\n>>> employee.DEPARTMENT.value_counts().head()\nHouston Police Department-HPD     638\nHouston Fire Department (HFD)     384\nPublic Works & Engineering-PWE    343\nHealth & Human Services           110\nHouston Airport System (HAS)      106\nName: DEPARTMENT, dtype: int64\n\n>>> employee.GENDER.value_counts()\n Male 1397\n Female 603\n\n>>> employee.BASE_SALARY.describe().astype(int)\ncount      1886\nmean      55767\nstd       21693\nmin       24960\n25%       40170\n50%       54461\n75%       66614\nmax      275000\nName: BASE_SALARY, dtype: int64\n```", "```py\n>>> depts = ['Houston Police Department-HPD', \n             'Houston Fire Department (HFD)']\n>>> criteria_dept = employee.DEPARTMENT.isin(depts)\n>>> criteria_gender = employee.GENDER == 'Female'\n>>> criteria_sal = (employee.BASE_SALARY >= 80000) & \\\n                   (employee.BASE_SALARY <= 120000)\n```", "```py\n>>> criteria_final = (criteria_dept & \n                      criteria_gender & \n                      criteria_sal)\n```", "```py\n>>> select_columns = ['UNIQUE_ID', 'DEPARTMENT',\n                     'GENDER', 'BASE_SALARY']\n>>> employee.loc[criteria_final, select_columns].head()\n```", "```py\n>>> criteria_sal = employee.BASE_SALARY.between(80000, 120000)\n```", "```py\n>>> top_5_depts = employee.DEPARTMENT.value_counts().index[:5]\n>>> criteria = ~employee.DEPARTMENT.isin(top_5_depts)\n>>> employee[criteria]\n```", "```py\nSELECT \n    * \nFROM \n    EMPLOYEE \nWHERE \n    DEPARTMENT not in \n    (\n      SELECT \n          DEPARTMENT \n     FROM (\n           SELECT\n               DEPARTMENT,\n               COUNT(1) as CT\n           FROM\n               EMPLOYEE\n           GROUP BY\n               DEPARTMENT\n           ORDER BY\n               CT DESC\n           LIMIT 5\n          )\n   );                          \n```", "```py\n>>> amzn = pd.read_csv('data/amzn_stock.csv', index_col='Date',\n                      parse_dates=['Date'])\n>>> amzn.head()\n```", "```py\n>>> amzn_daily_return = amzn.Close.pct_change()\n>>> amzn_daily_return.head()\nDate\n2010-01-04         NaN\n2010-01-05    0.005900\n2010-01-06   -0.018116\n2010-01-07   -0.017013\n2010-01-08    0.027077\nName: Close, dtype: float64\n```", "```py\n>>> amzn_daily_return = amzn_daily_return.dropna()\n>>> amzn_daily_return.hist(bins=20)\n```", "```py\n>>> mean = amzn_daily_return.mean() \n>>> std = amzn_daily_return.std()\n```", "```py\n>>> abs_z_score = amzn_daily_return.sub(mean).abs().div(std)\n```", "```py\n>>> pcts = [abs_z_score.lt(i).mean() for i in range(1,4)]\n>>> print('{:.3f} fall within 1 standard deviation. '\n          '{:.3f} within 2 and {:.3f} within 3'.format(*pcts))\n0.787 fall within 1 standard deviation. 0.957 within 2 and 0.985 within 3\n```", "```py\n>>> def test_return_normality(stock_data):\n        close = stock_data['Close']\n        daily_return = close.pct_change().dropna()\n        daily_return.hist(bins=20)\n        mean = daily_return.mean() \n        std = daily_return.std()\n\n        abs_z_score = abs(daily_return - mean) / std \n        pcts = [abs_z_score.lt(i).mean() for i in range(1,4)]\n\n        print('{:.3f} fall within 1 standard deviation. '\n              '{:.3f} within 2 and {:.3f} within 3'.format(*pcts))\n\n```", "```py\n>>> slb = pd.read_csv('data/slb_stock.csv', index_col='Date',\n                      parse_dates=['Date'])\n>>> test_return_normality(slb)\n0.742 fall within 1 standard deviation. 0.946 within 2 and 0.986 within 3\n```", "```py\n>>> employee = pd.read_csv('data/employee.csv')\n>>> depts = ['Houston Police Department-HPD',\n             'Houston Fire Department (HFD)']\n>>> select_columns = ['UNIQUE_ID', 'DEPARTMENT',\n                      'GENDER', 'BASE_SALARY']\n```", "```py\n>>> qs = \"DEPARTMENT in @depts \" \\\n         \"and GENDER == 'Female' \" \\\n         \"and 80000 <= BASE_SALARY <= 120000\"\n\n>>> emp_filtered = employee.query(qs)\n>>> emp_filtered[select_columns].head()\n```", "```py\n>>> top10_depts = employee.DEPARTMENT.value_counts() \\\n                                     .index[:10].tolist()\n>>> qs = \"DEPARTMENT not in @top10_depts and GENDER == 'Female'\"\n>>> employee_filtered2 = employee.query(qs)\n>>> employee_filtered2.head()\n```", "```py\n>>> movie = pd.read_csv('data/movie.csv', index_col='movie_title')\n>>> fb_likes = movie['actor_1_facebook_likes'].dropna()\n>>> fb_likes.head()\nmovie_title\nAvatar                                         1000.0\nPirates of the Caribbean: At World's End      40000.0\nSpectre                                       11000.0\nThe Dark Knight Rises                         27000.0\nStar Wars: Episode VII - The Force Awakens      131.0\nName: actor_1_facebook_likes, dtype: float64\n```", "```py\n>>> fb_likes.describe(percentiles=[.1, .25, .5, .75, .9]) \\\n            .astype(int)\ncount      4909\nmean       6494\nstd       15106\nmin           0\n10%         240\n25%         607\n50%         982\n75%       11000\n90%       18000\nmax      640000\nName: actor_1_facebook_likes, dtype: int64\n```", "```py\n>>> fb_likes.hist()\n```", "```py\n>>> criteria_high = fb_likes < 20000\n>>> criteria_high.mean().round(2)\n.91\n```", "```py\n>>> fb_likes.where(criteria_high).head()\nmovie_title\nAvatar                                         1000.0\nPirates of the Caribbean: At World's End          NaN\nSpectre                                       11000.0\nThe Dark Knight Rises                             NaN\nStar Wars: Episode VII - The Force Awakens      131.0\nName: actor_1_facebook_likes, dtype: float64\n```", "```py\n>>> fb_likes.where(criteria_high, other=20000).head()\nmovie_title\nAvatar                                         1000.0\nPirates of the Caribbean: At World's End      20000.0\nSpectre                                       11000.0\nThe Dark Knight Rises                         20000.0\nStar Wars: Episode VII - The Force Awakens      131.0\nName: actor_1_facebook_likes, dtype: float64\n```", "```py\n>>> criteria_low = fb_likes > 300\n>>> fb_likes_cap = fb_likes.where(criteria_high, other=20000)\\\n                           .where(criteria_low, 300)\n>>> fb_likes_cap.head()\nmovie_title\nAvatar                                         1000.0\nPirates of the Caribbean: At World's End      20000.0\nSpectre                                       11000.0\nThe Dark Knight Rises                         20000.0\nStar Wars: Episode VII - The Force Awakens      300.0\nName: actor_1_facebook_likes, dtype: float64\n```", "```py\n>>> len(fb_likes), len(fb_likes_cap)\n(4909, 4909)\n```", "```py\n>>> fb_likes_cap.hist()\n```", "```py\n>>> fb_likes_cap2 = fb_likes.clip(lower=300, upper=20000)\n>>> fb_likes_cap2.equals(fb_likes_cap)\nTrue\n```", "```py\n>>> movie = pd.read_csv('data/movie.csv', index_col='movie_title')\n>>> c1 = movie['title_year'] >= 2010\n>>> c2 = movie['title_year'].isnull()\n>>> criteria = c1 | c2\n```", "```py\n>>> movie.mask(criteria).head()\n```", "```py\n>>> movie_mask = movie.mask(criteria).dropna(how='all')\n>>> movie_mask.head()\n```", "```py\n>>> movie_boolean = movie[movie['title_year'] < 2010]\n>>> movie_mask.equals(movie_boolean)\nFalse\n```", "```py\n>>> movie_mask.shape == movie_boolean.shape\nTrue\n```", "```py\n>>> movie_mask.dtypes == movie_boolean.dtypes\ncolor                         True\ndirector_name                 True\nnum_critic_for_reviews        True\nduration                      True\ndirector_facebook_likes       True\nactor_3_facebook_likes        True\nactor_2_name                  True\nactor_1_facebook_likes        True\ngross                         True\ngenres                        True\nactor_1_name                  True\nnum_voted_users              False\ncast_total_facebook_likes    False\n.....\ndtype: bool\n```", "```py\nfrom pandas.testing import assert_frame_equal\n>>> assert_frame_equal(movie_boolean, movie_mask, check_dtype=False)\n```", "```py\n>>> %timeit movie.mask(criteria).dropna(how='all')\n11.2 ms ± 144 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n>>> %timeit movie[movie['title_year'] < 2010]\n1.07 ms ± 34.9 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```", "```py\n>>> movie = pd.read_csv('data/movie.csv', index_col='movie_title')\n>>> c1 = movie['content_rating'] == 'G'\n>>> c2 = movie['imdb_score'] < 4\n>>> criteria = c1 & c2\n```", "```py\n>>> movie_loc = movie.loc[criteria]\n>>> movie_loc.head()\n```", "```py\n>>> movie_loc.equals(movie[criteria])\nTrue\n```", "```py\n>>> movie_iloc = movie.iloc[criteria]\nValueError: iLocation based boolean indexing cannot use an indexable as a mask\n```", "```py\n>>> movie_iloc = movie.iloc[criteria.values]\n>>> movie_iloc.equals(movie_loc)\nTrue\n```", "```py\n>>> criteria_col = movie.dtypes == np.int64\n>>> criteria_col.head()\ncolor                      False\ndirector_name              False\nnum_critic_for_reviews     False\nduration                   False\ndirector_facebook_likes    False\ndtype: bool\n\n>>> movie.loc[:, criteria_col].head()\n```", "```py\n>>> movie.iloc[:, criteria_col.values].head() \n```", "```py\n>>> cols = ['content_rating', 'imdb_score', 'title_year', 'gross']\n>>> movie.loc[criteria, cols].sort_values('imdb_score')\n```", "```py\n>>> col_index = [movie.columns.get_loc(col) for col in cols]\n>>> col_index\n[20, 24, 22, 8]\n\n>>> movie.iloc[criteria.values, col_index] \n```", "```py\n>>> a = criteria.values\n>>> a[:5]\narray([False, False, False, False, False], dtype=bool)\n\n>>> len(a), len(criteria)\n(4916, 4916)\n```", "```py\n>>> movie.loc[[True, False, True], [True, False, False, True]]\n```"]