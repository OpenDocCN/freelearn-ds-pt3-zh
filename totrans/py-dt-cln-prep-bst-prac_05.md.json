["```py\n   employee_id     name department\n0            1    Alice         HR\n1            2      Bob         IT\n```", "```py\n   employee_id project_name\n0            2     ProjectA\n1            3     ProjectB\n```", "```py\nmerged_data = pd.merge(employee_data, project_data, on='employee_id', how='inner')\n```", "```py\n   employee_id     name department project_name\n0            2      Bob         IT     ProjectA\n1            3  Charlie  Marketing     ProjectB\n2            4    David    Finance     ProjectC\n3            5      Eva         IT     ProjectD\n```", "```py\nfull_outer_merged_data = pd.merge(employee_data, project_data, on='employee_id', how='outer')\n```", "```py\n   employee_id     name  department  project_name\n0            1    Alice          HR           NaN\n1            2      Bob          IT      ProjectA\n2            3  Charlie   Marketing      ProjectB\n3            4    David     Finance      ProjectC\n4            5      Eva          IT      ProjectD\n5            6      NaN         NaN      ProjectE\n```", "```py\nright_merged_data = pd.merge(employee_data, project_data, on='employee_id', how='right')\n```", "```py\n   employee_id     name department project_name\n0            2      Bob         IT     ProjectA\n1            3  Charlie  Marketing     ProjectB\n2            4    David    Finance     ProjectC\n3            5      Eva         IT     ProjectD\n4            6      NaN        NaN     ProjectE\n```", "```py\nleft_merged_data = pd.merge(employee_data, project_data, on='employee_id', how='left')\n```", "```py\n   employee_id     name department project_name\n0            1    Alice         HR          NaN\n1            2      Bob         IT     ProjectA\n2            3  Charlie  Marketing     ProjectB\n3            4    David    Finance     ProjectC\n4            5      Eva         IT     ProjectD\n```", "```py\nemployee_data = pd.DataFrame({\n    'employee_id': [1, 2, 2, 3, 4, 5, 5],\n    'name': ['Alice', 'Bob', 'Bob', 'Charlie', 'David', 'Eva', 'Eva'],\n    'department': ['HR', 'IT', 'IT', 'Marketing', 'Finance', 'IT', 'IT']\n})\n```", "```py\nproject_data = pd.DataFrame({\n    'employee_id': [2, 3, 4, 5, 5, 6],\n    'project_name': ['ProjectA', 'ProjectB', 'ProjectC', 'ProjectD', 'ProjectD', 'ProjectE']\n})\n```", "```py\nemployee_data = employee_data.drop_duplicates(subset='employee_id', keep='first')\nproject_data = project_data.drop_duplicates(subset='employee_id', keep='first')\n```", "```py\nmerged_data = pd.merge(employee_data, project_data, on='employee_id', how='inner')\n```", "```py\n   employee_id     name department project_name\n0            2      Bob         IT     ProjectA\n1            3  Charlie  Marketing     ProjectB\n2            4    David    Finance     ProjectC\n3            5      Eva         IT     ProjectD\n```", "```py\ntry:\n    merged_data = pd.merge(employee_data, project_data, on='employee_id', how='inner', validate='one_to_many')\n    print(\"Merged Data Result:\")\n    print(merged_data)\nexcept ValueError as e:\n    print(\"Merge failed:\", e)\n```", "```py\nMerge failed: Merge keys are not unique in left dataset; not a one-to-many merge\n```", "```py\nemployee_data = pd.DataFrame({\n    'employee_id': [1, 2, 2, 3, 4, 5, 5],\n    'name': ['Alice', 'Bob', 'Bob', 'Charlie', 'David', 'Eva', 'Eva'],\n    'department': ['HR', 'IT', 'IT', 'Marketing', 'Finance', 'IT', 'IT'],\n    'salary': [50000, 60000, 60000, 55000, 65000, 70000, 70000]\n})\n# Sample project assignment data with potential duplicate keys\nproject_data = pd.DataFrame({\n    'employee_id': [2, 3, 4, 5, 7, 6],\n    'project_name': ['ProjectA', 'ProjectB', 'ProjectC', 'ProjectD', 'ProjectD', 'ProjectE']\n})\n```", "```py\naggregated_employee_data = employee_data.groupby('employee_id').agg({\n    'name': 'first', # Keep the first name encountered\n    'department': 'first', # Keep the first department encountered\n    'salary': 'sum' # Sum the salaries in case of duplicates\n}).reset_index()\n```", "```py\nmerged_data = pd.merge(aggregated_employee_data, project_data, on='employee_id', how='inner')\n```", "```py\n   employee_id     name department  salary project_name\n0            2      Bob         IT  120000     ProjectA\n1            3  Charlie  Marketing   55000     ProjectB\n2            4    David    Finance   65000     ProjectC\n3            5      Eva         IT  140000     ProjectD\n```", "```py\nemployee_data = pd.DataFrame({\n    'employee_id': [1, 2, 2, 3, 4, 5, 5],\n    'name': ['Alice', 'Bob', 'Bob', 'Charlie', 'David', 'Eva', 'Eva'],\n    'department': ['HR', 'IT', 'Marketing', 'Marketing', 'Finance', 'IT', 'HR']\n})\n```", "```py\nemployee_data['department'] = employee_data.groupby('employee_id')['department'].transform(lambda x: ', '.join(x))\n```", "```py\n   employee_id     name     department\n0            1    Alice             HR\n1            2      Bob  Marketing, IT\n3            3  Charlie      Marketing\n4            4    David        Finance\n5            5      Eva         IT, HR\n```", "```py\nemployee_data_1 = pd.DataFrame({\n    'employee_id': [1, 2, 3, 4, 5],\n    'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'department': ['HR', 'IT', 'Marketing', 'Finance', 'IT']\n})\nemployee_data_2 = pd.DataFrame({\n    'employee_id': [6, 7, 8, 9, 10],\n    'name': ['Frank', 'Grace', 'Hannah', 'Ian', 'Jill'],\n    'department': ['Logistics', 'Marketing', 'IT', 'Marketing', 'Finance']\n})\n```", "```py\nmerged_data = pd.merge(employee_data_1, employee_data_2, on='employee_id', how='outer', suffixes=('_1', '_2'))\n```", "```py\n   employee_id   name_1 department_1  name_2 department_2\n0            1    Alice           HR     NaN          NaN\n1            2      Bob           IT     NaN          NaN\n2            3  Charlie    Marketing     NaN          NaN\n3            4    David      Finance     NaN          NaN\n4            5      Eva           IT     NaN          NaN\n5            6      NaN          NaN   Frank    Logistics\n6            7      NaN          NaN   Grace    Marketing\n7            8      NaN          NaN  Hannah           IT\n8            9      NaN          NaN     Ian    Marketing\n9           10      NaN          NaN    Jill      Finance\n```", "```py\nemployee_data_1 = pd.DataFrame({\n    'employee_id': [1, 2, 3, 4, 5],\n    'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'department': ['HR', 'IT', 'Marketing', 'Finance', 'IT']\n})\nemployee_data_2 = pd.DataFrame({\n    'employee_id': [1, 2, 3, 4, 5],\n    'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n    'department': ['Human Resources', 'Information Technology', 'Sales', 'Financial', 'Technical']\n})\n```", "```py\nemployee_data_2.drop(columns=['department'], inplace=True)\n```", "```py\nmerged_data = pd.merge(employee_data_1, employee_data_2, on=['employee_id', 'name'], how='inner')\n```", "```py\nmerged_data = pd.merge(employee_data_1, employee_data_2, on=['employee_id', 'name'], how='inner')\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom time import time\n```", "```py\nnum_rows = 5\n```", "```py\nemployee_data_1 = pd.DataFrame({\n  'employee_id': np.arange(num_rows),\n  'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n  'department': ['HR', 'IT', 'Marketing', 'Finance', 'IT'],\n  'salary': [50000, 60000, 70000, 80000, 90000]\n})\n```", "```py\nemployee_data_2 = pd.DataFrame({\n  'employee_id': np.arange(num_rows),\n  'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n  'department': ['HR', 'IT', 'Sales', 'Finance', 'Operations'],\n  'bonus': [3000, 4000, 5000, 6000, 7000]\n})\n```", "```py\nstart_time = time()\n```", "```py\nmerged_data = pd.merge(employee_data_1, employee_data_2, on=['employee_id', 'name'], how='inner', suffixes=('_1', '_2'))\n```", "```py\nend_time = time()\nmerge_time = end_time - start_time\nMerge operation took around 0.00289 seconds\n```", "```py\nemployee_data_1.set_index('employee_id', inplace=True)\nemployee_data_2.set_index('employee_id', inplace=True)\n```", "```py\nstart_time = time()\nmerged_data_reduced = pd.merge(employee_data_1, employee_data_2, left_index=True, right_index=True, suffixes=('_1', '_2'))\nend_time = time()\nmerge_reduced_time = end_time - start_time\nMerge operation with reduced memory took around 0.00036 seconds\n```", "```py\nemployee_data_1.set_index('employee_id', inplace=True)\nemployee_data_2.set_index('employee_id', inplace=True)\n```", "```py\nmerged_data = pd.merge(employee_data_1, employee_data_2, left_index=True, right_index=True, suffixes=('_1', '_2'))\nMerge operation with setting index took around 0.00036 seconds\n```", "```py\nemployee_data_1.sort_index(inplace=True)\nemployee_data_2.sort_index(inplace=True)\nmerged_data_reduced = pd.merge(employee_data_1, employee_data_2, left_index=True, right_index=True, suffixes=('_1', '_2'))\nMerge operation after sorting took around 0.00028 seconds.\n```", "```py\nemployee_data_1 = pd.DataFrame({\n  'employee_id': np.arange(1, 6),\n  'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],\n  'department': ['HR', 'IT', 'Marketing', 'Finance', 'IT']\n})\nemployee_data_2 = pd.DataFrame({\n  'employee_id': np.arange(6, 11),\n  'name': ['Frank', 'Grace', 'Hannah', 'Ian', 'Jill'],\n  'department': ['Logistics', 'HR', 'IT', 'Marketing', 'Finance']\n})\n```", "```py\nconcatenated_data = pd.concat([employee_data_1, employee_data_2], axis=0)\n```", "```py\n   employee_id     name department\n0            1    Alice         HR\n1            2      Bob         IT\n2            3  Charlie  Marketing\n3            4    David    Finance\n4            5      Eva         IT\n0            6    Frank  Logistics\n1            7    Grace         HR\n2            8   Hannah         IT\n3            9      Ian  Marketing\n4           10     Jill    Finance\n```", "```py\n       employee_id     name  department\n    0            1    Alice          HR\n    1            2      Bob          IT\n    2            3  Charlie   Marketing\n    3            4    David     Finance\n    4            5      Eva          IT\n    0            6    Frank   Logistics\n    1            7    Grace          HR\n    2            8   Hannah          IT\n    3            9      Ian   Marketing\n    4           10     Jill     Finance\n    concatenated_data_reset = concatenated_data.reset_index(drop=True)\n    ```", "```py\n       employee_id     name  department\n    0            1    Alice          HR\n    1            2      Bob          IT\n    2            3  Charlie   Marketing\n    3            4    David     Finance\n    4            5      Eva          IT\n    5            6    Frank   Logistics\n    6            7    Grace          HR\n    7            8   Hannah          IT\n    8            9      Ian   Marketing\n    9           10     Jill     Finance\n    ```", "```py\nconcatenated_data = pd.concat([employee_data_1, employee_performance], axis=1)\n```", "```py\n  employee_id     name department employee_id performance_rating\n0           1    Alice         HR           1            3\n1           2      Bob         IT           2            4\n2           3  Charlie  Marketing           3            5\n3           4    David    Finance           4            3\n4           5      Eva         IT           5            4\n```"]