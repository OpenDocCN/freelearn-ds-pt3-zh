["```py\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import colors\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib inline\n\n```", "```py\nfrom matplotlib import pyplot as plt\nimport matplotlib.pyplot as plt\nX=range(0,11)\nY=[1/6.0 if x in range(1,7) else 0.0 for x in X]\nplt.plot(X,Y,'go-', linewidth=0, drawstyle='steps-pre', \n    label=\"p(x)=1/6\")\nplt.legend(loc=\"upper left\")\nplt.vlines(range(1,7),0,max(Y), linestyle='-')\nplt.xlabel('x')\nplt.ylabel('p(x)')\nplt.ylim(0,0.5)\nplt.xlim(0,10)\nplt.title('Discrete uniform probability distribution with \n          p=1/6')\nplt.show()\n```", "```py\nIn [20]:import matplotlib\n        from scipy.stats import bernoulli\n        a = np.arange(2)\n\n        colors = matplotlib.rcParams['axes.color_cycle']\n        plt.figure(figsize=(12,8))\n        for i, p in enumerate([0.0, 0.2, 0.5, 0.75, 1.0]):\n             ax = plt.subplot(1, 5, i+1)\n             plt.bar(a, bernoulli.pmf(a, p), label=p, color=colors[i], alpha=0.5)\n             ax.xaxis.set_ticks(a)\n\n            plt.legend(loc=0)\n                if i == 0:\n                     plt.ylabel(\"PDF at $k$\")\n\n            plt.suptitle(\"Bernoulli probability for various values of $p$\")\n```", "```py\n     from scipy.stats import binom\n       clrs = ['blue','green','red','cyan','magenta']     plt.figure(figsize=(12,6))\n      k = np.arange(0, 22)\n      for p, color in zip([0.001, 0.1, 0.3, 0.6, 0.999], clrs):\n           rv = binom(20, p)\n           plt.plot(k, rv.pmf(k), lw=2, color=color, label=\"$p$=\" + str(round(p,1)))\n\n            plt.legend()\n      plt.title(\"Binomial distribution PMF\")\n      plt.tight_layout()\n      plt.ylabel(\"PDF at $k$\")\n      plt.xlabel(\"$k$\")\n\n```", "```py\n    In [11]: %matplotlib inline\n       import numpy as np\n       import matplotlib\n       import matplotlib.pyplot as plt\n       from scipy.stats import poisson\n       colors = matplotlib.rcParams['axes.color_cycle']\n       k=np.arange(15)\n       plt.figure(figsize=(12,8))\n       for i, lambda_ in enumerate([1,2,4,6]):\n            plt.plot(k, poisson.pmf(k, lambda_), '-o',  \n            label=\"$\\lambda$=\" + str(lambda_), color=colors[i])\n            plt.legend()\n       plt.title(\"Possion distribution PMF for various $\\lambda$\")\n       plt.ylabel(\"PMF at $k$\")\n       plt.xlabel(\"$k$\")\n       plt.show()\n\n```", "```py\n    In [12]: from scipy.stats import geom\n          p_vals=[0.01,0.2,0.5,0.8,0.9]\n       x = np.arange(geom.ppf(0.01,p),geom.ppf(0.99,p))\n            colors = matplotlib.rcParams['axes.color_cycle']\n            for p,color in zip(p_vals,colors):\n              x = np.arange(geom.ppf(0.01,p),geom.ppf(0.99,p))\n                 plt.plot(x,geom.pmf(x,p),'-o',ms=8,label='$p$=' + str(p))\n              plt.legend(loc='best')\n            plt.ylim(-0.5,1.5)\n            plt.xlim(0,7.5)\n            plt.ylabel(\"Pmf at $k$\")\n            plt.xlabel(\"$k$\")\n            plt.title(\"Geometric distribution PMF\")\n```", "```py\n    In [189]: from scipy.stats import nbinom\n           from matplotlib import colors\n        clrs = matplotlib.rcParams['axes.color_cycle']\n        x = np.arange(0,11)\n        n_vals = [0.1,1,3,6]\n        p=0.5\n              for n, clr in zip(n_vals, clrs):\n                  rv = nbinom(n,p)\n                  plt.plot(x,rv.pmf(x), label=\"$n$=\" + str(n), color=clr)\n                  plt.legend()\n              plt.title(\"Negative Binomial Distribution PMF\")\n              plt.ylabel(\"PMF at $x$\")\n              plt.xlabel(\"$x$\")\n```", "```py\n    In [11]: np.random.seed(100)  # seed the random number generator\n                                  # so plots are reproducible\n             subplots = [111,211,311]\n             ctr = 0 \n             fig, ax = plt.subplots(len(subplots), figsize=(10,12))\n             nsteps=10\n             for i in range(0,3):\n               cud = np.random.uniform(0,1,nsteps) # generate distrib\n               count, bins, ignored = ax[ctr].hist(cud,15,normed=True)\n               ax[ctr].plot(bins,np.ones_like(bins),linewidth=2, color='r')\n               ax[ctr].set_title('sample size=%s' % nsteps)\n               ctr += 1\n               nsteps *= 100\n             fig.subplots_adjust(hspace=0.4)\n             plt.suptitle(\"Continuous Uniform probability distributions for various sample sizes\" , fontsize=14)\n\n```", "```py\n    In [15]: import scipy.stats\n             clrs = colors.cnames\n               x = np.linspace(0,4, 100)\n            expo = scipy.stats.expon\n            lambda_ = [0.5, 1, 2, 5]\n           plt.figure(figsize=(12,4))\n           for l,c in zip(lambda_,clrs):\n               plt.plot(x, expo.pdf(x, scale=1./l), lw=2,\n                          color=c, label = \"$\\lambda = %.1f$\"%l)\n                 plt.legend()\n                 plt.ylabel(\"PDF at $x$\")\n          plt.xlabel(\"$x$\")\n          plt.title(\"Pdf of an Exponential random variable for various $\\lambda$\");\n\n```", "```py\n    In [54]: import matplotlib\n        from scipy.stats import norm\n          X = 2.5\n       dx = 0.1\n       R = np.arange(-X,X+dx,dx)\n\n       L = list()\n       sdL = (0.5,1,2,3)\n       for sd in sdL:\n            f = norm.pdf\n            L.append([f(x,loc=0,scale=sd) for x in R])\n\n       colors = matplotlib.rcParams['axes.color_cycle']\n       for sd,c,P in zip(sdL,colors,L):\n            plt.plot(R,P,zorder=1,lw=1.5,color=c,\n                    label=\"$\\sigma$=\" + str(sd))\n            plt.legend()\n\n       ax = plt.axes()\n       ax.set_xlim(-2.1,2.1)\n       ax.set_ylim(0,1.0)\n       plt.title(\"Normal distribution Pdf\")\n       plt.ylabel(\"PDF at $\\mu$=0, $\\sigma$\")\n\n```", "```py\n    In [18]:from scipy.stats import binom\n         from matplotlib import colors\n      cols = colors.cnames\n      n_values = [1, 5,10, 30, 100]\n\n      subplots = [111+100*x for x in range(0,len(n_values))]\n      ctr = 0 \n      fig, ax = plt.subplots(len(subplots), figsize=(6,12))\n      k = np.arange(0, 200)\n      p=0.5\n\n      for n, color in zip(n_values, cols):\n              k=np.arange(0,n+1)\n              rv = binom(n, p)\n              ax[ctr].plot(k, rv.pmf(k), lw=2, color=color)\n              ax[ctr].set_title(\"$n$=\" + str(n))\n              ctr += 1\n\n      fig.subplots_adjust(hspace=0.5)\n      plt.suptitle(\"Binomial distribution PMF (p=0.5) for various values of n\", fontsize=14)\n\n```", "```py\n    head -2 ../fb_post_dates.txt \n    Tuesday, September 30, 2014 | 2:43am EDT\n    Tuesday, September 30, 2014 | 2:22am EDT\n```", "```py\n    In [91]: filePath=\"./data/fb_post_dates.txt\"\n             fbdata_df=pd.read_csv(filePath,  sep='|', parse_dates=[0], header=None,names=['Date','Time'])\n```", "```py\n    In [92]: fbdata_df.head()  #inspect the data\n   Out[92]:   Date       Time\n    0  2014-09-30   2:43am EDT\n    1  2014-09-30   2:22am EDT\n    2  2014-09-30   2:06am EDT\n    3  2014-09-30   1:07am EDT\n    4  2014-09-28   9:16pm EDT \n```", "```py\n    In [115]: fbdata_df_ind=fbdata_df.set_index('Date')\n              fbdata_df_ind.head(5)\n    Out[115]:                      \n             Date        Time\n             2014-09-30  2:43am EDT\n             2014-09-30  2:22am EDT\n             2014-09-30  2:06am EDT\n             2014-09-30  1:07am EDT\n             2014-09-28  9:16pm EDT  \n```", "```py\n    In [116]: fbdata_df_ind.index\n    Out[116]: <class 'pandas.tseries.index.DatetimeIndex'>\n              [2014-09-30, ..., 2007-04-16]\n              Length: 7713, Freq: None, Timezone: None \n```", "```py\n    In [99]: fb_mth_count_=fbdata_df_ind.resample('M', how='count')\n             fb_mth_count_.rename(columns={'Time':'Count'},\n                                  inplace=True)   # Rename \n             fb_mth_count_.head()\n Out[99]:            Count\n            Date\n            2007-04-30  1\n            2007-05-31  0\n            2007-06-30  5\n            2007-07-31  50\n            2007-08-31  24  \n```", "```py\n    In [108]: %matplotlib inline\n              import datetime as dt\n    #Obtain the count data from the DataFrame as a dictionary\n              year_month_count=fb_bymth_count.to_dict()['Count'] \n              size=len(year_month_count.keys())\n    #get dates as list of strings\n              xdates=[dt.datetime.strptime(str(yyyymm),'%Y%m') \n                      for yyyymm in year_month_count.keys()] \n              counts=year_month_count.values()\n              plt.scatter(xdates,counts,s=counts)\n             plt.xlabel('Year')\n              plt.ylabel('Number of Facebook posts')\n              plt.show() \n\n```", "```py\n    In [69]: fb_activity_data = [year_month_count[k] for k in \n                                 sorted(year_month_count.keys())]\n            fb_activity_data[:5]\n\n Out[70]: [1, 0, 5, 50, 24]\n\n    In [71]: fb_post_count=len(fb_activity_data)\n```", "```py\n    In [72]: from IPython.core.pylabtools import figsize\n             import matplotlib.pyplot as plt\n               figsize(8, 5)\n            plt.bar(np.arange(fb_post_count),\n             fb_activity_data, color=\"#49a178\")\n            plt.xlabel(\"Time (months)\")\n            plt.ylabel(\"Number of FB posts\")\n            plt.title(\"Monthly Facebook posts over time\")\n            plt.xlim(0,fb_post_count);  \n```", "```py\n    In [88]: # Define data and stochastics\n            import pymc as pm\n            switchpoint = pm.DiscreteUniform('switchpoint',\n                                              lower=0,\n                                        upper=len(fb_activity_data)-1,\n                                           doc='Switchpoint[month]')\n            avg = np.mean(fb_activity_data)\n            early_mean = pm.Exponential('early_mean', beta=1./avg)\n            late_mean = pm.Exponential('late_mean', beta=1./avg)\n            late_mean\n Out[88]:<pymc.distributions.Exponential 'late_mean' at 0x10ee56d50> \n```", "```py\n    In [89]: @pm.deterministic(plot=False)\n             def rate(s=switchpoint, e=early_mean, l=late_mean):\n                 ''' Concatenate Poisson means '''\n                 out = np.zeros(len(fb_activity_data))\n                 out[:s] = e\n                 out[s:] = l\n             return out\n\n             fb_activity = pm.Poisson('fb_activity', mu=rate,   \n                           value=fb_activity_data, observed=True)\n             fb_activity\nOut[89]: <pymc.distributions.Poisson 'fb_activity' at 0x10ed1ee50>  \n```", "```py\n    In [94]: fb_activity_model=pm.Model([fb_activity,early_mean,\n                                         late_mean,rate])\n    In [95]: from pymc import MCMC\n               fbM=MCMC(fb_activity_model)\n    In [96]: fbM.sample(iter=40000,burn=1000, thin=20)\n               [-----------------100%-----------------] 40000 of 40000 \n              complete in 11.0 sec\n\n```", "```py\n    In [97]: from pylab import hist,show\n               %matplotlib inline\n            hist(fbM.trace('late_mean')[:])\n    Out[97]: (array([  15.,   61.,  214.,  421.,  517.,  426.,  202.,\n                       70.,   21.,    3.]),\n              array([ 102.29451192,  103.25158404,  104.20865616,\n                      105.16572829,  106.12280041,  107.07987253,\n                      108.03694465,  108.99401677,  109.95108889,\n                      110.90816101,  111.86523313]),\n               <a list of 10 Patch objects>)\n```", "```py\n    In [98]:plt.hist(fbM.trace('early_mean')[:]) Out[98]: (array([  20.,  105.,  330.,  489.,  470.,  314.,  147.,\n                       60.,    3.,   12.]),\n              array([ 49.19781192,  50.07760882,  50.95740571,\n                      51.83720261,  52.71699951,  53.59679641,\n                      54.47659331,  55.35639021,  56.2361871 ,\n                      57.115984  ,  57.9957809 ]),\n            <a list of 10 Patch objects>) \n```", "```py\n    In [99]: fbM.trace('switchpoint')[:] Out[99]: array([38, 38, 38, ..., 35, 35, 35])\n\n    In [150]: plt.hist(fbM.trace('switchpoint')[:]) Out[150]: (array([ 1899.,     0.,     0.,     0.,     0.,     0.,\n                       0., 0., 0.,    51.]),\n               array([ 35\\. ,  35.3,  35.6,  35.9,  36.2,  36.5,  36.8,\n                       37.1,  37.4, 37.7,  38\\. ]),\n               <a list of 10 Patch objects>)\n\n```", "```py\n    In [141]: early_mean_samples=fbM.trace('early_mean')[:]\n              late_mean_samples=fbM.trace('late_mean')[:]\n              switchpoint_samples=fbM.trace('switchpoint')[:]\n    In [142]: from IPython.core.pylabtools import figsize\n           figsize(12.5, 10)\n        # histogram of the samples:\n        fig = plt.figure()\n        fig.subplots_adjust(bottom=-0.05)\n\n        n_mths=len(fb_activity_data)\n        ax = plt.subplot(311)\n        ax.set_autoscaley_on(False)\n\n         plt.hist(early_mean_samples, histtype='stepfilled',\n                  bins=30, alpha=0.85, label=\"posterior of $e$\",\n                  color=\"turquoise\", normed=True)\n        plt.legend(loc=\"upper left\")\n        plt.title(r\"\"\"Posterior distributions of the variables\n                   $e, l, s$\"\"\",fontsize=16)\n        plt.xlim([40, 120])\n         plt.ylim([0, 0.6])\n        plt.xlabel(\"$e$ value\",fontsize=14)\n\n         ax = plt.subplot(312)\n        ax.set_autoscaley_on(False)\n        plt.hist(late_mean_samples, histtype='stepfilled',\n                  bins=30, alpha=0.85, label=\"posterior of $l$\",\n                  color=\"purple\", normed=True)\n        plt.legend(loc=\"upper left\")\n        plt.xlim([40, 120])\n         plt.ylim([0, 0.6])\n        plt.xlabel(\"$l$ value\",fontsize=14)\n        plt.subplot(313)\n        w = 1.0 / switchpoint_samples.shape[0] *\n             np.ones_like(switchpoint_samples)\n        plt.hist(switchpoint_samples, bins=range(0,n_mths), alpha=1,\n                  label=r\"posterior of $s$\", color=\"green\",\n                  weights=w, rwidth=2.)\n        plt.xlim([20, n_mths - 20])\n        plt.xlabel(r\"$s$ (in days)\",fontsize=14)\n        plt.ylabel(\"probability\")\n        plt.legend(loc=\"upper left\")\n\n         plt.show()\n\n```", "```py\n    In [100]: from pymc.Matplot import plot\n           plot(fbM)\n        Plotting late_mean\n        Plotting switchpoint\n        Plotting early_mean\n\n```", "```py\nimport numpy as np\nimport math as mh\nnp.seterr(divide='ignore', invalid='ignore') #ignore division by zero and invalid numbers\ndef poissonpdf(x,lbd):\n    val = (np.power(lbd,x)*np.exp(-lbd))/(mh.factorial(x))\n    return val\n```", "```py\ndef loglikelihood(data,lbd):\n    lkhd=1\n    for i in range(len(data)):\n        lkhd=lkhd*poissonpdf(data[i],lbd)\n    if lkhd!=0:\n        val=np.log(lkhd)\n    else:\n        val=0\n    return val\n```", "```py\ndef diffllhd(data,lbd):\n    diff = -len(data) + sum(data)/lbd\n    return diff\n```", "```py\ndata=[randint(3, 12) for p in range(100)]\n```", "```py\ny=[loglikelihood(data,i) for i in range(1,10)]\ny=[num for num in y if num ]\nx=[i for i in range(1,10) if loglikelihood(data,i)]\nplt.plot(x,y)\nplt.axvline(x=6,color='k')\nplt.title('Log-Likelihoods for different lambdas')\nplt.xlabel('Log Likelihood')\nplt.ylabel('Lambda')\n```", "```py\ndef newtonRaphson(data,lbd):\n    h = loglikelihood(data,lbd) / diffllhd(data,lbd)\n    while abs(h) >= 0.0001:\n        if diffllhd!=0:\n            h = loglikelihood(data,lbd) / diffllhd(data,lbd)\n\n        # x(i+1) = x(i) - f(x) / f'(x)\n            lbd = lbd - h\n        else:\n            lbd=lbd\n    return lbd\n```"]