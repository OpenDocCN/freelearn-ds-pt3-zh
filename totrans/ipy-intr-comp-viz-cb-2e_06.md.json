["```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            import matplotlib as mpl\n            %matplotlib inline\n    ```", "```py\n    In [2]: np.random.seed(12)\n            for i in range(8):\n                x = np.arange(1000)\n                y = np.random.randn(1000).cumsum()\n                plt.plot(x, y, label=str(i))\n            plt.legend()\n    ```", "```py\n    In [3]: import prettyplotlib as ppl\n            np.random.seed(12)\n            for i in range(8):\n                x = np.arange(1000)\n                y = np.random.randn(1000).cumsum()\n                ppl.plot(x, y, label=str(i))\n            ppl.legend()\n    ```", "```py\n    In [4]: np.random.seed(12)\n            plt.pcolormesh(np.random.rand(16, 16))\n            plt.colorbar()\n    ```", "```py\n    In [5]: np.random.seed(12)\n            ppl.pcolormesh(np.random.rand(16, 16))\n    ```", "```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            import seaborn as sns\n            %matplotlib inline\n    ```", "```py\n    In [2]: x1 = np.random.randn(80)\n            x2 = np.random.randn(80)\n            x3 = x1 * x2\n            y1 = .5 + 2 * x1 - x2 + 2.5 * x3 + \\\n                 3 * np.random.randn(80)\n            y2 = .5 + 2 * x1 - x2 + 2.5 * np.random.randn(80)\n            y3 = y2 + np.random.randn(80)\n    ```", "```py\n    In [3]: sns.violinplot([x1,x2, x3])\n    ```", "```py\n    In [4]: sns.regplot(x2, y2)\n    ```", "```py\n    In [5]: df = pd.DataFrame(dict(x1=x1, x2=x2, x3=x3, \n                                   y1=y1, y2=y2, y3=y3))\n            sns.corrplot(df)\n    ```", "```py\n    In [1]: import numpy as np\n            import bokeh.plotting as bkh\n            bkh.output_notebook()\n    ```", "```py\n    In [2]: x = np.linspace(0., 1., 100)\n            y = np.cumsum(np.random.randn(100))\n    ```", "```py\n    In [3]: bkh.line(x, y, line_width=5)\n            bkh.show()\n    ```", "```py\n    In [4]: from bokeh.sampledata.iris import flowers\n            colormap = {'setosa': 'red',\n                        'versicolor': 'green',\n                        'virginica': 'blue'}\n            flowers['color'] = flowers['species'].map(\n                                       lambda x: colormap[x])\n    ```", "```py\n    In [5]: bkh.scatter(flowers[\"petal_length\"], \n                        flowers[\"petal_width\"],\n                        color=flowers[\"color\"], \n                        fill_alpha=0.25, size=10,)\n            bkh.show()\n    ```", "```py\n    In [1]: import json\n            import numpy as np\n            import networkx as nx\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: g = nx.karate_club_graph()\n            nx.draw(g)\n    ```", "```py\n    In [3]: from networkx.readwrite import json_graph\n            data = json_graph.node_link_data(g)\n            with open('graph.json', 'w') as f:\n                json.dump(data, f, indent=4)\n    ```", "```py\n    In [4]: %%html\n            <div id=\"d3-example\"></div>\n            <style>\n            .node {stroke: #fff; stroke-width: 1.5px;}\n            .link {stroke: #999; stroke-opacity: .6;}\n            </style>\n    ```", "```py\n    In [5]: %%javascript\n        // We load the d3.js library. \n        require([\"d3\"], function(d3) {\n            // The code in this block is executed when the \n            // d3.js library has been loaded.\n            [...]\n            // We create a force-directed dynamic graph \n            // layout.\n            var force = d3.layout.force().charge(-120).\n                   linkDistance(30).size([width, height]);\n            [...]\n            // In the <div> element, we create a <svg> graphic\n            // that will contain our interactive \n            // visualization.\n            var svg = d3.select(\"#d3-example\").select(\"svg\");\n            [...]\n            // We load the JSON file.\n            d3.json(\"graph.json\", function(error, graph) {\n                // We create the graph here.\n                force.nodes(graph.nodes).links(graph.links)\n                     .start();\n\n                // We create a <line> SVG element for each\n                // link in the graph.\n                var link = svg.selectAll(\".link\")\n                        .data(graph.links)\n                        .enter().append(\"line\")\n                        .attr(\"class\", \"link\");\n\n                // We create <circle> SVG elements for the \n                // nodes.\n                var node = svg.selectAll(\".node\")\n                    .data(graph.nodes)\n                    .enter().append(\"circle\")\n                    [...]\n                    .style(\"fill\", function(d) {\n                        return color(d.club); \n                     })\n                    .call(force.drag);\n                    [...]\n                });\n            });\n    ```", "```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: from mpld3 import enable_notebook\n            enable_notebook()\n    ```", "```py\n    In [3]: X = np.random.normal(0, 1, (100, 3))\n            color = np.random.random(100)\n            size = 500 * np.random.random(100)\n            plt.scatter(X[:,0], X[:,1], c=color,\n                        s=size, alpha=0.5, linewidths=2)\n            plt.grid(color='lightgray', alpha=0.7)\n    ```", "```py\n    In [4]: fig, ax = plt.subplots(3, 3, figsize=(6, 6),\n                                   sharex=True, sharey=True)\n            fig.subplots_adjust(hspace=0.3)\n            X[::2,2] += 3\n            for i in range(3):\n                for j in range(3):\n                    ax[i,j].scatter(X[:,i], X[:,j], c=color,\n                        s=.1*size, alpha=0.5, linewidths=2)\n                    ax[i,j].grid(color='lightgray', alpha=0.7)\n    ```", "```py\npython setup.py install\n\n```", "```py\n    In [1]: import numpy as np\n            from vispy import app\n            from vispy import gloo\n    ```", "```py\n    In [2]: c = app.Canvas(keys='interactive')\n    ```", "```py\n    In [3]: vertex = \"\"\"\n            attribute vec2 a_position;\n            void main (void)\n            {\n                gl_Position = vec4(a_position, 0.0, 1.0);\n            }\n            \"\"\"\n    ```", "```py\n    In [4]: fragment = \"\"\"\n            void main()\n            {\n                gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n            }\n            \"\"\"\n    ```", "```py\n    In [5]: program = gloo.Program(vertex, fragment)\n    ```", "```py\n    In [6]: program['a_position'] = np.c_[\n                    np.linspace(-1.0, +1.0, 1000),\n                    np.random.uniform(-0.5, +0.5, 1000)]\n    ```", "```py\n    In [7]: @c.connect\n            def on_resize(event):\n                gloo.set_viewport(0, 0, *event.size)\n    ```", "```py\n    In [8]: @c.connect\n            def on_draw(event):\n                gloo.clear((1,1,1,1))\n                program.draw('line_strip')\n    ```", "```py\n    In [9]: c.show()\n            app.run()\n    ```"]