- en: Making Powerful Reports In Jupyter Using pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pandas and Jupyter Notebook can be used to create nicely formatted output, reports,
    and/or tutorials that are easy to share with a wide range of audiences. In this
    chapter, we will look into the application of a range of styles and the formatting
    options that pandas provides. We will also understand how to create dashboards
    and reports in Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: pandas styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making reports using Jupyter Notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pandas allow for a wide variety of operations to be performed on DataFrames,
    making it easier to handle structured data. Another intriguing property of DataFrames
    is that they allow us to format and style regular rows and columns in tabular
    data. These styling properties help enhance the readability of tabular data. The
    `Dataframe.style` method returns a Styler object. Any formatting to be applied
    before displaying a DataFrame can be applied over this Styler object. Styling
    can be done either with in-built functions that have predefined rules for formatting
    or with user-defined rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following DataFrames so that we can take a look at pandas'' styling
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the preceding DataFrame loaded into Jupyter
    Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1be10ee0-3386-487e-8430-1fb54fc06859.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame loaded into Jupyter Notebook
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how Jupyter Notebook elements can be styled.
  prefs: []
  type: TYPE_NORMAL
- en: In-built styling options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pandas has predefined formatting rules written and stored as functions that
    can be readily used.
  prefs: []
  type: TYPE_NORMAL
- en: The `highlight_null` method highlights all NaNs or Null values in the data with
    a specified color. In the DataFrame under discussion, the Age and Cabin columns
    have NaNs. Hence, in the following screenshot, the NaNs are flagged in blue in
    these columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet highlights the NaN values in these columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79828ff5-6015-4ff5-8c34-58e24455a572.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Highlighting Nulls and NANs with blue'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `highlight_max` and `highlight_min` methods apply highlighting (with a
    chosen color) to the maximum or minimum value across either axis. In the following
    example, the minimum values in each column have been highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Please note that only columns with the numeric datatype are subject to highlighting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot highlights the maximum values for each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59106fc6-5ccf-43d0-8049-75cd04f5554c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Highlighting the maximums across rows (among numerical columns)
    with yellow'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, `highlight_max` has been used to highlight the maximum
    values in each column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use the same function to find the maximum for each column, changing
    the value of the axis parameter while doing so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the highlighted maximum values across columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd35cad5-d419-4c85-a868-6b32a3d519d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Highlighting the maximums across columns (among numerical columns) with yellow
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the `highlight_min` function to highlight the minimum values
    with a custom-defined color. Both `highlight_min` and `highlight_max` have the
    same syntax and accept the same set of parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7fa48b2-8435-4b0b-9691-3d3edd99118a.png)'
  prefs: []
  type: TYPE_IMG
- en: Highlighting the minimums with green
  prefs: []
  type: TYPE_NORMAL
- en: A background color gradient based on conditional formatting can be applied to
    columns to give a sense of high, medium, and low values based on color. The backgrounds
    are colored with different colors based on whether they are high, medium, or low.
  prefs: []
  type: TYPE_NORMAL
- en: 'The background gradient of the table can be controlled through the `background_gradient()`
    styling function. Any existing colormaps or user-defined colormaps can be used
    as a gradient. Parameters such as `low` and `high` help us use part of the colormap''s
    color range. Further, the axis and subset parameters can be set to vary the gradient
    along a certain axis and subset of columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50db428f-0caa-4d5b-a946-a8b1dae8f7a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a background color gradient separately for each numerical column based
    on its high and low values
  prefs: []
  type: TYPE_NORMAL
- en: Styling can also be done independently of values. Let's modify the properties
    to change the font color, background color, and border color. You can do so by
    using the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/471a3e34-3b02-40fa-ab92-0f2050399954.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the background colour, font color, font type, and font size for an
    output DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: 'Styling options also help us control the numerical precision. Consider the
    following DataFrames:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fc75a21-6488-4134-8371-2ed0460c1cba.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame numbers without precision rounding off
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the following code, which sets the precision to 2 decimal places
    or rounds off a number number to 2 decimal places.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ef02878-46d4-4732-8fcb-44507275df09.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame numbers with precision rounding off to 2 decimal places
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s set a caption for the preceding DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58478994-ac86-4521-96ab-f5b6f99dba99.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame numbers with precision rounding off to 2 decimal places and a table
    caption
  prefs: []
  type: TYPE_NORMAL
- en: 'The `set_table_styles` function can also be used to modify the table independently
    of the data. It accepts a list of `table_styles`. Each `table_style` should be
    a dictionary consisting of a selector and a property. `table_styles` can be used
    to define custom action-based styles. For example, the following style gives the
    selected cell the `lawngreen` background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90023e85-3e17-45a0-9dd4-5d13110453d4.png)'
  prefs: []
  type: TYPE_IMG
- en: table_style output showing a lawngreen background color for the selected cell
  prefs: []
  type: TYPE_NORMAL
- en: 'The `hide_index` and `hide_columns` styling options allow us to hide either
    the index or specified columns when they''re displayed. In the following code,
    we have hidden the default index column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output DataFrame, without its index:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1979343-58ca-448f-983e-30484ed6d9a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Hiding the Index column from an output DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the `hide_columns` option to hide the `"Name"`, `"Sex"`, `"Ticket"`,
    and `"Cabin"` columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the columns that are shown after hiding a
    few columns from a DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fce9677-2271-48e6-8068-520b9efae092.png)'
  prefs: []
  type: TYPE_IMG
- en: Hiding a number of columns from an output DataFrame
  prefs: []
  type: TYPE_NORMAL
- en: User-defined styling options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apart from the in-built functions, pandas provides us with the option to write
    our own functions to be used for styling. Let''s write a function to change the
    background color of negative values to red:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Such functions can be applied as a styling option through the `apply()` and
    `applymap` methods of pandas. The `applymap` method applies the function elementwise.
    The `apply()` method can be used to apply styles either row-wise or column-wise
    by setting the axis parameter to 1 or 0\. Setting the axis to None applies the
    function table-wise. Here, our intended operation is elementwise. Let''s use `applymap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97739994-ad10-4489-84b8-cd19e7f0271d.png)'
  prefs: []
  type: TYPE_IMG
- en: Customized conditional formatting based on user-defined styling options for
    all the columns
  prefs: []
  type: TYPE_NORMAL
- en: 'The `apply()` and `applymap` methods also allow us to style a slice of the
    data. The columns to be styled can be passed through the subset parameter as a
    list. Let''s try to apply the styling to columns 1 and 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88f10a29-0501-41c3-977e-563a989b3b85.png)'
  prefs: []
  type: TYPE_IMG
- en: Customized conditional formatting based on user-defined styling options for
    a subset of columns
  prefs: []
  type: TYPE_NORMAL
- en: 'This can also be done by passing a suitable label-based indexer. In the following,
    the styling has been done for columns 1 and 4 on rows 0, 1, and 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0be2ec8-3a5e-41b3-9d3c-2cd9942b155a.png)'
  prefs: []
  type: TYPE_IMG
- en: Customized conditional formatting based on user-defined styling options for
    a subset of rows and columns
  prefs: []
  type: TYPE_NORMAL
- en: 'The `format()` function allows the string to be formatted as specified. The
    following code shows formatting being applied to display restricted digits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e9656a3-98be-4f70-a687-4f009423ea49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: Applying the same 2-decimal-place digit formatting on all the
    columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'Separate formats can be applied to different columns, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddb7a3db-81d4-48e6-98e2-be32f7cb2feb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: Applying different formatting to different columns via a styling
    dictionary with column indices as keys and formatting options as values'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `lambda` function can be used to apply formatting conditions across multiple
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69497d87-4dc6-4fb6-8013-316031cc0417.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: Applying lambda functions to style several columns at once'
  prefs: []
  type: TYPE_NORMAL
- en: Navigating Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter Notebook, known as **IPython Notebook** previously, is a wonderful tool
    for reporting. It allows us to integrate regular code with rich styling, formatting,
    markdown, and special text such as equation plots and live coding. This section
    will help you understand the essence of a Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jupyter Notebook can be launched through Anaconda Navigator or from the Terminal
    using the Jupyter Notebook command. It opens in the browser. The following window
    opens on startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46b86828-a700-41d4-aaf1-f9bf7d6524dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.20: Startup screen once a Jupyter Notebook loads up'
  prefs: []
  type: TYPE_NORMAL
- en: A Jupyter Notebook can be created in any of the folders in the directory. The
    New option creates a new notebook, folder, or Terminal. The most interesting feature
    of this option is that it allows us to shift between multiple Conda environments
    with ease. For example, both Python 2 and Python 3 environments can be accessed
    through Jupyter, if installed already. Any notebooks in other directories can
    be transferred to the current working directory of Jupyter Notebook through the
    Upload option.
  prefs: []
  type: TYPE_NORMAL
- en: 'A notebook consists of a menu bar, a toolbar, and a cell area. A single notebook
    can comprise of multiple cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c9ccad0-30b9-400b-85fe-e4f53355c974.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.21: Menu bar and toolbar in Jupyter Notebook'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the menu bar of Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The menu bar provides options that allow us to control the kernel and notebook
    area. The File menu helps create new notebooks, open saved notebooks, save checkpoints
    in the notebook, and revert to a previously saved stable version of a checkpoint.
    The Edit menu consists of a range of actions to be performed on entire cells:
    copying cells, deleting cells, splitting or merging cells, and moving cells up
    and down. The View menu can be used to toggle headers, line numbers, and the toolbar,
    and edit metadata, attachments, and tags. Cells can be inserted above or below
    existing cells from the Insert menu. The Cell menu allows us to run either a single
    cell or multiple cells together. The Kernel state can be modified through the
    Kernel menu. This includes clearing output, restarting the kernel, interrupting
    the kernel, and shutting down the kernel. Jupyter notebook allows us to create
    and use widgets. The Widget menu helps us save, clear, download widget states,
    and embed widgets in HTML content. The Help menu offers quick references and shortcuts.'
  prefs: []
  type: TYPE_NORMAL
- en: Edit mode and command mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Jupyter Notebook can either be in edit mode or command mode. When in edit
    mode, the contents of a cell can be changed; the cell gets highlighted in green,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/638c9698-5e1e-4374-b389-58e14bc98023.png)'
  prefs: []
  type: TYPE_IMG
- en: Edit mode of a cell in Jupyter Notebook
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then notice a pencil icon appear in the top right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e15503a8-7a32-4441-a8c4-946056a3f53b.png)'
  prefs: []
  type: TYPE_IMG
- en: Edit mode of a cell in Jupyter Notebooks
  prefs: []
  type: TYPE_NORMAL
- en: Edit mode can be entered by clicking on a cell or by pressing *Enter* on the
    keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Esc* key helps us switch from edit mode to command mode. This can also
    be done by clicking anywhere outside a cell. A gray boundary around the cell with
    a blue margin on the left indicates command mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0830cc1-e770-42b5-baa4-f1e97705d13e.png)'
  prefs: []
  type: TYPE_IMG
- en: Command mode for a cell in Jupyter Notebooks
  prefs: []
  type: TYPE_NORMAL
- en: 'Command mode allows us to edit the entire notebook, while edit mode serves
    more like a text editor. The *Enter* key helps us enter edit mode when we''re
    in command mode. Several keyboard shortcuts are available in edit mode and command
    mode. Command mode is mapped to a higher number of shortcuts than edit mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/512e35c2-7b0a-45ab-92b2-874fd9277d3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Keyboard shortcuts in Command mode
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/934b31b4-5ac1-4865-bc22-dbeaa4d802ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Keyboard shortcuts in Command mode – 2
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c27f6158-9e73-49a5-858a-26909be799e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Keyboard shortcuts in Edit mode
  prefs: []
  type: TYPE_NORMAL
- en: The keyboard shortcuts in the preceding screenshots help us navigate Jupyter
    Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Mouse navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most basic action that is involved when navigating via the mouse is clicking
    a cell to select and edit it. Further navigation via the mouse is aided by the
    toolbar options. The different options that are available in the toolbar are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9915f71-84b7-4114-a1be-ce774f2b298f.png)**Save and checkpoint**: This
    option saves changes in Jupyter Notebook and sets up a checkpoint that we can
    revert to later if we need to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/69765f9d-a8ab-401f-9f67-d67f1c7aa03b.png)**Inset cell below**: Creates
    a new cell below the currently selected cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/724a1821-308d-43eb-ba29-6e1f72370343.png)**Cut selected cells**: Cuts
    and deletes selected cells. This action can be undone through the Edit menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/739adcc0-a4c0-4e12-b17f-d0f88f0bca6f.png)**Copy selected cells**: Copies
    the entire cell''s contents with ease.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1937a009-6869-4e07-946a-8f3f12795ed0.png)**Paste cells below**: Pastes
    cell contents that were cut or copied earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9d412655-f2a1-44a7-ad38-f50bef5ad4d6.png)**Move selected cells up/down**:
    Moves the selected cells above or below the current location. Shifts by one cell
    at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/530b521e-426b-4fbe-90f3-8d4bf3091a39.png)**Run**: Runs the selected
    cell to execute code. This is an alternative to *Ctrl*+*Enter*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9ea214e1-b852-494b-83c9-22d9767ebc4b.png)**Interrupt the kernel**:
    Cancels the current execution that''s in progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d73d59e5-f64c-4363-91a1-eceaa0c54302.png)**Restart the kernel**: Kernel
    restarts after a popup box prompts a response regarding whether the kernel can
    be restarted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/156c8e9b-5db3-424e-86f8-5b3e062ba427.png)**Restart kernel and re-run
    notebook**: Reruns the entire notebook after restarting the kernel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/f25d2363-ec83-46f4-8464-c17d8b1f35ad.png)**Code**, **Markdown**, **Raw
    NBConvert**, **Heading**: Changes the text format of the cell''s content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/bbd84fd5-97a2-4b35-8f48-679b6a2717f8.png)**Open command palette**: Displays
    the shortcut options that are available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter Notebook Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter offers an interactive reporting ability through Jupyter Dashboard. It
    allows the creation of widgets to make visualizations more interactive. The dashboard
    experience transforms code-laden notebooks into an application with a user-friendly
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Ipywidgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Widgets are an integral part of the Jupyter Dashboard. The following section
    explores `Ipywidgets `in greater detail. First, the widgets should be imported
    from the `Ipywidgets` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how a widget for text input is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cb1462f-c6b6-42e5-8e05-c7e7dbfdb76b.png)'
  prefs: []
  type: TYPE_IMG
- en: Widget to get a text input
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s print the value that was entered in the widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b723b37a-1b88-4b7a-9ea6-cc90665fd000.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.39: Widget to get a text input with printed output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using similar methods, other widgets can be created. The following screenshot
    shows a Button widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d22065d-abe8-4043-8acd-ff7168e8be9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Click button widget
  prefs: []
  type: TYPE_NORMAL
- en: 'Any widget has two parts: the UI and the event handler. The event handler is
    usually a Python script that instructs us about the response we should provide
    to the user input. In the preceding examples, the event handler printed a message
    based on the user''s input.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the default widgets, `interact` is a special kind that chooses the form
    of the widget based on the user input. In the following screenshot, a single value
    was provided to the function by the widget. The interactive widget decided to
    create a slider input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf2bab25-f8fa-4bf3-8782-28661b8475df.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a value slider widget
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s change the input to Boolean, that is, True. The widget becomes
    a checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea786b69-2a6f-4e46-af44-3a58fe509f3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Boolean selector widget
  prefs: []
  type: TYPE_NORMAL
- en: Interactive visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The widgets in the preceding example were simple and delivered a `print` command.
    Instead of the `print` command, the response could be harnessed through a visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example where two inputs from two different slider inputs
    are used to control the axes and inputs to a line plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b8c4e4c-3876-41d6-8dfa-2659734c1b5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Two slider inputs with a plot reflecting the changes in values
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of an interactive visualization with a Seaborn
    plot, where the user can alter the legends and variables that color the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f72663eb-b3e8-4889-b49e-76eba26bddad.png)'
  prefs: []
  type: TYPE_IMG
- en: Drop-down selector widget for choosing the coloring variable
  prefs: []
  type: TYPE_NORMAL
- en: Writing mathematical equations in Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter Notebook is a comprehensive tool for making powerful reports and tutorials
    involving complex mathematical expressions and algorithms. This is because Jupyter
    Notebook provides powerful typesetting features for text formatting and mathematical
    equation typing. Jupyter Notebook cells with these features are called Markdown
    cells, as opposed to Code cells, where code is written and executed. Typesetting
    in Jupyter Notebook is derived from the versatile JavaScript library called **MathJax** used
    for typing scientific equations in web products. It also supports LaTex syntaxes,
    in fact, most syntax we are going to discuss.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to discuss how to write these equations and format
    text. We will start with a quick walkthrough regarding how to write mathematical
    equations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some high-level guidelines to keep in mind while writing equations in Jupyter
    Notebook are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the cell type as Markdown, as shown in the following screenshot. It is
    `Code` by default for a new cell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enclose the equation between `$$`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keywords and symbols such as frac (fractions), times (multiplication), leq (less
    than or equal to), alpha, beta, and others are preceded by a backward slash, `\`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that double-clicking on a rendered Markdown cell takes it back to the
    LaTex/MathJax code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b51329bf-f144-44ff-acdf-97257020a610.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the cell type as Markdown
  prefs: []
  type: TYPE_NORMAL
- en: With these instructions in mind, let's start learning how to write equations.
    This section has been written in a cookbook format where we will see the LaTex/MathJax
    snippet source followed by the output equation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple mathematical operations such as addition, multiplication, division,
    and so on can be written as follows. `\times` and `\over` are the keywords for
    the multiplication and division operators. Note how equations begin and end with
    `$$`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4eb555b-491d-4bd9-902c-9739210ff596.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for simple mathematical operations
  prefs: []
  type: TYPE_NORMAL
- en: 'Power and exponential operations can be written as follows. `^` is the power
    or exponential symbol in LaTex syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/422336e1-35cd-4779-b668-4442d3f2053f.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for power and exponential operations
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, mathematical equations involve complex fractions. These can be written
    as follows. The `\frac` keyword gives us more flexibility when it comes to writing
    complex fractions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/094f3823-5029-4ead-b363-0d0fe6fc0862.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for fraction operations
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at how inequalities can be written. The keywords to note here
    are `\geq` and `\leq`, which stand for greater than or equal to and less than
    or equal to, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9a6451c-311b-4e16-bf8c-2d7ee40a600d.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for inequalities
  prefs: []
  type: TYPE_NORMAL
- en: 'Greek letters and symbols are heavily used in mathematical equations and expressions.
    Here, we have provided a glossary of symbols and the instructions we can use to
    write them. Notice how superscripts can be written by preceding them with `_`,
    that is, an underscore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5cb81ff-eebb-4250-88bc-7ca40cdcfeb2.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for symbols and indices
  prefs: []
  type: TYPE_NORMAL
- en: 'Roots and logs are important components of mathematical equations. Let''s look
    at how we can write them. `\sqrt` is the main keyword for roots and provides two
    parameters—the root type, that is, 2^(nd) root, 3^(rd) root, or 4^(th) root, and
    the expression or the number on which the root is to be applied. For log, the
    base is preceded by `_`, that is, an underscore:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a485689e-7b76-409e-91b4-452576b25635.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for roots and logs
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, we have to deal with summations and products across elements of data
    vectors. Let''s look at how to write these. `\sum` and `\prod` are the main keywords
    and have a `\limit` attribute which takes inputs for the lower and upper bounds
    for the summation or product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1233a7e4-9aba-4865-aba7-9be6452c6935.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for summations and products
  prefs: []
  type: TYPE_NORMAL
- en: 'Combinations and statistics have their own set of symbols. Let''s look at how
    to write them. `\choose` is the keyword for combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46bdd34a-4a4a-491f-90ca-5634aaec1197.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for probability and statistics
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculus is a vast field and is the source of many mathematical expressions
    and equations for many data science algorithms. `\lim` is the keyword we use to
    write limit expressions and supplies the `\limits` and `\to` parameter keywords
    to provide a variable tending to a value. The `\partial` keyword is used to write
    partial derivatives, while the `\frac` keyword is used to write normal derivatives.
    `\int` is used for writing integrals. It comes with the `\limits` parameter, which
    provides the lower and upper bounds of the integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5541e808-d580-426d-b0a2-4a422aa00a13.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for calculus
  prefs: []
  type: TYPE_NORMAL
- en: 'Linear algebra is used extensively in data science algorithms and we deal with
    a lot of matrices in linear algebra. Let''s look at how we can write matrices.
    `\matrix` is the main keyword we use to write a matrix. Elements are written row-wise;
    those in the same row are separated by `&`, while a new row is marked by a line
    break symbol, that is, `//`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e41e7fe0-270d-4edb-bae1-04ddb9f06f1d.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for matrices
  prefs: []
  type: TYPE_NORMAL
- en: It is also common to encounter functions that have different definitions across
    a different range of variable(s). Let's learn how to write these function definitions.
    The following is a high-level overview of the keywords and elements that are needed
    to write such definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the new formatting options that are used in multi-period
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Large Curly Bracket**: Uses the `\left` and `\right` keywords to denote the
    and the end respectively of an equation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Equation Array Alignment**: `begin{}`, `end{}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line Breaker**: Uses the `\` symbol to take the text to the next line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Alignment Box**: Uses `\mbox{text}` to align text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed3f8605-7966-4fd3-89a8-1121d207e3a3.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output equations for multi-period functions
  prefs: []
  type: TYPE_NORMAL
- en: Formatting text in Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Markdown cells come with a lot of options for formatting text. In this section,
    we will go through these options one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Text can be specified as a header by preceding any text with `#` in a markdown
    cell. One # means Header 1, two # means Header 2, and so on. This shown in the
    following screenshot. We follow the same format as the LaTex snippet source, followed
    by the output formatted text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ab51777-f07b-412d-a795-8ad01e2d63f1.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for headers
  prefs: []
  type: TYPE_NORMAL
- en: Bold and italics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To format text as bold, enclose it within `**`, for example, `**<text>**`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To format text as italics, enclose it within `*`, for example, `*<text>*`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4ca8107-6ef4-4052-9a76-ddc6b7038dc9.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for bold and italics formatting
  prefs: []
  type: TYPE_NORMAL
- en: Alignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Text can be centrally aligned by using an HTML-like `<center>` tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bd292ad-2d47-4543-9e76-db4a83a59ce9.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for alignment
  prefs: []
  type: TYPE_NORMAL
- en: Font color
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The font color for text can be specified as follows. It has to be written inside
    another HTML-like `<font>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e19917d-bdc8-487f-99c0-fe981a60ab26.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for font color
  prefs: []
  type: TYPE_NORMAL
- en: Bulleted lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bullet lists can be created by preceding a list item by an asterisk, `*`, and
    a space. The list can be nested as well, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/137102ce-3518-4e66-96f7-3897669bed00.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for bulleted lists
  prefs: []
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tables can be created by using a combination of `|`, spaces, `---`, and `:`.
    They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**|:** Used as a column separator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spaces**: For padding and aligning columns and rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**---**: For creating a solid horizontal line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**:**: For text alignment in a cell. If it appears at the beginning, then the
    text is left-aligned:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4adead56-9d35-430f-aa84-fa3267c1cbf2.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for tables
  prefs: []
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Horizontal lines are used to separate sections from one another. `***` results
    in a normal horizontal line while `- - -` provides a solid horizontal line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6966c0e1-2ec2-44e4-ba36-84145bf60a96.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for tables
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Markdown cells can be used to render code as well, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3576163-629e-4af8-ae7b-a87c7debfeb8.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for HTML
  prefs: []
  type: TYPE_NORMAL
- en: Citation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Quotes and excerpts need to be cited in reports on many occasions. This is
    done by starting each line of the text with `>`. This results in indented text
    and a citation at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e344b9b-947d-40a7-b60f-b623fd7940a7.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output formatted text for citation and indented text
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous operations in Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from text formatting and equations, some miscellaneous operations such
    as loading an image, writing a cell to a Python file, and other  are needed to
    make effective reports. In this section, we will look at these operations and
    learn how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Loading an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most popular image formats, such as `.viz`, `.jpg`, `.png`, `.gif`, and so on,
    can be loaded into Jupyter Notebooks to better illustrate reports. A `.gif` can
    even be loaded and shown as an animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'These image files need to be kept in the current working directory. The current
    working directory can be found by running `os.getcwd( )` in a code block in the
    notebook. Images to be loaded should be kept in this directory. The working directory
    can be changed by using `os.chdir` (the directory path). Note that these commands
    assume that `import os` has already been run. The following code is used to show
    a `.jpg` image, as well as its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8540d50a-0945-4008-9c52-381fb9c82a9d.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output .jpg image
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is used to show a `.gif` image, as well as its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/856b274f-3c3a-4b81-83b1-997d68461bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output .gif image
  prefs: []
  type: TYPE_NORMAL
- en: Hyperlinks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hyperlinking is frequently used to navigate users to relevant resources such
    as input data, algorithm explanations, further readings, videos, and more. The
    syntax to do this is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db9317ef-78d5-4be1-9da4-241b53ecbd30.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output hyperlinks
  prefs: []
  type: TYPE_NORMAL
- en: Writing to a Python file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The contents of a code cell(s) can be written to a Python file. This is quite
    helpful while taking code from prototyping in Jupyter Notebook to production environments
    in Python files. These files are written to the current working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f512335f-e1d4-4239-a2f2-fab7db63298e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.69: LaTex snippet for writing a code cell to a Python file'
  prefs: []
  type: TYPE_NORMAL
- en: Running a Python file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'External Python files can be run directly from within Jupyter Notebooks. This
    can be used to load functions and classes that have been saved in Python files
    so that they can be used later in the notebook. They can also be used to run Python
    files without having to use the command prompt and so that we can see the output
    quickly. Again, these Python files need to be present in the current working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e946910b-126e-45d9-a992-5c7d09df27b8.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output after running a Python file from a cell in Jupyter
    Notebook
  prefs: []
  type: TYPE_NORMAL
- en: Loading a Python file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The contents of a Python file can be loaded into a notebook cell. This is done
    to edit, modify, and test code from the interactive notebook environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10949765-9e04-4be6-b261-a69b86717fb9.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output after loading a Python file from a cell in Jupyter
    Notebook
  prefs: []
  type: TYPE_NORMAL
- en: Internal Links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internal (hyper)links can be created to navigate to different sections of a
    notebook from a context summary index. Clicking on the items in the index takes
    you to a specific section once the internal linking has been done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Making internal links work in a Jupyter Notebook consists of two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an ID or identifier for a section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d234fa45-662c-4d98-bbb7-6408a40dd8c6.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet to create an ID identifier for a section
  prefs: []
  type: TYPE_NORMAL
- en: The ID for a section is provided in the `<a>` tag. In this case, `Simple_Operations`
    is the ID for the Simple Operations section. This ID would be used to refer to
    this section in the second step while creating the link.
  prefs: []
  type: TYPE_NORMAL
- en: 'On running the two preceding cells, the following is provided as output. The
    first cell containing the ID definition becomes invisible. Make sure this cell
    has been run before clicking on the hyperlink. If it has not been run, the link
    will not work. Another important point to note is that this ID definition needs
    to happen just before we create the section header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b252a24-1fae-4d28-bf58-5bd2fdac0607.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of the LaTex snippet creating an ID identifier for a section
  prefs: []
  type: TYPE_NORMAL
- en: Use this ID to create an internal link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The syntax for creating an internal link is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, for the Simple Operations section, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9bad13e-d061-4096-aef0-b680ea2f199a.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet and output after creating an internal link
  prefs: []
  type: TYPE_NORMAL
- en: Note how Simple Operations now appears as a hyperlink. Clicking on this would
    take the user to the Simple Operations section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can define section IDs for all the other sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a0a62bd-e097-4b17-abdf-5f04c491de7c.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet for different section IDs
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that the section ID definition should happen immediately before
    the section header markdown cell to mark the section ID definition cell as the
    beginning of that section. This has been shown as the bulk definition, just for
    illustration purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6addddf2-d875-4767-a85c-52fbcb7d4fe3.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex snippet for different internal links referring to section IDs
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice how the `<br>` tag has been used at the end of each line. This tag denotes
    a line break and takes the text that appears after it to the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cc153db-6ebb-4ee4-a747-e70fe37221f0.png)'
  prefs: []
  type: TYPE_IMG
- en: LaTex output for different internal links referring to section IDs
  prefs: []
  type: TYPE_NORMAL
- en: Sharing Jupyter Notebook reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once reports have been created, they need to shared to their audience for consumption.
    There are several options for sharing these reports. Let's take a look at these
    options now.
  prefs: []
  type: TYPE_NORMAL
- en: Using NbViewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NbViewer is an online viewer for `ipynb` files. The following steps need to
    be followed if we wish to use this option to share Jupyter Notebook reports:'
  prefs: []
  type: TYPE_NORMAL
- en: Save the report as an `ipynb` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the `ipynb` file to GitHub and get the URL for this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the URL from *Step 2* into NbViewer. NbViewer can be accessed from [www.nbviewer.jupyter.org](http://www.nbviewer.jupyter.org).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use this GitHub URL where we shared the Notebook that we used in this chapter: 
     [https://github.com/ashishbt08b004/Experiments/blob/master/writing_equations_in_jupyter.ipynb](https://github.com/ashishbt08b004/Experiments/blob/master/writing_equations_in_jupyter.ipynb).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reports can also be saved as HTML files. These HTML files can be viewed directly
    in any normal browser by double-clicking them and choosing a browser as the default
    program for HTML files. One such example file can be obtained at this link.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ashishbt08b004/Experiments/blob/master/writing_equations_in_jupyter.html](https://github.com/ashishbt08b004/Experiments/blob/master/writing_equations_in_jupyter.html).
    [](https://github.com/ashishbt08b004/Experiments/blob/master/writing_equations_in_jupyter.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Jupyter Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jupyter Hub is a Python program that can be used to deploy and share Jupyter
    Notebook reports to multiple users. It can be thought of as a multi-user version
    of the normal Jupyter Notebook and is accessible through URLs; it is frequently
    used by companies, research groups, and course instructors to share their experiments
    and knowledge with a large group in an interactive environment.
  prefs: []
  type: TYPE_NORMAL
- en: This works on Linux machines and is mostly deployed on a machine with huge computing
    power. This can be either a cloud or on-premise machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Four subsystems make up JupyterHub:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Hub** (tornado process), which is the heart of JupyterHub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **configurable http proxy** (node-http-proxy) that receives requests from
    the client's browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple **single-user Jupyter notebook servers** (Python/IPython/tornado) that
    are monitored by spawners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An **authentication class** that manages how users can access the system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/9e4f694b-6a47-4307-a950-52fb10cea86b.png)'
  prefs: []
  type: TYPE_IMG
- en: Jupyter Hub architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few prerequisites for installing Jupyter Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: A Linux machine (cloud or on-premise)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.5+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodejs/npm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS certificate and the key for HTTPS communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain name for the machine/server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter Hub gives a server-client kind of multi-user environment where data
    and `ipynb` files can be shared with multiple users. It provides multiple robust
    features for security and login authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The following guides can be followed for the installation and deployment of
    a notebook report for multiple users: [https://tljh.jupyter.org/en/latest/](https://tljh.jupyter.org/en/latest/)[.](https://tljh.jupyter.org/en/latest/)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter focused on three main themes: styling and result formatting options
    in pandas, creating interactive dashboards in Jupyter Notebook, and exploring
    formatting and typesetting options in Jupyter Notebook to create powerful reports.'
  prefs: []
  type: TYPE_NORMAL
- en: Output formatting such as conditional formatting, bold and italics output, highlighting
    certain sections, and so on can be done by styling options in pandas. Basic interactive
    dashboards can be created in Jupyter Notebook. LaTex, and MathJax and provide
    powerful typesetting and markdown options for writing equations and formatting
    text. Reports can be shared as `ipynb` files on GitHub, and can be viewed in an
    online viewer called **NbViewer**. Jupyter Hub is the multi-user server-based
    deployment method.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how pandas can be used to perform statistical
    calculations using packages; we will also perform calculations from scratch.
  prefs: []
  type: TYPE_NORMAL
