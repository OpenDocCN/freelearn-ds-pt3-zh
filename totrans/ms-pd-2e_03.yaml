- en: Installation of pandas and Supporting Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start work on pandas for doing data analysis, we need to make
    sure that the software is installed and the environment is in proper working order.
    This chapter deals with the installation of Python (if necessary), the pandas
    library, and all necessary dependencies for the Windows, macOS/X, and Linux platforms.
    The topics we address include, among other things, selecting a version of Python,
    installing Python, and installing pandas.
  prefs: []
  type: TYPE_NORMAL
- en: The steps outlined in the following section should work for the most part, but
    your mileage may vary depending upon the setup. On different operating system
    versions, the scripts may not always work perfectly, and the third-party software
    packages already in the system may sometimes conflict with the instructions provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a version of Python to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of Python and pandas using Anaconda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency packages for pandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review of items installed with Anaconda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross tooling—combining the pandas awesomeness with R, Julia, H20.ai, and Azure
    ML Studio command line tricks for pandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options and settings for Pandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting a version of Python to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a classic battle among Python developers—Python 2.7.x or Python 3.x—which
    is better? Until a year back, it was Python 2.7.x that topped the charts; the
    reason being it was a stable version. More than 70% of projects used Python 2.7,
    in the year 2016\. This number began to fall and by 2017 it was 63%. This shift
    in trends was due to the announcement that Python 2.7 would not be maintained
    from January 1, 2018, meaning that there would be no more bug fixes or new releases.
    Some libraries released after this announcement are only compatible with Python
    3.x. Several businesses have started migrating towards Python 3.x. Hence, as of
    2018, Python 3.x is the preferred version.
  prefs: []
  type: TYPE_NORMAL
- en: For further information, please see [https://wiki.python.org/moin/Python2orPython3](https://wiki.python.org/moin/Python2orPython3).
  prefs: []
  type: TYPE_NORMAL
- en: The main differences between Python 2.x and 3 include better Unicode support
    in Python 3, `print` and `exec` changed to functions, and integer division. For
    more details, see *What's New in Python 3.0* at [http://docs.python.org/3/whatsnew/3.0.html](http://docs.python.org/3/whatsnew/3.0.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, for scientific, numeric, or data analysis work, Python 2.7 is recommended
    over Python 3 for the following reason: Python 2.7 is the preferred version for
    most current distributions, and the support for Python 3.x is not as strong for
    some libraries, although that is increasingly becoming less of an issue.'
  prefs: []
  type: TYPE_NORMAL
- en: For reference, have a look at the documentation titled *Will Scientists Ever
    Move to Python 3?* at [http://bit.ly/1DOgNuX](http://bit.ly/1DOgNuX). Hence, this
    book will use a mix of Python 2.7 and 3.x as and when required. Translating Python
    code from 2.7 to 3.x or vice versa is not difficult, and the following documentation
    can be used as a reference *Porting Python 2 Code to Python 3* at [http://docs.python.org/2/howto/pyporting.html](http://docs.python.org/2/howto/pyporting.html).
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a middle ground and a way to get the best of the both worlds.
    One can use the `virtualenv` package in Python that allows you to create separate
    light virtual environments from within the installed Python environment. This
    makes it possible to have, for example, the 2.7 version installed on your machine
    and to access and run the 3.x version code by launching a virtual environment
    in your computer using `virtualenv`. This virtual environment is just a separate
    installation/instance of Python at a separate location. One can install the packages
    compatible with that version and do all the computations citing that version/installation
    while running. You can create as many virtual environments as you wish. This package
    comes pre-installed with the Anaconda distribution. You can visit the following
    website for more details on using `virtualenv`: [https://docs.python-guide.org/dev/virtualenvs/](https://docs.python-guide.org/dev/virtualenvs/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest major release of pandas—pandas 0.23.4—was in August, 2018\. The
    following are some of the interesting feature upgrades that were made:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing JSON I pandas has been made more elegant as metadata will
    be preserved with the `orient = True`option set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Python 3.6 and above, the dictionary will be assigned an order based on
    the order in which the entities were inserted. This order will be carried over
    to DataFrames or a series created from the dict.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging and sorting could now make use of a combination of index names and column
    names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Earlier, the `DataFrame.apply()` function with `axis = 1` returned a list-like
    object. The latest improvements to pandas have modified the output to be of a
    consistent shape—either a series or a DataFrame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categories without any observations can now be controlled in the `groupby` function
    through the `observed = True`setting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataFrame.all()` and `DataFrame.any()` now accept `axis=None` to reduce across all
    axes to a scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But before we start using pandas, let's spend some time installing Python on
    our computers.
  prefs: []
  type: TYPE_NORMAL
- en: Standalone Python installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we detail the standalone installation of Python on multiple platforms—Linux,
    Windows, and macOS/X. Standalone means just the IDLE IDE, interpreter, and some
    basic packages. Another option is to download from a distribution, which is a
    richer version and comes pre-installed with many utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using Linux, Python will most probably come pre-installed. If you''re
    not sure, type the following at Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Python is likely to be found in one of the following folders on Linux, depending
    on your distribution and particular installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/usr/bin/python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/bin/python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/local/bin/python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/opt/local/bin/python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can determine which particular version of Python is installed by typing
    the following at Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the rare event that Python isn''t already installed, you need to figure
    out which flavor of Linux you''re using and download and install it. Here are
    the install commands as well as links to the various Linux Python distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Debian/Ubuntu (14.04):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For more information, see the Debian Python page at [https://wiki.debian.org/Python](https://wiki.debian.org/Python).
  prefs: []
  type: TYPE_NORMAL
- en: 'Redhat Fedora/Centos/RHEL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To install Fedora software, visit [http://docs.fedoraproject.org/en-US/Fedora/13/html/User_Guide/chap-User_Guide-Managing_software.html](http://docs.fedoraproject.org/en-US/Fedora/13/html/User_Guide/chap-User_Guide-Managing_software.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'openSUSE:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: More information on installing software can be found at [http://en.opensuse.org/YaST_Software_Management](http://en.opensuse.org/YaST_Software_Managemen).
  prefs: []
  type: TYPE_NORMAL
- en: '**Slackware**: For this distribution of Linux, it may be best to download a
    compressed tarball and install it from the source, as described in the following
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python from a compressed tarball
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If none of the preceding methods works for you, you can also download a compressed
    tarball (XZ or Gzip) and get it installed. Here is a brief synopsis of the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Information on this can be found on the Python download page at [http://www.python.org/download/](http://www.python.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike Linux and Mac distributions, Python does not come pre-installed on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Core Python installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The standard method is to use the Windows installers from the CPython team,
    which are MSI packages. The MSI packages can be downloaded here: [http://www.python.org/download/releases/2.7.6/](http://www.python.org/download/releases/2.7.6/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the appropriate Windows package depending on whether your Windows is
    the 32-bit or 64-bit version. Python by default gets installed to a folder containing
    the version number, so, in this case, it will be installed to the following location:
    `C:\Python27`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This enables you to have multiple versions of Python running without problems.
    Upon installation, the following folders should be added to the `PATH` environment
    variable: `C:\Python27\` and `C:\Python27\Tools\Scripts`.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing third-party Python and packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of Python tools that need to be installed in order to make
    the installation of other packages such as pandas easier. Install `Setuptools`
    and `pip`. Setuptools is very useful for installing other Python packages such
    as pandas. It adds to the packaging and installation functionality that is provided
    by the `distutils` tool in the standard Python distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Setuptools, download the `ez_setup.py` script from the following
    link: [https://bitbucket.org/pypa/setuptools/raw/bootstrap](https://bitbucket.org/pypa/setuptools/raw/bootstrap).'
  prefs: []
  type: TYPE_NORMAL
- en: Then, save it to `C:\Python27\Tools\Scripts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, run `ez_setup.py`: `C:\Python27\Tools\Scripts\ez_setup.py`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pip` associated command provides the developer with an easy-to-use command
    that enables a quick and easy installation of Python modules. Download the `get-pip`
    script from the following link: [http://www.pip-installer.org/en/latest/](http://www.pip-installer.org/en/latest/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, run it from the following location: `C:\Python27\Tools\Scripts\get-pip.py`.'
  prefs: []
  type: TYPE_NORMAL
- en: For reference, you can also go through the documentation titled *Installing
    Python on Windows* at [http://docs.python-guide.org/en/latest/starting/install/win/](http://docs.python-guide.org/en/latest/starting/install/win/).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also third-party providers of Python on Windows that make the task
    of installation even easier. They are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enthought**: [https://enthought.com/](https://enthought.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuum Analytics**: [http://www.continuum.io/](http://www.continuum.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active State Python**: [http://www.activestate.com/activepython](http://www.activestate.com/activepython)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS/X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python 2.7 comes pre-installed on the current and recent releases (for the
    past five years) of macOS X. The pre-installed Apple-provided build can be found
    in the following folders on the Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/System/Library/Frameworks/Python.framework`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/usr/bin/python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, you can install your own version from [http://www.python.org/download/](http://www.python.org/download/).
    The one caveat to this is that you will now have two installations of Python,
    and you have to be careful to make sure the paths and environments are cleanly
    separated.
  prefs: []
  type: TYPE_NORMAL
- en: Installation using a package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python can also be installed using a package manager on the Mac, such as Macports
    or Homebrew. I will discuss installation using Homebrew here as it seems to be
    the most user-friendly. For reference, you can go through the documentation titled
    *Installing Python on* macOS *X* at [http://docs.python-guide.org/en/latest/starting/install/osx/](http://docs.python-guide.org/en/latest/starting/install/osx/).
    Here is a summary of the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Homebrew and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You then need to add the Homebrew folder at the top of your `PATH` environment
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install Python 2.7 at the Unix prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Install third-party software – distribute and pip. Installation of Homebrew
    automatically installs these packages. Distribute and pip enable you to easily
    download and install/uninstall Python packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation of Python and pandas using Anaconda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a standalone installation of Python, each library will have to be separately
    installed. It is a bit of a hassle to ensure version compatibility between newly
    installed libraries and the associated dependencies. This is where a third-party
    distribution like Anaconda comes in handy. Anaconda is the most widely used distribution
    for Python/R, designed for developing scalable data science solutions.
  prefs: []
  type: TYPE_NORMAL
- en: What is Anaconda?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anaconda is an open source Python/R distribution, developed to seamlessly manage
    packages, dependencies and environments. It is compatible with Windows, Linux
    and macOS and requires 3 GB of disk space. It needs this memory to download and
    install quite a collection of IDEs and more than 720 packages. For instance, NumPy
    and pandas are two of the packages that come pre-installed with Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows a summary of the constituents of the Anaconda distribution.
    Each component has been summarized in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ANACONDA NAVIGATOR**: A portal to access all the IDEs and tools'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ANACONDA PROJECT**: Reproducible experiments saved as a file using notebooks
    with text guidelines, code snippets, and their output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DATA SCIENCE LIBRARIES**: Includes pre-installed packages for IDEs, scientific
    computing, visualization, and machine learning'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**CONDA**: A command line-based package manager to install, uninstall, and
    upgrade packages/libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfda46b1-af7d-4e9b-bd27-6eb802ed1088.png)'
  prefs: []
  type: TYPE_IMG
- en: Utilities under Anaconda
  prefs: []
  type: TYPE_NORMAL
- en: Why Anaconda?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anaconda makes program development easier, and it is a tool of choice for beginners.
    Anaconda provides a simple system to set up and handle separate programming environments
    where packages can be maintained consistently to remain compatible with an application.
    This facilitates smooth collaboration and deployment. When a package is being
    installed or updated, Anaconda ensures that the dependencies are compatible and
    performs an auto-update for the dependencies if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Anaconda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Separate Anaconda installers are available for 32-bit OS and 64-bit OSes. Also,
    there are different installers for Python 2.7 and Python 3.7\. The installer can
    be downloaded from [https://www.anaconda.com/download/](https://www.anaconda.com/download/).
    The website would have the following options shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f628cfb6-e01d-4371-865e-ea6fcc0ed9a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Anaconda installers for different platforms
  prefs: []
  type: TYPE_NORMAL
- en: Observe the following steps to install Anaconda on a Windows machine once the
    download is done.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Download the Windows installer (the 32-bit/64-bit version).
  prefs: []
  type: TYPE_NORMAL
- en: Launch the `.exe` file after the download completes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the instructions and accept the license terms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the destination for the installation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dialogue boxes like these should guide you through the next steps. Go with
    the default options unless you want to customize the destination folders or don''t
    want to install certain features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30c5c1a0-4d69-4af4-9e46-82b26b08d6e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows installation of Anaconda
  prefs: []
  type: TYPE_NORMAL
- en: If you are a Mac user instead, follow the following steps for installing Anaconda
    on a windows machine once the download is done.
  prefs: []
  type: TYPE_NORMAL
- en: macOS Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the macOS installer (the 32-bit/64-bit version):'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the `.pkg` file after the download completes by double-clicking it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow the instructions and accept the license terms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended to install Anaconda in the home user directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dialogue boxes like these should appear once you start installing. Just follow
    the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8d3e4fb-9a0f-4fff-82f4-d47ff4a07950.png)'
  prefs: []
  type: TYPE_IMG
- en: macOS installation of Anaconda
  prefs: []
  type: TYPE_NORMAL
- en: Follow the following steps for a Linux installation.
  prefs: []
  type: TYPE_NORMAL
- en: Linux Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the macOS installer (the 32-bit/64-bit version):'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the following commands in the shell to start installation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Python 3.7 installer, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For Python 2.7 installer, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Enter `Yes` to accept the license agreement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accept the default installation location or choose a new location to complete
    the installation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anaconda can also be installed on a cloud machine provided by popular cloud
    infrastructure providers like AWS and Azure. Depending on which kind of instance
    (Linux or Windows) you choose on your cloud account, similar steps as described
    previously can be followed to install Anaconda on your cloud machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways you can get Anaconda running on your cloud machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose a machine with Anaconda pre-installed on it—AWS and Azure provide machines
    with many software packages pre-installed on them. You can choose one of the machines
    that has Anaconda. The following link has more details: [https://aws.amazon.com/marketplace/seller-profile?id=29f81979-a535-4f44-9e9f-6800807ad996](https://aws.amazon.com/marketplace/seller-profile?id=29f81979-a535-4f44-9e9f-6800807ad996)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose a Linux/Windows machine and install Anaconda on it. This is a better
    and cheaper option giving you more flexibility for the cost of a little installation
    effort. Once you launch your cloud machine, it involves similar steps as the previous
    installation steps. The following link has the end-to-end steps for installation
    using a cloud, [https://chrisalbon.com/aws/basics/run_project_jupyter_on_amazon_ec2/](https://chrisalbon.com/aws/basics/run_project_jupyter_on_amazon_ec2/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other numeric and analytics-focused Python distributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following outlines various third-party data analysis-related Python distributions,
    apart from Anaconda. All of the following distributions include pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enthought Canopy**: This is a comprehensive Python data analysis environment.
    For more information, refer to [https://www.enthought.com/products/canopy/](https://www.enthought.com/products/canopy/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python(x,y)**: This is a free scientific and engineering-oriented Python
    distribution for numerical computing, data analysis, and visualization. It is
    based on the Qt GUI package and Spyder interactive scientific development environment.
    For more information, refer to [http://python-xy.github.io/](http://python-xy.github.io/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WinPython**: This is a free open source distribution of Python for the Windows
    platform focused on scientific computing. For more information, refer to [http://winpython.sourceforge.net/](http://winpython.sourceforge.net/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on Python distributions, go to [http://bit.ly/1yOzB7o](http://bit.ly/1yOzB7o).
  prefs: []
  type: TYPE_NORMAL
- en: Dependency packages for pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please note that if you are using Anaconda distribution, you don't need to install
    pandas separately and hence don't need to worry about installing the dependencies.
    It is still good to know the dependency packages that are being used behind the
    hood in pandas to better understand the functioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the latest stable version of pandas is the 0.23.4 version.
    The various dependencies along with the associated download locations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Package** | **Required** | **Description** | **Download location** |'
  prefs: []
  type: TYPE_TB
- en: '| `NumPy : 1.9.0` or higher | Required | NumPy library for numerical operations
    | [http://www.numpy.org/](http://www.numpy.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| `python-dateutil` 2.5.0 | Required | Date manipulation and utility library
    | [http://labix.org/](http://labix.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| `Pytz` | Required | Time zone support | [http://sourceforge.net/](http://sourceforge.net/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Setuptools 24.2.0` | Required | Packaging Python projects | [https://setuptools.readthedocs.io/en/latest/](https://setuptools.readthedocs.io/en/latest/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Numexpr` | Optional, recommended | Speeding up of numerical operations |
    [https://code.google.com/](https://code.google.com/) |'
  prefs: []
  type: TYPE_TB
- en: '| `bottleneck` | Optional, recommended | Performance related | [http://berkeleyanalytics.com/](http://berkeleyanalytics.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Cython` | Optional, recommended | C-extensions for Python used for optimization
    | [http://cython.org/](http://cython.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| `SciPy` | Optional, recommended | Scientific toolset for Python | [http://scipy.org/](http://scipy.org/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `PyTables` | Optional | Library for HDF5-based storage | [http://pytables.github.io/](http://pytables.github.io/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `matplotlib` | Optional, recommended | Matlab-like Python plotting library
    | [http://sourceforge.net/](http://sourceforge.net/) |'
  prefs: []
  type: TYPE_TB
- en: '| `statsmodels` | Optional | Statistics module for Python | [http://sourceforge.net/](http://sourceforge.net/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Openpyxl` | Optional | Library to read/write Excel files | [https://www.python.org/](https://www.python.org/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `xlrd/xlwt` | Optional | Libraries to read/write Excel files | [http://python-excel.org/](http://python-excel.org/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Boto` | Optional | Library to access Amazon S3 | [https://www.python.org/](https://www.python.org/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `BeautifulSoup` and one of `html5lib`, `lxml` | Optional | Libraries needed
    for the `read_html()` function to work | [http://www.crummy.com/](http://www.crummy.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `html5lib` | Optional | Library for parsing HTML | [https://pypi.python.org/pypi/html5lib](https://pypi.python.org/pypi/html5lib)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Lmxl` | Optional | Python library for processing XML and HTML | [http://lxml.de/](http://lxml.de/)
    |'
  prefs: []
  type: TYPE_TB
- en: Review of items installed with Anaconda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Anaconda installs more than 200 packages and several IDEs. Some of the widely
    used packages that get installed are: `NumPy`, `pandas`, `scipy`, `scikit-learn`,
    `matplotlib`, `seaborn`, `beautifulsoup4`, `nltk`, and `dask`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packages, which are not installed along with Anaconda, could be installed manually
    through Conda, Anaconda''s package manager. Any package upgradation can also be
    done through Conda. Conda will fetch the packages from the Anaconda repository,
    which is huge and has more than 1400 packages. The following commands will install
    and update packages through `conda`:'
  prefs: []
  type: TYPE_NORMAL
- en: To install, use `conda install pandas`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To update, use `conda update pandas`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following IDEs are installed with Anaconda:'
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QTConsole
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spyder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IDEs could be launched either through Conda or Anaconda Navigator.
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda Navigator is a GUI that lets you manage environments and packages and
    launch applications like Jupyter Notebook and Spyder. In essence, the Navigator
    provides an easy interface without the problems of command-line coding, and it
    is available for Windows, Linux, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the following screenshot of the Anaconda Navigator shows, Anaconda provides
    a one-stop place to access Jupyter/Spyder/IPython IDEs for Python as well as RStudio
    IDE for R:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/673a06c7-3c29-47f4-90b0-f73710314f89.png)'
  prefs: []
  type: TYPE_IMG
- en: The Anaconda Navigator
  prefs: []
  type: TYPE_NORMAL
- en: JupyterLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JupyterLab is a tool used to integrate notebooks, documents, and activities.
    Some of its salient features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It has a drag and drop facility to rearrange, move, and copy notebook cells
    between notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can run code blocks interactively from text files (`.py`, `.R`, `.md`, `.tex`,
    and so on) from within Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can link a code console to a notebook kernel to explore code interactively
    without cluttering up the notebook with temporary scratch work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can facilitate live previews and edit popular file formats, such as Markdown,
    JSON, CSV, Vega, VegaLite, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GlueViz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Glue is a useful Python library to explore relationships within and among related
    datasets. Its main features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linked Statistical Graphics**: Glue helps users create scatter plots, histograms,
    and images (two- and three-dimensional) from their data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexible linking across data**: Glue uses the logical links to overlay different
    data visualizations existing between different datasets and to relay choices across
    datasets. These links need to be specified by the user, and are arbitrarily flexible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full scripting capability**: Glue is written in Python, and built on top
    of its standard scientific libraries (that is, NumPy, Matplotlib, and Scipy).
    For data input, cleaning, and analysis, users can easily incorporate their own
    Python code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orange**:Orange provides open source machine learning, data visualization,
    and interactive data analysis workflow. Its USPs are interactive data visualization
    and visual programming using a GUI-based environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio Code**:VS Code or Visual Studio Code is a lightweight but powerful
    source code editor that runs on your desktop and is available for Windows, macOS,
    and Linux. It comes with built-in support for JavaScript, TypeScript, and Node.js,
    and it has a rich ecosystem of extensions for other languages (such as C++, C#,
    Java, Python, PHP, and Go) and runtimes (such as .NET and Unity)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk-through of Jupyter Notebook and Spyder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's catch a glimpse of working with two of the widely used Python IDEs – Jupyter
    Notebook and Spyder.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jupyter gets installed during Anaconda installation. To install Jupyter without
    Anaconda, you can execute the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Jupyter Notebook can be opened through Anaconda Navigator or by clicking on
    the icon in the start menu, or by entering the following command in Conda:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Jupyter Notebook opens in the browser. All folders within the startup directory
    are accessible from Jupyter. However, the main directory cannot be changed after
    opening Jupyter. A local Python server is created for Jupyter to get launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95752ec2-8658-4c49-a877-e21fc8f6a3e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Jupyter home page
  prefs: []
  type: TYPE_NORMAL
- en: 'A new notebook can be opened by clicking on the **New** button. The new notebook
    will be created as `Untitled.ipynb`, unlike any other Python IDE, where the script
    is stored with `.py` extension. Here, **ipynb** stands for **IPython Notebook**.
    An `.ipynb` file is just a text file that converts all the content—the code, markdown
    text, and any image or plot—to metadata in a JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eee68b71-62fe-4d57-9c04-cbf3ce1786a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Jupyter Notebook
  prefs: []
  type: TYPE_NORMAL
- en: A Jupyter notebook is comprised of cells; a cell is where your code goes in.
    The cells can be used to display Markdown code or to execute the code. In the
    preceding screenshot, the first three cells have been converted to Markdown cells,
    while the next three are code cells. A code in a cell can be run by clicking the
    **Run** button in the notebook or by hitting *Ctrl* + *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jupyter Notebook features the **Save and Checkpoint** option (keyboard shortcut:
    *Ctrl* + *S*). Jupyter automatically saves and creates a checkpoint every 120
    seconds. This checkpoint helps to recover any unsaved work, and it also helps
    to revert to a previous checkpoint.'
  prefs: []
  type: TYPE_NORMAL
- en: Spyder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spyder can be installed with pip or through Anaconda, just like Jupyter. However,
    the developers of Spyder recommend installation through Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spyder can also be launched using methods similar to those for Jupyter Notebook
    or by typing `spyder` in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25ada195-e2b3-4788-8233-42cb3774b16d.png)'
  prefs: []
  type: TYPE_IMG
- en: Spyder
  prefs: []
  type: TYPE_NORMAL
- en: Spyder features a script editor and an IPython console. The upper-right pane
    can shift between a help browser, variable explorer, and file explorer. The editor
    can be split into a number of cells for a more systematic programming. The IPython
    console comes in handy when using small snippets of code. The variable explorer
    provides a summary of all the global objects in the Python session.
  prefs: []
  type: TYPE_NORMAL
- en: Cross tooling – combining pandas awesomeness with R, Julia, H20.ai, and Azure
    ML Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pandas can be regarded as a "wonder tool" when it comes to applications like
    data manipulation, data cleaning, or handling time series data. It is extremely
    fast and efficient, and it is powerful enough to handle small to intermediate
    datasets. The best part is that the use of pandas is not restricted just to Python.
    There are methods enabling the supremacy of pandas to be utilized in other frameworks,
    like R, Julia, Azure ML Studio and H20.ai. These methods of using the benefits
    of a superior framework from another tool is called cross-tooling and is frequently
    applied. One of the main reasons for this to exist is that it is almost impossible
    for one tool to have all the functionalities. Suppose one task has two sub-tasks:
    sub-task 1 can be done well in R while the sub-task 2 in Python. One can handle
    this by doing sub-task 1 in R and sub-task 2 by calling Python code from R or
    doing sub-task 2 in Python and sub-task 1 by calling R code from Python.'
  prefs: []
  type: TYPE_NORMAL
- en: This option makes pandas even more powerful. Let's see how pandas methods and
    /or Python code in general can be used with other tools.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas with R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R has a class of objects called **DataFrame**, which is the same as a pandas
    DataFrame. The R DataFrame is several times slower than pandas. Hence, learning
    pandas will also help tackle data manipulation problems in R. However, using the
    `data.table` data type to handle huge DataFrames in R is the best solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `reticulate` package helps to access and use Python packages in R. For
    example, you can run these Python snippets in R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The same can be done on any other package such as NumPy as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you already have a concrete pandas function written in Python, you can make
    use of it in R through the reticulate package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following Python code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the preceding script is saved as `titanic.py`. This script could be used
    in R as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: An interactive Python session from R can be created using `repl_python()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can write something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: And it returns the results in the R shell itself as though it was a Python IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python objects (lists, dictionaries, DataFrames, and arrays) created in a Python
    session can be accessed via R. Suppose `df` is a Python DataFrame whose summary
    needs to be found using R. It can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: pandas with Azure ML Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure ML Studio offers predictive analytics solutions through a drag and drop
    interface. It features the capability to add a Python script that would read a
    dataset, perform data manipulation, and then deliver the output dataset. pandas
    could play a crucial role in this data processing module of the Azure ML Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6e3e98f-fc7b-4b9f-85e8-47a1c74887ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure ML Studio – Flowchart
  prefs: []
  type: TYPE_NORMAL
- en: From the flow diagram, you can see that data is fed to the **Execute Python
    Script** module. This module can receive datasets in two of the three input ports
    and gives a DataFrame as output in one of the two output ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the **Execute Python Script** module. This module
    accepts only DataFrames at the input ports. It allows for further data processing
    steps to take place before a single DataFrame is produced as the result at the
    output port. This is where pandas and its numerous wonderful functions play a
    role:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6277476b-2331-495d-a077-766e99e0d758.png)'
  prefs: []
  type: TYPE_IMG
- en: Python execution module of Azure ML Studio
  prefs: []
  type: TYPE_NORMAL
- en: pandas with Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Julia has a DataFrame package to handle operations on DataFrames. Benchmarking
    results has shown that pandas is the clear winner when it comes to speed and computational
    efficiency. Just like R, Julia allows us to integrate pandas in the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, pandas can be loaded into the Julia environment directly,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: pandas with H2O
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: H2O is the super-powerful big data analysis product of H2O.ai, encapsulating
    separate modules within it to handle several aspects of a data science model,
    including data manipulation and model training.
  prefs: []
  type: TYPE_NORMAL
- en: H2O deals with data as H2O frames, and this data is entirely located within
    a designated H2O cluster. Hence, the data is not found in the memory, unlike a
    pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: H2O has a `as_data_frame()`method, which allows conversion from a H2O frame
    to a pandas dataframe. Following this conversion, all pandas operations could
    be performed on the converted dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: Command line tricks for pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command line is an important arsenal for pandas users. The command line
    can be used as an efficient and faster but tedious-to-use complement/supplement
    to pandas. Many of the data operations, like breaking a huge file into multiple
    chunks, cleaning a data file of unsupported characters, and so on, can be performed
    in the command line before feeding the data to pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The head function of pandas is extremely useful to quickly assess the data.
    A command line function for head makes this option even more useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The translate (`tr`) function packs within it the ability to replace characters.
    The following command converts all uppercase characters in a text file to lowercase
    characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It is tedious and sometimes infeasible to read huge data files. In such cases,
    it becomes necessary to systematically break the huge file into smaller files.
    The split function at the command line does exactly this. It splits a file into
    several files, based on the number of lines that can be present in each file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Use `split -b` to perform a split at a certain byte size instead of the number
    of lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sort is yet another useful pandas-like command line function. It can be used
    to sort alphabetically, by numerical value, or in reverse order with respect to
    any column. The preferred sorting order and the column key can be specified in
    the command line function. Let''s look at the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `-t` indicates that the file is comma delimited.
  prefs: []
  type: TYPE_NORMAL
- en: The current working directory should be changed to the directory where your
    data file in question is stored before any of these methods is applied.
  prefs: []
  type: TYPE_NORMAL
- en: Options and settings for pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pandas allows the users to modify some display and formatting options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `get_option()` and `set_option()` commands let the user view the current
    setting and change it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding options discussed set and reset the number of rows that are displayed
    when a dataframe is printed. Some of the other useful display options are the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`max_columns`: Set the number of columns to be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chop_threshold`: Float values below the limit set here will be displayed as
    zeros.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colheader_justify`: Set the justification for the column header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_dayfirst`: Setting to `''True''` prints day first when displaying a datetime
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_yearfirst`: Setting to True prints year first when displaying a datetime
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precision`: Setting the precision for the float values displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of a number formatting option, which sets the accuracy
    and determines the use of any prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05862357-0df1-4b42-baa1-bfdafce4ae9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Numeric formatting in Pandas
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss this in further detail in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we delve into the awesomeness of pandas, it is mission critical that
    we install Python and pandas correctly, choose the right IDEs, and set the right
    options. In this chapter, we discussed these and more. Here is a summary of key
    takeaways from the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.x is available, but many users still prefer to use version 2.7 as it
    is more stable and scientific-computation friendly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The support and bug fixing for version 2.7 has now been stopped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translating code from one version to other is a breeze. One can also use both
    versions together using the `virtualenv` package, which comes pre-installed with
    Anaconda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda is a popular Python distribution that comes with 700+ libraries/packages
    and several popular IDEs, such as Jupyter and Spyder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python codes are callable from, and usable in, other tools, like R, Azure ML
    Studio, H20.ai, and Julia.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the day-to-day data operations, like breaking a large file into smaller
    chunks, `reading` a few lines of data, and so on, can be performed in the command
    line/shell as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default setting options for pandas can be seen and changed via the `get_option()`
    and `set_option()` commands. Some of the options that can be changed are the maximum
    number of rows and columns displayed, the number of decimal points for float variables,
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will expand our scope a little bit from pandas and explore
    tools such as NumPy that enrich the capabilities of pandas in the Python ecosystem.
    It will be an exhaustive NumPy tutorial with real-life case studies.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://www.r-bloggers.com/run-python-from-r/](https://www.r-bloggers.com/run-python-from-r/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://pandas.pydata.org/pandas-docs/stable/index.html](https://pandas.pydata.org/pandas-docs/stable/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.glueviz.org/en/stable/](http://docs.glueviz.org/en/stable/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906](https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://orange.biolab.si/](https://orange.biolab.si/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
