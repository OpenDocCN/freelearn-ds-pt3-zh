["```py\n%pylab inline\nfrom pandas import Series, DataFrame\nimport pandas as pd\n\n```", "```py\ngrades1 = Series([76, 82, 78, 100],\n index = ['Alex', 'Robert', 'Minnie', 'Alice'],\n name = 'Assignment 1', dtype=float64)\ngrades1\n\n```", "```py\nAlex       76\nRobert     82\nMinnie     78\nAlice     100\nName: Assignment 1, dtype: float64\n\n```", "```py\nSeries(<data>, index=<indexes>, name=<name>, dtype=<type>)\n\n```", "```py\nprint grades1['Minnie']\ngrades1['Minnie'] = 80\ngrades1['Theo'] = 92\ngrades1\n\n```", "```py\n78.0\nAlex       76\nRobert     82\nMinnie     80\nAlice     100\nTheo       92\nName: Assignment 1, dtype: float64\n\n```", "```py\nfor student in grades1.keys():\n print '{} got {} points in {}'.format(student, grades1[student], grades1.name)\n\n```", "```py\nAlex got 76.0 points in Assignment 1\nRobert got 82.0 points in Assignment 1\nMinnie got 80.0 points in Assignment 1\nAlice got 100.0 points in Assignment 1\nTheo got 92.0 points in Assignment 1\n\n```", "```py\ngrades1[2]\n\n```", "```py\n80.0\n\n```", "```py\ngrades1[1:-1]\n\n```", "```py\nRobert     82\nMinnie     80\nAlice     100\nName: Assignment 1, dtype: float64\n\n```", "```py\ngrades1[['Theo', 'Alice']]\n\n```", "```py\nTheo      92\nAlice    100\ndtype: float64\n\n```", "```py\ngrades1a = grades1.append(Series([79, 81], index=['Theo', 'Joe']))\ngrades1a\n\n```", "```py\nAlex       76\nRobert     82\nMinnie     80\nAlice     100\nTheo       92\nKate       69\nMolly      74\nTheo       79\nJoe        81\ndtype: float64\n\n```", "```py\ngrades1a['Theo']\n\n```", "```py\nTheo    92\nTheo    79\ndtype: float64\n\n```", "```py\ngrades2 = Series([87, 76, 76, 94, 88],\n index = ['Alex', 'Lucy', 'Robert', 'Minnie', 'Alice'],\n name='Assignment 2',\n dtype=float64)\ngrades2\n\n```", "```py\nAlex      87\nLucy      76\nRobert    76\nMinnie    94\nAlice     88\nName: Assignment 2, dtype: float64\n\n```", "```py\naverage = 0.5 * (grades1 + grades2)\naverage\n\n```", "```py\nAlex      81.5\nAlice     94.0\nLucy       NaN\nMinnie    87.0\nRobert    79.0\nTheo       NaN\ndtype: float64\n\n```", "```py\naverages.isnull()\n\n```", "```py\nAlex      False\nAlice     False\nLucy       True\nMinnie    False\nRobert    False\nTheo       True\ndtype: bool\n\n```", "```py\naverage.dropna()\n\n```", "```py\nAlex      81.5\nAlice     94.0\nMinnie    87.0\nRobert    79.0\ndtype: float64\n\n```", "```py\ngrades1.sort()\ngrades1\n\n```", "```py\nAlex       76\nMinnie     80\nRobert     82\nTheo       92\nAlice     100\nName: Assignment 1, dtype: float64\n\n```", "```py\ngrades1.sort_index()\n\n```", "```py\nAlex       76\nMinnie     80\nRobert     82\nTheo       92\nAlice     100\nName: Assignment 1, dtype: float64\n\n```", "```py\ntemps = Series([71,76,69,67,74,80,82,70,66,80],\n index=range(6,16), \n name='Temperatures', dtype=float64)\ntemps\n\n```", "```py\n6     71\n7     76\n8     69\n9     67\n10    74\n11    80\n12    82\n13    70\n14    66\n15    80\nName: Temperatures, dtype: float64\n\n```", "```py\nprint temps.mean(), temps.std()\n\n```", "```py\n73.5 5.77831194112\n\n```", "```py\ntemps.describe()\n\n```", "```py\ncount    10.000000\nmean     73.500000\nstd       5.778312\nmin      66.000000\n25%      69.250000\n50%      72.500000\n75%      79.000000\nmax      82.000000\nName: Temperatures, dtype: float64\n\n```", "```py\ntemps.plot()\n\n```", "```py\ntemps.plot(style='-s', lw=2, color='green')\naxis((6,15,65, 85))\nxlabel('Day')\nylabel('Temperature')\ntitle('Maximum daily temperatures in June')\nNone # prevent text output\n\n```", "```py\ntemps[temps > 75]\n\n```", "```py\n7     76\n11    80\n12    82\n15    80\nName: Temperatures, dtype: float64\n\n```", "```py\ngrades = DataFrame(\n [['Alice',  80., 92., 84,],\n ['Bob',    78., NaN, 86,],\n ['Samaly', 75., 78., 88.]],\n index = [17005, 17035, 17028],\n columns = ['Name', 'Test 1', 'Test 2', 'Final']\n )\n\n```", "```py\ngrades\n\n```", "```py\nDataFrame?\n\n```", "```py\nidx = pd.Index([\"First row\", \"Second row\"])\ncol1 = Series([1, 2], index=idx)\ncol2 = Series([3, 4], index=idx)\ndata = {\"Column 1\":col1, \"Column2\":col2}\ndf = DataFrame(data)\ndf\n\n```", "```py\ngrades.loc[:,'Score'] = 0.25 * (grades['Test 1'] + grades['Test 2'] + 2 * grades['Final']) \ngrades\n\n```", "```py\ngrades.loc[17035,'Test 2'] = 98\ngrades\n\n```", "```py\ngrades.insert(4, 'Extra credit', [2., 6., 10.])\ngrades\n\n```", "```py\ngrades.loc[17011,:] = ['George', 92, 88, 91, 9, NaN]\ngrades\n\n```", "```py\ngrades.loc[:,'Score'] = 0.25 * (grades['Test 1'] + grades['Test 2'] + 2 * grades['Final']) + grades['Extra credit'] \ngrades\n\n```", "```py\ngrades[(grades['Score'] >= 90) & (grades['Test 1'] < 78)]\n\n```", "```py\ngrades[(80 <= grades['Score']) & grades['Score'] < 90].loc[:,['Name', 'Score']]]\n\n```", "```py\nmeans = [0, 0, 1, 1, -1, -1, -2, -2]\nsdevs = [1, 2, 1, 2,  1,  2,  1,  2]\nrandom_data = {}\nnrows = 30\nfor mean, sdev in zip(means, sdevs):\n label = 'Mean={}, sd={}'.format(mean, sdev)\n random_data[label] = normal(mean, sdev, nrows)\nrow_labels = ['Row {}'.format(i) for i in range(nrows)]\ndframe = DataFrame (random_data, index=row_labels)\n\n```", "```py\ndframe_slice = dframe.ix['Row 3':'Row 11', 5:]\ndframe_slice\n\n```", "```py\ndframe_slice.loc['Row 3','Mean=1, sd=2'] = normal(1, 2)\nprint dframe_slice.loc['Row 3','Mean=1, sd=2']\nprint dframe.loc['Row 3','Mean=1, sd=2']\n\n```", "```py\ndframe_slice_copy = dframe.ix['Row 3':'Row 11', 5:].copy()\ndframe_slice_copy\n\n```", "```py\ndframe_slice_copy.loc['Row 3','Mean=1, sd=2'] = normal(1, 2)\nprint dframe_slice_copy.loc['Row 3','Mean=1, sd=2']\nprint dframe.loc['Row 3','Mean=1, sd=2']\n\n```", "```py\n    dframe.ix[['Row 12', 'Row 3', 'Row 24'], [3, 7]]\n\n    ```", "```py\n    dframe.iloc[:,[-1::-1]]\n\n    ```", "```py\n    dframe.iloc[:,[2, 7, 0, 1, 3, 4, 6, 5]]\n\n    ```", "```py\n    dframe.loc[dframe.loc[:,'Mean=1, sd=1']>0, 'Mean=1, sd=1']\n\n    ```", "```py\n    dframe.loc[:,'Mean=1, sd=1']>0\n\n    ```", "```py\n    dframe.where(dframe>0)\n\n    ```", "```py\n    dframe.where(dframe>0, other=0)\n\n    ```", "```py\nmeans = [0, 0, 1, 1, -1, -1, -2, -2]\nsdevs = [1, 2, 1, 2,  1,  2,  1,  2]\nrandom_data = {}\nnrows = 30\nfor mean, sdev in zip(means, sdevs):\n label = 'Mean={}, sd={}'.format(mean, sdev)\n random_data[label] = normal(mean, sdev, nrows)\nrow_labels = ['Row {}'.format(i) for i in range(nrows)]\ndframe = DataFrame (random_data, index=row_labels)\n\n```", "```py\n    dframe.\n\n    ```", "```py\n    dframe.mean\n\n    ```", "```py\n    dframe.mean?\n\n    ```", "```py\n    dframe.mean()\n\n    ```", "```py\n    dframe.std()\n\n    ```", "```py\nmean_series = dframe.mean()\nstd_series = dframe.std()\nmean_std = DataFrame([dict(mean_series), \n dict(std_series)], \n index=['mean', 'std'])\nmean_std\n\n```", "```py\ndframe_stnd = 100 + 20 * (dframe - mean_std.iloc[0,:]) / mean_std.iloc[1,:] \ndframe_stnd\n\n```", "```py\nprint dframe_stnd.mean()\nprint dframe_stnd.std()\n\n```", "```py\nzscores = mean_std.iloc[0,:] / (mean_std.iloc[1,:] / sqrt(len(dframe)))\nzscores \n\n```", "```py\nfrom scipy.stats import norm\npvalues = 2 * norm.cdf(-abs(zscores)) * 100\npvalues_series = Series(pvalues, index = zscores.index)\npvalues_series\n\n```", "```py\npvalues = 2 * norm.cdf(-abs(zscores)) * 100\n\n```", "```py\nMean=-1, sd=1    1.374183e-02\nMean=-1, sd=2    1.541008e-01\nMean=-2, sd=1    2.812333e-26\nMean=-2, sd=2    1.323917e-04\nMean=0, sd=1     2.840077e+01\nMean=0, sd=2     6.402502e+01\nMean=1, sd=1     2.182986e-06\nMean=1, sd=2     5.678316e-01\ndtype: float64\n\n```", "```py\n%pylab inline\n\n```", "```py\nmeans = [0, 0, 1, 1, -1, -1, -2, -2]\nsdevs = [1, 2, 1, 2,  1,  2,  1,  2]\nrandom_data = {}\nnrows = 300\nfor mean, sdev in zip(means, sdevs):\n label = 'Mean={}, sd={}'.format(mean, sdev)\n random_data[label] = normal(mean, sdev, nrows)\nrow_labels = ['Row {}'.format(i) for i in range(nrows)]\ndframe = DataFrame (random_data, index=row_labels)\n\n```", "```py\ndframe.hist(color='DarkCyan')\nsubplots_adjust(left=0.5, right=2, top=2.5, bottom=1.0)\n\n```", "```py\ndframe.loc[:,'Mean=0, sd=2'].hist(bins=40, range=(-10,10), color='LightYellow')\ntitle('Normal variates, mean 0, standard deviation 2')\n\n```", "```py\nmu = 0.15\nsigma = 0.33\nS0 = 150\n\n```", "```py\nnsteps = 200\ntmax = 20.\ndt = tmax/nsteps\ntimes = arange(0, tmax, dt)\n\n```", "```py\ngbm_data = DataFrame(times, columns=['t'], index=range(nsteps))\n\n```", "```py\ngbm_data.loc[:5,:]\n\n```", "```py\ngbm_data['drift'] = (mu - sigma**2/2) * gbm_data.loc[:,'t']\n\n```", "```py\ngbm_data['dW'] = normal(0.0, sigma * dt, nsteps)\n\n```", "```py\ngbm_data['W'] = gbm_data.loc[:,'dW'].cumsum()\ngbm_data.ix[0, 'W'] = 0.0\n\n```", "```py\ngbm_data['S'] = S0 * exp(gbm_data.loc[:,'drift'] + gbm_data.loc[:,'W'])\n\n```", "```py\ngbm_data.plot(x='t', y='S', lw=2, color='green',\n title='Geometric Brownian Motion')\n\n```", "```py\nwdi = pd.read_csv('WDI_Data.csv')\n\n```", "```py\nwdi.loc[:5]\n\n```", "```py\ncountries = wdi.loc[:,'Country Name'].unique()\n\n```", "```py\nlen(countries)\n\n```", "```py\nindicators = wdi.loc[:,'Indicator Code'].unique()\n\n```", "```py\nlen(indicators)\n\n```", "```py\nwdi_br = wdi.loc[wdi.loc[:,'Country Name']=='Brazil',:]\n\n```", "```py\nwdi.loc[:,'Country Name']=='Brazil'\n\n```", "```py\nselect_fcn = lambda string: string.upper().find('GDP') >= 0\n\n```", "```py\ncriterion = wdi_br.loc[:,'Indicator Code'].map(select_fcn)\nwdi_br_gdp = wdi_br.loc[criterion,:]\n\n```", "```py\nlen(wdi_br_gdp)\n\n```", "```py\nwdi_br_gdp.loc[:,['Indicator Code', 'Indicator Name']]\n\n```", "```py\nwdi_br_gdp = wdi_br_gdp.loc[[37858, 37860, 37864, 37865], :]\n\n```", "```py\nidx = wdi_br_gdp.loc[:,'1960':].columns\ncols = wdi_br_gdp.loc[:,'Indicator Name']\ndata = wdi_br_gdp.loc[:,'1960':].as_matrix()\nbr_data = DataFrame(data.transpose(), columns=cols, index=idx)\n\n```", "```py\nbr_data.to_csv('WDI_Brazil_GDP.csv')\n\n```", "```py\npdata = br_data.ix['1970':, 0] / 1E9\npdata.plot(color='DarkRed', lw=2, \n title='Brazil GDP, billions of current US$')\n\n```", "```py\nbric_countries = ['Brazil', 'China', 'India', 'Russian Federation']\ngdp_code = 'NY.GDP.PCAP.KD.ZG'\nselection_fct = lambda s: s in bric_countries\ncriterion = wdi.loc[:,'Country Name'].map(selection_fct)\nwdi_bric = wdi.loc[criterion & (wdi.loc[:,'Indicator Code'] == gdp_code),:]\n\n```", "```py\ndf_temp = wdi_bric.loc[:, '2000':'2010']\nidx = df_temp.columns\ncols = wdi_bric.loc[:, 'Country Name']\ndata = df_temp.as_matrix()\nbric_gdp = DataFrame(data.transpose(), columns=cols, index=idx)\n\n```", "```py\nbric_gdp.plot(lw=2.5,\n title='Annual per capita GDP growth (%)')\n\n```"]