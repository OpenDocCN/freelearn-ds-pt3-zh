- en: Chapter 1. A Tour of the IPython Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gives a brief introduction to the **IPython notebook** and highlights
    some of its special features that make it a great tool for scientific and data-oriented
    computing. IPython notebooks use a standard text format that makes it easy to
    share results.
  prefs: []
  type: TYPE_NORMAL
- en: After the quick installation instructions, you will learn how to start the notebook
    and be able to immediately use IPython to perform computations. This simple, initial
    setup is all that is needed to take advantage of the many notebook features, such
    as interactively producing high quality graphs, performing advanced technical
    computations, and handling data with specialized libraries.
  prefs: []
  type: TYPE_NORMAL
- en: All examples are explained in detail in this book and available online. We do
    not expect the readers to have deep knowledge of Python, but readers unfamiliar
    with the Python syntax can consult [Appendix B](apb.html "Appendix B. A Brief
    Review of Python"), *A Brief Review of Python*, for an introduction/refresher.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Anaconda or Wakari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating notebooks and then learning about the basics of editing and executing
    statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An applied example highlighting the notebook features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Anaconda or Wakari
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several approaches to setting up an IPython notebook environment.
    We suggest you use Anaconda, a free distribution designed for large-scale data
    processing, predictive analytics, and scientific computing. Alternatively, you
    can use Wakari, which is a web-based installation of Anaconda. Wakari has several
    levels of service, but the basic level is free and suitable for experimenting
    and learning.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend that you set up both a Wakari account and a local Anaconda installation.
    Wakari has the functionality of easy sharing and publication. This local installation
    does not require an Internet connection and may be more responsive. Thus, you
    get the best of both worlds!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Anaconda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Anaconda on your computer, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Anaconda for your platform from [https://store.continuum.io/cshop/anaconda/](https://store.continuum.io/cshop/anaconda/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the file is completely downloaded, install Anaconda:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows users can double-click on the installer and follow the on-screen instruction
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac users can double-click the `.pkg` file and follow the instructions displayed
    on screen
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux users can run the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Anaconda supports several different versions of Python. This book assumes you
    are using Version 2.7, which is the standard version that comes with Anaconda.
    The most recent version of Python, Version 3.0, is significantly different and
    is just starting to gain popularity. Many Python packages are still only fully
    supported in Version 2.7.
  prefs: []
  type: TYPE_NORMAL
- en: Running the notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are now ready to run the notebook. First, we create a directory named `my_notebooks`
    to hold your notebooks and open a terminal window at this directory. Different
    operating systems perform different steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft Windows users need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Window Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the location where your notebooks are stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **New Folder** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the folder `my_notebooks`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `my_notebooks` folder and select **Open command window here**
    from the context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Mac OS X and other Unix-like systems'' users need to perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, execute the following command on the terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a while, your browser will automatically load the notebook dashboard as
    shown in the following screenshot. The dashboard is a mini filesystem where you
    can manage your notebooks. The notebooks listed in the dashboard correspond exactly
    to the files you have in the directory where the notebook server was launched.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the notebook](img/8341OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Internet Explorer does not fully support all features in the IPython notebook.
    It is suggested that you use Chrome, Firefox, Safari, Opera, or another standards-conforming
    browser. If your default browser is one of those, you are ready to go. Alternatively,
    close the Internet Explorer notebook, open a compatible browser, and enter the
    notebook address given in the command window from which you started IPython. This
    will be something like `http://127.0.0.1:8888` for the first notebook you open.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Wakari account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access Wakari, simply go to [https://www.wakari.io](https://www.wakari.io)
    and create an account. After logging in, you will be automatically directed to
    an introduction to using the notebook interface in Wakari. This interface is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Wakari account](img/8341OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The interface elements as seen in the preceding screenshot are described as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The section marked **1** shows the directory listing of your notebooks and files.
    On the top of this area, there is a toolbar with buttons to create new files and
    directories as well as download and upload files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The section marked **2** shows the **Welcome to Wakari** notebook. This is the
    initial notebook with information about IPython and Wakari. The notebook interface
    is discussed in detail in [Chapter 2](ch02.html "Chapter 2. The Notebook Interface"),
    *The Notebook Interface*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The section marked **3** shows the Wakari toolbar. This has the **New Notebook**
    button and drop-down menus with other tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book concentrates on using IPython through the notebook interface. However,
    it's worth mentioning the two other ways to run IPython.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to run IPython is to issue the `ipython` command in a terminal
    window. This starts a command-line session of IPython. As the reader may have
    guessed, this is the original interface for IPython.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, IPython can be started using the `ipython qtconsole` command.
    This starts an IPython session attached to a QT window. QT is a popular multiplatform
    windowing system that is bundled with the Anaconda distribution. These alternatives
    may be useful in systems that, for some reason, do not support the notebook interface.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first notebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are ready to create our first notebook! Simply click on the **New** **Notebook**
    button to create a new notebook.
  prefs: []
  type: TYPE_NORMAL
- en: In a local notebook installation, the **New Notebook** button appears in the
    upper-left corner of the dashboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Wakari, the **New Notebook** button is at the top of the dashboard, in a
    distinct color. *Do not* use the **Add File** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that the Wakari dashboard contains a directory list on the left. You
    can use this to organize your notebooks in any convenient way you choose. Wakari
    actually provides access to a fully working Linux shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to start computing. The notebook interface is displayed in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your first notebook](img/8341OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, new notebooks are named `UntitledX`, where `X` is a number. To change
    it, just click on the current title and edit the dialog that pops up.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the notebook, you will see an empty box with the `In [ ]:` text
    on the left-hand side. This box is called a **code cell** and it is where the
    IPython shell commands are entered. Usually, the first command we issue in a new
    notebook is `%pylab inline`. Go ahead and type this line in the code cell and
    then press *Shift* + *Enter* (this is the most usual way to execute commands.
    Simply pressing *Enter* will create a new line in the current cell.) Once executed,
    this command will issue a message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command makes several computational tools easily available and is the recommended
    way to use the IPython notebook for interactive computations. The `inline` directive
    tells IPython that we want graphics embedded in the notebook and not rendered
    with an external program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commands that start with `%` and `%%` are called **magic** commands and are
    used to set up configuration options and special features. The `%pylab` magic
    command imports a large collection of names into the IPython namespace. This command
    is usually frowned upon for causing **namespace pollution**. The recommended way
    to use libraries in scripts is to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, for example, to access the `arange()` function in the `NumPy` package,
    one uses `np.arange()`. The problem with this approach is that it becomes cumbersome
    to use common mathematical functions, such as `sin()`, `cos()`, and so on. These
    would have to be entered as `np.sin()`, `np.cos()`, and so on, which makes the
    notebook much less readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we adopt the following middle-of-the road convention: when doing
    interactive computations, we will use the `%pylab` directive to make it easier
    to type formulae. However, when using other libraries or writing scripts, we will
    use the recommended best practices to import libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: Example – the coffee cooling problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you get a cup of coffee at a coffee shop. Should you mix the cream into
    the coffee at the shop or wait until you reach your office? The goal, we assume,
    is to have the coffee as hot as possible. So, the main question is how the coffee
    is going to cool as you walk back to the office.
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference between the two strategies of mixing cream is:'
  prefs: []
  type: TYPE_NORMAL
- en: If you pour the cream at the shop, there is a sudden drop of temperature *before*
    the coffee starts to cool down as you walk back to the office
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you pour the cream after getting back to the office, the sudden drop occurs
    *after* the cooling period during the walk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need a model for the cooling process. The simplest such model is Newton''s
    cooling law, which states that the rate of cooling is proportional to the temperature
    difference between the coffee in the cup and the ambient temperature. This reflects
    the intuitive notion that, for example, if the outside temperature is 40°F, the
    coffee cools faster than if it is 50°F. This assumption leads to a well-known
    formula for the way the temperature changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – the coffee cooling problem](img/8341OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The constant *r* is a number between 0 and 1, representing the heat exchange
    between the coffee cup and the outside environment. This constant depends on several
    factors, and may be hard to estimate without experimentation. We just chose it
    somewhat arbitrarily in this first example.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by setting variables to represent the outside temperature and
    the rate of cooling and defining a function that computes the temperatures as
    the liquid cools. Then, type the lines of code representing the cooling law in
    a single code cell. Press *Enter* or click on **Return** to add new lines to the
    cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'As discussed, we will first define the variables to hold the outside temperature
    and the rate of cooling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After entering the preceding code on the cell, press *Shift* + *Enter* to execute
    the cell. Notice that after the cell is executed, a new cell is created.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we entered the value of `temp_out` as `70.0` even though the value
    is an integer in this case. This is not strictly necessary in this case, but it
    is considered good practice. Some code may behave differently, depending on whether
    it operates on integer or floating-point variables. For example, evaluating `20/8`
    in Python Version 2.7 results in `2`, which is the integer quotient of 20 divided
    by 8\. On the other hand, `20.0/8.0` evaluates to the floating-point value `2.5`.
    By forcing the variable `temp_out` to be a floating-point value, we prevent this
    somewhat unexpected kind of behavior.
  prefs: []
  type: TYPE_NORMAL
- en: A second reason is to simply improve code clarity and readability. A reader
    of the notebook on seeing the value `70.0` will easily understand that the variable
    `temp_out` represents a real number. So, it becomes clear that a value of `70.8`,
    for example, would also be acceptable for the outside temperature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define the function representing the cooling law:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please be careful with the way the lines are indented, since indentation is
    used by Python to define code blocks. Again, press *Shift* + *Enter* to execute
    the cell.
  prefs: []
  type: TYPE_NORMAL
- en: The `cooling_law()`function accepts the starting temperature and walking time
    as the input and returns the final temperature of the coffee. Notice that we are
    only defining the function, so no output is produced. In our examples, we will
    always choose meaningful names for variables. To be consistent, we use the conventions
    in the Google style of coding for Python as shown in [http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Python_Language_Rules](http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Python_Language_Rules).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Notice that the exponentiation (power) operator in Python is `**` and not `^`
    as in other mathematical software. If you get the following error when trying
    to compute a power, it is likely that you meant to use the `**` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now compute the effect of cooling given any starting temperature and
    walking time. For example, to compute the temperature of the coffee after 10 minutes,
    assuming the initial temperature to be 185°F, run the following code in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'What if we want to know what the final temperature for several walking times
    is? For example, suppose that we want to compute the final temperature every 5
    minutes up to 20 minutes. This is where `NumPy` makes things easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by defining `times` to be a `NumPy` array, using the `arange()` function.
    This function takes three arguments: the starting value of the range, the ending
    value of the range, and the increment.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may be wondering why the ending value of the range is `21` and not `20`.
    It's a common convention in Computer Science, followed by Python. *When a range
    is specified, the right endpoint never belongs to the range*. So, if we had specified
    `20` as the right endpoint, the range would only contain the values `0`, `5`,
    `10`, and `15`.
  prefs: []
  type: TYPE_NORMAL
- en: After defining the `times` array, we can simply call the `cooling_law()` function
    with `times` as the second argument. This computes the temperatures at the given
    times.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed that there is something strange going on here. The first
    time the `cooling_law()` function was called, the second argument was a floating-point
    number. The second time, it was a `NumPy` array. This is possible thanks to Python's
    dynamic typing and polymorphism. `NumPy` redefines the arithmetic operators to
    work with arrays in a smart way. So, we do not need to define a new function especially
    for this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have the temperatures, we can display them in a graph. To display the
    graph, execute the following command line in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command line produces the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – the coffee cooling problem](img/8341OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `plot()` function is a part of the `matplotlib` package, which will be studied
    in detail in [Chapter 3](ch03.html "Chapter 3. Graphics with matplotlib"), *Graphics
    with matplotlib*. In this example, the first two arguments to `plot()` are `NumPy`
    arrays that specify the data for the horizontal and vertical axes, respectively.
    The third argument specifies the plot symbol to be a filled circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to tackle the original problem: should we mix the cream in
    at the coffee shop or wait until we get back to the office? When we mix the cream,
    there is a sudden drop in temperature. The temperature of the mixture is the average
    of the temperature of the two liquids, weighted by volume. The following code
    defines a function to compute the resulting temperature in a mix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The arguments in the function are the temperature and volume of each liquid.
    Using this function, we can now compute the temperature evolution when the cream
    is added at the coffee shop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we repeat the variable `temperatures_mix_at_shop` at the end of
    the cell. This is not a typo. The IPython notebook, by default, assumes that the
    output of a cell is the last expression computed in the cell. It is a common idiom
    to list the variables one wants to have displayed, at the end of the cell. We
    will later see how to display fancier, nicely formatted output.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, type all the commands in a single code cell and then press *Shift*
    + *Enter* to run the whole cell. We first set the initial temperatures and volumes
    for the coffee and the cream. Then, we call the `temp_mixture()` function to calculate
    the initial temperature of the mixture. Finally, we use the `cooling_law()` function
    to compute the temperatures for different walking times, storing the result in
    the `temperatures_mix_at_shop` variable. The preceding command lines produce the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the `times` array specifies times from `0` to `20` with intervals
    of 5 minutes. So, the preceding output gives the temperatures at these times,
    assuming that the cream was mixed in the shop.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compute the temperatures when considering that the cream is mixed after
    walking back to our office, execute the following commands in the cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We again use the `cooling_law()` function, but using the initial coffee temperature
    `temp_coffee` (without mixing the cream) as the first input variable. We store
    the results in the `temperatures_unmixed_coffee` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To compute the effect of mixing the cream in after walking, we call the `temp_mixture()`
    function. Notice that the main difference in the two computations is the order
    in which the functions `cooling_law()` and `temp_mixture()` are called. The preceding
    command lines produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now plot the two temperature arrays. Execute the following command lines
    in a single cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The first `plot()` function call is the same as before. The second is similar,
    but we want the plotting symbol to be a filled diamond, indicated by the argument
    `''D''`. The `color=''r''` option makes the markings red. This produces the following
    plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – the coffee cooling problem](img/8341OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that, by default, all graphs created in a single code cell will be drawn
    on the same set of axes. As a conclusion, we can see that, for the data parameters
    used in this example, mixing the cream at the coffee shop is always better no
    matter what the walking time is. The reader should feel free to change the parameters
    and observe what happens in different situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scientific plots should make clear what is being represented, the variables
    being plotted, as well as the units being used. This can be nicely handled by
    adding annotations to the plot. It is fairly easy to add annotations in `matplotlib`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After plotting the arrays again, we call the appropriate functions to add the
    title (`title()`), horizontal axis label (`xlabel()`), vertical axis label (`ylabel()`),
    and legend (`legend()`). The arguments to all this functions are strings or a
    list of strings as in the case of `legend()`. The following graph is what we get
    as an output for the preceding command lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – the coffee cooling problem](img/8341OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is something unsatisfactory about the way we conducted this analysis;
    our office, supposedly, is at a fixed distance from the coffee shop. The main
    factor in the situation is the outside temperature. Should we use different strategies
    during summer and winter? In order to investigate this, we start by defining a
    function that accepts as input both the cream temperature and outside temperature.
    The return value of the function is the difference of final temperatures when
    we get back to the office.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding function, we first set the values of the variables that will
    be considered constant in the analysis, that is, the temperature of the coffee,
    the volumes of coffee and cream, the walking time, and the rate of cooling. Then,
    we defined the `temperature_difference` function using the same formulas we discussed
    previously. We can now use this function to compute a matrix with the temperature
    differences for several different values of the cream temperature and outside
    temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The first two lines in the cell use the `arange()` function to define arrays
    that contain equally spaced values for the cream temperatures and outside temperatures.
    We then call the convenience function, `meshgrid()`. This function returns two
    arrays that are convenient to calculate data for three-dimensional graphs and
    are stored in the variables `cream_values` and `outside_values`. Finally, we call
    the `temperature_difference()` function, and store the return value in the `temperature_differences`
    array. This will be a two-dimensional array (that is, a matrix).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to create a three dimensional plot of the temperature differences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code segment, we started by importing the `Axes3D` class using
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This class, located in the `mpl_toolkits.mplot3d` module, is not automatically
    loaded. So, it must be explicitly imported.
  prefs: []
  type: TYPE_NORMAL
- en: Then we create an object `fig` of the class `figure`, set its size, and generate
    an object `ax` that is an object of the class `Axes3D`. Finally, we call the `ax.plot_surface()`
    method to generate the plot. The last three command lines set the axis labels
    and the title.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this explanation, we used some terms that are common in object-oriented programming.
    A Python **object** is simply a data structure that can be handled in some specialized
    way. Every object is an **instance** of a **class** that defines the object's
    data. The class also defines **methods**, which are functions specialized to work
    with objects belonging to the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the preceding command lines will produce the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – the coffee cooling problem](img/8341OS_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the `cmap=cm.coolwarm` argument in the call to `ax.plot_surface()`. This
    sets the color map of the plot to `cm.coolwarm`. This color map conveniently uses
    a blue-red gradient for the function values. As a result, negative temperature
    differences are shown in blue and positive temperatures in red. Notice that there
    seems to be a straight line that defines where the temperature difference transitions
    from negative to positive. This actually corresponds to values where the outside
    temperature and the cream temperature are equal. It turns out that if the cream
    temperature is lower than the outside temperature, we should mix the cream into
    the coffee at the coffee shop. Otherwise, the cream should be poured in the office.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some practice questions that will help you to understand
    and apply the concepts learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we discussed how to determine the cooling rate *r*. Modify the
    example to plot the temperature evolution for several values of *r*, keeping all
    other variables fixed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search the **matplotlib** documentation at [http://matplotlib.org](http://matplotlib.org)
    to figure out how to generate a contour plot of the temperature differences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our analysis ignores the fact that the cream will also change temperature as
    we walk. Change the notebook so that this factor is taken into account
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set up an IPython environment with Anaconda, accessed the
    IPython notebook online through Wakari, created a notebook, and learned the basics
    of editing and executing commands, and lastly, we went through an extensively
    applied example featuring the basic notebook capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve more deeply in the facilities provided by
    the notebook interface—including notebook navigation and editing facilities, interfacing
    with the operating system, loading and saving data, and running scripts.
  prefs: []
  type: TYPE_NORMAL
