- en: '*Chapter 6*: Beautifying Streamlit Apps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to Section 2 of the book! In *Section 1*, *Creating Basic Streamlit
    Applications*, we focused on the basics – visualization, deployment, and data
    munging, all the topics that are crucial to getting started with Streamlit. In
    this part of the book, the purpose is to explore Streamlit through more complex
    applications and use cases, with the intent of turning you into an expert Streamlit
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we'll work with elements including sidebars, columns,
    colors, and themes to extend our ability to make beautiful Streamlit applications.
    By the end of this chapter, you should feel much more comfortable creating applications
    that are better than the average **Minimum Viable Product** (**MVP**). We'll start
    by learning about columns and move on to the rest of the elements discussed, weaving
    each into the main Streamlit app for the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the SF (San Francisco) Trees dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with columns in Streamlit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring page configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Streamlit sidebar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Picking colors with Color Picker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing Streamlit themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires a free GitHub account, which can be obtained at [https://www.github.com](https://www.github.com).
    A full primer on GitHub, along with detailed setup instructions, can be found
    in the *A quick primer on GitHub* section in the previous chapter, [*Chapter 5*](B16864_05_Final_VK_ePub.xhtml#_idTextAnchor056),
    *Deploying Streamlit with Streamlit Sharing*.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the SF Trees dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, we will be working with the SF Trees dataset again, the same
    dataset that we used in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*. As we did in the previous chapters, we need to follow this
    list of steps for the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder for the chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add our data to the folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Python file for our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's see each of these steps in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our main `streamlit_apps` folder, run the following code in your terminal
    to make a new folder cleverly called `pretty_trees`. You can also create a new
    folder manually outside the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to move our data from [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*, into our folder for this chapter. The following code copies
    the data into the correct folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you do not have the `trees_app` folder and have not yet completed [*Chapter
    3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036), *Data Visualization*, you
    can also download the necessary data from [https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science](https://github.com/tylerjrichards/Getting-Started-with-Streamlit-for-Data-Science)
    within the folder entitled `trees_app`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our data ready, we need to create a Python file to host our
    Streamlit app''s code; the following code does precisely this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `pretty_trees` file will hold our Python code, so go ahead and open it up
    in the text editor of your choice and the chapter can officially begin with us
    learning how to work with columns in Streamlit!
  prefs: []
  type: TYPE_NORMAL
- en: Working with columns in Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all of our apps prior to this point, we have viewed each Streamlit task as
    a top-down experience. We output text as our title, collect some user input below,
    and then put our visualizations below that. However, Streamlit allows us to format
    our app into dynamic columns using the `st.beta_columns()` feature. As of now,
    the columns feature is in beta (hence the `beta_` in the function name), but the
    feature should be out of beta at some point in 2021, where it will be called `st.columns()`.
  prefs: []
  type: TYPE_NORMAL
- en: We can divide our Streamlit app into multiple columns of variable lengths, and
    then treat each column as its own unique space in our app to include text, graphs,
    images, or anything else we would like.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for columns in Streamlit uses `with` notation, which you may already
    be familiar with for use cases such as resource management and dealing with opening
    and writing to files in Python. The easiest way to think about `with` notation
    in Streamlit columns is that they are self-contained blocks of code that tell
    Streamlit exactly where to place items in our apps. Let''s check out an example
    to see how it works. The following code imports our SF Trees dataset and creates
    three columns of equal length within it, writing text into each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will create the app shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – First three columns'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – First three columns
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, `st.beta_columns()` defines three columns of equal length, and
    we use the `with` notation to print some text in each. We can also call the `st.write()`
    function (or any other Streamlit function that writes content to our Streamlit
    app) directly on our predefined columns for the same outcome, as shown in the
    following code. The following code will have the exact same output as the preceding
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As we write more complex Streamlit apps with more content in each column, `with`
    statements tend to make for cleaner apps that are easier to understand and debug.
    The majority of this book will use `with` statements whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Streamlit, the column width is relative to the size of the other defined
    columns. Because of this, if we scale up the width of each column to `10` instead
    of `1`, our app will not change at all. Additionally, we can also pass a single
    number into `st.beta_columns()`, and `st.beta_columns()` will return that number
    of columns of equal width. The following code block shows three options for column
    width that all result in the same column widths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As a final example, the following code block allows the user input to determine
    the width of each column. Go ahead and play around with the resulting app to better
    understand how we can use columns to change the format behind our Streamlit apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036), *Data Visualization*,
    we used the following code to show the difference between the built-in Streamlit
    functions `st.line_chart()`, `st.bar_chart()`, and `st.area_chart()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code block creates the following Streamlit app, with three graphs
    of San Francisco trees grouped by their width placed one right after the other
    (only the two graphs are shown for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – SF line and bar charts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – SF line and bar charts
  prefs: []
  type: TYPE_NORMAL
- en: 'The point of this exercise was to better understand the three Streamlit functions,
    but how can we do that if we need to scroll to see them all? Let''s improve on
    this by putting our three graphs side by side using three columns. The following
    code predefines three equally wide columns and places one graph in each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the preceding code, we get a strange result shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Skinny graphs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Skinny graphs
  prefs: []
  type: TYPE_NORMAL
- en: This is most certainly not what we wanted! Each graph is far too narrow. Luckily
    for us, this brings us to our next mini-topic, page configuration in Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring page configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Streamlit allows us to configure a few essential page-specific features at the
    top of each Streamlit app. So far, we have been using the Streamlit defaults,
    but at the top of our Streamlit app, we can manually configure everything, from
    the page title shown on the web browser used to open our Streamlit apps, to the
    page layout, to the sidebar default state (we will cover the sidebar in the *Using
    the Streamlit sidebar* section!).
  prefs: []
  type: TYPE_NORMAL
- en: 'The default for Streamlit apps is to have a centered page layout, which is
    why there is copious white space on the edges of our apps. The following code
    sets up our Streamlit app in a wide format instead of our default centered one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the preceding code, we now see that our three graphs are well spaced
    and we can easily compare between the three. The following screenshot shows the
    Streamlit app in a wide format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Wide-format graphs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Wide-format graphs
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our exploration of using columns in Streamlit, and also concludes
    our first look at page configuration defaults. We will increasingly use both of
    these skills in the remainder of the book. Our next topic is to introduce the
    Streamlit sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Streamlit sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already seen in Streamlit, when we start to both accept large amounts
    of user input and also start to develop longer Streamlit apps, we often lose the
    ability for the user to see both their input and the output on the same screen.
    In other cases, we may want to put all the user input into its own section to
    clearly separate input and output in our Streamlit app. For both of these use
    cases, we can use the Streamlit sidebar, which allows us to place a minimizable
    sidebar on the left side of the Streamlit app and add any Streamlit component
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we can make a basic example that takes one of the graphs from
    our preceding app and filter the data behind it based on the user''s input. In
    this case, we can ask the user to specify the type of tree owner (for example,
    a private owner, or the Department of Public Works), and filter on those conditions
    using the `st.multiselect()` function, which allows the user to select multiple
    options from a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will create the following Streamlit app. As we have done
    before, we hide the `owners` variable within an `if` statement, as we would like
    the app to run with the entire dataset if the user has yet to select from the
    options. The sidebar allows the user to easily see both the options they selected
    and the output to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – First sidebar'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – First sidebar
  prefs: []
  type: TYPE_NORMAL
- en: Our next step for this app is going to be to add a few more visualizations,
    starting with the tree map we created in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*, and then combine the sidebar with what we have already learned
    about columns in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code places the map of trees throughout San Francisco, filtered
    by our multi-select box, below the histogram:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the Streamlit app from the preceding code, with
    the line chart just above the new map of the trees in SF, filtered by tree owner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Filtered map with sidebar'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Filtered map with sidebar
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step for this application is going to be to combine what we learned
    about columns with the sidebar by adding another graph on top of the geographic
    map. In [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036), *Data Visualization*,
    we created a histogram of the age of the trees. We can use that as our third graph
    in this Streamlit app. The following code block does this, and also switches the
    line graph into the same library (`seaborn`) as our tree age graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This first section does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It loads the trees dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It adds an age column based on the date column in our dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It creates a multi-select widget on the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It filters based on the sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our next step is to create our three graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have already discussed in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*, built-in Streamlit functions such as `st.map()` and `st.line_chart()`
    are useful for quick visualizations but lack some configurability options, such
    as proper titles or axis renaming. The following screenshot shows our Streamlit
    application with a few tree owner filters pre-set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Three filtered graphs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – Three filtered graphs
  prefs: []
  type: TYPE_NORMAL
- en: Our next feature to discuss in this chapter is how to get and use user input
    on color, which will be covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Picking colors with Color Picker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Colors are very difficult to take in as user input in applications. If a user
    wants red, do they want light red or dark red? Maroon or a pinkish red? Streamlit''s
    approach to this problem is `st.color_picker()`, which lets the user pick a color,
    and returns that color in a hex string (which is a unique string that defines
    very specific color shades used by most graphing libraries as input). The following
    code adds this color picker to our previous app and changes the color of the Seaborn
    graphs to be based on the color that the user selects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The change here from our previous app is to add the `graph_color` variable,
    which is a result of the `st.color_picker()` function. We added a name to this
    color picker and placed the color picker in the sidebar right under the owner''s
    multi-select widget. Now that we have the color input from the user, we can use
    this to change the colors in our graphs, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this Streamlit app, you can see exactly how the color picker works
    (this book is published in grayscale, so is not visible in the hard copy). It
    has a default color (in our case, black) that you can change by selecting the
    component and then clicking on your color of choice. The following screenshot
    shows both the component when clicked on and the result in our SF Trees app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Color picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – Color picker
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to change the colors of visualizations in Streamlit, how
    can we change the entire format and color scheme of Streamlit apps themselves?
    The next chapter explores Streamlit themes, and how to set up different themes
    to beautify Streamlit apps.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing Streamlit themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our applications have all had the exact same background and color scheme,
    apart from the previous section on the color picker. Streamlit allows us to update
    our applications and change the color of the background and the various components
    in our app as a customization feature. Using this, we can create Streamlit apps
    that default to dark mode, or that have the perfect colors for our app, or even
    create themes that ensure that people affected by color-blindness can see all
    of our visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to edit the *theme* of an app – through the UI or through
    the same `config.toml` setup we used in [*Chapter 3*](B16864_03_Final_VK_ePub.xhtml#_idTextAnchor036),
    *Data Visualization*. When we run our Streamlit apps, in the top-right corner,
    there is a little hamburger icon. When we click that icon and then click **Settings**,
    we will see the following options pop up in the middle of our screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Theme edits'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – Theme edits
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the preceding menu, we can switch between **Light** and **Dark** themes,
    and when we click on **Edit active theme**, we can see all of our theme editing
    options as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Editing active themes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Editing active themes
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding screenshot, we can observe that the following can be switched:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Primary color**: For interactive colors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background color**: Background of the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secondary background color**: Background within components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text color/font**: The color and font of the app text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Feel free to click on them and change the colors and see how this affects your
    Streamlit app. Once you have found a few colors that you like for our SF Trees
    app, you can add them to the theme section of your `.streamlit`/`config.toml`
    file as the instructions in `config.toml` file and shows the colors I have selected
    for my theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'When we save this file and rerun our application, we will see in the next screenshot
    that our app now has a custom theme, as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Custom theme output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_06_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – Custom theme output
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way I have found to make your Streamlit themes look great is to
    edit in the in-browser editor live, and then copy and paste your results to the
    Streamlit configuration file, as we just did in this example. But, as with all
    things, have fun with it! Try new combinations and make your Streamlit apps as
    beautiful as they can be.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes our adventures with the SF Trees dataset, and with learning about
    the various ways to make our Streamlit apps more aesthetically pleasing. We covered
    separating our apps into columns and page configuration, along with gathering
    user input in the sidebar, getting specific colors in user input through the `st.color_picker()`
    feature, and finally learning how to use Streamlit themes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the open source community around Streamlit,
    by understanding how to download and use Streamlit components built by users.
  prefs: []
  type: TYPE_NORMAL
