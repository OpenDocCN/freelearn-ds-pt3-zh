["```py\n    model = Prophet(\n        n_changepoints=20, \n        yearly_seasonality=True,\n        changepoint_prior_scale=0.001)\n    model.fit(df2_pd)\n    ```", "```py\n    future_dates = model.make_future_dataframe(\n        periods=365, freq='D')\n    forecast = model.plot_plotly generates *Figure 2**.5*. The right-most part of the graph does not have any collected data points as it is for the forecasted dates:\n\n    ```", "```py\n\n    ```", "```py\n    import yfinance as yf\n    import numpy as np\n    from fastdtw import fastdtw\n    yfinance library to download the share prices from Yahoo Finance for several technology companies for a date range:\n\n    ```", "```py\n    for i in range(num_tickers):\n        for j in range(num_tickers):\n            dtwdistance, _ = fastdtw(X[i], X[j])\n            dtwmatrix[i, j] = float(dtwdistance)\n    ```", "```py\n\n    ```", "```py\n    fig = px.imshow(\n        dtwmatrix,\n        labels=dict(x=\"Tickers\", y=\"\", color=\"DTW distance\"),\n        x=yftickers,\n        y=yftickers\n    )\n    fig.update_xaxes(side=\"top\")\n    fig.show()\n    ```", "```py\n    fig = px.line(yfdata, y=yftickers)\n    fig.show()\n    ```", "```py\n    from dtw import *\n    alignment = dtw(\n        yfdata['GOOG'], yfdata['AMZN'], \n        keep_internals=True,\n        step_pattern=rabinerJuangStepPattern(6, \"c\"))\n    alignment.plot(\n        type=\"twoway\", offset=-2, \n        xlab=\"time_index\", ylab=\"GOOG / AMZN\")\n    alignment = dtw(\n        yfdata['GOOG'], yfdata['META'], \n        keep_internals=True,\n        step_pattern=rabinerJuangStepPattern(6, \"c\"))\n    alignment.plot(\n        type=\"twoway\", offset=-2, \n        xlab=\"time_index\", ylab=\"GOOG / META\")\n    ```", "```py\n    from pyspark import SparkFiles\n    from sklearn.ensemble import IsolationForest\n    import plotly.express as px\n    ```", "```py\n    df = spark.read.csv(\n        \"file:///\" + SparkFiles.get(DATASET_FILE),\n        header=True, sep=\";\", inferSchema=True\n    )\n    ```", "```py\n    df = df.dropna() \\\n        .withColumn(\n            'Global_active_power',\n            df.Global_active_power.cast('double')) \\\n        .withColumn(\n            'Global_reactive_power', \n            df.Global_reactive_power.cast('double')) \\\n        .withColumn(\n            'Voltage', df.Voltage.cast('double')) \\\n        .withColumn(\n            'Global_intensity', \n            df.Global_intensity.cast('double')) \\\n    ```", "```py\n    df_train = df_pd.iloc[:35000,:]\n    ```", "```py\n    isoforest_model = IsolationForest(\n        n_estimators=100, \n        max_samples='auto',\n        contamination=float(0.0025), \n        random_state=123)\n    isoforest_model.contamination level to specify the expected proportion of outliers in the dataset.\n    ```", "```py\n    df_pd['anomaly_'] = isoforest_model.predict(feature_col)\n    ```", "```py\n    fig = px.scatter(\n        df_pd, x='Date', y=feature_name,\n        color='anomaly_', \n        color_continuous_scale=px.colors.sequential.Bluered_r)\n    fig.update_traces(marker=dict(size=3))\n    fig.add_vrect(x0=df_train_lastdate, x1=df_lastdate)\n    fig.show()\n    ```"]