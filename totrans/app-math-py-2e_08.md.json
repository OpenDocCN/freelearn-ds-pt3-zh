["```py\npython3.10 -m pip install numpy matplotlib shapely scikit-image\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nfrom matplotlib.collections import PatchCollection\n```", "```py\n    data = np.loadtxt(\"swisscheese-grid-10411.csv\")\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    outer = Circle((0.0, 0.0), 1.0, zorder=0, fc=\"k\")\n    ```", "```py\n    ax.add_patch(outer)\n    ```", "```py\n    col = PatchCollection(\n    ```", "```py\n        (Circle((x, y), r) for x, y, r in data),\n    ```", "```py\n        facecolor=\"white\", zorder=1, linewidth=0.2,\n    ```", "```py\n        ls=\"-\", ec=\"k\"\n    ```", "```py\n    )\n    ```", "```py\n    ax.add_collection(col)\n    ```", "```py\n    ax.set_xlim((-1.1, 1.1))\n    ```", "```py\n    ax.set_ylim((-1.1, 1.1))\n    ```", "```py\n    ax.set_axis_off()\n    ```", "```py\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n```", "```py\nfrom shapely.geometry import Polygon, Point\n```", "```py\n    polygon = Polygon(\n    ```", "```py\n        [(0, 2), (-1, 1), (-0.5, -1), (0.5, -1), (1, 1)],\n    ```", "```py\n    )\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    poly_patch = mpl.patches.Polygon(\n    ```", "```py\n        polygon.exterior.coords,\n    ```", "```py\n        ec=(0,0,0,1), fc=(0.5,0.5,0.5,0.4))\n    ```", "```py\n    ax.add_patch(poly_patch)\n    ```", "```py\n    ax.set(xlim=(-1.05, 1.05), ylim=(-1.05, 2.05))\n    ```", "```py\n    ax.set_axis_off()\n    ```", "```py\n    p1 = Point(0.0, 0.0)\n    ```", "```py\n    p2 = Point(-1.0, -0.75)\n    ```", "```py\n    ax.plot(0.0, 0.0, \"k*\")\n    ```", "```py\n    ax.annotate(\"p1\", (0.0, 0.0), (0.05, 0.0))\n    ```", "```py\n    ax.plot(-0.8, -0.75, \"k*\")\n    ```", "```py\n    ax.annotate(\"p2\", (-0.8, -0.75), (-0.8 + 0.05, -0.75))\n    ```", "```py\n    print(\"p1 inside polygon?\", polygon.contains(p1))  # True\n    ```", "```py\n    print(\"p2 inside polygon?\", polygon.contains(p2)) \n    ```", "```py\n    # False\n    ```", "```py\nimport matplotlib.pyplot as plt\nfrom skimage.io import imread\nfrom skimage.feature import canny\n```", "```py\n    image = imread(\"mandelbrot.\"ng\", as_gray=True)\n    ```", "```py\n    edges = canny(image, sigma=0.5)\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    ax.imshow(edges, cmap=\"gray_r\")\n    ```", "```py\n    ax.set_axis_off()\n    ```", "```py\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\n```", "```py\nfrom shapely.geometry import Polygon\nfrom shapely.ops import triangulate\n```", "```py\n    polygon = Polygon(\n    ```", "```py\n        [(2.0, 1.0), (2.0, 1.5), (-4.0, 1.5), (-4.0, 0.5),\n    ```", "```py\n        (-3.0, -1.5), (0.0, -1.5), (1.0, -2.0), (1.0,-0.5),\n    ```", "```py\n        (0.0, -1.0), (-0.5, -1.0), (-0.5, 1.0)],\n    ```", "```py\n        holes=[np.array([[-1.5, -0.5], [-1.5, 0.5],\n    ```", "```py\n        [-2.5, 0.5], [-2.5, -0.5]])]\n    ```", "```py\n    )\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    plt_poly = mpl.patches.Polygon(polygon.exterior.coords,\n    ```", "```py\n        ec=(0,0,0,1), fc=(0.5,0.5,0.5,0.4), zorder=0)\n    ```", "```py\n    ax.add_patch(plt_poly)\n    ```", "```py\n    plt_hole = mpl.patches.Polygon(\n    ```", "```py\n        polygon.interiors[0].coords, ec=\"k\", fc=\"w\")\n    ```", "```py\n    ax.add_patch(plt_hole)\n    ```", "```py\n    ax.set(xlim=(-4.05, 2.05), ylim=(-2.05, 1.55))\n    ```", "```py\n    ax.set_axis_off()\n    ```", "```py\n    triangles = triangulate(polygon)\n    ```", "```py\n    filtered = filter(lambda p: polygon.contains(p),\n    ```", "```py\n        triangles)\n    ```", "```py\n    patches = map(lambda p: mpl.patches.Polygon(\n    ```", "```py\n        p.exterior.coords), filtered)\n    ```", "```py\n    col = mpl.collections.PatchCollection(\n    ```", "```py\n        patches, fc=\"none\", ec=\"k\")\n    ```", "```py\n    ax.add_collection(col)\n    ```", "```py\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\nfrom shapely.geometry import MultiPoint\n```", "```py\n    raw_points = rng.uniform(-1.0, 1.0, size=(50, 2))\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    ax.plot(raw_points[:, 0], raw_points[:, 1], \"kx\")\n    ```", "```py\n    ax.set_axis_off()\n    ```", "```py\n    points = MultiPoint(raw_points)\n    ```", "```py\n    convex_hull = points.convex_hull\n    ```", "```py\n    patch = mpl.patches.Polygon(\n    ```", "```py\n        convex_hull.exterior.coords,\n    ```", "```py\n        ec=(0,0,0,1), fc=(0.5,0.5,0.5,0.4), lw=1.2)\n    ```", "```py\n    ax.add_patch(patch)\n    ```", "```py\nfrom math import comb as binom\nimport matplotlib.pyplot as plt\nimport numpy as np\n```", "```py\n    class Bezier:\n    ```", "```py\n        def __init__(self, *points):\n    ```", "```py\n            self.points = points\n    ```", "```py\n            self.nodes = n = len(points) - 1\n    ```", "```py\n            self.degree = l = points[0].size\n    ```", "```py\n    self.coeffs = [binom(n, i)*p.reshape(\n    ```", "```py\n        (l, 1)) for i, p in enumerate(points)]\n    ```", "```py\n        def __call__(self, t):\n    ```", "```py\n            n = self.nodes\n    ```", "```py\n            t = t.reshape((1, t.size))\n    ```", "```py\n            vals = [c @ (t**i)*(1-t)**(n-i) for i,\n    ```", "```py\n               c in enumerate(self.coeffs)]\n    ```", "```py\n       return np.sum(vals, axis=0)\n```", "```py\n    p1 = np.array([0.0, 0.0])\n    ```", "```py\n    p2 = np.array([0.0, 1.0])\n    ```", "```py\n    p3 = np.array([1.0, 1.0])\n    ```", "```py\n    p4 = np.array([1.0, 3.0])\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    ax.plot([0.0, 0.0, 1.0, 1.0],\n    ```", "```py\n         [0.0, 1.0, 1.0, 3.0], \"*--k\")\n    ```", "```py\n    ax.set(xlabel=\"x\", ylabel=\"y\",\n    ```", "```py\n        title=\"Bezier curve with 4 nodes, degree 3\")\n    ```", "```py\n    b_curve = Bezier(p1, p2, p3, p4)\n    ```", "```py\n    t = np.linspace(0, 1)\n    ```", "```py\n    v = b_curve(t)\n    ```", "```py\n    ax.plot(v[0,:], v[1, :], \"k\")\n    ```", "```py\nbinom(n, i)*p.reshape((l, 1))\n```", "```py\nc @ (t**i)*(1-t)**(n-i)\n```"]