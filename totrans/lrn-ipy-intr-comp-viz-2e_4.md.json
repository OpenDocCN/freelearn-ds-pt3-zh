["```py\nIn [1]: import pandas as pd\nIn [2]: cd citiesdata\nIn [3]: filename = 'worldcitiespop.txt'\nIn [4]: data = pd.read_csv(filename)\nIn [5]: plot(data.Longitude, data.Latitude, ',')\n\n```", "```py\nIn [1]: cd fbdata\nIn [2]: import networkx as nx\nIn [3]: g = nx.read_edgelist('0.edges')\nIn [4]: hist(g.degree().values(), bins=20)\n\n```", "```py\nIn [1]: rcParams['axes.color_cycle'] = ['r', 'k', 'c']\n\n```", "```py\nIn [1]: plot(randn(1000, 2))\nOut[1]: [<matplotlib.lines.Line2D at 0x4cf4310>,\n <matplotlib.lines.Line2D at 0x4cf4450>]\n\n```", "```py\nIn [2]: line = _[0]\n\n```", "```py\nIn [3]: line.set_color('r')\n\n```", "```py\nx = linspace(0, 2 * pi, 1000)\ny = 1 + 2 * cos(5 * x)\nsubplot(1,2,1)\nplot(x, y)\nsubplot(1,2,2, polar=True)\npolar(x, y)\n```", "```py\nIn [1]: import urllib2\nIn [2]: png = urllib2.urlopen('http://ipython.rossant.net/squirrel.png')\nIn [3]: im = imread(png)\nIn [4]: im.shape\nOut[4]: (300, 300, 3)\n\n```", "```py\nIn [5]: from PIL import Image\nIn [6]: img = Image.fromarray((im * 255).astype('uint8'))\n\n```", "```py\nIn [7]: imshow(im)\n\n```", "```py\nIn [9]: imshow(array(img.rotate(45.)))\n\n```", "```py\nIn [10]: from scipy.cluster.vq import *\n M = im[:,:,0].ravel()\n centroids, _ = kmeans(M, 4)\n qnt, _ = vq(M, centroids)\n clustered = centroids[reshape(qnt, (300, 300))]\n\n```", "```py\nIn [11]: cmap = matplotlib.colors.ListedColormap([(0,.2,.3),(.85,.1,.13),(.44,.6,.6),(1.,.9,.65)])\nIn [12]: imshow(clustered, cmap=cmap)\n\n```", "```py\nIn [13]: imsave('squirrelama.png', clustered, cmap=cmap)\n\n```", "```py\nIn [6]: locations = data[['Longitude','Latitude']].as_matrix()\nIn [7]: population = data.Population\n\n```", "```py\nIn [8]: from mpl_toolkits.basemap import Basemap\nIn [9]: m = Basemap(projection='mill', llcrnrlat=-65, urcrnrlat=85,\n llcrnrlon=-180, urcrnrlon=180)\n\n```", "```py\nIn [10]: x, y = m(locations[:,0],locations[:,1])\n\n```", "```py\nIn [11]: x0, y0 = m(-180, -65)\nIn [12]: x1, y1 = m(180, 85)\n\n```", "```py\nIn [13]: weights = population.copy()\nIn [14]: weights[isnan(weights)] = 1000\nIn [15]: h, _, _ = histogram2d(x, y, weights=weights,bins=(linspace(x0, x1, 500), linspace(y0, y1, 500)))\n\n```", "```py\nIn [16]: h[h == 0] = 1\nIn [17]: import scipy.ndimage.filters\nIn [18]: z = scipy.ndimage.filters.gaussian_filter(log(h.T), 1)\n\n```", "```py\nIn [19]: m.drawcoastlines()\nIn [20]: m.imshow(z, origin='lower', extent=[x0,x1,y0,y1],cmap=get_cmap('Reds'))\n\n```", "```py\nIn [1]: from mpl_toolkits.mplot3d import Axes3D\n\n```", "```py\nIn [2]: # we create a (X, Y) grid\n X = linspace(-5, 5, 50)\n Y = X\n X, Y = meshgrid(X, Y)\n # we compute the Z values\n R = sqrt(X**2 + Y**2)\n Z = sin(R)\n\n```", "```py\nIn [3]: ax = gca(projection='3d')\n surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1,\n cmap=mpl.cm.coolwarm, linewidth=0)\n\n```", "```py\nfrom PyQt4 import QtGui\n\nclass HelloWorld(QtGui.QWidget):\n    def __init__(self):\n        super(HelloWorld, self).__init__()\n        # create the button\n        self.button = QtGui.QPushButton('Click me', self)\n        self.button.clicked.connect(self.clicked)\n        # create the layout\n        vbox = QtGui.QVBoxLayout()\n        vbox.addWidget(self.button)\n        self.setLayout(vbox)\n        # show the window\n        self.show()\n\n    def clicked(self):\n        msg = QtGui.QMessageBox(self)\n        msg.setText(\"Hello World !\")\n        msg.show()\n```", "```py\nIn [1]: window = HelloWorld()\n\n```", "```py\nIn [2]: window.clicked()\n\n```"]