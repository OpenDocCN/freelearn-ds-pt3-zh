- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pandas Foundations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **pandas** library is useful for dealing with structured data. What is structured
    data? Data that is stored in tables, such as CSV files, Excel spreadsheets, or
    database tables, is all structured. Unstructured data consists of free-form text,
    images, sound, or video. If you find yourself dealing with structured data, pandas
    will be of great utility to you.
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.Series` is a one-dimensional collection of data. If you are coming from
    Excel, you can think of this as a column. The main difference is that, like a
    column in a database, all of the values within `pd.Series` must have a single,
    homogeneous type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.DataFrame` is a two-dimensional object. Much like an Excel sheet or database
    table can be thought of as a collection of columns, `pd.DataFrame` can be thought
    of as a collection of `pd.Series` objects. Each `pd.Series` has a homogeneous
    data type, but the `pd.DataFrame` is allowed to be heterogeneous and store a variety
    of `pd.Series` objects with different data types.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.Index` does not have a direct analogy with other tools. Excel may offer
    the closest with auto-numbered rows on the left-hand side of a worksheet, but
    those numbers tend to be for display purposes only. `pd.Index`, as you will find
    over the course of this book, can be used for selecting values, joining tables,
    and much more.'
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter will show you how to manually construct `pd.Series`
    and `pd.DataFrame` objects, customize the `pd.Index` object(s) associated with
    each, and showcase common attributes of the `pd.Series` and `pd.DataFrame` that
    you may need to inspect during your analyses.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to cover the following recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing pandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Series attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrame attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most users of the **pandas** library will use an import alias so they can refer
    to it as `pd`. In general, in this book, we will not show the pandas and **NumPy**
    imports, but they look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'While it is an optional dependency in the 2.x series of pandas, many examples
    in this book will also leverage the **PyArrow** library, which we assume to be
    imported as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic building block in pandas is a `pd.Series`, which is a one-dimensional
    array of data paired with a `pd.Index`. The index labels can be used as a simplistic
    way to look up values in the `pd.Series`, much like the Python dictionary built
    into the language uses key/value pairs (we will expand on this and much more `pd.Index`
    functionality in *Chapter 2*, *Selection and Assignment*).
  prefs: []
  type: TYPE_NORMAL
- en: The following section demonstrates a few ways of creating a `pd.Series` directly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest way to construct a `pd.Series` is to provide a sequence of values,
    like a list of integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A **tuple** is another type of sequence, making it valid as an argument to
    the `pd.Series` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When generating sample data, you may often reach for the Python `range` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In all of the examples so far, pandas will try and infer a proper data type
    from its arguments for you. However, there are times when you will know more about
    the type and size of your data than can be inferred. Providing that information
    explicitly to pandas via the `dtype=` argument can be useful to save memory or
    ensure proper integration with other typed systems, like SQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, let’s use a simple `range` argument to fill a `pd.Series`
    with a sequence of integers. When we did this before, the inferred data type was
    a 64-bit integer, but we, as developers, may know that we never expect to store
    larger values in this `pd.Series` and would be fine with only 8 bits of storage
    (if you do not know the difference between an 8-bit and 64-bit integer, that topic
    will be covered in *Chapter 3*, *Data Types*). Passing `dtype="int8"` to the `pd.Series`
    constructor will let pandas know we want to use the smaller data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A `pd.Series` can also have a name attached to it, which can be specified via
    the `name=` argument (if not specified, the name defaults to `None`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While `pd.Series` is the building block, `pd.DataFrame` is the main object that
    comes to mind for users of pandas. `pd.DataFrame` is the primary and most commonly
    used object in pandas, and when people think of pandas, they typically envision
    working with a `pd.DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: In most analysis workflows, you will be importing your data from another source,
    but for now, we will show you how to construct a `pd.DataFrame` directly (input/output
    will be covered in *Chapter 4*, *The pandas I/O System*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most basic construction of a `pd.DataFrame` happens with a two-dimensional
    sequence, like a list of lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With a list of lists, pandas will automatically number the row and column labels
    for you. Typically, users of pandas will at least provide labels for columns,
    as it makes indexing and selecting from a `pd.DataFrame` much more intuitive (see
    *Chapter 2*, *Selection and Assignment*,for an introduction to indexing and selecting).
    To label your columns when constructing a `pd.DataFrame` from a list of lists,
    you can provide a `columns=` argument to the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of using a list of lists, you could also provide a dictionary. The
    keys of the dictionary will be used as column labels, and the values of the dictionary
    will represent the values placed in that column of the `pd.DataFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, our dictionary values were lists of strings, but the
    `pd.DataFrame` does not strictly require lists. Any sequence will work, including
    a `pd.Series`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When constructing both the `pd.Series` and `pd.DataFrame` objects in the previous
    sections, you likely noticed the values to the left of these objects starting
    at 0 and incrementing by 1 for each new row of data. The object responsible for
    those values is the `pd.Index`, highlighted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31091_01_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1: Default pd.Index, highlighted in red'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of a `pd.DataFrame`, you have a `pd.Index` not only to the left
    of the object (often referred to as the *row index* or even just *index*) but
    also above (often referred to as the *column index* or *columns*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer](img/B31091_01_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.2: A pd.DataFrame with a row and column index'
  prefs: []
  type: TYPE_NORMAL
- en: Unless explicitly provided, pandas will create an auto-numbered `pd.Index` for
    you (technically, this is a `pd.RangeIndex`, a subclass of the `pd.Index` class).
    However, it is very rare to use `pd.RangeIndex` for your columns, as referring
    to a column named `City` or `Date` is more expressive than referring to a column
    in the *n*^(th) position. The `pd.RangeIndex` appears more commonly in the row
    index, although you may still want custom labels to appear there as well. More
    advanced selection operations with the default `pd.RangeIndex` and custom `pd.Index`
    values will be covered in *Chapter 2*, *Selection and Assignment*, to help you
    understand different use cases, but for now, let’s just look at how you would
    override the construction of the row and column `pd.Index` objects during `pd.Series`
    and `pd.DataFrame` construction.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When constructing a `pd.Series`, the easiest way to change the row index is
    by providing a sequence of labels to the `index=` argument. In this example, the
    labels `dog`, `cat`, and `human` will be used instead of the default `pd.RangeIndex`
    numbered from 0 to 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want finer control, you may want to construct the `pd.Index` yourself
    before passing it as an argument to `index=`. In the following example, the `pd.Index`
    is given the name `animal`, and the `pd.Series` itself is named `num_legs`, providing
    more context to the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'A `pd.DataFrame` uses a `pd.Index` for both dimensions. Much like with the
    `pd.Series` constructor, the `index=` argument can be used to specify the row
    labels, but you now also have the `columns=` argument to control the column labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Series attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have a `pd.Series`, there are quite a few attributes you may want to
    inspect. The most basic attributes can tell you the type and size of your data,
    which is often the first thing you will inspect when reading in data from a data
    source.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by creating a `pd.Series` that has a name, alongside a custom `pd.Index`,
    which itself has a name. Although not all of these elements are required, having
    them will help us more clearly understand what the attributes we access through
    this recipe are actually showing us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing users typically want to know about their data is the type of
    `pd.Series`. This can be inspected via the `pd.Series.dtype` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The name may be inspected via the `pd.Series.name` attribute. The data we constructed
    in this recipe was created with the `name="num_legs"` argument, which is what
    you will see when accessing this attribute (if not provided, this will return
    `None`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The associated `pd.Index` can be accessed via `pd.Series.index`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the associated `pd.Index` can be accessed via `pd.Series.index.name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The shape can be accessed via `pd.Series.shape`. For a one-dimensional `pd.Series`,
    the shape is returned as a one-tuple where the first element represents the number
    of rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The size (number of elements) can be accessed via `pd.Series.size`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The Python built-in function `len` can show you the length (number of rows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: DataFrame attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `pd.DataFrame` shares many of the attributes of the `pd.Series`, with some
    slight differences. Generally, pandas tries to share as many attributes as possible
    between the `pd.Series` and `pd.DataFrame`, but the two-dimensional nature of
    the `pd.DataFrame` makes it more natural to express some things in plural form
    (for example, the `.dtype` attribute becomes `.dtypes`) and gives us a few more
    attributes to inspect (for example, `.columns` exists for a `pd.DataFrame` but
    not for a `pd.Series`).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Much like we did in the previous section, we are going to construct a `pd.DataFrame`
    with a custom `pd.Index` in the rows, while also using custom labels in the columns.
    This will be more helpful when inspecting the various attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The types of each column can be inspected via the `pd.DataFrame.dtypes` attribute.
    This attribute returns a `pd.Series` where each row shows the data type corresponding
    to each column in our `pd.DataFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The *row index* can be accessed via `pd.DataFrame.index`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The *column index* can be accessed via `pd.DataFrame.columns`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The shape can be accessed via `pd.DataFrame.shape`. For a two-dimensional `pd.DataFrame`,
    the shape is returned as a two-tuple where the first element represents the number
    of rows and the second element represents the number of columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The size (number of elements) can be accessed via `pd.DataFrame.size`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The Python built-in function `len` can show you the length (number of rows):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/pandas](https://packt.link/pandas)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code5040900042138312.png)'
  prefs: []
  type: TYPE_IMG
