["```py\n# Reading the missing value imputed and train test split data\ntrain_df = pd.read_parquet(preprocessed / \"selected_blocks_train_missing_imputed.parquet\")\nval_df = pd.read_parquet(preprocessed / \"selected_blocks_val_missing_imputed.parquet\")\ntest_df = pd.read_parquet(preprocessed / \"selected_blocks_test_missing_imputed.parquet\")\n#Adding train, validation and test tags to distinguish them before combining\ntrain_df['type'] = \"train\"\nval_df['type'] = \"val\"\ntest_df['type'] = \"test\"\nfull_df = pd.concat([train_df, val_df, test_df]).sort_values([\"LCLid\", \"timestamp\"])\ndel train_df, test_df, val_df \n```", "```py\ndf[\"lag_1\"]=df[\"column\"].shift(1) \n```", "```py\nfrom src.feature_engineering.autoregressive_features import add_lags\n# Creating first 5 lags and then same 5 lags but from previous day and previous week to capture seasonality\nlags = (\n    (np.arange(5) + 1).tolist()\n    + (np.arange(5) + 46).tolist()\n    + (np.arange(5) + (48 * 7) - 2).tolist()\n)\nfull_df, added_features = add_lags(\n    full_df, lags=lags, column=\"energy_consumption\", ts_id=\"LCLid\", use_32_bit=True\n) \n```", "```py\n# We shift by one to make sure there is no data leakage\ndf[\"rolling_3_mean\"] = df[\"column\"].shift(1).rolling(3).mean() \n```", "```py\nfrom src.feature_engineering.autoregressive_features import add_rolling_features\nfull_df, added_features = add_rolling_features(\n    full_df,\n    rolls=[3, 6, 12, 48],\n    column=\"energy_consumption\",\n    agg_funcs=[\"mean\", \"std\"],\n    ts_id=\"LCLid\",\n    use_32_bit=True,\n) \n```", "```py\nfrom src.feature_engineering.autoregressive_features import add_seasonal_rolling_features\nfull_df, added_features = add_seasonal_rolling_features(\n    full_df,\n    rolls=[3],\n    seasonal_periods=[48, 48 * 7],\n    column=\"energy_consumption\",\n    agg_funcs=[\"mean\", \"std\"],\n    ts_id=\"LCLid\",\n    use_32_bit=True,\n) \n```", "```py\ndf[\"ewma\"]=df['column'].shift(1).ewm(alpha=0.5).mean() \n```", "```py\nfrom src.feature_engineering.autoregressive_features import add_ewma\nfull_df, added_features = add_ewma(\n    full_df,\n    spans=[48 * 60, 48 * 7, 48],\n    column=\"energy_consumption\",\n    ts_id=\"LCLid\",\n    use_32_bit=True,\n) \n```", "```py\ndf['time_elapsed'] = df['timestamp'].values.astype(np.int64)/(10**9) \n```", "```py\nfull_df, added_features = add_temporal_features(\n    full_df,\n    field_name=\"timestamp\",\n    frequency=\"30min\",\n    add_elapsed=True,\n    drop=False,\n    use_32_bit=True,\n) \n```", "```py\nfull_df, added_features = bulk_add_fourier_features(\n    full_df,\n    [\"timestamp_Month\", \"timestamp_Hour\", \"timestamp_Minute\"],\n    max_values=[12, 24, 60],\n    n_fourier_terms=5,\n    use_32_bit=True,\n) \n```"]