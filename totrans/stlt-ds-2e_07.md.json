["```py\nimport streamlit as st\nst.title(\"Streamlit Components Examples\")\nst.write(\n    \"\"\"This app contains examples of \n    Streamlit Components, find them \n    all in the sidebar!\"\"\"\n) \n```", "```py\nimport pandas as pd\nimport streamlit as st\nfrom st_aggrid import AgGrid\nst.title(\"Streamlit AgGrid Example: Penguins\")\npenguins_df = pd.read_csv(\"penguins.csv\")\nAgGrid(penguins_df) \n```", "```py\nimport pandas as pd\nimport streamlit as st\nfrom st_aggrid import AgGrid\nst.title(\"Streamlit AgGrid Example: Penguins\")\npenguins_df = pd.read_csv(\"penguins.csv\")\nAgGrid(penguins_df, height=500) \n```", "```py\nimport pandas as pd\nimport streamlit as st\nfrom st_aggrid import AgGrid\nst.title(\"Streamlit AgGrid Example: Penguins\")\npenguins_df = pd.read_csv(\"penguins.csv\")\nst.write(\"AgGrid DataFrame:\")\nresponse = AgGrid(penguins_df, height=500, editable=True)\ndf_edited = response[\"data\"]\nst.write(\"Edited DataFrame:\")\nst.dataframe(df_edited) \n```", "```py\nimport pandas as pd\nimport plotly.express as px\nimport streamlit as st\nfrom streamlit_plotly_events import plotly_events\nst.title(\"Streamlit Plotly Events Example: Penguins\")\ndf = pd.read_csv(\"penguins.csv\")\nfig = px.scatter(df, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\nplotly_events(fig) \n```", "```py\nimport pandas as pd\nimport plotly.express as px\nimport streamlit as st\nfrom streamlit_plotly_events import plotly_events\n\nst.title(\"Streamlit Plotly Events Example: Penguins\")\ndf = pd.read_csv(\"penguins.csv\")\nfig = px.scatter(df, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\nselected_point = plotly_events(fig, click_event=True)\nst.write(\"Selected point:\")\nst.write(selected_point) \n```", "```py\nst.title(\"Streamlit Plotly Events Example: Penguins\")\ndf = pd.read_csv(\"penguins.csv\")\nfig = px.scatter(df, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\nselected_point = plotly_events(fig, click_event=True)\nif len(selected_point) == 0:\n    st.stop()\nselected_x_value = selected_point[0][\"x\"]\nselected_y_value = selected_point[0][\"y\"]\ndf_selected = df[\n    (df[\"bill_length_mm\"] == selected_x_value)\n    & (df[\"bill_depth_mm\"] == selected_y_value)\n]\nst.write(\"Data for selected point:\")\nst.write(df_selected) \n```", "```py\ncp pages/plotly_events.py pages/penguin_animated.py \n```", "```py\nimport pandas as pd\nimport plotly.express as px\nimport requests\nimport streamlit as st\n# add streamlit lottie\nfrom streamlit_lottie import st_lottie\nfrom streamlit_plotly_events import plotly_events\ndef load_lottieurl(url: str):\n    r = requests.get(url)\n    if r.status_code != 200:\n        return None\n    return r.json()\nlottie_penguin = load_lottieurl(\n    \"https://assets9.lottiefiles.com/private_files/lf30_lntyk83o.json\"\n)\nst_lottie(lottie_penguin, height=200)\nst.title(\"Streamlit Plotly Events + Lottie Example: Penguins\") \n```", "```py\ncp pages/penguin_animated.py pages/penguin_profiled.py \n```", "```py\nimport pandas as pd\nimport plotly.express as px\nimport requests\nimport streamlit as st\nfrom pandas_profiling import ProfileReport\nfrom streamlit_lottie import st_lottie\nfrom streamlit_pandas_profiling import st_profile_report\nfrom streamlit_plotly_events import plotly_events \n```", "```py\nfig = px.scatter(df, x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"species\")\nselected_point = plotly_events(fig, click_event=True)\nst.subheader(\"Pandas Profiling of Penguin Dataset\")\npenguin_profile = ProfileReport(df, explorative=True)\nst_profile_report(penguin_profile) \n```", "```py\nimport folium\nimport pandas as pd\nimport streamlit as st\nfrom streamlit_folium import st_folium\nst.title(\"SF Trees Map\")\ntrees_df = pd.read_csv(\"trees.csv\")\ntrees_df = trees_df.dropna(subset=[\"longitude\", \"latitude\"])\ntrees_df = trees_df.head(n=100)\nlat_avg = trees_df[\"latitude\"].mean()\nlon_avg = trees_df[\"longitude\"].mean()\nm = folium.Map(\nlocation=[lat_avg, lon_avg], \nzoom_start=12)\nst_folium(m) \n```", "```py\nlat_avg = trees_df[\"latitude\"].mean()\nlon_avg = trees_df[\"longitude\"].mean()\nm = folium.Map(location=[lat_avg, lon_avg], zoom_start=12)\nfor _, row in trees_df.iterrows():\n    folium.Marker(\n        [row[\"latitude\"], row[\"longitude\"]],\n    ).add_to(m)\nst_folium(m) \n```", "```py\nfor _, row in trees_df.iterrows():\n    folium.Marker(\n        [row[\"latitude\"], row[\"longitude\"]],\n    ).add_to(m)\nevents = st_folium(m)\nst.write(events) \n```", "```py\nfrom streamlit_extras.mandatory_date_range import date_range_picker\nresult = date_range_picker(\"Select a date range\")\nst.write(\"Result:\", result) \n```", "```py\nfrom streamlit_extras.stoggle import stoggle\nstoggle(\n    \"Click me!\",\n    \"\"\"![](img/B18444_07_14.png) Surprise! Here's some additional content\"\"\",\n) \n```"]