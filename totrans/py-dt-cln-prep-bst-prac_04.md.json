["```py\ndf.rename(columns={'ProductName': 'OldProductName'}, inplace=True)\n```", "```py\ndf.rename(columns={'OldProductName': 'NewProductName', 'PurchaseAmount': 'NewPurchaseAmount'}, inplace=True)\n```", "```py\nif 'OldProductName' in df.columns:\ntry:\n# Attempt to rename multiple columns\n  df.rename(columns={'OldProductName': 'NewProductName', 'PurchaseAmount': 'NewPurchaseAmount'}, inplace=True)\nexcept ValueError as ve:\n  print(f\"Error: {ve}\")\nelse:\n  print(\"Error: Column 'OldProductName' does not exist in the DataFrame.\")\n```", "```py\ncolumns_to_drop = ['CustomerID', 'Timestamp'] # Replace with the names of the columns you want to drop\ntry:\n# Drop columns considered irrelevant for the current analysis\n    df.drop(columns=columns_to_drop, inplace=True)\nexcept KeyError as ke:\n    print(f\"Error: {ke}\")\n```", "```py\nIndex(['CustomerID', 'NewProductName', 'NewPurchaseAmount', 'PaymentMethod','Timestamp'],dtype='object')\n```", "```py\nIndex(['NewProductName', 'NewPurchaseAmount', 'PaymentMethod'], dtype='object')\n```", "```py\nprint(\"Initial Memory Usage:\")\nprint(df.memory_usage().sum() / (1024 ** 2), \"MB\") # Convert bytes to megabytes\nprint(\"\\nMemory Usage After Dropping Columns:\")\nprint(df.memory_usage().sum() / (1024 ** 2), \"MB\") # Convert bytes to megabytes\n```", "```py\nCost_before = (Hourly Rate/60) * Runtime(in minutes) = (1.0064/60) * 5 = 0.0838$\nCost_after = (Hourly Rate/60) * Runtime(in minutes) = (0.5032/60) * 5 = 0.041$\n```", "```py\nprint(\"\\nUpdated Data Types of Columns:\")\nprint(df.dtypes)\n```", "```py\nCustomerID         int64\nProductName       object\nPurchaseAmount     int64\nPaymentMethod     object\nTimestamp         object\n```", "```py\ndf['PurchaseAmount'] = pd.to_numeric(df['PurchaseAmount'], errors='coerce')\n```", "```py\ndf['ProductName'] = df['ProductName'].astype('str')\n```", "```py\ndf['PaymentMethod'] = df['PaymentMethod'].astype('category')\n```", "```py\ndf['HasDive'] = df['ProductName'].str.contains('Dive', case=False)\n```", "```py\ndf['HasDive'] = df['HasDive'].astype('bool')\n```", "```py\ndf['Timestamp3'] = pd.to_datetime(df['Timestamp'], format='%Y-%m-%d %H:%M:%S')\n```", "```py\ndf['FormattedTimestamp'] = df['Timestamp'].dt.strftime('%b %d, %Y %I:%M %p')\n```", "```py\n             Timestamp     FormattedTimestamp\n0  2022-01-01 08:30:45  Jan 01, 2022 08:30 AM\n1  2022-01-02 14:20:30  Jan 02, 2022 02:20 PM\n```", "```py\ndf['Timestamp2'] = df['Timestamp'].apply(parser.parse)\n```", "```py\ndf['Day'] = df['Timestamp'].dt.day\ndf['Month'] = df['Timestamp'].dt.month\ndf['Year'] = df['Timestamp'].dt.year\n```", "```py\n             Timestamp  Day  Month  Year\n0  2022-01-01 08:30:45    1      1  2022\n1  2022-01-02 14:20:30    2      1  2022\n```", "```py\ndf['TimeSincePreviousPurchase'] = df['Timestamp'].diff()\n```", "```py\ndf['TimeUntilNextPurchase'] = -df['Timestamp'].diff(-1)\n```", "```py\n             Timestamp TimeSincePreviousPurchase TimeUntilNextPurchase\n0  2022-01-01 08:30:45                       NaT       1 days 05:49:45\n1  2022-01-02 14:20:30           1 days 05:49:45       1 days 05:54:40\n```", "```py\ndf['TimeDifference'] = df['Timestamp'].diff(periods=2)\n```", "```py\n           Timestamp TimeSincePreviousPurchase TimeDifference2periods\n0  2022-01-01 08:30:45                      NaT                   NaT\n1  2022-01-02 14:20:30          1 days 05:49:45                   NaT\n2  2022-01-03 20:15:10          1 days 05:54:40       2 days 11:44:25\n3  2022-01-04 12:45:30          0 days 16:30:20       1 days 22:25:00\n```", "```py\ndf['TimeDifference'] = df['Timestamp']. diff(periods=2).fillna(0)\n```", "```py\n             Timestamp TimeDiff2periods_nonulls TimeDifference2periods\n0  2022-01-01 08:30:45                        0                    NaT\n1  2022-01-02 14:20:30                        0                    NaT\n2  2022-01-03 20:15:10          2 days 11:44:25        2 days 11:44:25\n3  2022-01-04 12:45:30          1 days 22:25:00        1 days 22:25:00\n```", "```py\ndf['Timestamp_UTC'] = df['Timestamp'].dt.tz_localize('UTC')\n```", "```py\ndf['Timestamp_NY'] = df['Timestamp_UTC'].dt.tz_convert('America/New_York')\n```", "```py\n             Timestamp             Timestamp_UTC              Timestamp_NY\n0  2022-01-01 08:30:45 2022-01-01 08:30:45+00:00 2022-01-01 03:30:45-05:00\n1  2022-01-02 14:20:30 2022-01-02 14:20:30+00:00 2022-01-02 09:20:30-05:00\n```"]