["```py\n`df_q1 = pd.DataFrame([     [\"AAPL\", 100., 50., 75.],     [\"MSFT\", 80., 42., 62.],     [\"AMZN\", 60., 100., 120.], ], columns=[\"ticker\", \"shares\", \"low\", \"high\"]) df_q1 = df_q1.convert_dtypes(dtype_backend=\"numpy_nullable\") df_q1` \n```", "```py\n `ticker   shares   low   high 0   AAPL     100      50    75 1   MSFT     80       42    62 2   AMZN     60       100   120` \n```", "```py\n`df_q2 = pd.DataFrame([     [\"AAPL\", 80., 70., 80., 77.],     [\"MSFT\", 90., 50., 60., 55.],     [\"IBM\", 100., 60., 70., 64.],     [\"GE\", 42., 30., 50., 44.], ], columns=[\"ticker\", \"shares\", \"low\", \"high\", \"close\"]) df_q2 = df_q2.convert_dtypes(dtype_backend=\"numpy_nullable\") df_q2` \n```", "```py\n `ticker   shares   low   high   close 0   AAPL     80       70    80     77 1   MSFT     90       50    60     55 2   IBM      100      60    70     64 3   GE       42       30    50     44` \n```", "```py\n`pd.concat([df_q1, df_q2])` \n```", "```py\n `ticker   shares   low   high   close 0   AAPL     100      50    75     <NA> 1   MSFT     80       42    62     <NA> 2   AMZN     60       100   120    <NA> 0   AAPL     80       70    80     77 1   MSFT     90       50    60     55 2   IBM      100      60    70     64 3   GE       42       30    50     44` \n```", "```py\n`pd.concat([df_q1, df_q2], ignore_index=True)` \n```", "```py\n `ticker   shares   low   high   close 0   AAPL     100      50    75     <NA> 1   MSFT     80       42    62     <NA> 2   AMZN     60       100   120    <NA> 3   AAPL     80       70    80     77 4   MSFT     90       50    60     55 5   IBM      100      60    70     64 6   GE       42       30    50     44` \n```", "```py\n`pd.concat([df_q1, df_q2], keys=[\"q1\", \"q2\"])` \n```", "```py\n `ticker   shares   low   high   close q1   0   AAPL     100      50    75     <NA>      1   MSFT     80       42    62     <NA>      2   AMZN     60       100   120    <NA> q2   0   AAPL     80       70    80     77      1   MSFT     90       50    60     55      2   IBM      100      60    70     64      3   GE       42       30    50     44` \n```", "```py\n`pd.concat([df_q1, df_q2], keys=[\"q1\", \"q2\"], axis=1)` \n```", "```py\n `q1                      …   q2     ticker   shares   low   …   low   high   close 0   AAPL     100      50    …   70    80     77 1   MSFT     80       42    …   50    60     55 2   AMZN     60       100   …   60    70     64 3   <NA>     <NA>     <NA>  …   30    50     44 4 rows × 9 columns` \n```", "```py\n`pd.concat([     df_q1.set_index(\"ticker\"),     df_q2.set_index(\"ticker\"), ], keys=[\"q1\", \"q2\"], axis=1)` \n```", "```py\n `q1                   …   q2         shares  low   high   …   low   high   close ticker AAPL    100     50    75     …   70    80     77 MSFT    80      42    62     …   50    60     55 AMZN    60      100   120    …   <NA>  <NA>   <NA> IBM     <NA>    <NA>  <NA>   …   60    70     64 GE      <NA>    <NA>  <NA>   …   30    50     44 5 rows × 7 columns` \n```", "```py\n`pd.concat([     df_q1.set_index(\"ticker\"),     df_q2.set_index(\"ticker\"), ], keys=[\"q1\", \"q2\"], axis=1, join=\"inner\")` \n```", "```py\n `q1                    …   q2         shares   low   high   …   low   high   close ticker AAPL    100      50    75     …   70    80     77 MSFT    80       42    62     …   50    60     55 2 rows × 7 columns` \n```", "```py\n`%%time concatenated_dfs = df_q1 for i in range(1000):     concatenated_dfs = pd.concat([concatenated_dfs, df_q1]) print(f\"Final pd.DataFrame shape is {concatenated_dfs.shape}\")` \n```", "```py\n`Final pd.DataFrame shape is (3003, 4) CPU times: user 267 ms, sys: 0 ns, total: 267 ms Wall time: 287 ms` \n```", "```py\n`%%time df = df_q1 accumulated = [df_q1] for i in range(1000):     accumulated.append(df_q1) concatenated_dfs = pd.concat(accumulated) print(f\"Final pd.DataFrame shape is {concatenated_dfs.shape}\")` \n```", "```py\n`Final pd.DataFrame shape is (3003, 4) CPU times: user 28.4 ms, sys: 0 ns, total: 28.4 ms Wall time: 31 ms` \n```", "```py\n`df_q1 = pd.DataFrame([     [\"AAPL\", 100., 50., 75.],     [\"MSFT\", 80., 42., 62.],     [\"AMZN\", 60., 100., 120.], ], columns=[\"ticker\", \"shares\", \"low\", \"high\"]) df_q1 = df_q1.convert_dtypes(dtype_backend=\"numpy_nullable\") df_q1` \n```", "```py\n `ticker   shares   low   high 0   AAPL     100      50    75 1   MSFT     80       42    62 2   AMZN     60       100   120` \n```", "```py\n`df_q2 = pd.DataFrame([     [\"AAPL\", 80., 70., 80., 77.],     [\"MSFT\", 90., 50., 60., 55.],     [\"IBM\", 100., 60., 70., 64.],     [\"GE\", 42., 30., 50., 44.], ], columns=[\"ticker\", \"shares\", \"low\", \"high\", \"close\"]) df_q2 = df_q2.convert_dtypes(dtype_backend=\"numpy_nullable\") df_q2` \n```", "```py\n `ticker   shares   low   high   close 0   AAPL     80       70    80     77 1   MSFT     90       50    60     55 2   IBM      100      60    70     64 3   GE       42       30    50     44` \n```", "```py\n`pd.concat([     df_q1.set_index(\"ticker\"),     df_q2.set_index(\"ticker\"), ], keys=[\"q1\", \"q2\"], axis=1)` \n```", "```py\n `q1                    …   q2          shares   low   high   …   low   high   close ticker AAPL     100      50    75     …   70    80     77 MSFT     80       42    62     …   50    60     55 AMZN     60       100   120    …   <NA>  <NA>   <NA> IBM      <NA>     <NA>  <NA>   …   60    70     64 GE       <NA>     <NA>  <NA>   …   30    50     44 5 rows × 7 columns` \n```", "```py\n`pd.merge(df_q1, df_q2, on=[\"ticker\"])` \n```", "```py\n `ticker   shares_x   low_x   …   low_y   high_y   close 0   AAPL     100        50      …   70      80       77 1   MSFT     80         42      …   50      60       55 2 rows × 8 columns` \n```", "```py\n`pd.merge(df_q1, df_q2, on=[\"ticker\"], how=\"outer\")` \n```", "```py\n `ticker   shares_x   low_x   …   low_y   high_y   close 0   AAPL     100        50      …   70      80       77 1   AMZN     60         100     …   <NA>    <NA>     <NA> 2   GE       <NA>       <NA>    …   30      50       44 3   IBM      <NA>       <NA>    …   60      70       64 4   MSFT     80         42      …   50      60       55 5 rows × 8 columns` \n```", "```py\n`pd.merge(df_q1, df_q2, on=[\"ticker\"], how=\"left\")` \n```", "```py\n `ticker   shares_x   low_x   …   low_y   high_y   close 0   AAPL     100        50      …   70      80       77 1   MSFT     80         42      …   50      60       55 2   AMZN     60         100     …   <NA>    <NA>     <NA> 3 rows × 8 columns` \n```", "```py\n`pd.merge(df_q1, df_q2, on=[\"ticker\"], how=\"right\")` \n```", "```py\n `ticker   shares_x   low_x   …   low_y   high_y   close 0   AAPL     100        50      …   70      80       77 1   MSFT     80         42      …   50      60       55 2   IBM      <NA>       <NA>    …   60      70       64 3   GE       <NA>       <NA>    …   30      50       44 4 rows × 8 columns` \n```", "```py\n`pd.merge(df_q1, df_q2, on=[\"ticker\"], how=\"outer\", indicator=True)` \n```", "```py\n `ticker   shares_x   low_x   …   high_y   close   _merge 0   AAPL     100        50      …   80       77      both 1   AMZN     60         100     …   <NA>     <NA>    left_only 2   GE       <NA>       <NA>    …   50       44      right_only 3   IBM      <NA>       <NA>    …   70       64      right_only 4   MSFT     80         42      …   60       55      both 5 rows × 9 columns` \n```", "```py\n`pd.merge(     df_q1,     df_q2,     on=[\"ticker\"],     how=\"outer\",     suffixes=(\"_q1\", \"_q2\"), )` \n```", "```py\n `ticker   shares_q1   low_q1   …   low_q2   high_q2   close 0   AAPL     100         50       …   70       80        77 1   AMZN     60          100      …   <NA>     <NA>      <NA> 2   GE       <NA>        <NA>     …   30       50        44 3   IBM      <NA>        <NA>     …   60       70        64 4   MSFT     80          42       …   50       60        55 5 rows × 8 columns` \n```", "```py\n`pd.merge(     df_q1[[\"ticker\"]].assign(only_in_left=42),     df_q2[[\"ticker\"]].assign(only_in_right=555),     on=[\"ticker\"],     how=\"outer\",     suffixes=(\"_q1\", \"_q2\"), )` \n```", "```py\n `ticker   only_in_left   only_in_right 0   AAPL     42.0           555.0 1   AMZN     42.0           NaN 2   GE       NaN            555.0 3   IBM      NaN            555.0 4   MSFT     42.0           555.0` \n```", "```py\n`df_q2 = df_q2.rename(columns={\"ticker\": \"SYMBOL\"}) df_q2` \n```", "```py\n `SYMBOL   shares   low   high   close 0   AAPL     80       70    80     77 1   MSFT     90       50    60     55 2   IBM      100      60    70     64 3   GE       42       30    50     44` \n```", "```py\n`pd.merge(     df_q1,     df_q2,     left_on=[\"ticker\"],     right_on=[\"SYMBOL\"],     how=\"outer\",     suffixes=(\"_q1\", \"_q2\"), )` \n```", "```py\n `ticker   shares_q1   low_q1   …   low_q2   high_q2   close 0   AAPL     100         50       …   70       80        77 1   AMZN     60          100      …   <NA>     <NA>      <NA> 2   <NA>     <NA>        <NA>     …   30       50        44 3   <NA>     <NA>        <NA>     …   60       70        64 4   MSFT     80          42       …   50       60        55 5 rows × 9 columns` \n```", "```py\n`lows = pd.DataFrame([     [\"AAPL\", \"Q1\", 50.],     [\"MSFT\", \"Q1\", 42.],     [\"AMZN\", \"Q1\", 100.],     [\"AAPL\", \"Q2\", 70.],     [\"MSFT\", \"Q2\", 50.],     [\"IBM\", \"Q2\", 60.],     [\"GE\", \"Q2\", 30.], ], columns=[\"ticker\", \"quarter\", \"low\"]) lows = lows.convert_dtypes(dtype_backend=\"numpy_nullable\") lows` \n```", "```py\n `ticker   quarter   low 0   AAPL     Q1        50 1   MSFT     Q1        42 2   AMZN     Q1        100 3   AAPL     Q2        70 4   MSFT     Q2        50 5   IBM      Q2        60 6   GE       Q2        30` \n```", "```py\n`highs = pd.DataFrame([     [\"AAPL\", \"Q1\", 75.],     [\"MSFT\", \"Q1\", 62.],     [\"AMZN\", \"Q1\", 120.],     [\"AAPL\", \"Q2\", 80.],     [\"MSFT\", \"Q2\", 60.],     [\"IBM\", \"Q2\", 70.],     [\"GE\", \"Q2\", 50.], ], columns=[\"SYMBOL\", \"QTR\", \"high\"]) highs = highs.convert_dtypes(dtype_backend=\"numpy_nullable\") highs` \n```", "```py\n `SYMBOL   QTR   high 0   AAPL     Q1    75 1   MSFT     Q1    62 2   AMZN     Q1    120 3   AAPL     Q2    80 4   MSFT     Q2    60 5   IBM      Q2    70 6   GE       Q2    50` \n```", "```py\n`pd.merge(     lows,     highs,     left_on=[\"ticker\", \"quarter\"],     right_on=[\"SYMBOL\", \"QTR\"], )` \n```", "```py\n `ticker   quarter   low   SYMBOL   QTR   high 0   AAPL     Q1        50    AAPL     Q1    75 1   MSFT     Q1        42    MSFT     Q1    62 2   AMZN     Q1        100   AMZN     Q1    120 3   AAPL     Q2        70    AAPL     Q2    80 4   MSFT     Q2        50    MSFT     Q2    60 5   IBM      Q2        60    IBM      Q2    70 6   GE       Q2        30    GE       Q2    50` \n```", "```py\n`sales = pd.DataFrame([     [\"Jan\", \"John\", 10],     [\"Feb\", \"John\", 20],     [\"Mar\", \"John\", 30], ], columns=[\"month\", \"salesperson\", \"sales\"]) sales = sales.convert_dtypes(dtype_backend=\"numpy_nullable\") sales` \n```", "```py\n `month   salesperson   sales 0   Jan     John          10 1   Feb     John          20 2   Mar     John          30` \n```", "```py\n`regions = pd.DataFrame([     [\"John\", \"Northeast\"],     [\"Jane\", \"Southwest\"], ], columns=[\"salesperson\", \"region\"]) regions = regions.convert_dtypes(dtype_backend=\"numpy_nullable\") regions` \n```", "```py\n `salesperson   region 0   John          Northeast 1   Jane          Southwest` \n```", "```py\n`pd.merge(sales, regions, on=[\"salesperson\"])` \n```", "```py\n `month   salesperson   sales   region 0   Jan     John          10      Northeast 1   Feb     John          20      Northeast 2   Mar     John          30      Northeast` \n```", "```py\n`pd.merge(sales, regions, on=[\"salesperson\"])[\"sales\"].sum()` \n```", "```py\n`60` \n```", "```py\n`regions_orig = regions regions = pd.DataFrame([     [\"John\", \"Smith\", \"Northeast\"],     [\"Jane\", \"Doe\", \"Southwest\"],     [\"John\", \"Newhire\", \"Southeast\"], ], columns=[\"salesperson\", \"last_name\", \"region\"]) regions = regions.convert_dtypes(dtype_backend=\"numpy_nullable\") regions` \n```", "```py\n `salesperson   last_name   region 0   John          Smith       Northeast 1   Jane          Doe         Southwest 2   John          Newhire     Southeast` \n```", "```py\n`pd.merge(sales, regions, on=[\"salesperson\"])` \n```", "```py\n `month   salesperson   sales   last_name   region 0   Jan     John          10      Smith       Northeast 1   Jan     John          10      Newhire     Southeast 2   Feb     John          20      Smith       Northeast 3   Feb     John          20      Newhire     Southeast 4   Mar     John          30      Smith       Northeast 5   Mar     John          30      Newhire     Southeast` \n```", "```py\n`pd.merge(sales, regions, on=[\"salesperson\"])[\"sales\"].sum()` \n```", "```py\n`120` \n```", "```py\n`pd.merge(sales, regions_orig, on=[\"salesperson\"], validate=\"many_to_one\")` \n```", "```py\n `month   salesperson   sales   region 0   Jan     John          10      Northeast 1   Feb     John          20      Northeast 2   Mar     John          30      Northeast` \n```", "```py\n`pd.merge(sales, regions, on=[\"salesperson\"], validate=\"many_to_one\")` \n```", "```py\n`MergeError: Merge keys are not unique in right dataset; not a many-to-one merge` \n```", "```py\n`sales = pd.DataFrame(     [[1000], [2000], [4000]],     columns=[\"sales\"],     index=pd.Index([42, 555, 9000], name=\"salesperson_id\") ) sales = sales.convert_dtypes(dtype_backend=\"numpy_nullable\") sales` \n```", "```py\n `sales salesperson_id 42      1000 555     2000 9000    4000` \n```", "```py\n`salesperson = pd.DataFrame([     [\"John\", \"Smith\"],     [\"Jane\", \"Doe\"], ], columns=[\"first_name\", \"last_name\"], index=pd.Index(     [555, 42], name=\"salesperson_id\" )) salesperson = salesperson.convert_dtypes(dtype_backend=\"numpy_nullable\") salesperson` \n```", "```py\n `first_name   last_name salesperson_id 555     John         Smith 42      Jane         Doe` \n```", "```py\n`pd.merge(sales, salesperson, left_index=True, right_index=True, how=\"left\")` \n```", "```py\n `sales   first_name   last_name salesperson_id 42      1000    Jane         Doe 555     2000    John         Smith 9000    4000    <NA>         <NA>` \n```", "```py\n`sales.join(salesperson)` \n```", "```py\n `sales   first_name   last_name salesperson_id 42      1000    Jane         Doe 555     2000    John         Smith 9000    4000    <NA>         <NA>` \n```", "```py\n`sales.join(salesperson, how=\"inner\")` \n```", "```py\n `sales   first_name   last_name salesperson_id 42      1000    Jane         Doe 555     2000    John         Smith` \n```", "```py\n`df = pd.DataFrame([     [12, 10, 40],     [9, 7, 12],     [0, 14, 190] ], columns=pd.Index([\"Apple\", \"Orange\", \"Banana\"], name=\"fruit\"), index=pd.Index(     [\"Texas\", \"Arizona\", \"Florida\"], name=\"state\")) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n`fruit   Apple   Orange  Banana state Texas   12      10      40 Arizona 9       7       12 Florida 0       14      190` \n```", "```py\n`df.stack()` \n```", "```py\n`state     fruit Texas     Apple      12          Orange      10          Banana      40 Arizona   Apple       9          Orange       7          Banana      12 Florida   Apple       0          Orange      14          Banana     190 dtype: Int64` \n```", "```py\n`df.stack().reset_index(name=\"number_grown\")` \n```", "```py\n `state     fruit    number_grown 0   Texas     Apple    12 1   Texas     Orange   10 2   Texas     Banana   40 3   Arizona   Apple    9 4   Arizona   Orange   7 5   Arizona   Banana   12 6   Florida   Apple    0 7   Florida   Orange   14 8   Florida   Banana   190` \n```", "```py\n`stacked = df.stack() stacked` \n```", "```py\n`state    fruit Texas    Apple      12         Orange      10         Banana      40 Arizona  Apple       9         Orange       7         Banana      12 Florida  Apple       0         Orange      14         Banana     190 dtype: Int64` \n```", "```py\n`stacked.unstack()` \n```", "```py\n`fruit   Apple   Orange   Banana state Texas   12      10       40 Arizona 9       7        12 Florida 0       14       190` \n```", "```py\n`stacked.unstack(level=0)` \n```", "```py\n`state   Texas   Arizona   Florida fruit Apple   12      9         0 Orange  10      7         14 Banana  40      12        190` \n```", "```py\n`stacked.unstack(level=\"state\")` \n```", "```py\n`state   Texas   Arizona   Florida fruit Apple   12      9         0 Orange  10      7         14 Banana  40      12        190` \n```", "```py\n`df = pd.DataFrame([     [\"Texas\", 12, 10, 40],     [\"Arizona\", 9, 7, 12],     [\"Florida\", 0, 14, 190] ], columns=[\"state\", \"apple\", \"orange\", \"banana\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `state    apple    orange    banana 0   Texas    12       10        40 1   Arizona  9        7         12 2   Florida  0        14        190` \n```", "```py\n`df.set_index(\"state\").stack().reset_index()` \n```", "```py\n `state     level_1   0 0   Texas     apple     12 1   Texas     orange    10 2   Texas     banana    40 3   Arizona   apple     9 4   Arizona   orange    7 5   Arizona   banana    12 6   Florida   apple     0 7   Florida   orange    14 8   Florida   banana    190` \n```", "```py\n`df.set_index(\"state\").stack().reset_index().rename(columns={     \"level_1\": \"fruit\",     0: \"number_grown\", })` \n```", "```py\n `state    fruit    number_grown 0   Texas    apple    12 1   Texas    orange   10 2   Texas    banana   40 3   Arizona  apple    9 4   Arizona  orange   7 5   Arizona  banana   12 6   Florida  apple    0 7   Florida  orange   14 8   Florida  banana   190` \n```", "```py\n`df.melt(id_vars=[\"state\"])` \n```", "```py\n `state     variable  value 0   Texas     apple     12 1   Arizona   apple     9 2   Florida   apple     0 3   Texas     orange    10 4   Arizona   orange    7 5   Florida   orange    14 6   Texas     banana    40 7   Arizona   banana    12 8   Florida   banana    190` \n```", "```py\n`df.melt(     id_vars=[\"state\"],     var_name=\"fruit\",     value_name=\"number_grown\", )` \n```", "```py\n `state     fruit   number_grown 0   Texas     apple   12 1   Arizona   apple   9 2   Florida   apple   0 3   Texas     orange  10 4   Arizona   orange  7 5   Florida   orange  14 6   Texas     banana  40 7   Arizona   banana  12 8   Florida   banana  190` \n```", "```py\n`df.melt(     id_vars=[\"state\"],     var_name=\"fruit\",     value_name=\"number_grown\",     value_vars=[\"apple\", \"orange\"], )` \n```", "```py\n `state     fruit     number_grown 0   Texas     apple     12 1   Arizona   apple     9 2   Florida   apple     0 3   Texas     orange    10 4   Arizona   orange    7 5   Florida   orange    14` \n```", "```py\n`df = pd.DataFrame([     [\"Widget 1\", 1, 2, 4, 8],     [\"Widget 2\", 16, 32, 64, 128], ], columns=[\"widget\", \"quarter_1\", \"quarter_2\", \"quarter_3\", \"quarter_4\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `widget     quarter_1   quarter_2   quarter_3   quarter_4 0   Widget 1   1           2           4           8 1   Widget 2   16          32          64          128` \n```", "```py\n`df.set_index(\"widget\").stack().reset_index().rename(columns={     \"level_1\": \"quarter\",     0: \"quantity\", })` \n```", "```py\n `widget     quarter     quantity 0   Widget 1   quarter_1   1 1   Widget 1   quarter_2   2 2   Widget 1   quarter_3   4 3   Widget 1   quarter_4   8 4   Widget 2   quarter_1   16 5   Widget 2   quarter_2   32 6   Widget 2   quarter_3   64 7   Widget 2   quarter_4   128` \n```", "```py\n`df.melt(     id_vars=[\"widget\"],     var_name=\"quarter\",     value_name=\"quantity\", )` \n```", "```py\n `widget     quarter     quantity 0   Widget 1   quarter_1   1 1   Widget 2   quarter_1   16 2   Widget 1   quarter_2   2 3   Widget 2   quarter_2   32 4   Widget 1   quarter_3   4 5   Widget 2   quarter_3   64 6   Widget 1   quarter_4   8 7   Widget 2   quarter_4   128` \n```", "```py\n`pd.wide_to_long(     df,     i=[\"widget\"],     stubnames=\"quarter_\",     j=\"quarter\" ).reset_index().rename(columns={\"quarter_\": \"quantity\"})` \n```", "```py\n `widget      quarter   quantity 0   Widget 1    1         1 1   Widget 2    1         16 2   Widget 1    2         2 3   Widget 2    2         32 4   Widget 1    3         4 5   Widget 2    3         64 6   Widget 1    4         8 7   Widget 2    4         128` \n```", "```py\n`df = pd.DataFrame([     [\"Texas\", \"apple\", 12, 8],     [\"Arizona\", \"apple\", 9, 10],     [\"Florida\", \"apple\", 0, 6],     [\"Texas\", \"orange\", 10, 4],     [\"Arizona\", \"orange\", 7, 2],     [\"Florida\", \"orange\", 14, 3],     [\"Texas\", \"banana\", 40, 28],     [\"Arizona\", \"banana\", 12, 17],     [\"Florida\", \"banana\", 190, 42], ], columns=[\"state\", \"fruit\", \"number_grown\", \"number_eaten\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `state     fruit     number_grown     number_eaten 0   Texas     apple     12               8 1   Arizona   apple     9                10 2   Florida   apple     0                6 3   Texas     orange    10               4 4   Arizona   orange    7                2 5   Florida   orange    14               3 6   Texas     banana    40               28 7   Arizona   banana    12               17 8   Florida   banana    190              42` \n```", "```py\n`df.set_index([\"state\", \"fruit\"]).unstack()` \n```", "```py\n `number_grown                    number_eaten fruit   apple   banana  orange  apple   banana  orange state Arizona 9       12      7       10      17      2 Florida 0       190     14      6       42      3 Texas   12      40      10      8       28      4` \n```", "```py\n`df.pivot(index=[\"state\"], columns=[\"fruit\"])` \n```", "```py\n `number_grown                    number_eaten fruit   apple   banana  orange  apple   banana  orange state Arizona 9       12      7       10      17      2 Florida 0       190     14      6       42      3 Texas   12      40      10      8       28      4` \n```", "```py\n`df.pivot(       index=[\"state\"],       columns=[\"fruit\"],       values=[\"number_grown\"],   )` \n```", "```py\n `number_grown fruit   apple   banana   orange state Arizona 9       12       7 Florida 0       190      14 Texas   12      40       10` \n```", "```py\n`wide_df = df.pivot(     index=[\"state\"],     columns=[\"fruit\"],     values=[\"number_grown\"], ).droplevel(level=0, axis=1) wide_df` \n```", "```py\n`fruit   apple   banana   orange state Arizona 9       12       7 Florida 0       190      14 Texas   12      40       10` \n```", "```py\n`df = pd.DataFrame([     [\"Texas\", \"apple\", 2023, 10, 6],     [\"Texas\", \"apple\", 2024, 2, 8],     [\"Arizona\", \"apple\", 2023, 3, 7],     [\"Arizona\", \"apple\", 2024, 6, 3],     [\"Texas\", \"orange\", 2023, 5, 2],     [\"Texas\", \"orange\", 2024, 5, 2],     [\"Arizona\", \"orange\", 2023, 7, 2], ], columns=[\"state\", \"fruit\", \"year\", \"number_grown\", \"number_eaten\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `state      fruit    year    number_grown   number_eaten 0   Texas      apple    2023    10             6 1   Texas      apple    2024    2              8 2   Arizona    apple    2023    3              7 3   Arizona    apple    2024    6              3 4   Texas      orange   2023    5              2 5   Texas      orange   2024    5              2 6   Arizona    orange   2023    7              2` \n```", "```py\n`df.pivot(     index=[\"state\", \"year\"],     columns=[\"fruit\"],     values=[\"number_grown\", \"number_eaten\"] )` \n```", "```py\n `number_grown            number_eaten         fruit   apple   orange  apple   orange state   year Arizona 2023    3       7       7       2         2024    6       NaN     3       NaN Texas   2023    10      5       6       2         2024    2       5       8       2` \n```", "```py\n`df.pivot(     index=[\"state\"],     columns=[\"fruit\"],     values=[\"number_grown\", \"number_eaten\"] )` \n```", "```py\n`ValueError: Index contains duplicate entries, cannot reshape` \n```", "```py\n`pd.pivot_table(     df,     index=[\"state\"],     columns=[\"fruit\"],     values=[\"number_grown\", \"number_eaten\"] )` \n```", "```py\n `number_eaten            number_grown fruit   apple   orange  apple   orange state Arizona 5.0     2.0     4.5     7.0 Texas   7.0     2.0     6.0     5.0` \n```", "```py\n`pd.pivot_table(     df,     index=[\"state\"],     columns=[\"fruit\"],     values=[\"number_grown\", \"number_eaten\"],     aggfunc=\"sum\" )` \n```", "```py\n `number_eaten            number_grown fruit   apple   orange  apple   orange state Arizona 10      2       9       7 Texas   14      4       12      10` \n```", "```py\n`pd.pivot_table(     df,     index=[\"state\"],     columns=[\"fruit\"],     values=[\"number_grown\", \"number_eaten\"],     aggfunc={         \"number_eaten\": [\"min\", \"max\"],         \"number_grown\": [\"sum\", \"mean\"],     }, )` \n```", "```py\n `number_eaten            …       number_grown         max             min     …       mean    sum fruit   apple   orange  apple   …       orange  apple   orange state Arizona 7       2       3       …       7.0     9       7 Texas   8       2       6       …       5.0     12      10 2 rows × 8 columns` \n```", "```py\n`[     {         \"employee_id\": 1,         \"first_name\": \"John\",         \"last_name\": \"Smith\",         \"direct_reports\": [2, 3]     },     {         \"employee_id\": 2,         \"first_name\": \"Jane\",         \"last_name\": \"Doe\",         \"direct_reports\": []     },     {         \"employee_id\": 3,         \"first_name\": \"Joe\",         \"last_name\": \"Schmoe\",         \"direct_reports\": []     } ]` \n```", "```py\n`df = pd.DataFrame(     [         {             \"employee_id\": 1,             \"first_name\": \"John\",             \"last_name\": \"Smith\",             \"direct_reports\": [2, 3]         },         {             \"employee_id\": 2,             \"first_name\": \"Jane\",             \"last_name\": \"Doe\",             \"direct_reports\": []         },         {             \"employee_id\": 3,             \"first_name\": \"Joe\",             \"last_name\": \"Schmoe\",             \"direct_reports\": []         }     ] ) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `employee_id   first_name   last_name   direct_reports 0   1             John         Smith       [2, 3] 1   2             Jane         Doe         [] 2   3             Joe          Schmoe      []` \n```", "```py\n`df.explode(\"direct_reports\").convert_dtypes(dtype_backend=\"numpy_nullable\")` \n```", "```py\n `employee_id   first_name   last_name   direct_reports 0   1             John         Smith       2 0   1             John         Smith       3 1   2             Jane         Doe         <NA> 2   3             Joe          Schmoe      <NA>` \n```", "```py\n`exploded = df.explode(\"direct_reports\").convert_dtypes(     dtype_backend=\"numpy_nullable\" ) pd.merge(     exploded,     df.drop(columns=[\"direct_reports\"]),     how=\"left\",     left_on=[\"direct_reports\"],     right_on=[\"employee_id\"],     suffixes=(\"\", \"_direct_report\"), )` \n```", "```py\n `employee_id  first_name  last_name  …  employee_id_direct_report  first_name_direct_report  last_name_direct_report 0   1        John     Smith    …  2       Jane           Doe 1   1        John     Smith    …  3       Joe            Schmoe 2   2        Jane     Doe      …  <NA>    <NA>           <NA> 3   3        Joe      Schmoe   …  <NA>    <NA>           <NA> 4 rows × 7 columns` \n```", "```py\n`dtype = pd.ArrowDtype(pa.struct([     (\"int_col\", pa.int64()),     (\"str_col\", pa.string()),     (\"float_col\", pa.float64()), ])) ser = pd.Series([     {\"int_col\": 42, \"str_col\": \"Hello, \", \"float_col\": 3.14159},     {\"int_col\": 555, \"str_col\": \"world!\", \"float_col\": 3.14159}, ], dtype=dtype) ser` \n```", "```py\n`0    {'int_col': 42, 'str_col': 'Hello, ', 'float_c... 1    {'int_col': 555, 'str_col': 'world!', 'float_c... dtype: struct<int_col: int64, str_col: string, float_col: double>[pyarrow]` \n```", "```py\n`ser.struct.explode()` \n```", "```py\n `int_col   str_col   float_col 0   42        Hello,    3.14159 1   555       world!    3.14159` \n```", "```py\n`df = pd.DataFrame([     [1, 2, 3],     [4, 5, 6], ], columns=list(\"xyz\"), index=list(\"ab\")) df` \n```", "```py\n `x   y   z a   1   2   3 b   4   5   6` \n```", "```py\n`df.T` \n```", "```py\n `a   b x   1   4 y   2   5 z   3   6` \n```", "```py\n`df.sum()` \n```", "```py\n`x    5 y    7 z    9 dtype: int64` \n```", "```py\n`df.sum(axis=1)` \n```", "```py\n`a     6 b    15 dtype: int64` \n```", "```py\n`np.random.seed(42) df = pd.DataFrame(     np.random.randint(10, size=(2, 10_000)),     index=list(\"ab\"), ) df` \n```", "```py\n `0   1   2   …   9997   9998   9999 a   6   3   7   …   2      9      4 b   2   4   2   …   1      5      5 2 rows × 10,000 columns` \n```", "```py\n`df.sum(axis=1)` \n```", "```py\n`a    44972 b    45097 dtype: int64` \n```", "```py\n`df.T.sum()` \n```", "```py\n`a    44972 b    45097 dtype: int64` \n```", "```py\n`import timeit def baseline_sum():    for _ in range(100):       df.sum(axis=1) timeit.timeit(baseline_sum, number=100)` \n```", "```py\n`4.366703154002607` \n```", "```py\n`def transposed_sum():    transposed = df.T    for _ in range(100):       transposed.sum() timeit.timeit(transposed_sum, number=100)` \n```", "```py\n`0.7069798299999093` \n```"]