["```py\n`python -m pip install matplotlib pyqt5` \n```", "```py\n`import matplotlib.pyplot as plt plt.ion()` \n```", "```py\n`ser = pd.Series(     (x ** 2 for x in range(7)),     name=\"book_sales\",     index=(f\"Day {x + 1}\" for x in range(7)),     dtype=pd.Int64Dtype(), ) ser` \n```", "```py\n`Day 1     0 Day 2     1 Day 3     4 Day 4     9 Day 5    16 Day 6    25 Day 7    36 Name: book_sales, dtype: Int64` \n```", "```py\n`ser.plot()` \n```", "```py\n`ser.plot(kind=\"bar\")` \n```", "```py\n`ser.plot(kind=\"barh\")` \n```", "```py\n`ser.plot(kind=\"area\")` \n```", "```py\n`ser.plot(kind=\"pie\")` \n```", "```py\n`df = pd.DataFrame({     \"book_sales\": (x ** 2 for x in range(7)),     \"book_returns\": [3, 2, 1, 0, 1, 2, 3], }, index=(f\"Day {x + 1}\" for x in range(7))) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `book_sales   book_returns Day 1   0            3 Day 2   1            2 Day 3   4            1 Day 4   9            0 Day 5   16           1 Day 6   25           2 Day 7   36           3` \n```", "```py\n`df.plot()` \n```", "```py\n`df.plot(kind=\"bar\")` \n```", "```py\n`df.plot(kind=\"bar\", stacked=True)` \n```", "```py\n`df.plot(kind=\"barh\")` \n```", "```py\n`df.plot(kind=\"barh\", stacked=True)` \n```", "```py\n`df.plot(kind=\"area\")` \n```", "```py\n`df.plot(kind=\"area\", stacked=False, alpha=0.5)` \n```", "```py\n`ser.plot(     kind=\"bar\",     title=\"Book Sales by Day\", )` \n```", "```py\n`ser.plot(     kind=\"bar\",     title=\"Book Sales by Day\",     color=\"seagreen\", )` \n```", "```py\n`df.plot(     kind=\"bar\",     title=\"Book Metrics\",     color={         \"book_sales\": \"slateblue\",         \"book_returns\": \"#7D5260\",     } )` \n```", "```py\n`ser.plot(     kind=\"bar\",     title=\"Book Sales by Day\",     color=\"teal\",     grid=False, )` \n```", "```py\n`ser.plot(     kind=\"bar\",     title=\"Book Sales by Day\",     color=\"darkgoldenrod\",     grid=False,     xlabel=\"Day Number\",     ylabel=\"Book Sales\", )` \n```", "```py\n`df.plot(     kind=\"bar\",     title=\"Book Performance\",     grid=False,     subplots=True, )` \n```", "```py\n`df.plot(     kind=\"bar\",     title=\"Book Performance\",     grid=False,     subplots=True,     legend=False, )` \n```", "```py\n`df.plot(     kind=\"bar\",     title=\"Book Performance\",     grid=False,     subplots=True,     legend=False,     sharey=True, )` \n```", "```py\n`df.plot(     kind=\"barh\",     y=[\"book_returns\"],     title=\"Book Returns\",     legend=False,     grid=False,     color=\"seagreen\", )` \n```", "```py\n`np.random.seed(42) ser = pd.Series(     np.random.default_rng().normal(size=10_000),     dtype=pd.Float64Dtype(), ) ser` \n```", "```py\n`0       0.049174 1      -1.577584 2      -0.597247 3        -0.0198 4       0.938997          ...    9995   -0.141285 9996    1.363863 9997   -0.738816 9998   -0.373873 9999   -0.070183 Length: 10000, dtype: Float64` \n```", "```py\n`ser.plot(kind=\"hist\")` \n```", "```py\n`ser.plot(kind=\"hist\", bins=2)` \n```", "```py\n`ser.plot(kind=\"hist\", bins=100)` \n```", "```py\n`np.random.seed(42) df = pd.DataFrame({     \"normal\": np.random.default_rng().normal(size=10_000),     \"triangular\": np.random.default_rng().triangular(-2, 0, 2, size=10_000), }) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df.head()` \n```", "```py\n `normal     triangular 0  -0.265525   -0.577042 1   0.327898   -0.391538 2  -1.356997   -0.110605 3   0.004558    0.71449 4   1.03956     0.676207` \n```", "```py\n`df.plot(kind=\"hist\")` \n```", "```py\n`df.plot(kind=\"hist\", alpha=0.5)` \n```", "```py\n`df.plot(kind=\"hist\", subplots=True)` \n```", "```py\n`df.plot(kind=\"hist\", alpha=0.5, bins=100)` \n```", "```py\n`python -m pip install scipy` \n```", "```py\n`ser.plot(kind=\"kde\")` \n```", "```py\n`df.plot(kind=\"kde\")` \n```", "```py\n`ser = pd.Series(     (x ** 2 for x in range(7)),     name=\"book_sales\",     index=(f\"Day {x + 1}\" for x in range(7)),     dtype=pd.Int64Dtype(), ) fig, axes = plt.subplots(nrows=1, ncols=3) ser.plot(ax=axes[0]) ser.plot(kind=\"bar\", ax=axes[1]) ser.plot(kind=\"pie\", ax=axes[2])` \n```", "```py\n`from matplotlib.gridspec import GridSpec   fig = plt.figure() gs = GridSpec(2, 2, figure=fig) ax0 = fig.add_subplot(gs[0, 0]) ax1 = fig.add_subplot(gs[0, 1]) ax2 = fig.add_subplot(gs[1, :]) ser.plot(ax=ax0) ser.plot(kind=\"bar\", ax=ax1) ser.plot(kind=\"pie\", ax=ax2)` \n```", "```py\n`from matplotlib.gridspec import GridSpec fig = plt.figure() fig.suptitle(\"Book Sales Visualized in Different Ways\") gs = GridSpec(2, 2, figure=fig, hspace=.5) ax0 = fig.add_subplot(gs[0, 0]) ax1 = fig.add_subplot(gs[0, 1]) ax2 = fig.add_subplot(gs[1, :]) ax0 = ser.plot(ax=ax0) ax0.set_title(\"Line chart\") ax1 = ser.plot(kind=\"bar\", ax=ax1) ax1.set_title(\"Bar chart\") ax1.set_xticklabels(ax1.get_xticklabels(), rotation=45) # Remove labels from chart and show in custom legend instead ax2 = ser.plot(kind=\"pie\", ax=ax2, labels=None) ax2.legend(     ser.index,     bbox_to_anchor=(1, -0.2, 0.5, 1),  # put legend to right of chart     prop={\"size\": 6}, # set font size for legend ) ax2.set_title(\"Pie Chart\") ax2.set_ylabel(None)  # remove book_sales label` \n```", "```py\n`df = pd.DataFrame({     \"var_a\": [1, 2, 3, 4, 5],     \"var_b\": [1, 2, 4, 8, 16],     \"var_c\": [500, 200, 600, 100, 400],     \"var_d\": [\"blue\", \"orange\", \"gray\", \"blue\", \"gray\"], }) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `var_a  var_b  var_c  var_d 0   1      1      500    blue 1   2      2      200    orange 2   3      4      600    gray 3   4      8      100    blue 4   5      16     400    gray` \n```", "```py\n`df.plot(     kind=\"scatter\",     x=\"var_a\",     y=\"var_b\",     s=\"var_c\",     c=\"var_d\", )` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     usecols=[\"city08\", \"highway08\", \"VClass\", \"fuelCost08\", \"year\"], ) df.head()` \n```", "```py\n `city08    fuelCost08   highway08    VClass           year 0      19         2,450          25    Two Seaters      1985 1       9         4,700          14    Two Seaters      1985 2      23         1,900          33    Subcompact Cars  1985 3      10         4,700          12    Vans             1985 4      17         3,400          23    Compact Cars     1993` \n```", "```py\n`car_classes = (     \"Subcompact Cars\",     \"Compact Cars\",     \"Midsize Cars\",     \"Large Cars\",     \"Two Seaters\", ) mask = (df[\"year\"] >= 2015) & df[\"VClass\"].isin(car_classes) df = df[mask] df.head()` \n```", "```py\n `city08   fuelCost08   highway08    VClass             year 27058      16        3,400          23    Subcompact Cars    2015 27059      20        2,250          28    Compact Cars       2015 27060      26        1,700          37    Midsize Cars       2015 27061      28        1,600          39    Midsize Cars       2015 27062      25        1,800          35    Midsize Cars       2015` \n```", "```py\n`df.plot(     kind=\"scatter\",     x=\"city08\",     y=\"highway08\", )` \n```", "```py\n`classes_ser = pd.Series(car_classes, dtype=pd.StringDtype()) cat = pd.CategoricalDtype(classes_ser) df[\"VClass\"] = df[\"VClass\"].astype(cat) df.head()` \n```", "```py\n `city08  fuelCost08  highway08  VClass           year 27058  16      3,400       23         Subcompact Cars  2015 27059  20      2,250       28         Compact Cars     2015 27060  26      1,700       37         Midsize Cars     2015 27061  28      1,600       39         Midsize Cars     2015 27062  25      1,800       35         Midsize Cars     2015` \n```", "```py\n`df.plot(     kind=\"scatter\",     x=\"city08\",     y=\"highway08\",     c=\"VClass\", )` \n```", "```py\n`df.plot(     kind=\"scatter\",     x=\"city08\",     y=\"highway08\",     c=\"VClass\",     colormap=\"Dark2\", )` \n```", "```py\n`df.plot(     kind=\"scatter\",     x=\"city08\",     y=\"highway08\",     c=\"VClass\",     colormap=\"Dark2\",     s=\"fuelCost08\", )` \n```", "```py\n`df.assign(     scaled_fuel_cost=lambda x: x[\"fuelCost08\"] / 25, ).plot(     kind=\"scatter\",     x=\"city08\",     y=\"highway08\",     c=\"VClass\",     colormap=\"Dark2\",     s=\"scaled_fuel_cost\",     alpha=0.4, )` \n```", "```py\n`from pandas.plotting import scatter_matrix scatter_matrix(df)` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\", ) df.head()` \n```", "```py\n`/tmp/ipykernel_834707/1427318601.py:1: DtypeWarning: Columns (72,74,75,77) have mixed types. Specify dtype option on import or set low_memory=False.  df = pd.read_csv(     barrels08   bar-relsA08   charge120   …   phevCity   phevHwy   phevComb 0   14.167143   0.0           0.0         …   0          0         0 1   27.046364   0.0           0.0         …   0          0         0 2   11.018889   0.0           0.0         …   0          0         0 3   27.046364   0.0           0.0         …   0          0         0 4   15.658421   0.0           0.0         …   0          0         0 5 rows × 84 columns` \n```", "```py\n`df.iloc[:, [72, 74, 75, 77]]` \n```", "```py\n `rangeA  mfrCode c240Dscr  c240bDscr 0       <NA>    <NA>    <NA>      <NA> 1       <NA>    <NA>    <NA>      <NA> 2       <NA>    <NA>    <NA>      <NA> 3       <NA>    <NA>    <NA>      <NA> 4       <NA>    <NA>    <NA>      <NA> …       …       …       …         … 47,518  <NA>    <NA>    <NA>      <NA> 47,519  <NA>    <NA>    <NA>      <NA> 47,520  <NA>    <NA>    <NA>      <NA> 47,521  <NA>    <NA>    <NA>      <NA> 47,522  <NA>    <NA>    <NA>      <NA> 47,523 rows × 4 columns` \n```", "```py\n`df[\"rangeA\"].value_counts()` \n```", "```py\n`rangeA 290            74 270            58 280            56 310            41 277            38               .. 240/290/290     1 395             1 258             1 256             1 230/350         1 Name: count, Length: 264, dtype: int64` \n```", "```py\n`df[\"rangeA\"].str.isnumeric().idxmax()` \n```", "```py\n`7116` \n```", "```py\n`df.iloc[:, [74, 75, 77]].pipe(pd.isna).idxmin()` \n```", "```py\n`mfrCode      23147 c240Dscr     25661 c240bDscr    25661 dtype: int64` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     dtype={         \"rangeA\": pd.StringDtype(),         \"mfrCode\": pd.StringDtype(),         \"c240Dscr\": pd.StringDtype(),         \"c240bDscr\": pd.StringDtype()     } ) df.head()` \n```", "```py\n `barrels08  bar-relsA08  charge120  …  phevCity  phevHwy  phevComb 0   14.167143  0.0          0.0        …  0         0        0 1   27.046364  0.0          0.0        …  0         0        0 2   11.018889  0.0          0.0        …  0         0        0 3   27.046364  0.0          0.0        …  0         0        0 4   15.658421  0.0          0.0        …  0         0        0 5 rows × 84 columns` \n```", "```py\n`df.select_dtypes(include=[\"string\"]).columns` \n```", "```py\n`Index(['drive', 'eng_dscr', 'fuelType', 'fuelType1', 'make', 'model',       'mpgData', 'trany', 'VClass', 'baseModel', 'guzzler', 'trans_dscr',       'tCharger', 'sCharger', 'atvType', 'fuelType2', 'rangeA', 'evMotor',       'mfrCode', 'c240Dscr', 'c240bDscr', 'createdOn', 'modifiedOn',       'startStop'],      dtype='object')` \n```", "```py\n`df.select_dtypes(include=[\"string\"]).nunique().sort_values()` \n```", "```py\n`sCharger         1 tCharger         1 startStop        2 mpgData          2 guzzler          3 fuelType2        4 c240Dscr         5 c240bDscr        7 drive            7 fuelType1        7 atvType          9 fuelType        15 VClass          34 trany           40 trans_dscr      52 mfrCode         56 make           144 rangeA         245 modifiedOn     298 evMotor        400 createdOn      455 eng_dscr       608 baseModel     1451 model         5064 dtype: int64` \n```", "```py\n`low_card = df.select_dtypes(include=[\"string\"]).nunique().sort_values().iloc[:9].index fig, axes = plt.subplots(nrows=3, ncols=3) for index, column in enumerate(low_card):     row = index % 3     col = index // 3     ax = axes[row][col]     df[column].value_counts().plot(kind=\"bar\", ax=ax) plt.tight_layout()` \n```", "```py\n`/tmp/ipykernel_834707/4000549653.py:10: UserWarning: Tight layout not applied. tight_layout cannot make axes height small enough to accommodate all axes decorations.  plt.tight_layout()` \n```", "```py\n`low_card = df.select_dtypes(include=[\"string\"]).nunique().sort_values().iloc[:9].index fig, axes = plt.subplots(nrows=3, ncols=3) for index, column in enumerate(low_card):     row = index % 3     col = index // 3     ax = axes[row][col]     counts = df[column].value_counts()     counts.set_axis(counts.index.str[:8]).plot(kind=\"bar\", ax=ax)     ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=6) plt.tight_layout()` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     dtype={         \"rangeA\": pd.StringDtype(),         \"mfrCode\": pd.StringDtype(),         \"c240Dscr\": pd.StringDtype(),         \"c240bDscr\": pd.StringDtype()     } ) df.head()` \n```", "```py\n `barrels08  bar-relsA08  charge120  …  phevCity  phevHwy  phevComb 0  14.167143  0.0          0.0        …  0         0        0 1  27.046364  0.0          0.0        …  0         0        0 2  11.018889  0.0          0.0        …  0         0        0 3  27.046364  0.0          0.0        …  0         0        0 4  15.658421  0.0          0.0        …  0         0        0 5 rows × 84 columns` \n```", "```py\n`df.select_dtypes(exclude=[\"string\"]).columns` \n```", "```py\n`Index(['barrels08', 'barrelsA08', 'charge120', 'charge240', 'city08',       'city08U', 'cityA08', 'cityA08U', 'cityCD', 'cityE', 'cityUF', 'co2',       'co2A', 'co2TailpipeAGpm', 'co2TailpipeGpm', 'comb08', 'comb08U',       'combA08', 'combA08U', 'combE', 'combinedCD', 'combinedUF', 'cylinders',       'displ', 'engId', 'feScore', 'fuelCost08', 'fuelCostA08', 'ghgScore',       'ghgScoreA', 'highway08', 'highway08U', 'highwayA08', 'highwayA08U',       'highwayCD', 'highwayE', 'highwayUF', 'hlv', 'hpv', 'id', 'lv2', 'lv4',       'phevBlended', 'pv2', 'pv4', 'range', 'rangeCity', 'rangeCityA',       'rangeHwy', 'rangeHwyA', 'UCity', 'UCityA', 'UHighway', 'UHighwayA',       'year', 'youSaveSpend', 'charge240b', 'phevCity', 'phevHwy',       'phevComb'],      dtype='object')` \n```", "```py\n`df.select_dtypes(     exclude=[\"string\"] ).pipe(pd.isna).sum().sort_values(ascending=False).head()` \n```", "```py\n`cylinders      801 displ          799 barrels08        0 pv4              0 highwayA08U      0 dtype: int64` \n```", "```py\n`df.loc[df[\"cylinders\"].isna(), [\"make\", \"model\"]].value_counts()` \n```", "```py\n`make      model                           Fiat      500e                               8 smart     fortwo electric drive coupe        7 Toyota    RAV4 EV                            7 Nissan    Leaf                               7 Ford      Focus Electric                     7                                            .. Polestar  2 Single Motor (19 Inch Wheels)    1 Ford      Mustang Mach-E RWD LFP             1 Polestar  2 Dual Motor Performance Pack      1           2 Dual Motor Perf Pack             1 Acura     ZDX AWD                            1 Name: count, Length: 450, dtype: int64` \n```", "```py\n`df[\"cylinders\"] = df[\"cylinders\"].fillna(0)` \n```", "```py\n`df.loc[df[\"displ\"].isna(), [\"make\", \"model\"]].value_counts()` \n```", "```py\n`make     model                              Fiat     500e                                  8 smart    fortwo electric drive coupe           7 Toyota   RAV4 EV                               7 Nissan   Leaf                                  7 Ford     Focus Electric                        7                                              .. Porsche  Taycan 4S Performance Battery Plus    1          Taycan GTS ST                         1 Fisker   Ocean Extreme One                     1 Fiat     500e All Season                       1 Acura    ZDX AWD                               1 Name: count, Length: 449, dtype: int64` \n```", "```py\n`df[\"displ\"].nunique()` \n```", "```py\n`66` \n```", "```py\n`df[\"city08\"].plot(kind=\"hist\")` \n```", "```py\n`df[\"city08\"].plot(kind=\"hist\", bins=30)` \n```", "```py\n`fig, axes = plt.subplots(nrows=2, ncols=1) axes[0].set_xlim(0, 40) axes[1].set_xlim(0, 40) axes[0].set_ylabel(\"city\") axes[1].set_ylabel(\"highway\") df[\"city08\"].plot(kind=\"kde\", ax=axes[0]) df[\"highway08\"].plot(kind=\"kde\", ax=axes[1])` \n```", "```py\n`import seaborn as sns sns.set_theme() sns.set_style(\"white\")` \n```", "```py\n`df = pd.DataFrame([     [\"Q1-2024\", \"project_a\", 1],     [\"Q1-2024\", \"project_b\", 1],     [\"Q2-2024\", \"project_a\", 2],     [\"Q2-2024\", \"project_b\", 2],     [\"Q3-2024\", \"project_a\", 4],     [\"Q3-2024\", \"project_b\", 3],     [\"Q4-2024\", \"project_a\", 8],     [\"Q4-2024\", \"project_b\", 4],     [\"Q5-2025\", \"project_a\", 16],     [\"Q5-2025\", \"project_b\", 5], ], columns=[\"quarter\", \"project\", \"github_stars\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `quarter   project     github_stars 0   Q1-2024   project_a   1 1   Q1-2024   project_b   1 2   Q2-2024   project_a   2 3   Q2-2024   project_b   2 4   Q3-2024   project_a   4 5   Q3-2024   project_b   3 6   Q4-2024   project_a   8 7   Q4-2024   project_b   4 8   Q5-2025   project_a   16 9   Q5-2025   project_b   5` \n```", "```py\n`sns.barplot(df, x=\"quarter\", y=\"github_stars\", hue=\"project\")` \n```", "```py\n`sns.lineplot(df, x=\"quarter\", y=\"github_stars\", hue=\"project\")` \n```", "```py\n`df` \n```", "```py\n `quarter   project     github_stars 0   Q1-2024   project_a   1 1   Q1-2024   project_b   1 2   Q2-2024   project_a   2 3   Q2-2024   project_b   2 4   Q3-2024   project_a   4 5   Q3-2024   project_b   3 6   Q4-2024   project_a   8 7   Q4-2024   project_b   4 8   Q5-2025   project_a   16 9   Q5-2025   project_b   5` \n```", "```py\n`df = pd.DataFrame({     \"project_a\": [1, 2, 4, 8, 16],     \"project_b\": [1, 2, 3, 4, 5], }, index=[\"Q1-2024\", \"Q2-2024\", \"Q3-2024\", \"Q4-2024\", \"Q5-2024\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `project_a   project_b Q1-2024   1           1 Q2-2024   2           2 Q3-2024   4           3 Q4-2024   8           4 Q5-2024   16          5` \n```", "```py\n`df = pd.read_csv(     \"data/movie.csv\",     usecols=[\"movie_title\", \"title_year\", \"imdb_score\", \"content_rating\"],     dtype_backend=\"numpy_nullable\", ) df.head()` \n```", "```py\n `movie_title  content_rating  title_year  imdb_score 0   Avatar       PG-13           2009.0      7.9 1   Pirates of the Caribbean: At World's End   PG-13   2007.0   7.1 2   Spectre      PG-13           2015.0      6.8 3   The Dark Knight Rises   PG-13   2012.0   8.5 4   Star Wars: Episode VII – The Force Awakens   <NA>   <NA>   7.1` \n```", "```py\n`df = pd.read_csv(     \"data/movie.csv\",     usecols=[\"movie_title\", \"title_year\", \"imdb_score\", \"content_rating\"],     dtype_backend=\"numpy_nullable\",     dtype={\"title_year\": pd.Int16Dtype()}, ) df.head()` \n```", "```py\n `movie_title   content_rating   title_year   imdb_score 0   Avatar        PG-13            2009         7.9 1   Pirates of the Caribbean: At World's End    PG-13   2007   7.1 2   Spectre       PG-13            2015         6.8 3   The Dark Knight Rises   PG-13  2012         8.5 4   Star Wars: Episode VII - The Force Awakens   <NA>   <NA>   7.1` \n```", "```py\n`df[\"title_year\"].min()` \n```", "```py\n`1916` \n```", "```py\n`df[\"title_year\"].max()` \n```", "```py\n`2016` \n```", "```py\n`df = df.assign(     title_decade=lambda x: pd.cut(x[\"title_year\"],                                   bins=range(1910, 2021, 10))) df.head()` \n```", "```py\n `movie_title   content_rating   title_year   imdb_score   title_decade 0   Avatar        PG-13            2009         7.9          (2000.0, 2010.0] 1   Pirates of the Caribbean: At World's End   PG-13   2007   7.1   (2000.0, 2010.0] 2   Spectre       PG-13            2015         6.8          (2010.0, 2020.0] 3   The Dark Knight Rises   PG-13  2012         8.5          (2010.0, 2020.0] 4   Star Wars: Epi-sode VII - The Force Awakens   <NA>   <NA>   7.1   NaN` \n```", "```py\n`sns.boxplot(     data=df,     x=\"imdb_score\",     y=\"title_decade\", )` \n```", "```py\n`sns.violinplot(     data=df,     x=\"imdb_score\",     y=\"title_decade\", )` \n```", "```py\n`sns.swarmplot(     data=df,     x=\"imdb_score\",     y=\"title_decade\",     size=.25, )` \n```", "```py\n`ratings_of_interest = {\"G\", \"PG\", \"PG-13\", \"R\"} mask = (     (df[\"title_year\"] >= 2013)     & (df[\"title_year\"] <= 2015)     & (df[\"content_rating\"].isin(ratings_of_interest)) ) data = df[mask].assign(     title_year=lambda x: x[\"title_year\"].astype(pd.CategoricalDtype()) ) data.head()` \n```", "```py\n `movie_title   content_rating   title_year   imdb_score   title_decade 2   Spectre       PG-13            2015         6.8          (2010, 2020] 8   Avengers: Age of Ultron   PG-13   2015      7.5          (2010, 2020] 14  The Lone Ranger   PG-13        2013         6.5          (2010, 2020] 15  Man of Steel  PG-13            2013         7.2          (2010, 2020] 20  The Hobbit: The Battle of the Five Ar-mies   PG-13   2014   7.5   (2010, 2020]` \n```", "```py\n`sns.swarmplot(     data=data,     x=\"imdb_score\",     y=\"title_year\",     hue=\"content_rating\", )` \n```", "```py\n`sns.catplot(     kind=\"swarm\",     data=data,     x=\"imdb_score\",     y=\"title_year\",     col=\"content_rating\",     col_wrap=2, )` \n```"]