["```py\n    vdata = pd.read_csv(\n        \"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\")\n    vdata.columns\n    vdata.dtypes\n    vdata.shape\n    ```", "```py\nVAERS_ID          int64\nRECVDATE         object\nSTATE            object\nAGE_YRS         float64\nCAGE_YR         float64\nCAGE_MO         float64\nSEX              object\n```", "```py\n    vdata.iloc[0]\n    vdata = vdata.set_index(\"VAERS_ID\")\n    vdata.loc[916600]\n    vdata.head(3)\n    vdata.iloc[:3]\n    vdata.iloc[:5, 2:4]\n    ```", "```py\nVAERS_ID                                       916600\nRECVDATE                                       01/01/2021\nSTATE                                          TX\nAGE_YRS                                        33.0\nCAGE_YR                                        33.0\nCAGE_MO                                        NaN\nSEX                                            F\n…\nTODAYS_DATE                                          01/01/2021\nBIRTH_DEFECT                                  NaN\nOFC_VISIT                                     Y\nER_ED_VISIT                                       NaN\nALLERGIES                                       Pcn and bee venom\n```", "```py\n          AGE_YRS  CAGE_YR\nVAERS_ID                  \n916600       33.0     33.0\n916601       73.0     73.0\n916602       23.0     23.0\n916603       58.0     58.0\n916604       47.0     47.0\n```", "```py\n    vdata[\"AGE_YRS\"].max()\n    vdata.AGE_YRS.max()\n    ```", "```py\n    vdata[\"AGE_YRS\"].sort_values().plot(use_index=False)\n    vdata[\"AGE_YRS\"].plot.hist(bins=20) \n    ```", "```py\n    import matplotlib.pylot as plt\n    fig, ax = plt.subplots(1, 2, sharey=True)\n    fig.suptitle(\"Age of adverse events\")\n    vdata[\"AGE_YRS\"].sort_values().plot(\n        use_index=False, ax=ax[0],\n        xlabel=\"Obervation\", ylabel=\"Age\")\n    vdata[\"AGE_YRS\"].plot.hist(bins=20, orientation=\"horizontal\")\n    ```", "```py\n    vdata[\"AGE_YRS\"].dropna().apply(lambda x: int(x)).value_counts()\n    ```", "```py\n50     11006\n65     10948\n60     10616\n51     10513\n58     10362\n      ...\n```", "```py\n    vdata.DIED.value_counts(dropna=False)\n    vdata[\"is_dead\"] = (vdata.DIED == \"Y\")\n    ```", "```py\nNaN    646450\nY        8536\nName: DIED, dtype: int64\n```", "```py\n    dead = vdata[vdata.is_dead]\n    vax = pd.read_csv(\"2021VAERSVAX.csv.gz\", encoding=\"iso-8859-1\").set_index(\"VAERS_ID\")\n    vax.groupby(\"VAX_TYPE\").size().sort_values()\n    vax19 = vax[vax.VAX_TYPE == \"COVID19\"]\n    vax19_dead = dead.join(vax19)\n    ```", "```py\n           …\nHPV9         1506\nFLU4         3342\nUNK          7941\nVARZOS      11034\nCOVID19    648723\n```", "```py\n    baddies = vax19_dead.groupby(\"VAX_LOT\").size().sort_values(ascending=False)\n    for I, (lot, cnt) in enumerate(baddies.items()):\n        print(lot, cnt, len(vax19_dead[vax19_dead.VAX_LOT == lot].groupby\"\"STAT\"\")))\n        if i == 10:\n            break\n    ```", "```py\nUnknown 254 34\nEN6201 120 30\nEN5318 102 26\nEN6200 101 22\nEN6198 90 23\n039K20A 89 13\nEL3248 87 17\nEL9261 86 21\nEM9810 84 21\nEL9269 76 18\nEN6202 75 18\n```", "```py\nvdata = pd.read_csv(\"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\")\nvdata.sample(frac=0.9).to_csv(\"vdata_sample.csv.gz\", index=False)\nvax = pd.read_csv(\"2021VAERSVAX.csv.gz\", encoding=\"iso-8859-1\")\nvax.sample(frac=0.9).to_csv(\"vax_sample.csv.gz\", index=False)\n```", "```py\n    vdata = pd.read_csv(\"vdata_sample.csv.gz\")\n    vax = pd.read_csv(\"vax_sample.csv.gz\")\n    vdata_with_vax = vdata.join(\n        vax.set_index(\"VAERS_ID\"),\n        on=\"VAERS_ID\",\n        how=\"inner\")\n    len(vdata), len(vax), len(vdata_with_vax)\n    ```", "```py\n    lost_vdata = vdata.loc[~vdata.index.isin(vdata_with_vax.index)]\n    lost_vdata\n    lost_vax = vax[~vax[\"VAERS_ID\"].isin(vdata.index)]\n    lost_vax\n    ```", "```py\n    vdata_with_vax_left = vdata.join(\n        vax.set_index(\"VAERS_ID\"),\n        on=\"VAERS_ID\")\n    vdata_with_vax_left.groupby(\"VAERS_ID\").size().sort_values()\n    ```", "```py\n    dead = vdata[vdata.DIED == \"Y\"]\n    vax19 = vax[vax.VAX_TYPE == \"COVID19\"]\n    vax19_dead = vax19.join(dead.set_index(\"VAERS_ID\"), on=\"VAERS_ID\", how=\"right\")\n    len(vax19), len(dead), len(vax19_dead)\n    len(vax19_dead[vax19_dead.VAERS_ID.duplicated()])\n    len(vax19_dead) - len(dead)\n    ```", "```py\n    vax19_dead[\"STATE\"] = vax19_dead[\"STATE\"].str.upper()\n    dead_lot = vax19_dead[[\"VAERS_ID\", \"VAX_LOT\", \"STATE\"]].set_index([\"VAERS_ID\", \"VAX_LOT\"])\n    dead_lot_clean = dead_lot[~dead_lot.index.duplicated()]\n    dead_lot_clean = dead_lot_clean.reset_index()\n    dead_lot_clean[dead_lot_clean.VAERS_ID.isna()]\n    baddies = dead_lot_clean.groupby(\"VAX_LOT\").size().sort_values(ascending=False)\n    for i, (lot, cnt) in enumerate(baddies.items()):\n        print(lot, cnt, len(dead_lot_clean[dead_lot_clean.VAX_LOT == lot].groupby(\"STATE\")))\n        if i == 10:\n            break\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    vdata = pd.read_csv(\"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\")\n    vdata.info(memory_usage=\"deep\")\n    ```", "```py\nRangeIndex: 654986 entries, 0 to 654985\nData columns (total 35 columns):\n#   Column        Non-Null Count   Dtype  \n---  ------        --------------   -----  \n0   VAERS_ID      654986 non-null  int64  \n2   STATE         572236 non-null  object \n3   AGE_YRS       583424 non-null  float64\n6   SEX           654986 non-null  object \n8   SYMPTOM_TEXT  654828 non-null  object \n9   DIED          8536 non-null    object \n31  BIRTH_DEFECT  383 non-null     object \n34  ALLERGIES     330630 non-null  object \ndtypes: float64(5), int64(2), object(28)\nmemory usage: 1.3 GB\n```", "```py\n    for name in vdata.columns:\n        col_bytes = vdata[name].memory_usage(index=False, deep=True)\n        col_type = vdata[name].dtype\n        print(\n            name,\n            col_type, col_bytes // (1024 ** 2))\n    ```", "```py\nVAERS_ID int64 4\nSTATE object 34\nAGE_YRS float64 4\nSEX object 36\nRPT_DATE object 20\nSYMPTOM_TEXT object 442\nDIED object 20\nALLERGIES object 34\n```", "```py\n    vdata.DIED.memory_usage(index=False, deep=True)\n    vdata.DIED.fillna(False).astype(bool).memory_usage(index=False, deep=True)\n    ```", "```py\n    vdata[\"STATE\"] = vdata.STATE.str.upper()\n    states = list(vdata[\"STATE\"].unique())\n    vdata[\"encoded_state\"] = vdata.STATE.apply(lambda state: states.index(state))\n    vdata[\"encoded_state\"] = vdata[\"encoded_state\"].astype(np.uint8)\n    vdata[\"STATE\"].memory_usage(index=False, deep=True)\n    vdata[\"encoded_state\"].memory_usage(index=False, deep=True)\n    ```", "```py\n    states = list(pd.read_csv(\n        \"vdata_sample.csv.gz\",\n        converters={\n           \"STATE\": lambda state: state.upper()\n        },\n        usecols=[\"STATE\"]\n    )[\"STATE\"].unique())\n    ```", "```py\n    vdata = pd.read_csv(\n        \"vdata_sample.csv.gz\",\n        index_col=\"VAERS_ID\",\n        converters={\n           \"DIED\": lambda died: died == \"Y\",\n           \"STATE\": lambda state: states.index(state.upper())\n        },\n        usecols=lambda name: name != \"SYMPTOM_TEXT\"\n    )\n    vdata[\"STATE\"] = vdata[\"STATE\"].astype(np.uint8)\n    vdata.info(memory_usage=\"deep\") \n    ```", "```py\n    import gzip\n    import pandas as pd\n    from pyarrow import csv\n    import pyarrow.compute as pc \n    vdata_pd = pd.read_csv(\"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\")\n    columns = list(vdata_pd.columns)\n    vdata_pd.info(memory_usage=\"deep\") \n    vdata_arrow = csv.read_csv(\"2021VAERSDATA.csv.gz\")\n    tot_bytes = sum([\n        vdata_arrow[name].nbytes\n        for name in vdata_arrow.column_names])\n    print(f\"Total {tot_bytes // (1024 ** 2)} MB\")\n    ```", "```py\n    for name in vdata_arrow.column_names:\n        arr_bytes = vdata_arrow[name].nbytes\n        arr_type = vdata_arrow[name].type\n        pd_bytes = vdata_pd[name].memory_usage(index=False, deep=True)\n        pd_type = vdata_pd[name].dtype\n        print(\n            name,\n            arr_type, arr_bytes // (1024 ** 2),\n            pd_type, pd_bytes // (1024 ** 2),)\n    ```", "```py\nVAERS_ID int64 4 int64 4\nRECVDATE string 8 object 41\nSTATE string 3 object 34\nCAGE_YR int64 5 float64 4\nSEX string 3 object 36\nRPT_DATE string 2 object 20\nDIED string 2 object 20\nL_THREAT string 2 object 20\nER_VISIT string 2 object 19\nHOSPITAL string 2 object 20\nHOSPDAYS int64 5 float64 4\n```", "```py\n    %timeit pd.read_csv(\"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\")\n    %timeit csv.read_csv(\"2021VAERSDATA.csv.gz\")\n    ```", "```py\n7.36 s ± 201 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n2.28 s ± 70.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\n    vdata_pd = pd.read_csv(\"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\", usecols=lambda x: x != \"SYMPTOM_TEXT\")\n    vdata_pd.info(memory_usage=\"deep\")\n    columns.remove(\"SYMPTOM_TEXT\")\n    vdata_arrow = csv.read_csv(\n        \"2021VAERSDATA.csv.gz\",\n         convert_options=csv.ConvertOptions(include_columns=columns))\n    vdata_arrow.nbytes\n    ```", "```py\n    vdata = vdata_arrow.to_pandas()\n    vdata.info(memory_usage=\"deep\")\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    vdata = pd.read_csv(\n        \"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\")\n    vdata[\"STATE\"] = vdata[\"STATE\"].str.upper()\n    top_states = pd.DataFrame({\n        \"size\": vdata.groupby(\"STATE\").size().sort_values(ascending=False).head(5)}).reset_index()\n    top_states[\"rank\"] = top_states.index\n    top_states = top_states.set_index(\"STATE\")\n    top_vdata = vdata[vdata[\"STATE\"].isin(top_states.index)]\n    top_vdata[\"state_code\"] = top_vdata[\"STATE\"].apply(\n        lambda state: top_states[\"rank\"].at[state]\n    ).astype(np.uint8)\n    top_vdata = top_vdata[top_vdata[\"AGE_YRS\"].notna()]\n    top_vdata.loc[:,\"AGE_YRS\"] = top_vdata[\"AGE_YRS\"].astype(int)\n    top_states\n    ```", "```py\n    age_state = top_vdata[[\"state_code\", \"AGE_YRS\"]]\n    age_state[\"state_code\"]\n    state_code_arr = age_state[\"state_code\"].values\n    type(state_code_arr), state_code_arr.shape, state_code_arr.dtype\n    age_arr = age_state[\"AGE_YRS\"].values\n    type(age_arr), age_arr.shape, age_arr.dtype\n    ```", "```py\n    age_state_mat = np.zeros((5,6), dtype=np.uint64)\n    for row in age_state.itertuples():\n        age_state_mat[row.state_code, row.AGE_YRS//20] += 1\n    age_state_mat\n    ```", "```py\n    cal = age_state_mat[0,:]\n    kids = age_state_mat[:,0]\n    ```", "```py\n    def compute_frac(arr_1d):\n        return arr_1d / arr_1d.sum()\n    frac_age_stat_mat = np.apply_along_axis(compute_frac, 1, age_state_mat)\n    ```", "```py\n    perc_age_stat_mat = frac_age_stat_mat * 100\n    perc_age_stat_mat = perc_age_stat_mat.astype(np.uint8)\n    perc_age_stat_mat\n    ```", "```py\n    fig = plt.figure()\n    ax = fig.add_subplot()\n    ax.matshow(perc_age_stat_mat, cmap=plt.get_cmap(\"Greys\"))\n    ax.set_yticks(range(5))\n    ax.set_yticklabels(top_states.index)\n    ax.set_xticks(range(6))\n    ax.set_xticklabels([\"0-19\", \"20-39\", \"40-59\", \"60-79\", \"80-99\", \"100-119\"])\n    fig.savefig(\"matrix.png\")\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib as mpl\n    import matplotlib.pyplot as plt\n    vdata = pd.read_csv(\n        \"2021VAERSDATA.csv.gz\", encoding=\"iso-8859-1\",\n        usecols=lambda name: name != \"SYMPTOM_TEXT\")\n    num_rows = len(vdata)\n    perc_nan = {}\n    for col_name in vdata.columns:\n        num_nans = len(vdata[col_name][vdata[col_name].isna()])\n        perc_nan[col_name] = 100 * num_nans / num_rows\n    labels = perc_nan.keys()\n    bar_values = list(perc_nan.values())\n    x_positions = np.arange(len(labels))\n    ```", "```py\n    fig = plt.figure()\n    fig.suptitle(\"Fraction of empty values per column\")\n    ax = fig.add_subplot()\n    ax.bar(x_positions, bar_values)\n    ax.set_ylabel(\"Percent of empty values\")\n    ax.set_ylabel(\"Column\")\n    ax.set_xticks(x_positions)\n    ax.set_xticklabels(labels)\n    ax.legend()\n    fig.savefig(\"naive_chart.png\")\n    ```", "```py\n    fig = plt.figure(figsize=(16, 9), tight_layout=True, dpi=600)\n    fig.suptitle(\"Fraction of empty values per column\", fontsize=\"48\")\n    ax = fig.add_subplot()\n    b1 = ax.bar(x_positions, bar_values)\n    ax.set_ylabel(\"Percent of empty values\", fontsize=\"xx-large\")\n    ax.set_xticks(x_positions)\n    ax.set_xticklabels(labels, rotation=45, ha=\"right\")\n    ax.set_ylim(0, 100)\n    ax.set_xlim(-0.5, len(labels))\n    for i, x in enumerate(x_positions):\n        ax.text(\n            x, 2, \"%.1f\" % bar_values[i], rotation=90,\n            va=\"bottom\", ha=\"center\",\n            backgroundcolor=\"white\")\n    fig.text(0.2, 0.01, \"Column\", fontsize=\"xx-large\")\n    fig.savefig(\"cleaner_chart.png\")\n    ```", "```py\n    dead = vdata[vdata.DIED == \"Y\"]\n    vax = pd.read_csv(\"2021VAERSVAX.csv.gz\", encoding=\"iso-8859-1\").set_index(\"VAERS_ID\")\n    vax_dead = dead.join(vax, on=\"VAERS_ID\", how=\"inner\")\n    dead_counts = vax_dead[\"VAX_TYPE\"].value_counts()\n    large_values = dead_counts[dead_counts >= 10]\n    other_sum = dead_counts[dead_counts < 10].sum()\n    large_values = large_values.append(pd.Series({\"OTHER\": other_sum}))\n    distance_df = vax_dead[vax_dead.DATEDIED.notna() & vax_dead.VAX_DATE.notna()]\n    distance_df[\"DATEDIED\"] = pd.to_datetime(distance_df[\"DATEDIED\"])\n    distance_df[\"VAX_DATE\"] = pd.to_datetime(distance_df[\"VAX_DATE\"])\n    distance_df = distance_df[distance_df.DATEDIED >= \"2021\"]\n    distance_df = distance_df[distance_df.VAX_DATE >= \"2021\"]\n    distance_df = distance_df[distance_df.DATEDIED >= distance_df.VAX_DATE]\n    time_distances = distance_df[\"DATEDIED\"] - distance_df[\"VAX_DATE\"]\n    time_distances_d = time_distances.astype(int) / (10**9 * 60 * 60 * 24)\n    date_died = pd.to_datetime(vax_dead[vax_dead.DATEDIED.notna()][\"DATEDIED\"])\n    date_died = date_died[date_died >= \"2021\"]\n    date_died_counts = date_died.value_counts().sort_index()\n    cum_deaths = date_died_counts.cumsum()\n    state_dead = vax_dead[vax_dead[\"STATE\"].notna()][[\"STATE\", \"SEX\"]]\n    top_states = sorted(state_dead[\"STATE\"].value_counts().head(10).index)\n    top_state_dead = state_dead[state_dead[\"STATE\"].isin(top_states)].groupby([\"STATE\", \"SEX\"]).size()#.reset_index()\n    top_state_dead.loc[\"MN\", \"U\"] = 0  # XXXX\n    top_state_dead = top_state_dead.sort_index().reset_index()\n    top_state_females = top_state_dead[top_state_dead.SEX == \"F\"][0]\n    top_state_males = top_state_dead[top_state_dead.SEX == \"M\"][0]\n    top_state_unk = top_state_dead[top_state_dead.SEX == \"U\"][0]\n    ```", "```py\n    fig, ((vax_cnt, time_dist), (death_time, state_reps)) = plt.subplots(\n        2, 2,\n        figsize=(16, 9), tight_layout=True)\n    vax_cnt.set_title(\"Vaccines involved in deaths\")\n    wedges, texts = vax_cnt.pie(large_values)\n    vax_cnt.legend(wedges, large_values.index, loc=\"lower left\")\n    time_dist.hist(time_distances_d, bins=50)\n    time_dist.set_title(\"Days between vaccine administration and death\")\n    time_dist.set_xlabel(\"Days\")\n    time_dist.set_ylabel(\"Observations\")\n    death_time.plot(date_died_counts.index, date_died_counts, \".\")\n    death_time.set_title(\"Deaths over time\")\n    death_time.set_ylabel(\"Daily deaths\")\n    death_time.set_xlabel(\"Date\")\n    tw = death_time.twinx()\n    tw.plot(cum_deaths.index, cum_deaths)\n    tw.set_ylabel(\"Cummulative deaths\")\n    state_reps.set_title(\"Deaths per state stratified by sex\") state_reps.bar(top_states, top_state_females, label=\"Females\")\n    state_reps.bar(top_states, top_state_males, label=\"Males\", bottom=top_state_females)\n    state_reps.bar(top_states, top_state_unk, label=\"Unknown\",\n                   bottom=top_state_females.values + top_state_males.values)\n    state_reps.legend()\n    state_reps.set_xlabel(\"State\")\n    state_reps.set_ylabel(\"Deaths\")\n    fig.savefig(\"summary.png\")\n    ```"]