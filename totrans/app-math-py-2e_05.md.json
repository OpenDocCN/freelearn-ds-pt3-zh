["```py\npython3.10 -m pip install networkx\n```", "```py\nimport networkx as nx\n```", "```py\nimport networkx as nx\n```", "```py\n    G = nx.Graph()\n    ```", "```py\n    G.add_node(1)\n    ```", "```py\n    G.add_node(2)\n    ```", "```py\n    G.add_nodes_from([3, 4, 5, 6])\n    ```", "```py\n    G.add_edge(1, 2)  # edge from 1 to 2\n    ```", "```py\n    G.add_edges_from([(2, 3),(3, 4)(3, 5),(3, 6),\n    ```", "```py\n        (4,5),(5,6)])\n    ```", "```py\n    print(G.nodes)\n    ```", "```py\n    print(G.edges)\n    ```", "```py\n    # [1, 2, 3, 4, 5, 6]\n    ```", "```py\n    # [(1, 2), (2, 3), (3, 4), (3, 5), (3, 6), (4, 5), (5, 6)]\n    ```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\n    G = nx.Graph()\n    ```", "```py\n    G.add_nodes_from(range(1, 7))\n    ```", "```py\n    G.add_edges_from([\n    ```", "```py\n        (1, 2), (2, 3), (3, 4), (3, 5),\n    ```", "```py\n        (3, 6), (4, 5), (5, 6)\n    ```", "```py\n    ])\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    layout = nx.shell_layout(G)\n    ```", "```py\n    nx.draw(G, ax=ax, pos=layout, with_labels=True)\n    ```", "```py\n    ax.set_title(\"Simple network drawing\")\n    ```", "```py\n    G = nx.Graph()\n    ```", "```py\n    G.add_nodes_from(range(10))\n    ```", "```py\n    G.add_edges_from([\n    ```", "```py\n        (0, 1), (1, 2), (2, 3), (2, 4),\n    ```", "```py\n        (2, 5), (3, 4), (4, 5), (6, 7),\n    ```", "```py\n        (6, 8), (6, 9), (7, 8), (8, 9)\n    ```", "```py\n    ])\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    nx.draw_circular(G, ax=ax, with_labels=True)\n    ```", "```py\n    ax.set_title(\"Simple network\")\n    ```", "```py\n    print(G)\n    ```", "```py\n    # Name:\n    ```", "```py\n    # Type: Graph\n    ```", "```py\n    # Number of nodes: 10\n    ```", "```py\n    # Number of edges: 12\n    ```", "```py\n    # Average degree: 2.4000\n    ```", "```py\n    for i in [0, 2, 7]:\n    ```", "```py\n        degree = G.degree[i]\n    ```", "```py\n        print(f\"Degree of {i}: {degree}\")\n    ```", "```py\n    # Degree of 0: 1\n    ```", "```py\n    # Degree of 2: 4\n    ```", "```py\n    # Degree of 7: 2\n    ```", "```py\n    components = list(nx.connected_components(G))\n    ```", "```py\n    print(components)\n    ```", "```py\n    # [{0, 1, 2, 3, 4, 5}, {8, 9, 6, 7}]\n    ```", "```py\n    density = nx.density(G)\n    ```", "```py\n    print(\"Density\", density)\n    ```", "```py\n    # Density 0.26666666666666666\n    ```", "```py\n    is_planar, _ = nx.check_planarity(G)\n    ```", "```py\n    print(\"Is planar\", is_planar)\n    ```", "```py\n    # Is planar True\n    ```", "```py\n    G = nx.dense_gnm_random_graph(5, 5, seed=12345)\n    ```", "```py\n    matrix = nx.adjacency_matrix(G).todense()\n    ```", "```py\n    print(matrix)\n    ```", "```py\n    # [[0 0 1 0 0]\n    ```", "```py\n    #  [0 0 1 1 0]\n    ```", "```py\n    #  [1 1 0 0 1]\n    ```", "```py\n    #  [0 1 0 0 1]\n    ```", "```py\n    #  [0 0 1 1 0]]\n    ```", "```py\n    paths_len_4 = np.linalg.matrix_power(matrix, 4)\n    ```", "```py\n    print(paths_len_4)\n    ```", "```py\n    # [[ 3 5  0  0 5]\n    ```", "```py\n    #  [ 5 9  0  0 9]\n    ```", "```py\n    #  [ 0 0 13 10 0]\n    ```", "```py\n    #  [ 0 0 10  8 0]\n    ```", "```py\n    #  [ 5 9  0  0 9]]\n    ```", "```py\n    G = nx.DiGraph()\n    ```", "```py\n    G.add_nodes_from(range(5))\n    ```", "```py\n    G.add_edge(0, 1, weight=1.0)\n    ```", "```py\n    G.add_weighted_edges_from([\n    ```", "```py\n        (1, 2, 0.5), (1, 3, 2.0), (2, 3, 0.3), (3, 2, 0.3),\n    ```", "```py\n        (2, 4, 1.2), (3, 4, 0.8)\n    ```", "```py\n    ])\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    pos = {0: (-1, 0), 1: (0, 0), 2: (1, 1), 3: (1, -1),\n    ```", "```py\n        4:(2, 0)}\n    ```", "```py\n    nx.draw(G, ax=ax, pos=pos, with_labels=True)\n    ```", "```py\n    ax.set_title(\"Weighted, directed network\")\n    ```", "```py\n    adj_mat = nx.adjacency_matrix(G).todense()\n    ```", "```py\n    print(adj_mat)\n    ```", "```py\n    # [[0\\. 1\\. 0\\. 0\\. 0\\. ]\n    ```", "```py\n    # [0\\. 0\\. 0.5 2\\. 0\\. ]\n    ```", "```py\n    # [0\\. 0\\. 0\\. 0.3 1.2]\n    ```", "```py\n    # [0\\. 0\\. 0.3 0\\. 0.8]\n    ```", "```py\n    # [0\\. 0\\. 0\\. 0\\. 0\\. ]]\n    ```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345) # seed for reproducibility\n```", "```py\n    G = nx.gnm_random_graph(10, 17, seed=12345)\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    nx.draw_circular(G, ax=ax, with_labels=True)\n    ```", "```py\n    ax.set_title(\"Random network for shortest path finding\")\n    ```", "```py\n    for u, v in G.edges:\n    ```", "```py\n        G.edges[u, v][\"weight\"] = rng.integers(5, 15)\n    ```", "```py\n    path = nx.shortest_path(G, 7, 9, weight=\"weight\")\n    ```", "```py\n    print(path)\n    ```", "```py\n    # [7, 5, 2, 9]\n    ```", "```py\n    length = nx.shortest_path_length(G, 7, 9,\n    ```", "```py\n        weight=\"weight\")\n    ```", "```py\n    print(\"Length\", length)\n    ```", "```py\n    # Length 32\n    ```", "```py\n    G = nx.Graph()\n    ```", "```py\n    complete_part = nx.complete_graph(4)\n    ```", "```py\n    cycle_part = nx.cycle_graph(range(4, 9))\n    ```", "```py\n    G.update(complete_part)\n    ```", "```py\n    G.update(cycle_part)\n    ```", "```py\n    G.add_edges_from([(0, 8), (3, 4)])\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    nx.draw_circular(G, ax=ax, with_labels=True)\n    ```", "```py\n    ax.set_title(\"Network with different clustering behavior\")\n    ```", "```py\n    cluster_coeffs = nx.clustering(G)\n    ```", "```py\n    for i in [0, 2, 6]:\n    ```", "```py\n        print(f\"Node {i}, clustering {cluster_coeffs[i]}\")\n    ```", "```py\n    # Node 0, clustering 0.5\n    ```", "```py\n    # Node 2, clustering 1.0\n    ```", "```py\n    # Node 6, clustering 0\n    ```", "```py\n    av_clustering = nx.average_clustering(G)\n    ```", "```py\n    print(av_clustering)\n    ```", "```py\n    # 0.3333333333333333\n    ```", "```py\n    G = nx.complete_graph(3)\n    ```", "```py\n    G.add_nodes_from(range(3, 7))\n    ```", "```py\n    G.add_edges_from([\n    ```", "```py\n        (2, 3), (2, 4), (2, 6), (0, 3), (0, 6), (1, 6),\n    ```", "```py\n        (1, 5), (2, 5), (4, 5) ])\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    nx.draw_circular(G, ax=ax, with_labels=True)\n    ```", "```py\n    ax.set_title(\"Scheduling network\")\n    ```", "```py\n    coloring = nx.greedy_color(G)\n    ```", "```py\n    print(\"Coloring\", coloring)\n    ```", "```py\n    # Coloring {2: 0, 0: 1, 1: 2, 5: 1, 6: 3, 3: 2, 4: 2}\n    ```", "```py\n    different_colors = set(coloring.values())\n    ```", "```py\n    print(\"Different colors\", different_colors)\n    ```", "```py\n    # Different colors {0, 1, 2, 3}\n    ```", "```py\n    G = nx.gnm_random_graph(15, 22, seed=12345)\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    pos = nx.circular_layout(G)\n    ```", "```py\n    nx.draw(G, pos=pos, ax=ax, with_labels=True, style=\"--\")\n    ```", "```py\n    ax.set_title(\"Network with minimum spanning tree overlaid\")\n    ```", "```py\n    min_span_tree = nx.minimum_spanning_tree(G)\n    ```", "```py\n    print(list(min_span_tree.edges))\n    ```", "```py\n    # [(0, 13), (0, 7), (0, 5), (1, 13), (1, 11),\n    ```", "```py\n    #    (2, 5), (2, 9), (2, 8), (2, 3), (2, 12),\n    ```", "```py\n    #    (3, 4), (4, 6), (5, 14), (8, 10)]\n    ```", "```py\n    nx.draw_networkx_edges(min_span_tree, pos=pos,\n    ```", "```py\n                           ax=ax,width=2.)\n    ```", "```py\n    dominating_set = nx.dominating_set(G)\n    ```", "```py\n    print(\"Dominating set\", dominating_set)\n    ```", "```py\n    # Dominating set {0, 1, 2, 4, 10, 14}\n    ```"]