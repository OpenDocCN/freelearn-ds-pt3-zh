["```py\nmkdir database_examples\ncd database_examples\ntouch streamlit_app.py\nmkdir .streamlit\ntouch .streamlit/secrets.toml \n```", "```py\n[snowflake]\nuser = \"streamlitfordatascience\"\npassword = \"my_password\"\naccount = \"gfa95012\"\nwarehouse = \"COMPUTE_WH\" \n```", "```py\nimport snowflake.connector\nimport streamlit as st\nsession = snowflake.connector.connect(\n    **st.secrets[\"snowflake\"], client_session_keep_alive=True\n)\n\nsql_query = \"select 1\"\nst.write(\"Snowflake Query Result\")\ndf = session.cursor().execute(sql_query).fetch_pandas_all()\nst.write(df) \n```", "```py\n@st.cache_resource\ndef initialize_snowflake_connection():\n    session = snowflake.connector.connect(\n        **st.secrets[\"snowflake\"], client_session_keep_alive=True\n    )\n    return session\n\nsession = initialize_snowflake_connection()\nsql_query = \"select 1\" \npersonal project or for your company! A sample query for us to use looks like this:\n```", "```py\nsql_query = \"\"\"\n    SELECT\n    l_returnflag,\n    sum(l_quantity) as sum_qty,\n    sum(l_extendedprice) as sum_base_price\n    FROM\n    snowflake_sample_data.tpch_sf1.lineitem\n    WHERE\n    l_shipdate <= dateadd(day, -90, to_date('1998-12-01'))\n    GROUP BY 1\n\"\"\" \n```", "```py\n@st.cache_data\ndef run_query(session, sql_query):\n    df = session.cursor().execute(sql_query).fetch_pandas_all()\n    return df\ndf = run_query(session, sql_query) \n```", "```py\ndf = run_query(session, sql_query)\n\nst.title(\"Snowflake TPC-H Explorer\")\ncol_to_graph = st.selectbox(\n    \"Select a column to graph\", [\"Order Quantity\", \"Base Price\"]\n)\ndf[\"SUM_QTY\"] = df[\"SUM_QTY\"].astype(float)\ndf[\"SUM_BASE_PRICE\"] = df[\"SUM_BASE_PRICE\"].astype(float)\n\nif col_to_graph == \"Order Quantity\":\n    st.bar_chart(data=df, \n                 x=\"L_RETURNFLAG\", \n                 y=\"SUM_QTY\")\nelse:\n    st.bar_chart(data=df,\n                 x=\"L_RETURNFLAG\", \n                 y=\"SUM_BASE_PRICE\") \n```", "```py\n[bigquery_service_account]\ntype = \"service_account\"\nproject_id = \"xxx\"\nprivate_key_id = \"xxx\"\nprivate_key = \"xxx\"\nclient_email = \"xxx\"\nclient_id = \"xxx\"\nauth_uri = \"https://accounts.google.com/o/oauth2/auth\"\ntoken_uri = \"https://oauth2.googleapis.com/token\"\nauth_provider_x509_cert_url = \"https://www.googleapis.com/oauth2/v1/certs\"\nclient_x509_cert_url = \"xxx\" \n```", "```py\nimport streamlit as st\nfrom google.oauth2 import service_account \nfrom google.cloud import bigquery \n\ncredentials = service_account.Credentials.from_service_account_info( \n    st.secrets[\"bigquery_service_account\"] \n) \nclient = bigquery.Client(credentials=credentials) \n```", "```py\nimport streamlit as st\nfrom google.cloud import bigquery\nfrom google.oauth2 import service_account\n\ncredentials = service_account.Credentials.from_service_account_info(\n    st.secrets[\"bigquery_service_account\"]\n)\nclient = bigquery.Client(credentials=credentials)\n\nst.title(\"BigQuery App\")\nmy_first_query = \"\"\"\n    SELECT\n    CAST(file_downloads.timestamp  AS DATE) AS file_downloads_timestamp_date,\n    file_downloads.file.project AS file_downloads_file__project,\n    COUNT(*) AS file_downloads_count\n    FROM 'bigquery-public-data.pypi.file_downloads'\n    \t    AS file_downloads\n    WHERE (file_downloads.file.project = 'streamlit')\nAND (file_downloads.timestamp >= timestamp_add(current_timestamp(), INTERVAL -(5) DAY))\n    GROUP BY 1,2\n    \"\"\"\n\ndownloads_df = client.query(my_first_query).to_dataframe()\nst.write(downloads_df) \n```", "```py\nfrom google.oauth2 import service_account \n@st.cache_resource \ndef get_bigquery_client(): \ncredentials = service_account.Credentials.from_service_account_info(st.secrets[\"bigquery_service_account\"])\nreturn bigquery.Client(credentials=credentials) \nclient = get_bigquery_client() \n@st.cache_data  \ndef get_dataframe_from_sql(query):  \ndf = client.query(query).to_dataframe() \n    return df \n```", "```py\nDownloads_df = get_dataframe_from_sql(my_first_query)\nst.line_chart(downloads_df,\nx=\"file_downloads_timestamp_date\",\ny=\"file_downloads_count) \n```", "```py\nst.title(\"BigQuery App\")\ndays_lookback = st.slider('How many days of data do you want to see?', min_value=1, max_value=30, value=5)\nmy_first_query = f\"\"\"\n    SELECT\n    CAST(file_downloads.timestamp  AS DATE) AS file_downloads_timestamp_date,\n    file_downloads.file.project AS file_downloads_file__project,\n    COUNT(*) AS file_downloads_count\n    FROM 'bigquery-public-data.pypi.file_downloads'\n    AS file_downloads\n    WHERE (file_downloads.file.project = 'streamlit')\n        AND (file_downloads.timestamp >=\n        timestamp_add(current_timestamp(), \nINTERVAL -({days_lookback}) DAY))\n    GROUP BY 1,2\n    \"\"\" \n```", "```py\ndef get_streamlit_pypi_data(day_filter):\n    streamlit_pypy_query = f\"\"\"\n    SELECT\n    CAST(file_downloads.timestamp  AS DATE) \n        AS file_downloads_timestamp_date,\n    file_downloads.file.project AS\n   file_downloads_file__project,\n    COUNT(*) AS file_downloads_count\n    FROM 'bigquery-public-data.pypi.file_downloads'\n    AS file_downloads\n    WHERE (file_downloads.file.project = 'streamlit')\n        AND (file_downloads.timestamp >=\n        timestamp_add(current_timestamp(), \n        INTERVAL -({day_filter}) DAY))\n    GROUP BY 1,2\n    \"\"\"\n    return streamlit_pypy_query \n```", "```py\nimport streamlit as st\nfrom google.cloud import bigquery\nfrom google.oauth2 import service_account\nfrom queries import get_streamlit_pypi_data\n...\nst.title(\"BigQuery App\")\ndays_lookback = st.slider('How many days of data do you want to see?', min_value=1, max_value=30, value=5)\npypi_query = get_streamlit_pypi_data(days_lookback)\n\ndownloads_df = get_dataframe_from_sql(pypi_query)\nst.line_chart(downloads_df, x=\"file_downloads_timestamp_date\", y=\"file_downloads_count\") \n```"]