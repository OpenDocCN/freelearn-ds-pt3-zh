["```py\nmkdir penguin_ml\ncp penguin_app/penguins.csv penguin_ml \ncd penguin_ml \ntouch penguins_ml.py\ntouch penguins_streamlit.py\n```", "```py\nimport pandas as pd \npenguin_df = pd.read_csv('penguins.csv')\nprint(penguin_df.head())\n```", "```py\nimport pandas as pd \npenguin_df = pd.read_csv('penguins.csv')\n penguin_df.dropna(inplace=True)\n output = penguin_df['species']\n features = penguin_df[['island', 'bill_length_mm', 'bill_depth_mm',\n       'flipper_length_mm', 'body_mass_g', 'sex']]\n features = pd.get_dummies(features)\n print('Here are our output variables')\n print(output.head())\nprint('Here are our feature variables')\nprint(features.head())\n```", "```py\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\npenguin_df = pd.read_csv('penguins.csv')\npenguin_df.dropna(inplace=True)\noutput = penguin_df['species']\nfeatures = penguin_df[['island', 'bill_length_mm', 'bill_depth_mm',\n                       'flipper_length_mm', 'body_mass_g', 'sex']]\nfeatures = pd.get_dummies(features)\noutput, uniques = pd.factorize(output)\nx_train, x_test, y_train, y_test = train_test_split(\n    features, output, test_size=.8)\nrfc = RandomForestClassifier(random_state=15)\nrfc.fit(x_train, y_train)\ny_pred = rfc.predict(x_test)\nscore = accuracy_score(y_pred, y_test)\nprint('Our accuracy score for this model is {}'.format(score))\n```", "```py\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nimport pickle\npenguin_df = pd.read_csv('penguins.csv')\npenguin_df.dropna(inplace=True)\noutput = penguin_df['species']\nfeatures = penguin_df[['island', 'bill_length_mm', 'bill_depth_mm',\n                       'flipper_length_mm', 'body_mass_g', 'sex']]\nfeatures = pd.get_dummies(features)\noutput, uniques = pd.factorize(output)\nx_train, x_test, y_train, y_test = train_test_split(\n    features, output, test_size=.8)\nrfc = RandomForestClassifier(random_state=15)\nrfc.fit(x_train, y_train)\ny_pred = rfc.predict(x_test)\nscore = accuracy_score(y_pred, y_test)\nprint('Our accuracy score for this model is {}'.format(score))\nrf_pickle = open('random_forest_penguin.pickle', 'wb')\npickle.dump(rfc, rf_pickle)\nrf_pickle.close()\noutput_pickle = open('output_penguin.pickle', 'wb')\npickle.dump(uniques, output_pickle)\noutput_pickle.close() \n```", "```py\nimport streamlit as st\nimport pickle\nrf_pickle = open('random_forest_penguin.pickle', 'rb')\nmap_pickle = open('output_penguin.pickle', 'rb')\nrfc = pickle.load(rf_pickle)\nunique_penguin_mapping = pickle.load(map_pickle)\nst.write(rfc)\nst.write(unique_penguin_mapping)\n```", "```py\nstreamlit run penguins_streamlit.py\n```", "```py\nimport streamlit as st\nimport pickle\nrf_pickle = open('random_forest_penguin.pickle', 'rb')\nmap_pickle = open('output_penguin.pickle', 'rb')\nrfc = pickle.load(rf_pickle)\nunique_penguin_mapping = pickle.load(map_pickle)\nrf_pickle.close()\nmap_pickle.close()\nisland = st.selectbox('Penguin Island', options=[\n                      'Biscoe', 'Dream', 'Torgerson'])\nsex = st.selectbox('Sex', options=['Female', 'Male'])\nbill_length = st.number_input('Bill Length (mm)', min_value=0)\nbill_depth = st.number_input('Bill Depth (mm)', min_value=0)\nflipper_length = st.number_input('Flipper Length (mm)', min_value=0)\nbody_mass = st.number_input('Body Mass (g)', min_value=0)\nst.write('the user inputs are {}'.format(\n    [island, sex, bill_length,\n         bill_depth, flipper_length, body_mass]))\n```", "```py\nimport streamlit as st\nimport pickle\nst.title('Penguin Classifier')\nst.write(\"This app uses 6 inputs to predict the species of penguin using\"\n         \"a model built on the Palmer's Penguin's dataset. Use the form below\"\n         \" to get started!\")\nrf_pickle = open('random_forest_penguin.pickle', 'rb')\nmap_pickle = open('output_penguin.pickle', 'rb')\nrfc = pickle.load(rf_pickle)\nunique_penguin_mapping = pickle.load(map_pickle)\nrf_pickle.close()\nmap_pickle.close()\n```", "```py\nisland = st.selectbox('Penguin Island', options=[\n                      'Biscoe', 'Dream', 'Torgerson'])\nsex = st.selectbox('Sex', options=['Female', 'Male'])\nbill_length = st.number_input('Bill Length (mm)', min_value=0)\nbill_depth = st.number_input('Bill Depth (mm)', min_value=0)\nflipper_length = st.number_input('Flipper Length (mm)', min_value=0)\nbody_mass = st.number_input('Body Mass (g)', min_value=0)\nisland_biscoe, island_dream, island_torgerson = 0, 0, 0\nif island == 'Biscoe':\n    island_biscoe = 1\nelif island == 'Dream':\n    island_dream = 1\nelif island == 'Torgerson':\n    island_torgerson = 1\nsex_female, sex_male = 0, 0\nif sex == 'Female':\n    sex_female = 1\nelif sex == 'Male':\n    sex_male = 1\n```", "```py\nnew_prediction = rfc.predict([[bill_length, bill_depth, flipper_length,\n                               body_mass, island_biscoe, island_dream,\n                               island_torgerson, sex_female, sex_male]])\nprediction_species = unique_penguin_mapping[new_prediction][0]\nst.write('We predict your penguin is of the {} species'.format(prediction_species))\n```", "```py\nimport streamlit as st\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pickle\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nst.title('Penguin Classifier')\nst.write(\"This app uses 6 inputs to predict the species of penguin using \"\n         \"a model built on the Palmer's Penguin's dataset. Use the form below\"\n         \" to get started!\")\npenguin_file = st.file_uploader('Upload your own penguin data')\n```", "```py\nif penguin_file is None:\n    rf_pickle = open('random_forest_penguin.pickle', 'rb')\n    map_pickle = open('output_penguin.pickle', 'rb')\n    rfc = pickle.load(rf_pickle)\n    unique_penguin_mapping = pickle.load(map_pickle)\n    rf_pickle.close()\n    map_pickle.close()\n```", "```py\nelse:\n    penguin_df = pd.read_csv(penguin_file)\n    penguin_df = penguin_df.dropna()\n    output = penguin_df['species']\n    features = penguin_df[['island', 'bill_length_mm', 'bill_depth_mm',\n                           'flipper_length_mm', 'body_mass_g', 'sex']]\n    features = pd.get_dummies(features)\n    output, unique_penguin_mapping = pd.factorize(output)\n    x_train, x_test, y_train, y_test = train_test_split(\n        features, output, test_size=.8)\n    rfc = RandomForestClassifier(random_state=15)\n    rfc.fit(x_train, y_train)\n    y_pred = rfc.predict(x_test)\n    score = round(accuracy_score(y_pred, y_test), 2)\n    st.write('We trained a Random Forest model on these data,'\n             ' it has a score of {}! Use the '\n             'inputs below to try out the model.'.format(score))\n```", "```py\nwith st.form('user_inputs'):\nisland = st.selectbox('Penguin Island', options=[\n                      'Biscoe', 'Dream', 'Torgerson'])\nsex = st.selectbox('Sex', options=['Female', 'Male'])\nbill_length = st.number_input('Bill Length (mm)', min_value=0)\nbill_depth = st.number_input('Bill Depth (mm)', min_value=0)\nflipper_length = st.number_input('Flipper Length (mm)', min_value=0)\nbody_mass = st.number_input('Body Mass (g)', min_value=0)\nst.form_submit_button()\nisland_biscoe, island_dream, island_torgerson = 0, 0, 0\nif island == 'Biscoe':\n    island_biscoe = 1\nelif island == 'Dream':\n    island_dream = 1\nelif island == 'Torgerson':\n    island_torgerson = 1\nsex_female, sex_male = 0, 0\nif sex == 'Female':\n    sex_female = 1\nelif sex == 'Male':\n    sex_male = 1\n```", "```py\nnew_prediction = rfc.predict([[bill_length, bill_depth, flipper_length,\n                               body_mass, island_biscoe, island_dream,\n                               island_torgerson, sex_female, sex_male]])\nprediction_species = unique_penguin_mapping[new_prediction][0]\nst.write('We predict your penguin is of the {} species'.format(prediction_species))\n```", "```py\nx_train, x_test, y_train, y_test = train_test_split(\n    features, output, test_size=.8)\nrfc = RandomForestClassifier(random_state=15)\nrfc.fit(x_train, y_train)\ny_pred = rfc.predict(x_test)\nscore = accuracy_score(y_pred, y_test)\nprint('Our accuracy score for this model is {}'.format(score))\nrf_pickle = open('random_forest_penguin.pickle', 'wb')\npickle.dump(rfc, rf_pickle)\nrf_pickle.close()\noutput_pickle = open('output_penguin.pickle', 'wb')\npickle.dump(uniques, output_pickle)\noutput_pickle.close()\nfig, ax = plt.subplots()\nax = sns.barplot(rfc.feature_importances_, features.columns)\nplt.title('Which features are the most important for species prediction?')\nplt.xlabel('Importance')\nplt.ylabel('Feature')\nplt.tight_layout()\nfig.savefig('feature_importance.png')\n```", "```py\nnew_prediction = rfc.predict([[bill_length, bill_depth, flipper_length,\n                               body_mass, island_biscoe, island_dream,\n                               island_torgerson, sex_female, sex_male]])\nprediction_species = unique_penguin_mapping[new_prediction][0]\nst.subheader(\"Predicting Your Penguin's Species:\")\nst.write('We predict your penguin is of the {} species'\n         .format(prediction_species))\nst.write('We used a machine learning (Random Forest) model to '\n         'predict the species, the features used in this prediction '\n         ' are ranked by relative importance below.')\nst.image('feature_importance.png')\n```", "```py\nst.subheader(\"Predicting Your Penguin's Species:\")\nst.write('We predict your penguin is of the {} species'\n         .format(prediction_species))\nst.write('We used a machine learning (Random Forest) model to '\n         'predict the species, the features used in this prediction '\n         ' are ranked by relative importance below.')\nst.image('feature_importance.png')\nst.write('Below are the histograms for each continuous variable '\n         'separated by penguin species. The vertical line '\n         'represents your the inputted value.')\n```", "```py\nfig, ax = plt.subplots()\nax = sns.displot(x=penguin_df['bill_length_mm'],\n                 hue=penguin_df['species'])\nplt.axvline(bill_length)\nplt.title('Bill Length by Species')\nst.pyplot(ax)\nfig, ax = plt.subplots()\nax = sns.displot(x=penguin_df['bill_depth_mm'],\n                 hue=penguin_df['species'])\nplt.axvline(bill_depth)\nplt.title('Bill Depth by Species')\nst.pyplot(ax)\nfig, ax = plt.subplots()\nax = sns.displot(x=penguin_df['flipper_length_mm'],\n                 hue=penguin_df['species'])\nplt.axvline(flipper_length)\nplt.title('Flipper Length by Species')\nst.pyplot(ax)\n```"]