["```py\nfrom jupyter_dash import JupyterDash\napp = JupyterDash(__name__)\n```", "```py\napp.run_server(mode='inline', height=600, width='80%')\n```", "```py\n    from jupyter_dash import JupyterDash\n    import dash_core_components as dcc\n    import dash_html_components as html\n    ```", "```py\n    app = JupyterDash(__name__)\n    ```", "```py\n    app.layout = html.Div([\n        dcc.Dropdown(options=[{'label': color, 'value':\n    color}\n                          for color in ['blue', 'green',\n    'yellow']]),\n        html.Div()\n    ])\n    ```", "```py\n    if __name__ == '__main__':\n        app.run_server(mode='inline')\n    ```", "```py\ndef display_selected_color(color):\n    if color is None:\n        color = 'nothing'\n    return 'You selected ' + color\n```", "```py\nhtml.Div([\n    html.Div(id='empty_space'),\n    html.H2(id='h2_text'),\n    dcc.Slider(id='slider'),\n])\n```", "```py\napp.layout = html.Div([\n    dcc.Dropdown(id='color_dropdown',\n                 options=[{'label': color, 'value': color}\n                         for color in ['blue', 'green',\n'yellow']]),\n    html.Div(id='color_output')\n])\n```", "```py\nfrom dash.dependencies import Output, Input\n```", "```py\n    Output(component_id='color_output',\n    component_property='children')\n    ```", "```py\n    Input(component_id='color_dropdown',\n    component_property='value')\n    ```", "```py\n@app.callback(Output(component_id, component_property)\n              Input(component_id, component_property))\n```", "```py\n@app.callback(Output(component_id, component_property)\n              Input(component_id, component_property)\ndef regular_function(input):\n    output = do_something_with(input)\n    return output\n```", "```py\n@app.callback(Output('color_output', 'children'),\n              Input('color_dropdown', 'value')\ndef display_selected_color(color):\n    if color is None:\n        color = 'nothing'\n    return 'You selected ' + color\n```", "```py\nimport os\nos.listdir('data')\n['PovStatsSeries.csv',\n 'PovStatsCountry.csv',\n 'PovStatsCountry-Series.csv',\n 'PovStatsData.csv',\n 'PovStatsFootNote.csv']\n```", "```py\nimport pandas as pd\npoverty_data = pd.read_csv('data/PovStatsData.csv')\npoverty_data.head(3)\n```", "```py\n    dcc.Dropdown(id='country',\n                 options=[{'label': country, 'value': country}\n                          for country in\n                          poverty_data['Country Name'].unique()])\n    html.Div(id='report')\n    ```", "```py\n    if country is None:\n        return ''\n    ```", "```py\n    filtered_df = countrydata[(countrydata['Country\n    Name']==country) & (countrydata['Indicator\n    Name']=='Population, total')]\n    population = filtered_df.loc[:, '2010'].values[0]\n    ```", "```py\n    return [\n        html.H3(country),\n        f'The population of {country} in 2010 was\n    {population:,.0f}.'\n    ]\n    ```", "```py\n…\nhtml.H2('The World Bank'),\ndcc.Dropdown(id='country',\n             options=[{'label': country, 'value': country}\n                      for country in poverty_data['Country\nName'].unique()]),\nhtml.Br(),\nhtml.Div(id='report'),\ndbc.Tabs([\n   dbc.Tab([\n…\n```", "```py\n@app.callback(Output('report', 'children'),\n              Input('country', 'value'))\ndef display_country_report(country):\n    if country is None:\n        return ''\n    filtered_df = poverty_data[(poverty_data['Country\nName']==country) &\n                               (poverty_data['Indicator\nName']=='Population, total')]\n    population = filtered_df.loc[:, '2010'].values[0]\n    return [html.H3(country),\n            f'The population of {country} in 2010 was\n{population:,.0f}.']\n```"]