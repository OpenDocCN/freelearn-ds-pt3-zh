["```py\npython3.10 -m pip install pymc\n```", "```py\n    rng = np.random.default_rng(12345) \n    ```", "```py\n    # changing seed for repeatability\n    ```", "```py\n    data = np.arange(15)\n    ```", "```py\n    probabilities = np.array(\n    ```", "```py\n         [0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05, 0.025,\n    ```", "```py\n         0.025, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025]\n    ```", "```py\n    )\n    ```", "```py\nassert round(sum(probabilities), 10) == 1.0,\n    \"Probabilities must sum to 1\"\n```", "```py\nselected = rng.choice(data,p=probabilities,replace=True)\n# 0\n```", "```py\nselected_array = rng.choice(data, p=probabilities,  replace=True, size=(5, 5))\n#array([[ 1, 6, 4, 1, 1],\n#         [ 2, 0, 4, 12, 0],\n#         [12, 4, 0, 1, 10],\n#         [ 4, 1, 5, 0, 0],\n#         [ 0, 1, 1, 0, 7]])\n```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345) # changing seed for reproducibility\n```", "```py\n    random_floats = rng.random(size=(5, 5))\n    ```", "```py\n    # array([[0.22733602, 0.31675834, 0.79736546, 0.67625467, 0.39110955],\n    ```", "```py\n    #           [0.33281393, 0.59830875, 0.18673419, 0.67275604, 0.94180287],\n    ```", "```py\n    #           [0.24824571, 0.94888115, 0.66723745, 0.09589794, 0.44183967],\n    ```", "```py\n    #           [0.88647992, 0.6974535 , 0.32647286, 0.73392816, 0.22013496],\n    ```", "```py\n    #           [0.08159457, 0.1598956 , 0.34010018, 0.46519315, 0.26642103]])\n    ```", "```py\n    random_ints = rng.integers(1, 20, endpoint=True, size=10)\n    ```", "```py\n    # array([12, 17, 10, 4, 1, 3, 2, 2, 3, 12])\n    ```", "```py\n    dist = rng.random(size=1000)\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    ax.hist(dist, color=\"k\", alpha=0.6)\n    ```", "```py\n    ax.set_title(\"Histogram of random numbers\")\n    ```", "```py\n    ax.set_xlabel(\"Value\")\n    ```", "```py\n    ax.set_ylabel(\"Density\")\n    ```", "```py\nfrom numpy import random\n```", "```py\n    seed_seq = random.SeedSequence()\n    ```", "```py\n    print(seed_seq.entropy)\n    ```", "```py\n    # 9219863422733683567749127389169034574\n    ```", "```py\n    bit_gen = random.MT19937(seed_seq)\n    ```", "```py\n    rng = random.Generator(bit_gen)\n    ```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\n    mu = 5.0 # mean value\n    ```", "```py\n    sigma = 3.0 # standard deviation\n    ```", "```py\n    rands = rng.normal(loc=mu, scale=sigma, size=10000)\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    ax.hist(rands, bins=20, color=\"k\", alpha=0.6)\n    ```", "```py\n    ax.set_title(\"Histogram of normally distributed data\")\n    ```", "```py\n    ax.set_xlabel(\"Value\")\n    ```", "```py\n    ax.set_ylabel(\"Density\")\n    ```", "```py\n    def normal_dist_curve(x):\n    ```", "```py\n        return 10000*np.exp(\n    ```", "```py\n            -0.5*((x-mu)/sigma)**2)/(sigma*np.sqrt(2*np.pi))\n    ```", "```py\n    x_range = np.linspace(-5, 15)\n    ```", "```py\n    y = normal_dist_curve(x_range)\n    ```", "```py\n    ax.plot(x_range, y, \"k--\")\n    ```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\n    rate = 4.0\n    ```", "```py\n    inter_arrival_times = rng.exponential(\n    ```", "```py\n        scale=1./rate, size=50)\n    ```", "```py\n    arrivals = np.add.accumulate(inter_arrival_times)\n    ```", "```py\n    count = np.arange(50)\n    ```", "```py\n    fig1, ax1 = plt.subplots()\n    ```", "```py\n    ax1.step(arrivals, count, where=\"post\")\n    ```", "```py\n    ax1.set_xlabel(\"Time\")\n    ```", "```py\n    ax1.set_ylabel(\"Number of arrivals\")\n    ```", "```py\n    ax1.set_title(\"Arrivals over time\")\n    ```", "```py\n    def probability(events, time=1, param=rate):\n    ```", "```py\n        return ((param*time)**events/factorial(\n    ```", "```py\n            events))*np.exp(- param*time)\n    ```", "```py\n    fig2, ax2 = plt.subplots()\n    ```", "```py\n    ax2.plot(N, probability(N), \"k\", label=\"True distribution\")\n    ```", "```py\n    ax2.set_xlabel(\"Number of arrivals in 1 time unit\")\n    ```", "```py\n    ax2.set_ylabel(\"Probability\")\n    ```", "```py\n    ax2.set_title(\"Probability distribution\")\n    ```", "```py\n    estimated_scale = np.mean(inter_arrival_times)\n    ```", "```py\n    estimated_rate = 1.0/estimated_scale\n    ```", "```py\n    ax2.plot(N, probability(\n    ```", "```py\n        N, param=estimated_rate),\n    ```", "```py\n        \"k--\",label=\"Estimated distribution\")\n    ```", "```py\n    ax2.legend()\n    ```", "```py\n    from scipy.stats import beta as beta_dist\n    ```", "```py\n    beta_pdf = beta_dist.pdf\n    ```", "```py\n    prior_alpha = 25\n    ```", "```py\n    prior_beta = 75\n    ```", "```py\n    args = (prior_alpha, prior_beta)\n    ```", "```py\n    prior_over_33, err = sp.integrate.quad(\n    ```", "```py\n        beta_pdf, 0.33, 1, args=args)\n    ```", "```py\n    print(\"Prior probability\", prior_over_33)\n    ```", "```py\n    # 0.037830787030165056\n    ```", "```py\n    observed_successes = 122\n    ```", "```py\n    observed_failures = 257\n    ```", "```py\n    posterior_alpha = prior_alpha + observed_successes\n    ```", "```py\n    posterior_beta = prior_beta + observed_failures\n    ```", "```py\n    args = (posterior_alpha, posterior_beta)\n    ```", "```py\n    posterior_over_33, err2 = sp.integrate.quad(\n    ```", "```py\n        beta_pdf, 0.33, 1, args=args)\n    ```", "```py\n    print(\"Posterior probability\", posterior_over_33)\n    ```", "```py\n    # 0.13686193416281017\n    ```", "```py\n    p = np.linspace(0, 1, 500)\n    ```", "```py\n    prior_dist = beta_pdf(p, prior_alpha, prior_beta)\n    ```", "```py\n    posterior_dist = beta_pdf(\n    ```", "```py\n        p, posterior_alpha, posterior_beta)\n    ```", "```py\n    fig, ax = plt.subplots()\n    ```", "```py\n    ax.plot(p, prior_dist, \"k--\", label=\"Prior\")\n    ```", "```py\n    ax.plot(p, posterior_dist, \"k\", label=\"Posterior\")\n    ```", "```py\n    ax.legend()\n    ```", "```py\n    ax.set_xlabel(\"Success rate\")\n    ```", "```py\n    ax.set_ylabel(\"Density\")\n    ```", "```py\n    ax.set_title(\"Prior and posterior distributions for success rate\")\n    ```", "```py\nfrom numpy.random import default_rng\nrng = default_rng(12345)\n```", "```py\nimport pymc as pm\n```", "```py\n    def underlying(x, params):\n    ```", "```py\n         return params[0]*x**2 + params[1]*x + params[2]\n    ```", "```py\n    size = 100\n    ```", "```py\n    true_params = [2, -7, 6]\n    ```", "```py\n    x_vals = np.linspace(-5, 5, size)\n    ```", "```py\n    raw_model = underlying(x_vals, true_params)\n    ```", "```py\n    noise = rng.normal(loc=0.0, scale=10.0, size=size)\n    ```", "```py\n    sample = raw_model + noise\n    ```", "```py\n    fig1, ax1 = plt.subplots()\n    ```", "```py\n    ax1.scatter(x_vals, sample,\n    ```", "```py\n        label=\"Sampled data\", color=\"k\", \n    ```", "```py\n        alpha=0.6)\n    ```", "```py\n    ax1.plot(x_vals, raw_model,\n    ```", "```py\n        \"k--\", label=\"Underlying model\")\n    ```", "```py\n    ax1.set_title(\"Sampled data\")\n    ```", "```py\n    ax1.set_xlabel(\"x\")\n    ```", "```py\n    ax1.set_ylabel(\"y\")\n    ```", "```py\n    with pm.Model() as model:\n    ```", "```py\n        params = pm.Normal(\n    ```", "```py\n            \"params\", mu=1, sigma=1, shape=3)\n    ```", "```py\n    y = underlying(x_vals, params)\n    ```", "```py\n    y_obs = pm.Normal(\"y_obs\",\n    ```", "```py\n        mu=y, sigma=2, observed=sample)\n    ```", "```py\n        trace = pm.sample(cores=4)\n    ```", "```py\n    fig2, axs2 = plt.subplots(1, 3, tight_layout=True)\n    ```", "```py\n    pm.plot_posterior(trace, ax=axs2, color=\"k\")\n    ```", "```py\n    estimated_params = trace.posterior[\"params\"].mean(\n    ```", "```py\n        axis=(0, 1)). to_numpy()\n    ```", "```py\n    print(\"Estimated parameters\", estimated_params)\n    ```", "```py\n    # Estimated parameters [ 2.03220667 -7.09727509  5.27548983]\n    ```", "```py\n    estimated = underlying(x_vals, estimated_params)\n    ```", "```py\n    fig3, ax3 = plt.subplots()\n    ```", "```py\n    ax3.plot(x_vals, raw_model, \"k\", label=\"True model\")\n    ```", "```py\n    ax3.plot(x_vals, estimated, \"k--\", label=\"Estimated model\")\n    ```", "```py\n    ax3.set_title(\"Plot of true and estimated models\")\n    ```", "```py\n    ax3.set_xlabel(\"x\")\n    ```", "```py\n    ax3.set_ylabel(\"y\")\n    ```", "```py\n    ax3.legend()\n    ```", "```py\nimport numpy as np\nfrom numpy.random import default_rng\ndef estimate_pi(n_points=10000):\n    rng = default_rng()\n    points = rng.uniform(-1, 1, size=(2, n_points))\n    inside = np.less(points[0, :]**2 + points[1, :]**2, 1)\n    return 4.0*inside.sum() / n_points\n```", "```py\nestimate_pi()  # 3.14224\n```", "```py\nfrom statistics import mean\nresults = list(estimate_pi() for _ in  range(100))\nprint(mean(results))\n```"]