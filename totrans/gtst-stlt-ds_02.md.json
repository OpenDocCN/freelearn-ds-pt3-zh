["```py\npip install streamlit\n```", "```py\nmkdir streamlit_apps\ncd streamlit_apps\n```", "```py\nmkdir plotting_app\ncd plotting_app\ntouch plot_demo.py\n```", "```py\nimport streamlit as st\nimport time\nimport numpy as np\nprogress_bar = st.sidebar.progress(0)\nstatus_text = st.sidebar.empty()\nlast_rows = np.random.randn(1, 1)\nchart = st.line_chart(last_rows)\nfor i in range(1, 101):\n    new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n    status_text.text(\"%i%% Complete\" % i)\n    chart.add_rows(new_rows)\n    progress_bar.progress(i)\n    last_rows = new_rows\n    time.sleep(0.05)\nprogress_bar.empty()\n# Streamlit widgets automatically run the script from top to bottom. Since\n# this button is not connected to any other logic, it just causes a plain\n# rerun.\nst.button(\"Re-run\")\n```", "```py\nstreamlit run plot_demo.py\n```", "```py\nimport streamlit as st\nimport time\nimport numpy as np\nprogress_bar = st.sidebar.progress(0)\nstatus_text = st.sidebar.empty()\nlast_rows = np.random.randn(1, 1)\nchart = st.line_chart(last_rows)\nfor i in range(1, 101):\n    new_rows = last_rows[-1, :] + np.random.randn(50, 1).cumsum(axis=0)\n    status_text.text(\"%i%% Complete\" % i)\n    chart.add_rows(new_rows)\n    progress_bar.progress(i)\n    last_rows = new_rows\n    time.sleep(0.05)\nprogress_bar.empty()\n# Streamlit widgets automatically run the script from top to bottom. Since\n# this button is not connected to any other logic, it just causes a plain\n# rerun.\nst.button(\"Re-run\")\n```", "```py\nmkdir clt_app\ncd clt_app\ntouch clt_demo.py\n```", "```py\nimport streamlit as st\nst.write('Hello World')\n```", "```py\nstreamlit run clt_demo.py\n```", "```py\nimport streamlit as st \nimport numpy as np \nbinom_dist = np.random.binomial(1, .5, 100)\nst.write(np.mean(binom_dist))\n```", "```py\nimport streamlit as st \nimport numpy as np \nimport matplotlib.pyplot as plt\nbinom_dist = np.random.binomial(1, .5, 1000)\nlist_of_means = []\nfor i in range(0, 1000):\n     list_of_means.append(np.random.choice(binom_dist, 100, replace=True).mean())\nfig, ax = plt.subplots()\nax = plt.hist(list_of_means)\nst.pyplot(fig)\n```", "```py\nimport streamlit as st \nimport numpy as np \nimport matplotlib.pyplot as plt\nbinom_dist = np.random.binomial(1, .5, 1000)\nlist_of_means = []\nfor i in range(0, 1000):\n     list_of_means.append(np.random.choice(binom_dist, 100, replace=True).mean())\nplt.hist(list_of_means)\nst.pyplot()\n```", "```py\nimport streamlit as st \nimport numpy as np \nimport matplotlib.pyplot as plt\nbinom_dist = np.random.binomial(1, .5, 1000)\nlist_of_means = []\nfor i in range(0, 1000):\n     list_of_means.append(np.random.choice(binom_dist, 100, replace=True).mean())\nplt.hist(list_of_means)\nst.pyplot()\nplt.hist([1,1,1,1])\nst.pyplot()\n```", "```py\nimport streamlit as st \nimport numpy as np \nimport matplotlib.pyplot as plt\nbinom_dist = np.random.binomial(1, .5, 1000)\nlist_of_means = []\nfor i in range(0, 1000):\n     list_of_means.append(np.random.choice(binom_dist, 100, replace=True).mean())\nfig1, ax1 = plt.subplots()\nax1 = plt.hist(list_of_means)\nst.pyplot(fig1)\nfig2, ax2 = plt.subplots()\nax2 = plt.hist([1,1,1,1])\nst.pyplot(fig2)\n```", "```py\nimport streamlit as st \nimport numpy as np \nimport matplotlib.pyplot as plt\nperc_heads = st.number_input(label = 'Chance of Coins Landing on Heads', min_value = 0.0, max_value = 1.0, value = .5)\nbinom_dist = np.random.binomial(1, perc_heads, 1000)\nlist_of_means = []\nfor i in range(0, 1000):\n     list_of_means.append(np.random.choice(binom_dist, 100, replace=True).mean())\nfig, ax = plt.subplots()\nax = plt.hist(list_of_means, range=[0,1])\nst.pyplot(fig)\n```", "```py\nimport streamlit as st  \nimport numpy as np  \nimport matplotlib.pyplot as plt \nperc_heads = st.number_input(label='Chance of Coins Landing on Heads', min_value=0.0,  max_value=1.0, value=.5) \ngraph_title = st.text_input(label='Graph Title')\nbinom_dist = np.random.binomial(1, perc_heads, 1000) \nlist_of_means = [] \nfor i in range(0, 1000): \nlist_of_means.append(np.random.choice(binom_dist, 100, replace=True).mean()) \n\nfig, ax = plt.subplots() \nplt.hist(list_of_means, range=[0,1])\nplt.title(graph_title)\nst.pyplot(fig)\n```", "```py\nimport streamlit as st\nimport numpy as np\nimport matplotlib.pyplot as plt\nst.title('Illustrating the Central Limit Theorem with Streamlit')\nst.subheader('An App by Tyler Richards')\nst.write(('This app simulates a thousand coin flips using the chance of heads input below,' \n     'and then samples with replacement from that population and plots the histogram of the'\n     ' means of the samples, in order to illustrate the Central Limit Theorem!'))\nperc_heads = st.number_input(\n    label='Chance of Coins Landing on Heads', min_value=0.0, max_value=1.0, value=.5)\nbinom_dist = np.random.binomial(1, perc_heads, 1000)\nlist_of_means = []\nfor i in range(0, 1000):\n    list_of_means.append(np.random.choice(\n        binom_dist, 100, replace=True).mean())\nfig, ax = plt.subplots()\nax = plt.hist(list_of_means)\nst.pyplot(fig)\n```"]