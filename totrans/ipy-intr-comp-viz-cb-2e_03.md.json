["```py\nIn [1]: %connect_info\n{\n  \"stdin_port\": 53978,\n  \"ip\": \"127.0.0.1\", \n  \"control_port\": 53979, \n  \"hb_port\": 53980, \n  \"signature_scheme\": \"hmac-sha256\", \n  \"key\": \"053...349\", \n  \"shell_port\": 53976, \n  \"transport\": \"tcp\", \n  \"iopub_port\": 53977\n}\nPaste the above JSON code into a file, and connect with:\n    $> ipython <app> --existing <file>\nor, if you are local, you can connect with just:\n    $> ipython <app> --existing kernel-6e0...b92.json\nor even just:\n    $> ipython <app> --existing\nif this is the most recent IPython session you have started.\n```", "```py\nIn [1]: !pip install ipythonblocks\n```", "```py\n    In [1]: import time\n            from IPython.display import clear_output\n            from ipythonblocks import BlockGrid, colors\n    ```", "```py\n    In [2]: grid = BlockGrid(width=5, height=5,\n                             fill=colors['Purple'])\n            grid.show()\n    ```", "```py\n    In [3]: grid[0,0] = colors['Lime']\n            grid[-1,0] = colors['Lime']\n            grid[:,-1] = colors['Lime']\n            grid.show()\n    ```", "```py\n    In [4]: n = 5\n            grid = BlockGrid(width=2*n+1, \n                             height=2*n+1, \n                             fill=colors['White'])\n            A = grid[n+1:,:n]\n            B = grid[:n,n+1:]\n            C = grid[n+1:,n+1:]\n            A[:,:] = colors['Cyan']\n            B[:,:] = colors['Lime']\n            C[:,:] = colors['Yellow']\n            grid.show()\n    ```", "```py\n    In [5]: for i in range(n):\n                for j in range(n):\n                    # We reset the matrix colors.\n                    A[:,:] = colors['Cyan']\n                    B[:,:] = colors['Lime']\n                    C[:,:] = colors['Yellow']\n                    # We highlight the adequate rows\n                    # and columns in red.\n                    A[i,:] = colors['Red']\n                    B[:,j] = colors['Red']\n                    C[i,j] = colors['Red']\n                    # We animate the grid in the loop.\n                    clear_output()\n                    grid.show()\n                    time.sleep(0.25)\n    ```", "```py\n    In [6]: from PIL import Image\n            imdata = Image.open('data/photo.jpg').getdata()\n    ```", "```py\n    In [7]: rows, cols = imdata.size\n            grid = BlockGrid(width=rows, height=cols,\n                             block_size=4, lines_on=False)\n            for block, rgb in zip(grid, imdata):\n                block.rgb = rgb\n            grid.show()\n    ```", "```py\n    In [1]: with open('data/test.ipynb', 'r') as f:\n                contents = f.read()\n            print(len(contents))\n    3787\n    ```", "```py\n    {\n     \"metadata\": {\n      \"celltoolbar\": \"Edit Metadata\",\n      \"name\": \"\",\n      \"signature\": \"sha256:50db...\"\n     },\n     \"nbformat\": 3,\n     \"nbformat_minor\": 0,\n     \"worksheets\": [\n      {\n    ...\n         \"source\": [\n          \"# First chapter\"\n         ]\n        },\n      ...\n       ],\n       \"metadata\": {}\n      }\n     ]\n    }\n    ```", "```py\n    In [3]: import json\n            nb = json.loads(contents)\n    ```", "```py\n    In [4]: print(nb.keys())\n            print('nbformat ' + str(nb['nbformat']) + \n                  '.' + str(nb['nbformat_minor']))\n    [u'nbformat', u'nbformat_minor', u'worksheets', u'metadata']\n    nbformat 3.0\n    ```", "```py\n    In [5]: nb['worksheets'][0].keys()\n    Out[5]: [u'cells', u'metadata']\n    ```", "```py\n    In [6]: nb['worksheets'][0]['cells'][1]\n    Out[6]: {u'cell_type': u'markdown',\n     u'metadata': {u'my_field': [u'value1', u'2405']},\n                   u'source': [u\"Let's write ...:\\n\", ...]}\n    In [7]: nb['worksheets'][0]['cells'][2]\n    Out[7]: {u'cell_type': u'code',\n             u'collapsed': False,\n             u'input': [u'import numpy as np\\n', ...],\n             u'language': u'python',\n             u'metadata': {},\n             u'outputs': [\n                          {u'metadata': {},\n                           u'output_type': u'display_data',\n                           u'png': u'iVB...mCC\\n',\n                           u'prompt_number': 1}]}\n    ```", "```py\n    In [8]: cells = nb['worksheets'][0]['cells']\n            nm = len([cell for cell in cells\n                      if cell['cell_type'] == 'markdown'])\n            nc = len([cell for cell in cells\n                      if cell['cell_type'] == 'code'])\n            print((\"There are {nm} Markdown cells and \"\n                   \"{nc} code cells.\").format(nm=nm, nc=nc))\n    There are 2 Markdown cells and 1 code cells.\n    ```", "```py\n    In [9]: png = cells[2]['outputs'][0]['png']\n            cells[2]['outputs'][0]\n    Out[9]: {u'metadata': {},\n             u'output_type': u'display_data',\n             u'png': u'iVBORwoAAAANSUhE...ErAAAElTkQmCC\\n'}\n    ```", "```py\n    In [10]: !ipython nbconvert --to html data/test.ipynb\n    [NbConvertApp] Writing 187617 bytes to test.html\n    ```", "```py\n    In [11]: from IPython.display import IFrame\n             IFrame('test.html', 600, 200)\n    ```", "```py\n    In [12]: %%writefile mytemplate.tplx\n             ((*- extends 'article.tplx' -*))\n\n             ((* block author *))\n             \\author{Cyrille Rossant}\n             ((* endblock author *))\n\n             ((* block title *))\n             \\title{My document}\n             ((* endblock title *))\n    Writing mytemplate.tplx\n    ```", "```py\n    In [13]: !ipython nbconvert --to latex --template mytemplate data/test.ipynb\n             !pdflatex test.tex\n    [NbConvertApp] PDF successfully created\n    ```", "```py\n    In [1]: %%javascript\n            // This function allows us to add buttons \n            // to the notebook toolbar.\n            IPython.toolbar.add_buttons_group([\n            {\n                // The button's label.\n                'label': 'renumber all code cells',\n\n                // The button's icon.\n                // See a list of Font-Awesome icons here:\n                // http://fortawesome.github.io/Font-\n                //                              Awesome/icons/\n                'icon': 'icon-list-ol',\n\n                // The callback function.\n                'callback': function () {\n\n                    // We retrieve the lists of all cells.\n                    var cells = IPython.notebook.get_cells();\n\n                    // We only keep the code cells.\n                    cells = cells.filter(function(c)\n                      {\n                          return c instanceof IPython.CodeCell; \n                      })\n\n                    // We set the input prompt of all code \n                    // cells.\n                    for (var i = 0; i < cells.length; i++) {\n                        cells[i].set_input_prompt(i + 1);\n                    }\n                }\n            }]);\n    ```", "```py\n    $([IPython.events]).on('app_initialized.NotebookApp',\n        function(){\n            // Copy the JavaScript code (in step 1) here.\n        });\n    ```", "```py\n    In [1]: !ipython profile create custom_css\n    ```", "```py\n    In [2]: dir = !ipython locate profile custom_css\n            dir = dir[0]\n    In [3]: import os\n            csspath = os.path.realpath(os.path.join(\n                        dir, 'static/custom/custom.css'))\n    In [4]: csspath\n    Out[4]: '~\\.ipython\\profile_custom_css\\static\\\n                                           custom\\custom.css'\n    ```", "```py\n    In [5]: %%writefile {csspath}\n\n            body {\n                /* Background color for the whole notebook. */\n                background-color: #f0f0f0;\n            }\n\n            /* Level 1 headers. */\n            h1 {\n                text-align: right;\n                color: red;\n            }\n\n            /* Code cells. */\n            div.input_area > div.highlight > pre {\n                font-size: 10px;\n            }\n\n            /* Output images. */\n            div.output_area img {\n                border: 3px #ababab solid;\n                border-radius: 8px;\n            }\n\n            /* Selected cells. */\n            div.cell.selected {\n                border: 3px #ababab solid;\n                background-color: #ddd;\n            }\n\n            /* Code cells in edit mode. */\n            div.cell.edit_mode {\n                border: 3px red solid;\n                background-color: #faa;\n            }\n    Overwriting C:\\Users\\Cyrille\\.ipython\\profile_custom_css\\static\\custom\\custom.css\n    ```", "```py\n    In [6]: !cp {csspath} custom.css\n            !ipython nbconvert --to html data/test.ipynb\n    [NbConvertApp] Writing 187617 bytes to test.html\n    ```", "```py\n    In [7]: from IPython.display import IFrame\n            IFrame('test.html', 600, 650)\n    ```", "```py\n    In [1]: import numpy as np\n            import os\n            from IPython.display import (Audio, display,\n                                         clear_output)\n            from IPython.html import widgets\n            from functools import partial\n    ```", "```py\n    In [2]: dir = 'data/synth'\n    In [3]: # This is the list of notes.\n            notes = 'C,C#,D,D#,E,F,F#,G,G#,A,A#,B,C'.split(',')\n    In [4]: def play(note, octave=0):\n                \"\"\"This function displays an HTML Audio element\n                that plays automatically when it appears.\"\"\"\n                f = os.path.join(dir, \n                     \"piano_{i}.mp3\".format(i=note+12*octave))\n                clear_output()\n                display(Audio(filename=f, autoplay=True))\n    ```", "```py\n    In [5]: piano = widgets.ContainerWidget()\n    ```", "```py\n    In [6]: octave_slider = widgets.IntSliderWidget()\n            octave_slider.max = 1\n            octave_slider\n    ```", "```py\n    In [7]: buttons = []\n            for i, note in enumerate(notes):\n                button = widgets.ButtonWidget(description=note)\n\n                def on_button_clicked(i, _):\n                    play(i+1, octave_slider.value)\n\n                button.on_click(partial(on_button_clicked, i))\n\n                button.set_css({\n                          'width': '30px', \n                          'height': '60px',\n                          'padding': '0',\n                          'color': \n                              ('black', 'white')['#' in note],\n                          'background':\n                              ('white', 'black')['#' in note],\n                               'border': '1px solid black',\n                               'float': 'left'})\n\n                buttons.append(button)\n    ```", "```py\n    In [8]: piano.children = buttons\n    In [9]: container = widgets.ContainerWidget()\n            container.children = [octave_slider,\n                                  piano]\n    ```", "```py\n    In [10]: display(container)\n             piano.remove_class('vbox')\n             piano.add_class('hbox')\n    ```", "```py\n    require(['/static/custom/jquery.handsontable.full.js']);\n    ```", "```py\n    @import \"/static/custom/jquery.handsontable.full.css\"\n    ```", "```py\n    In [1]: from IPython.html import widgets\n            from IPython.display import display\n            from IPython.utils.traitlets import Unicode\n    ```", "```py\n    In [2]: class HandsonTableWidget(widgets.DOMWidget):\n                _view_name = Unicode('HandsonTableView',\n                                     sync=True)\n                value = Unicode(sync=True)\n    ```", "```py\n        In [3]: %%javascript\n        var table_id = 0;\n        require([\"widgets/js/widget\"], function(WidgetManager){    \n            // Define the HandsonTableView\n            var HandsonTableView = IPython.DOMWidgetView.extend({\n\n                render: function(){\n                    // Initialization: creation of the HTML elements\n                    // for our widget.\n\n                    // Add a <div> in the widget area.\n                    this.$table = $('<div />')\n                        .attr('id', 'table_' + (table_id++))\n                        .appendTo(this.$el);\n\n                    // Create the Handsontable table.\n                    this.$table.handsontable({\n                    });\n\n                },\n\n                update: function() {\n                    // Python --> Javascript update.\n\n                    // Get the model's JSON string, and parse it.\n                    var data = $.parseJSON(this.model.get('value'));\n\n                    // Give it to the Handsontable widget.\n                    this.$table.handsontable({data: data});\n\n                    return HandsonTableView.__super__.\n                                                 update.apply(this);\n                },\n\n                // Tell Backbone to listen to the change event \n                // of input controls.\n                events: {\"change\": \"handle_table_change\"},\n\n                handle_table_change: function(event) {\n                    // Javascript --> Python update.\n\n                    // Get the table instance.\n                    var ht = this.$table.handsontable('getInstance');\n\n                    // Get the data, and serialize it in JSON.\n                    var json = JSON.stringify(ht.getData());\n\n                    // Update the model with the JSON string.\n                    this.model.set('value', json);\n\n                    this.touch();\n                },\n            });\n\n            // Register the HandsonTableView with the widget manager.\n            WidgetManager.register_widget_view(\n                'HandsonTableView', HandsonTableView);\n        });\n        ```", "```py\n    In [4]: from io import StringIO\n            import numpy as np\n            import pandas as pd\n    In [5]: class HandsonDataFrame(object):\n                def __init__(self, df):\n                    self._df = df\n                    self._widget = HandsonTableWidget()\n                    self._widget.on_trait_change(\n                               self._on_data_changed, 'value')\n                    self._widget.on_displayed(self._on_displayed)\n\n                def _on_displayed(self, e):\n                    # DataFrame ==> Widget (upon initialization)\n                    json = self._df.to_json(orient='values')\n                    self._widget.value = json\n\n                def _on_data_changed(self, e, val):\n                    # Widget ==> DataFrame (called every time the\n                    # user changes a value in the widget)\n                    buf = StringIO(val)\n                    self._df = pd.read_json(buf, orient='values')\n\n                def to_dataframe(self):\n                    return self._df\n\n                def show(self):\n                    display(self._widget)\n    ```", "```py\n    In [6]: data = np.random.randint(size=(3, 5),\n                                     low=100, high=900)\n            df = pd.DataFrame(data)\n            df\n    Out[6]:      \n    352  201  859  322  352\n    326  519  848  802  642\n    171  480  213  619  192\n    ```", "```py\n    In [7]: ht = HandsonDataFrame(df)\n            ht.show()\n    ```", "```py\n    In [8]: ht.to_dataframe()\n    Out[8]:\n    352  201  859   322  352\n    326  519  848  1024  642\n    171  480  213   619  192\n    ```", "```py\n    In [1]: from IPython.html.widgets import DOMWidget\n            from IPython.utils.traitlets import (Unicode, Bytes,\n                                                 Instance)\n            from IPython.display import display\n\n            from skimage import io, filter, color\n            import urllib\n            import base64\n            from PIL import Image\n            from io import BytesIO # to change in Python 2\n            import numpy as np\n            from numpy import array, ndarray\n            import matplotlib.pyplot as plt\n    ```", "```py\n    In [2]: def to_b64(img):\n                imgdata = BytesIO()\n                pil = Image.fromarray(img)\n                pil.save(imgdata, format='PNG')\n                imgdata.seek(0)\n                return urllib.parse.quote(\n                            base64.b64encode(\n                                imgdata.getvalue()))\n    In [3]: def from_b64(b64):\n                im = Image.open(BytesIO(\n                                        base64.b64decode(b64)))\n                return array(im)\n    ```", "```py\n    In [4]: def process_image(image):\n                img = filter.roberts(image[:,:,0]/255.)\n                return (255-img*255).astype(np.uint8)\n    ```", "```py\n    In [5]: \n    class Camera(DOMWidget):\n        _view_name = Unicode('CameraView', sync=True)\n\n        # This string contains the base64-encoded raw\n        # webcam image (browser -> Python).\n        imageurl = Unicode('', sync=True)\n\n        # This string contains the base64-encoded processed \n        # webcam image(Python -> browser).\n        imageurl2 = Unicode('', sync=True)\n\n        # This function is called whenever the raw webcam\n        # image is changed.\n        def _imageurl_changed(self, name, new):\n            head, data = new.split(',', 1)\n            if not data:\n                return\n\n            # We convert the base64-encoded string\n            # to a NumPy array.\n            image = from_b64(data)\n\n            # We process the image.\n            image = process_image(image)\n\n            # We convert the processed image\n            # to a base64-encoded string.\n            b64 = to_b64(image)\n\n            self.imageurl2 = 'data:image/png;base64,' + b64\n    ```", "```py\n    In [6]: %%javascript \n\n    var video        = $('<video>')[0];\n    var canvas       = $('<canvas>')[0];\n    var canvas2       = $('<img>')[0];\n    [...]\n\n    require([\"widgets/js/widget\"], function(WidgetManager){\n        var CameraView = IPython.DOMWidgetView.extend({\n            render: function(){\n                var that = this;\n\n                // We append the HTML elements.\n                setTimeout(function() {\n                    that.$el.append(video).\n                             append(canvas).\n                             append(canvas2);}, 200);\n\n                // We initialize the webcam.\n                [...]\n\n                // We initialize the size of the canvas.\n                video.addEventListener('canplay', function(ev){\n                    if (!streaming) {\n                      height = video.videoHeight / (\n                          video.videoWidth/width);\n                      video.setAttribute('width', width);\n                      video.setAttribute('height', height);\n                      [...]\n                      streaming = true;\n                    }\n                }, false);\n\n                // Play/Pause functionality.\n                var interval;\n                video.addEventListener('play', function(ev){\n                    // We get the picture every 100ms.    \n                    interval = setInterval(takepicture, 100);\n                })\n                video.addEventListener('pause', function(ev){\n                    clearInterval(interval);\n                })\n                // This function is called at each time step.\n                // It takes a picture and sends it to the model.\n                function takepicture() {\n                    canvas.width = width; canvas.height = height;\n                    canvas2.width = width; canvas2.height = height;\n\n                    video.style.display = 'none';\n                    canvas.style.display = 'none';\n\n                    // We take a screenshot from the webcam feed and \n                    // we put the image in the first canvas.\n                    canvas.getContext('2d').drawImage(video, \n                        0, 0, width, height);\n\n                    // We export the canvas image to the model.\n                    that.model.set('imageurl',\n                                   canvas.toDataURL('image/png'));\n                    that.touch();\n                }\n            },\n\n            update: function(){\n                // This function is called whenever Python modifies\n                // the second (processed) image. We retrieve it and\n                // we display it in the second canvas.\n                var img = this.model.get('imageurl2');\n                canvas2.src = img;\n                return CameraView.__super__.update.apply(this);\n            }\n        });\n\n        // Register the view with the widget manager.\n        WidgetManager.register_widget_view('CameraView', \n                                           CameraView);\n    });\n    ```", "```py\n    In [7]: c = Camera()\n            display(c)\n    ```"]