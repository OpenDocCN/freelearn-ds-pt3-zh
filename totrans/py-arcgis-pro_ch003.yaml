- en: Basics of ArcPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have an understanding of python syntax you can start working with
    the **ArcPy** package. ArcPy is the Python package provided by ArcGIS to perform
    and automate geoprocessing and map production tools tasks. In addition to the
    **geoprocessing** tools available in ArcGIS you have access to additional modules,
    functions, and classes. When combined you can create workflows and standalone
    tools that simplify and automate complex analysis and map production.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring your Python Environment is set up for ArcPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArcPy Tools and how to use them in ArcGIS Pro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing **environment settings** in ArcPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions** in ArcPy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArcPy **Module**s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking your ArcPy Install
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ArcPy package allows you access to the geoprocessing function of ArcGIS
    Pro. Python packages contain multiple modules, functions, and classes. A package
    is set up with a hierarchical structure and uses dot notation for the modules
    and functions.
  prefs: []
  type: TYPE_NORMAL
- en: ArcPy is installed with ArcGIS for Pro and ArcGIS Desktop. ArcPy has been used
    to write Python scripts in ArcGIS since ArcGIS 10.0\. It is the official ArcGIS
    scripting language and can be used to automate analysis and map production workflows.
    ArcGIS desktop uses Python 2.7, which is currently up to release 2.7.18\. ArcGIS
    Pro uses a new version of Python, Python 3\. The most recent release of Python
    3 is Python 3.9.5\. You can check what version of Python you have installed by
    going to the **Project>Python>Installed Packages** and finding **Python.**
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file18.png)![](img/file19.png)![](img/file20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To use the ArcPy package it must be imported. Most scripts start with import
    statements to allow access to all the modules that are part of the package. To
    import ArcPy use the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Importing ArcPy gives access to all of the geoprocessing tools and the modules
    included.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the modules are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arcpy.sa** (Spatial Anlayst)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arcpy.geocoding** (Geocoding)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arcpy.na** (Network Analyst)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arcpy.da** (Data Access)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arcoy.mp** (Mapping)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Later chapters will take a closer at the data access and mapping modules. Both
    of those are very powerful and can automate work.
  prefs: []
  type: TYPE_NORMAL
- en: Python IDLE Shell for ArcGIS Pro Install
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since Python and ArcPy are installed with ArcGIS Pro, if you are using the **IDLE
    Shell** for the version of Python installed with ArcGIS Pro you will not get an
    error when importing ArcPy. If you are using a different Python interpreter you
    will have to set it up to find the ArcPy module. Most of the time you will be
    writing scripts either directly into ArcGIS Pro’s Python window, an ArcGIS Notebook
    in ArcGIS Pro, or to turn into script tools, so it is easiest to use the Python
    IDLE that comes with the ArcGIS Pro install.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to ensure accessing the Python IDLE that comes with the install
    of ArcGIS Pro is to create a shortcut, as one is not created on install.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Find the path to run IDLE, for a typical ArcGIS Pro installation it is here:
    `C:\Program Files\ArcGIS\Pro\bin\Python\envs\arcgispro-py3\Lib\idlelib\idle.bat`
    *Double clicking* on that will open IDLE:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file21.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To create a shortcut, *right click* on your **desktop** and *click* **New>Shortcut**
    and paste the full path of the idle.bat file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file22.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Click* **Next**, and then give your shortcut name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file23.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: I suggest using a name that will allow you to remember this is the Python environment
    that was installed with ArcGIS Pro.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The icon will be the default shortcut icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![.](img/file24.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To change the icon to the standard Python IDLE Icon:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Right click* on it'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Click* **Properties**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On the **Shortcut** tab *click* **on Change Icon**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You may get an alert that there are no icons and that you need to choose an
    icon from a different file. If so click okay so you can navigate to the icon location.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Navigate to the Python IDLE location, which should be located here: `C:\Program
    Files\ArcGIS\Pro\bin\Python\envs\arcgispro-py3\Lib\idlelib\Icons`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A shortcut to access the IDLE install for ArcGIS Pro is now installed on the
    desktop. This install is a place to test snippets of code when working on complex
    scripts tools. Something that will be explored in later chapters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file25.png)'
  prefs: []
  type: TYPE_IMG
- en: '*When you want to use an IDLE to work with ArcGIS Pro you need to use this
    one as it is associated with your install of ArcGIS Pro.*'
  prefs: []
  type: TYPE_NORMAL
- en: A good way to ensure the correct IDLE is being used is to import arcpy. If three
    carets >>> will be displayed after the install was successful
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/file26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If not an error will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file27.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python IDLE Shell
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Python IDLE Shell is a good place to try out code as it is interactive
    and will display immediate results to code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file28.png)'
  prefs: []
  type: TYPE_IMG
- en: The IDLE Shell also shows how elements of the code will be interpreted using
    different colors. Strings are shown in green, functions are in purple, loops and
    condition statements are in orange, and results are in blue.
  prefs: []
  type: TYPE_NORMAL
- en: While it is useful to get immediate results from IDLE Shell it is not meant
    to be used for saving code. It is possible to copy it out if needed, but it is
    better practice to write it into a script file for saving.
  prefs: []
  type: TYPE_NORMAL
- en: To start a script file you *click* in the menu bar of the IDLE Shell on **File>New
    File**. This opens a new window that is an empty Python script file called Untitled.
    Unlike the IDLE Shell it doesn’t have a command prompt and the menu bar is different.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/file29.png)'
  prefs: []
  type: TYPE_IMG
- en: You can create a script file
  prefs: []
  type: TYPE_NORMAL
- en: Copy the previous code you wrote in IDLE into the script file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the carets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix the indentation to match below.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file30.png)![](img/file31.png)'
  prefs: []
  type: TYPE_IMG
- en: This new file `HelloLoop.py` has `.py` extension signifying that it is a Python
    file. It can be run by clicking **Run > Run Module**. Sending the results to the
    Python IDLE Shell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file32.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have an understanding of
  prefs: []
  type: TYPE_NORMAL
- en: How to ensure your Python environment is set up to work with ArcPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the IDLE Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to start a new script file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are now ready to look at the Python window in ArcGIS Pro and what you can
    do there.
  prefs: []
  type: TYPE_NORMAL
- en: Python Window in ArcGIS Pro
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ArcPy can be accessed not just through IDLE but by using the Python window in
    ArcGIS Pro.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file33.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python window allows you to write and run code directly in ArcGIS Pro and
    see the results of any geoprocessing tool as you run them. This can be an advantage
    when testing out new code to see what it is doing and how it is working. Code
    written in the Python window can then be copied or saved into large script tools.
    You will learn more about script tools in later chapters. For now let’s look at
    the Python window in ArcGIS Pro and see how powerful it can be.
  prefs: []
  type: TYPE_NORMAL
- en: Once you click on the icon the Python window will pop up, usually the first
    time it will be docked at the bottom of your screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file34.png)'
  prefs: []
  type: TYPE_IMG
- en: Like all windows in ArcGIS Pro the Python window can be docked anywhere or can
    be floating. You can move it to where it is best for you to work using the same
    process of dragging and hiding as you would any ArcGIS Pro window.
  prefs: []
  type: TYPE_NORMAL
- en: The top part of the window is called the **transcript** and is where code you
    have previously written is. The bottom where it says **Enter Python code here**
    is called the **prompt** and is where you would type code into. When you first
    open the Python window the transcript is blank as you haven’t written any code
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: Try some of the code you wrote in IDLE to see how it works in the Python window.
    Just like in IDLE when you enter a line of code you need to press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: Type in `x = 10 a`nd Press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file35.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Type in `y = 3` and Press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file36.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Type `x + y a`nd press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file37.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that this is working just like IDLE. *This means that all standard
    Python functions and tools will work in the Python window the same as they would
    in the IDLE Shell*.
  prefs: []
  type: TYPE_NORMAL
- en: The transcript can be cleared at any time by right clicking in the transcript
    box and selecting Clear Transcript. This does not remove your code or your variables
    from memory.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Click in the transcript and select **Clear Transcript**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file38.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Type `x + y` And press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file39.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see the variables for x and y were saved in memory and still usable
    even after clearing the transcript. These variables are even available if you
    save and close the project and open it again. *They are saved into the memory
    of the project so they can be used again later on the same project.* This can
    be useful but you will look at better ways to save code for reuse in the same
    and other projects in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Just like in the IDLE Shell the Python Window understands when you are writing
    multiple lines of connected code. You can see this by writing in the for the HelloLoop.py
    script you wrote earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Type in `String = “Hello”` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `i = 1` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Type in* `while i < 5:` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that the prompt window gets bigger and your cursor is indented. The Python
    Window understands that while statement is starting a block of code and is part
    of a multiline construct. As you continue to type in your code the prompt window
    will get bigger as additional lines are needed. The if statement is part of a
    multiline construct so it too will get the additional lines and indent as the
    while statement does
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Type in `if i == 1:` and press *Enter Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `print(string)` and press Enter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `else:` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `print(i)` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `i+=1` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you are doing writing your multiple lines of code and hit Enter you will
    just move down another line
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/file40.png)![](img/file41.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What happens if you forget the i += 1 and get an endless loop? How do you
    stop the loop?**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can either click the X in the bottom of the Python Window to stop the execution.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Or type *Ctrl*+*C* in the prompt window to stop the execution.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/file42.png)![](img/file43.png)'
  prefs: []
  type: TYPE_IMG
- en: ArcPy Environment Settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ArcPy environment settings allow you access to general geoprocessing settings
    as well as the geoprocessing settings of a specific tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For tools they act as parameters you can set to change the results of a tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many that can be used but you will find yourself using a few of them
    commonly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You are going to look at the most common one and see how to set it: `arcpy.env.workspace`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the workspace property of the environment class you can check and change
    your workspace or scratch workspace
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can check and set your **workspace**
  prefs: []
  type: TYPE_NORMAL
- en: Type in `arcpy.env.workspace` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The return you see is your current workspace.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file44.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can set your workspace
  prefs: []
  type: TYPE_NORMAL
- en: Type in `arcpy.env.workspace = r"C:\PythonBook\Project_2\Project_2.gdb"` and
    press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file45.png)'
  prefs: []
  type: TYPE_IMG
- en: You can check your scratch workspace in a similar way
  prefs: []
  type: TYPE_NORMAL
- en: '`Type in arcpy.env.workspace` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file46.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can set your scratch workspace
  prefs: []
  type: TYPE_NORMAL
- en: '`Type in arcpy.env.scratchWorkspace = r”C:\PythonBook\Project_2\Project_2.gdb”`
    and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file47.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting your scratch workspace and workspace is a good idea as it allows you
    to have a default location to send data you are creating. It is also the workspace
    that will be used when using the List functions you will explore below. In the
    examples you have set your workspace and scratch workspace to geodatabases. You
    could set them to folder or a feature dataset or any workspace you wanted.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the r in front of the path for the geodatabase?**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note the way you type in the locations. It has an r followed by the location
    enclosed in a double quote. The r stands for “raw string” and means that Python
    will read everything within the quotes exactly as it is written. This is important
    because the \ character in Python is an escape character and can be used to insert
    characters otherwise not allowed in a string. You have already seen how to use
    the escape character in a query to get quotes within the quotes of a string. Here
    though you don’t want the escape character so there are 3 options.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use an r in front of the quotes to create a raw string
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Change all the single \ to double \
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Change the single to \
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are many other environment settings that could be useful to you depending
    on the process you are running. Most of the settings that you find for a tool
    in the properties of a tool can be set in the environment settings. Things like
    analysis extent can be set with `arcpy.env.extent`, or a snap raster when doing
    raster analysis with `arcpy.env.snapRaster`.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remember that once you set an environment setting it stays
    set until you change it. You can change it and in more advanced script tools you
    will change it or have it set and reset throughout the code.
  prefs: []
  type: TYPE_NORMAL
- en: ArcPy Tools - Geoprocessing using ArcPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have some of the basics of how to use the Python Window it is time
    to look at how to use geoprocessing tools.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to use select, buffer, make feature layer, and select by
    feature layer tool, add field, and calculate field tools in the Python window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end result will be a feature class of bus stops within 1,000 feet of parks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To do some geoprocessing you will need some data. Make sure you have a map open
    in ArcGIS Pro and add in the CPAD_2020b_Units.shp data from where you downloaded
    it to. This data is California Protected Areas Database data that shows parks
    and other protected areas throughout the state of California. For more information
    about the dataset please go to [https://www.calands.org/](https://www.calands.org/).
  prefs: []
  type: TYPE_NORMAL
- en: You are going to use the Python window to select the a parks in Oakland, buffer
    them by 1,000 feet and select the bus stops within that 1,000 foot buffer, and
    write them to out to a new feature class.
  prefs: []
  type: TYPE_NORMAL
- en: Right click in the table of contents and select **attribute table** and see
    what the data shows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You are going to use the **AGENCY_NAME** field to run a Select tool to create
    a new feature class of just the protected areas in the City of Oakland. You are
    going to do this in the Python Window by typing in the following: `arcpy.Se` The
    Python window shows you some autocomplete options to help you find the tool you
    want. You are using the Select tool from the Analysis Toolset so you want **Select()
    analysis.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file49.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After selecting the tool you can see what **parameters** the tool expects. Hover
    on the tool to get a help window popping up showing the tool parameters. The select
    tool takes the following mandatory parameters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`in_features`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`out_features,`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: And the following optional parameter
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where_clause`. The where clause is in curly braces {} because it is optional.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The `in_features` is bold because it is the parameter the tool is currently
    looking to be entered. Type in the following in between the parenthesis to create
    the selection query `“CPAD_2020b_Units”,”CPAD_2020b_units_Oakland”,’”AGNCY_NAME
    = \’Oakland, City of\’` And press *Enter*![](img/file50.png)![](img/file51.png)![](img/file52.png)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After running it will look like this and you should have a new feature class
    that is just the protected areas in Oakland.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**How to write the query in the where clause so it works? Using the escape
    character “\” properly**'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The \ marks are escape characters that are necessary when you need to use multiple
    single or double quotes. In this instance since you are running a selection query
    on a shapefile the attribute field being selected on needs double quotes and the
    string value needs single quotes. The entire where clause needs to be inside a
    single or double quote. So the easiest option is wrap the entire query in a single
    quote and use the escape clauses around the string being selected. If you wanted
    to wrap the entire where clause in double quotes it would look like this `“/”AGNCY_NAME”
    = ‘Oakland, City of’”` Both will work the same.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you are working in an ArcGIS Pro project then a new file will be created
    in that project’s geodatabase as that is the default workspace. If you have set
    a workspace through the environment settings it will write to that workspace.
    If you are not then it will be stored in a temp space and not written to disk.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**How do you specify a different workspace if you don’t want to use the default
    workspace?**'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: To specify a different location you need to write the full path when saving.
    To write out a shapefile to the `MyProject` folder you would write the following
    `arcpy.analysis.Select(“CPAD_2020b_Units”,r”C:\PythonBook\MyProject\CPAD_2020b_Units_Oakland.shp”,’”AGNCY_Name”
    = \’Oakland, City of\’’)`
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now you can take the selected parks and buffer them by 1,000 feet. The buffer
    tool is in the **analysis** **toolbox** so the call it you type `arcpy.analysis.Buffer()`
    You can see the buffer tool parameters the buffer tool takes by hovering in the
    parenthesis. It takes the following mandatory parameters in this order
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`in_features`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`out_features`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`buffer_distance_or_field`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: And the following optional parameters in this order
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`line_side`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`line_end_type`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dissolve_option`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`dissolve_field`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`method`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You want to have a buffer of 1,000 feet for the parks, dissolved to just the
    `UNIT_NAME`, `AGENCY_NAME`, and `LABEL_NAME`. To get this you will be typing in
    the `in_features`, `out_featuers`, `buffer_distance`, `dissolve_option`, and `dissolve_field
    paramaters`. The `in_features`, `out_features`, and `buffer_distance` are the
    first 3 parameters, but the `dissolve_option` and `dissolve_field` are the 6^(th)
    and 7^(th) parameters. To make sure they are in those positions you will type
    a pair of single or double quotes in the 4^(th) and 5^(th) parameters. This signifies
    to the function that those optional parameters are blank, just as if they weren’t
    entered; and allows you to enter parameters after them. Type in `“CPAD_2020b_Units_Oakland”,”CPAD_2020b_Units_Oakland_1000ft”,”1000
    FEET”, “”,””,”LIST”,[“UNIT_NAME”,”AGNCY_NAME”,”LABEL_NAME”]` And press *Enter*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file53.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The buffers should have been added to your map. You can explore them and see
    what they look like. When you are ready you are going to now make a feature layer
    of the bus stops feature class with the **Make Feature Layer** Tool type in `arcpy.management.MakeFeatureLayer().`
    You can see that the Make Feature Layer tool takes two mandatory parameters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`in_features`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`out_layer`And the following optional parameters'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`where_clause`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`workspace`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`field_info`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are going to enter the following parameters to make a feature layer of all
    the bus stops by typing in the following inside the parenthesis. `“UniqueStops_Summer21”,”AC_TransitStops_Summer21”`
    And press *Enter*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file54.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The feature layer should have been added to your map. You can explore it and
    see that it is just like the UniqueStops_Summer21 feature class. But because it
    is a feature layer you can use the **Select Layer By Location** tool to select
    all of the bus stops within the buffer. Type in `arcpy.management.SelectLayerByLocation()`.
    You can see that the Select Layer By Location tool takes one mandatory parameter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`in_layer`And the following optional parameters'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`overlap_type`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`select_features`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`search_distance`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`selection_type`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`invert_spatial_relationship`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are going to enter the following parameters to select the bus stops within
    the 1,000 foot buffer by typing in the following inside the parenthesis. `“AC_TransitStops_Summer21”,”INTERSECT”,”CPAD_2020b_Units_Oakland_1000ft”`
    And press *Enter*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file55.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You should see the bus stops get selected. You can explore the data and see
    if this is what you were looking for. From here you can export your data to table,
    csv, or feature class. Or just use it for a map display. Right now you are going
    to export to a feature class for later use when you explore the data access module
    and using cursors. To do this you will use the **Copy Features tool**. Type in
    `arcpy.management.CopyFeatures()`. The Copy Features tool has two mandatory parameters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`in_features`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`out_features`And one optional parameter'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`config_keyword`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are going to enter the following parameters in the parenthesis to copy the
    selected bus stops out to a new feature class `“AC_TransitStops_Summer21”, “AC_TransitStops_Within1000ft_OaklandPark”`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your resulting feature class is displayed in your map and written to your current
    workspace. The next steps with this data will be explored in Chapter 4: Data Access
    and Rows. In there you will learn how to do this process all in memory and add
    the park names to the bus stops.'
  prefs: []
  type: TYPE_NORMAL
- en: Built in ArcPy Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ArcPy has many built in functions to help with geoprocessing. ArcPy functions
    look like geoprocessing tools in the way they are written. When you wrote the
    code to create a selection feature class you wrote `arcpy.analysis.select(in_features,out_features,{where_clause}`).
    By encasing the in features, out features, and where clause in parenthesis you
    were calling the function by passing to it those parameters. *That is all a function
    is, code that you can call later by passing different parameters to it.*
  prefs: []
  type: TYPE_NORMAL
- en: ArcPy has functions to assist with things such as the environment settings,
    describing data, licensing, ArcGIS Online, raster, listing data, along with functions
    for specific modules like the spatial analyst of mapping modules. In this section
    you will explore two of the more commonly used built in functions
  prefs: []
  type: TYPE_NORMAL
- en: Describe function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are common because they help you in setting up and completing iterative
    processes like doing the same analysis on different feature classes in one location.
  prefs: []
  type: TYPE_NORMAL
- en: Describe Function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The describe function will return different properties depending on what type
    of element it is. *The describe function can be called on a variety of elements,
    including but not limited to: shapefiles, geodatabases, feature classes, feature
    datasets, tables, LAS files, rasters and map documents.*'
  prefs: []
  type: TYPE_NORMAL
- en: The describe function returns an object with all of the properties so you need
    to create a variable to hold those properties and then call them later. You can
    try this on CPAD data.
  prefs: []
  type: TYPE_NORMAL
- en: Type `desc = arcpy.Describe(r”C:\PythonBook\cpad_2020b\CPAD_2020b\CPAD_2020b_Units.shp`
    And press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file57.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: It looks like nothing has happened but now you can use that desc variable to
    get information about the shapefile. You can see is what data type this is by
    typing `desc.dataType` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file58.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can also see what type of geometry a feature class has by typing in `desc.shapeType`
    and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file59.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that if you don’t know anything about a file you can call a describe
    function on it and use the properties to find out information about the file.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the sample above you know the data is a shapefile you can see how this information
    could be useful if you were searching through a folder and only wanted to run
    an analysis on the shapefiles.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: List Functions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: List functions are very powerful as they allow you to create a list of data
    in a workspace, which you can then iterate over. For these examples you are going
    to use the data in the `MyProject.gdb` geodatabase.
  prefs: []
  type: TYPE_NORMAL
- en: List functions take the current workspace you are in and will create a list
    of all the datasets for that type of list function. There are the following list
    functions
  prefs: []
  type: TYPE_NORMAL
- en: '`ListDatasets`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListFeatureClasses`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListFields`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListFiles`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListIndexes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListRasters`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListTables`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListVersions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListWorkspace`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListDatasets`, `ListFeatureClasses`, `ListFiles`, `ListRasters`, `ListTables`,
    and `ListWorkspaces` need to have the workspace set before being run as they will
    only run on the current workspace.'
  prefs: []
  type: TYPE_NORMAL
- en: Start by listing the workspaces that your `MyProject.gdb` is in. You need to
    first set your workspace to the location of the geodatabase. `arcpy.env.workspace
    = r”C:\\PythonBook\MyProject”` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file60.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next assign the ListWorkspaces function to a variable called wksp, `wksp = arcpy.ListWorkspaces()`
    and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file61.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The `ListWorkspaces` function has two optional parameters,
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Wildcard - used to limit the values returned to the list to those that match
    what you put in.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Workspace Type - used to limit the types of workspace.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can see what that looks like by just typing in `wksp` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file62.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can see it is all of the workspaces that are standard when creating a new
    project in ArcGIS Pro. They are a bit hard to read in that list. So to make them
    easier to read iterate through the list printing out each one. Type in `for w
    in wksp:` and press *Enter* `print(w)` and press *Enter* and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file63.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you can really read what you have
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file64.png)'
  prefs: []
  type: TYPE_IMG
- en: This is great as you can see all the workspace in the folder. But you just want
    the geodatabases in the folder. This is where you can use the parameters. For
    this you can use the workspace type parameter. The workspace parameter takes the
    following values as strings
  prefs: []
  type: TYPE_NORMAL
- en: Access - personal geodatabases will be selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coverage - coverage workspaces will be selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FileGDB - file geodatabases will be selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Folder - shapefile workspaces will be selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SDE - enterprise databases will be selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All - all workspaces - this is the default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To select just the file geodatabase you need to write this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Why is there a “” followed by a ,?**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first parameter is for the wildcard and writing “” will leave it blank.
    That needs to be there though as functions take the parameter in the order they
    are written in. If you write it like this `wksp = arpcy.ListWorkspaces(“FileGDB”)`
    the function will still run. But when you call it you won’t have any data in the
    list because there is no workspace called “FileGDB”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can see when calling the `wksp` variable you now have a list of just one
    value the `MyProject.gdb`
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file65.png)'
  prefs: []
  type: TYPE_IMG
- en: While there is just the one value in the list it is still a list and acts as
    such in Python. That means that functions in ArcPy that expect a string will fail
    if given a list. For example you cannot update the workspace to this geodatabase
    location by using the `wksp` variable
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file66.png)'
  prefs: []
  type: TYPE_IMG
- en: The elements of the list can be set as the workspace through by using different
    methods on the list. If you wanted to set each element of the list as a workspace
    you could do the following
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Type `for w in wksp:` press *Enter*
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Type `arcpy.env.workspace = w` press *Enter*
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Type `print(arcpy.env.workspace)` press *Enter* press *Enter*
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/file67.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What if you know you only have a single workspace that you are targeting?**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this example you only have one item in the list so it only runs once. In
    these cases where you do only have one item you could just write this `w = wksp[0]`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/file68.png)'
  prefs: []
  type: TYPE_IMG
- en: In fact when you know you only have one item in your list you can just write
    the following to set you workspace `arcpy.env.workspace = ListWorkspaces(“”,”FileGDB”)[0]`*Be
    careful with using this notation as if you have more than workspace you will only
    be setting the workspace to the first one on the list*
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that the workspace is set to your geodatabase you can use the ListFeatureClasses
    function to get a list of all the feature classes in the geodatabase and assign
    it to a variable.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to write the code to get a list of feature classes and then write
    a for loop to iterate through the list so you can easily read what feature classes
    are in your list
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file69.png)'
  prefs: []
  type: TYPE_IMG
- en: '`fcs = arcpy.ListFeatureClasses()`press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for fc in fcs:` press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(fc)` press *Enter.* press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file70.png)'
  prefs: []
  type: TYPE_IMG
- en: You now have a list that contains all the feature classes in your geodatabase.
    This list can be iterated through to give you a single feature class which you
    can run through other ArcPy functions or geoprocessing tools. You could use the
    Describe function from above to find only the feature classes of a certain geometry
    to make sure you only run your analysis on that.
  prefs: []
  type: TYPE_NORMAL
- en: You are starting with your list of feature classes stored in the variable fcs
    and will iterate through it like above when you just printed out the name. You
    will then determine use the ShapeType Property of feature classes to determine
    what the shape is of each feature class and print out a statement saying that.
  prefs: []
  type: TYPE_NORMAL
- en: The following code is what you will write into the Python window
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These are the steps to write it in
  prefs: []
  type: TYPE_NORMAL
- en: '`for fc in fcs:` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`desc = arcpy.Describe(fc)` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fcName = desc.name` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`if desc.shapeType == “Polygon”:` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elif desc.ShapeType == “Polyline”:` and press *Enter r*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elif desc.ShapeType == “Point”:` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(“Shape Type for “ + fcName + “ is “ + desc.ShapeType)` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`else:` and press *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(fcName + “ is not a Point, Line, or Polygon”)` and press *Enter* press
    *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file71.png)'
  prefs: []
  type: TYPE_IMG
- en: The for loop will iterate through each feature class. For that feature class
    you are creating a variable to hold the Describe properties of that feature class.
    You then create a variable to hold the name of that feature class. Then you write
    if/elif/else statements to test the ShapeType property of the Describe object.
    The output statement will look like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file72.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Could the if/elif statement be condensed?**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Yes it could be, depending on what you wanted. But if you don’t know what you
    are looking for sometimes it can be better to be specific. And now that you have
    this code written out you can save it and copy and paste certain sections. For
    example if you wanted to run separate geoprocessing tools on the point, lines,
    and polygons in your geodatabase you now have the sample if/elif statement to
    use.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Another way to select elements in the List functions before putting them into
    the list is to use the **wildcard parameter**. The wildcard limits what the function
    returns. It is not case sensitive and uses the * to include any number of characters
    before or after the *. Let’s look at some examples of this works using our current
    geodatabase workspace.
  prefs: []
  type: TYPE_NORMAL
- en: You can select all of the CPAD data
  prefs: []
  type: TYPE_NORMAL
- en: type in `cpad_fcs = arcpy.ListFeatureClasses(“CPAD*”)` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file73.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: View what is the list using a for loop. Type in `for fc in cpad_fcs:` and press
    *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `print(fc)` and press *Enter* and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file74.png)'
  prefs: []
  type: TYPE_IMG
- en: The wildcard is finding any feature class that starts with CPAD the * then tells
    it to match anything after CPAD. You can see in the results that you now have
    a list that contains all the CPAD feature classes.
  prefs: []
  type: TYPE_NORMAL
- en: The * can be used after, before, or before and after any characters.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You could select just the CPAD units and super units by writing this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And verify using the for loop to print out
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/file75.png)'
  prefs: []
  type: TYPE_IMG
- en: And the wildcard could be used to select just the census feature classes with
    2019 in them by writing this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: And verify using the for loop to print out
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/file76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The wildcard is one of the optional parameters in many of the list functions
    and can be used with the other parameters. The `ListFeatureClasses` function has
    a parameter for feature type, and feature dataset. The feature type parameter
    can be used to select specific feature types, including but not limited to: point,
    polygon, polyline. The feature dataset can be used to specify the feature dataset
    in a geodatabase that is to be searched for feature classes. If no feature dataset
    is specified the `ListFeatureClasses` function will only look for stand alone
    feature classes in the geodatabase.'
  prefs: []
  type: TYPE_NORMAL
- en: Using your `MyProjects.gdb` you can see how to combine both the wildcard and
    feature type parameters to get a specific feature class.
  prefs: []
  type: TYPE_NORMAL
- en: You can select just the census polygon feature class by writing the following
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And verify by entering the variable
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/file77.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the feature class is stored within the [] as it is in a list. To do
    any geoprocessing tasks on this you either need to iterate through the list and
    do the tasks in the for loop or extract the feature class using the list index
    to grab whichever list index you need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/file78.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that what the `census_county` variable returns is the name of the feature
    class. As long as your workspace is still the geodatabase you can use just that
    name to do geoprocessing tasks. But if you reset your workspace ArcPy won’t know
    where to find the feature class with that name. So it is good practice to use
    the `os` library to create a variable that contains the full path for your feature
    class. To use the `os` library it needs to be imported like ArcPy when working
    in IDLE.
  prefs: []
  type: TYPE_NORMAL
- en: Type in `import os` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now you can create a variable with the census feature class full path. Type
    in `gdb = wksp[0]` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Type in* `census_county_full = os.path.join(gdb,census_county)` and press
    *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now you have the full path for the census county shapefile in a variable that
    you can use throughout any further code you may write.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file79.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to ArcPy Modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ArcPy comes with a set of modules in addition to the geoprocessing tools and
    functions. Modules are just files that contain additional Python definitions and
    statements, including things like functions and variables. They are used to help
    organize code more logically.
  prefs: []
  type: TYPE_NORMAL
- en: ArcPy comes with the following modules
  prefs: []
  type: TYPE_NORMAL
- en: Charts module (`arcpy.charts`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Access module (`arcpy.da`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding module (`arcpy.geocoding`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image Analysis module (`arcpy.ia`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping module (`arcpy.mp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata module (`arcpy.metadata`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network Analyst module (`arcpy.na` or `arcpy.nax`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing module (`arcpy.sharing`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spatial Analyst module (`arcpy.sa`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflow Manager module (`arpcy.wmx`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the above modules do require specific licenses to use the functions
    and tools within them. For example the network analyst module and spatial analyst
    module would require you to have network analyst and spatial analyst extensions
    available. The two you will look at in depth in later chapters, the data access
    module and the mapping module do not. The data access module can help you to streamline
    your data cleaning and analyses processes. The mapping module can streamline mass
    map production and make creating 100s of maps a simple process.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial Analyst Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The spatial analyst module contains all of the geoprocessing tools associated
    with the spatial analyst extension. Because it is uses the spatial analyst extension
    you need to import the extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Just like with wild cards the star means everything. You could import just specific
    modules, classes, or functions from the spatial analyst module but most of the
    time you will be importing the entire module.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn how to write the code to run spatial analyst tools in the Python
    window using the FVEG data from CalFire. The data is available here: [https://frap.fire.ca.gov/mapping/gis-data/](https://frap.fire.ca.gov/mapping/gis-data/)'
  prefs: []
  type: TYPE_NORMAL
- en: Load the `fveg15_1` data into the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click on it and select **Symbology**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the drop down where it says **Stretch** and select **Unique Values**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the drop down for **Field 1** and select WHR10Name. You can play with
    the colors and color scheme if you want. But also explore the data a little to
    see what is showing. It is a land cover dataset for the entire state of California.
    You are going to extract the data in the protected areas in the City of Oakland
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `from arcpy.sa import *` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you created the feature class for the parks in the City of Oakland you can
    skip the next step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `arcpy.analysis.Select(“CPAD_2020b_Units”,r”C:\PythonBook\MyProject\MyProject.gdb\CPAD_2020b_Units_Oakland”,’”AGNCY_NAME”
    = \’Oakland, City of\’’)` and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check if a spatial analyst extension is available by typing in `arcpy.CheckExtension(“Spatial”)`
    and press *Enter*. It should return `‘Available’` if not you need to either enable
    your spatial analyst license or if on a shared license network have someone release
    theirs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have confirmed a license is available type in `arcpy.CheckOutExtension(“Spatial”)`
    and press *Enter*. It should return `‘Checked Out’`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `oaklandParksLandCover = ExtractByMask(“fveg15_1”,“CPAD_2020b_Units_Oakland”)`
    and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `oaklandParksLandCover.save(r”C:\MyProject\MyProject.gdb\OaklandParksLandCover”)`
    and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Why do you have to save the raster? Could it be done in a single line of
    code?**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When working with the spatial analyst extension in ArcPy and you run the geoprocessing
    tool it is actually a function. The function returns the extraction raster. That
    raster is created in memory, if you want to save you have to use the save property
    of that returned raster.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It could be done in one line of code. That would look like this `oaklandParksLandCover_2
    = ExtractByMask("fveg15_1","CPAD_2020b_Units_Oakland").save(r"C:\PythonBook\MyProject\MyProject.gdb\OakalndParksLandCover_2")`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that you have this data you can find just the areas of the parks that are
    not urban by using the Con tool.
  prefs: []
  type: TYPE_NORMAL
- en: Start by giving your raster a name, type in `oaklandParksNonUrban =`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call the Con tool by typing `con(`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first parameter is the input raster, it is our newly created parks land
    cover, type in `oaklandParksLandCover,`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next parameter is the true raster or constant, this is the value that the
    new raster will get. This is going to be the same raster, as you want to keep
    the different land covers that are not urban in the new raster, type in `oaklandParksLandCover,`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next parameter is an optional parameter and it is the false raster or constant.
    This is what the new raster will get in areas that are urban. You want it to be
    No Data so that all the areas of parks that are urban will be blank in the new
    raster, type in `“”,`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final parameter is an optional parameter and it is a where clause. This
    is written just like a query for running a select tool, type in `“WHR10NAME <>
    ‘Urban’”)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full code should look like this `oaklandParksNonUrban = Con(oaklandParksLandCover,oaklandParksLandCover,””,”WHRNAME
    <> ‘Urban’”)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open up the attribute table on the new raster in your table of contents. It
    only has a Value field and not the rest of the attributes. That is because the
    con tool just takes the Value attribute from the true raster. This can be fixed
    by doing a join.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Join Field tool is in the management tool box and works on rasters as well
    as feature classes and creates a permanent join. Type in `arcpy.management.JoinField(`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first parameter is the input layer, type in `oaklandParksNonUrban,`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the field to join on, type in `VALUE,`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third parameter is the table to be joined, type in `oaklandParksLandCover,`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth parameter is the field to join on from the join table, type in `VALUE,`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last parameter is optional and is the list of fields you want to join from
    the join table to the input layer. You can select the fields to join by using
    a list. If left blank it will join all of the fields. You are going to join the
    WHR fields, type in `[“WHRNUM”,”WHRNAME”,”WHRTYPE”,”WHR10NUM”,”WHR10NAME”,”WHR13NUM”,”WHR13NAME”]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full code should look like this `arcpy.management.JoinField(oaklandParksNonUrban,”VALUE”,oaklandParksLandCover,”VALUE”,[
    [“WHRNUM”,”WHRNAME”,”WHRTYPE”,”WHR10NUM”,”WHR10NAME”,”WHR13NUM”,”WHR13NAME”])`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again this needs to be saved to store it. Type in `(oaklandParksNonUrban.save(r”C:\MyProject\MyProject.gdb\OaklandParksLandCover”)`
    and press *Enter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following chapters you will learn how to use search cursors to create
    lists of the different attributes and iterate through them to create multiple
    rasters and do further analysis on them.
  prefs: []
  type: TYPE_NORMAL
