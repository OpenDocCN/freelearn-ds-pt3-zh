["```py\nmkdir -p data/AG1000G-AO/\ngsutil -m rsync -r \\\n         -x '.*/calldata/(AD|GQ|MQ)/.*' \\\n         gs://vo_agam_release/v3/snp_genotypes/all/AG1000G-AO/ \\\n         data/AG1000G-AO/ > /dev/null\n```", "```py\n    import numpy as np\n    import zarr \n    mosquito = zarr.open('data/AG1000G-AO')\n    print(mosquito.tree())\n    ```", "```py\n/\n├── 2L\n│   └── calldata\n│       └── GT (48525747, 81, 2) int8\n├── 2R\n│   └── calldata\n│       └── GT (60132453, 81, 2) int8\n├── 3L\n│   └── calldata\n│       └── GT (40758473, 81, 2) int8\n├── 3R\n│   └── calldata\n│       └── GT (52226568, 81, 2) int8\n├── X\n│   └── calldata\n│       └── GT (23385349, 81, 2) int8\n└── samples (81,) |S24\n```", "```py\n    gt_2l = mosquito['/2L/calldata/GT']\n    gt_2l\n    ```", "```py\n<zarr.core.Array '/2L/calldata/GT' (48525747, 81, 2) int8>\n```", "```py\n    gt_2l.info\n    ```", "```py\nName               : /2L/calldata/GT\nType               : zarr.core.Array\nData type          : int8\nShape              : (48525747, 81, 2)\nChunk shape        : (300000, 50, 2)\nOrder              : C\nRead-only          : False\nCompressor         : Blosc(cname='lz4', clevel=5, shuffle=SHUFFLE, blocksize=0)\nStore type         : zarr.storage.DirectoryStore\nNo. bytes          : 7861171014 (7.3G)\nNo. bytes stored   : 446881559 (426.2M)\nStorage ratio      : 17.6\nChunks initialized : 324/324\n```", "```py\n    .\n    ├── 2L\n    │   └── calldata\n    │       └── GT\n    ├── 2R\n    │   └── calldata\n    │       └── GT\n    ├── 3L\n    │   └── calldata\n    │       └── GT\n    ├── 3R\n    │   └── calldata\n    │       └── GT\n    ├── samples\n    └── X\n        └── calldata\n            └── GT\n    ```", "```py\n    0.0.0\n    0.1.0\n    1.0.0\n    ...\n    160.0.0\n    160.1.0\n    ```", "```py\n    def calc_stats(my_chunk):\n        num_miss = np.sum(np.equal(my_chunk[:,:,0], -1), axis=1)\n        num_anc_hom = np.sum(\n            np.all([\n                np.equal(my_chunk[:,:,0], 0),\n                np.equal(my_chunk[:,:,0], my_chunk[:,:,1])], axis=0), axis=1)\n        num_het = np.sum(\n            np.not_equal(\n                my_chunk[:,:,0],\n                my_chunk[:,:,1]), axis=1)\n        return num_miss, num_anc_hom, num_het\n    ```", "```py\n    complete_data = 0\n    more_anc_hom = 0\n    total_pos = 0\n    for chunk_pos in range(ceil(max_pos / chunk_pos_size)):\n        start_pos = chunk_pos * chunk_pos_size\n        end_pos = min(max_pos + 1, (chunk_pos + 1) * chunk_pos_size)\n        my_chunk = gt_2l[start_pos:end_pos, :, :]\n        num_samples = my_chunk.shape[1]\n        num_miss, num_anc_hom, num_het = calc_stats(my_chunk)\n        chunk_complete_data = np.sum(np.equal(num_miss, 0))\n        chunk_more_anc_hom = np.sum(num_anc_hom > num_het)\n        complete_data += chunk_complete_data\n        more_anc_hom += chunk_more_anc_hom\n        total_pos += (end_pos - start_pos)\n    print(complete_data, more_anc_hom, total_pos)\n    ```", "```py\n    import numpy as np\n    import zarr\n    def calc_stats(my_chunk):\n        num_miss = np.sum(np.equal(my_chunk[:,:,0], -1), axis=1)\n        num_anc_hom = np.sum(\n            np.all([\n                np.equal(my_chunk[:,:,0], 0),\n                np.equal(my_chunk[:,:,0], my_chunk[:,:,1])], axis=0), axis=1)\n        num_het = np.sum(\n            np.not_equal(\n                my_chunk[:,:,0],\n                my_chunk[:,:,1]), axis=1)\n        return num_miss, num_anc_hom, num_het\n    ```", "```py\n    mosquito = zarr.open('data/AG1000G-AO')\n    gt_2l = mosquito['/2L/calldata/GT']\n    ```", "```py\n    chunk_pos_size = gt_2l.chunks[0]\n    max_pos = gt_2l.shape[0]\n    intervals = []\n    for chunk_pos in range(ceil(max_pos / chunk_pos_size)):\n        start_pos = chunk_pos * chunk_pos_size\n        end_pos = min(max_pos + 1, (chunk_pos + 1) * chunk_pos_size)\n        intervals.append((start_pos, end_pos))\n    ```", "```py\n    def compute_interval(interval):\n        start_pos, end_pos = interval\n        my_chunk = gt_2l[start_pos:end_pos, :, :]\n        num_samples = my_chunk.shape[1]\n        num_miss, num_anc_hom, num_het = calc_stats(my_chunk)\n        chunk_complete_data = np.sum(np.equal(num_miss, 0))\n        chunk_more_anc_hom = np.sum(num_anc_hom > num_het)\n        return chunk_complete_data, chunk_more_anc_hom\n    ```", "```py\n    with Pool() as p:\n        print(p)\n        chunk_returns = p.map(compute_interval, intervals)\n        complete_data = sum(map(lambda x: x[0], chunk_returns))\n        more_anc_hom = sum(map(lambda x: x[1], chunk_returns))\n        print(complete_data, more_anc_hom)\n    ```", "```py\nimport zarr\nmosquito = zarr.open('data/AG1000G-AO/2L/calldata/GT')\nzarr.array(\n    mosquito,\n    chunks=(1 + 48525747 // 4, 81, 2),\n    store='data/rechunk')\n```", "```py\n    import numpy as np\n    import dask.array as da\n\n    mosquito = da.from_zarr('data/rechunk')\n    mosquito\n    ```", "```py\n    mosquito.visualize()\n    ```", "```py\n    def calc_stats(variant):\n        variant = variant.reshape(variant.shape[0] // 2, 2)\n        misses = np.equal(variant, -1)\n        return misses\n    ```", "```py\n    mosquito_2d = mosquito.reshape(\n        mosquito.shape[0],\n        mosquito.shape[1] * mosquito.shape[2])\n    mosquito_2d.visualize()\n    ```", "```py\n    max_pos = 10000000\n    stats = da.apply_along_axis(\n        calc_stats, 1, mosquito_2d[:max_pos,:],\n        shape=(max_pos,), dtype=np.int64)\n    stats.visualize()\n    ```", "```py\n    stats = stats.compute() \n    ```", "```py\nimport dask\nfrom dask.base import get_scheduler\nimport dask.array as da\nmosquito = da.from_zarr('data/AG1000G-AO/2L/calldata/GT')\nprint(get_scheduler(collections=[mosquito]).__module__)\n```", "```py\ndask.threaded\n```", "```py\ndask-scheduler --port 8786 --dashboard-address 8787\n```", "```py\ndask-worker --nprocs 2 –nthreads 1 127.0.0.1:8786\n```", "```py\n    import numpy as np\n    import zarr\n    import dask.array as da\n    from dask.distributed import Client\n\n    client = Client('127.0.0.1:8786')\n    client\n    ```", "```py\n    mosquito = da.from_zarr('data/AG1000G-AO/2L/calldata/GT')\n    mosquito\n    ```", "```py\n    mosquito = mosquito.rechunk((mosquito.shape[0]//8, 81, 2))\n    ```", "```py\n    mosquito = mosquito.persist()\n    ```", "```py\n    def calc_stats(my_chunk):\n        num_miss = np.sum(\n            np.equal(my_chunk[0][0][:,:,0], -1),\n            axis=1)\n        return num_miss\n    stats = da.blockwise(\n        calc_stats, 'i', mosquito, 'ijk',\n        dtype=np.uint8)\n    stats.visualize()\n    ```", "```py\n    stat_results = stats.compute()\n    ```"]