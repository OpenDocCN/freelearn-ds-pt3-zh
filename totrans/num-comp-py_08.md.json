["```py\nfrom urllib.request import urlopen\nimport json\nimport pandas as pd\n\n```", "```py\ndef get_quandl_dataset(api_key, code, start_date, end_date):\n    \"\"\"Obtain and parse a quandl dataset in Pandas DataFrame format\n\n    Quandl returns dataset in JSON format, where data is stored as a \n    list of lists in response['dataset']['data'], and column headers\n    stored in response['dataset']['column_names'].\n\n    Args:\n        api_key: Quandl API key\n        code: Quandl dataset code\n\n    Returns:\n        df: Pandas DataFrame of a Quandl dataset\n\n    \"\"\"\n    base_url = \"https://www.quandl.com/api/v3/datasets/\"\n    url_suffix = \".json?api_key=\"\n    date = \"&start_date={}&end_date={}\".format(start_date, end_date)\n\n    # Fetch the JSON response \n    u = urlopen(base_url + code + url_suffix + api_key + date)\n    response = json.loads(u.read().decode('utf-8'))\n\n    # Format the response as Pandas Dataframe\n    df = pd.DataFrame(response['dataset']['data'], columns=response['dataset']\n    ['column_names'])\n\n    return df\n\n# Input your own API key here\napi_key = \"INSERT YOUR KEY HERE\"\n\n# Quandl code for six US companies\ncodes = [\"EOD/AAPL\", \"EOD/PG\", \"EOD/JNJ\", \"EOD/XOM\", \"EOD/IBM\", \"EOD/MSFT\"]\nstart_date = \"2017-01-01\"\nend_date = \"2017-06-30\"\n\ndfs = []\n# Get the DataFrame that contains the EOD data for each company\nfor code in codes:\n    df = get_quandl_dataset(api_key, code, start_date, end_date)\n    df[\"Company\"] = code[4:]\n    dfs.append(df)\n\n# Concatenate all dataframes into a single one\nstock_df = pd.concat(dfs)\n\n# Sort by ascending order of Company then Date\nstock_df = stock_df.sort_values([\"Company\",\"Date\"])\nstock_df.head()\n```", "```py\n# Classify companies by industry\ntech_companies = set([\"AAPL\",\"IBM\",\"MSFT\"])\nstock_df['Industry'] = [\"Tech\" if c in tech_companies else \"Others\" for c in stock_df['Company']]\n```", "```py\nfrom matplotlib.dates import date2num\n\n# Convert Date column from string to Python datetime object,\n# then to float number that is supported by Matplotlib.\nstock_df[\"Datetime\"] = date2num(pd.to_datetime(stock_df[\"Date\"], format=\"%Y-%m-%d\").tolist())\n```", "```py\nimport numpy as np\n\n# Calculate percentage change versus the previous close\nstock_df[\"Close_change\"] = stock_df[\"Close\"].pct_change()\n# Since the DataFrame contain multiple companies' stock data, \n# the first record in the \"Close_change\" should be changed to\n# NaN in order to prevent referencing the price of incorrect company.\nstock_df.loc[stock_df[\"Date\"]==\"2017-01-03\", \"Close_change\"] = np.NaN\nstock_df.head()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(style=\"ticks\")\n\n# Plot EOD stock closing price vs Date for each company.\n# Color of plot elements is determined by company name (hue=\"Company\"),\n# plot panels are also arranged in columns accordingly (col=\"Company\").\n# The col_wrap parameter determines the number of panels per row (col_wrap=3).\ng = sns.factorplot(x=\"Date\", y=\"Close\", \n                   hue=\"Company\", col=\"Company\", \n                   data=stock_df, col_wrap=3)\n\nplt.show()\n```", "```py\n# Increase the aspect ratio and size of each panel\ng = sns.factorplot(x=\"Date\", y=\"Close\", \n                   hue=\"Company\", col=\"Company\", \n                   data=stock_df,\n                   col_wrap=3, size=3,\n                   scale=0.5, aspect=1.5)\n\n# Thinning of ticks (select 1 in 10)\nlocs, labels = plt.xticks()\ng.set(xticks=locs[0::10], xticklabels=labels[0::10])\n\n# Rotate the tick labels to prevent overlap\ng.set_xticklabels(rotation=30)\n\n# Reduce the white space between plots\ng.fig.subplots_adjust(wspace=.1, hspace=.2)\nplt.show()\n\n```", "```py\n# Create faceted plot separated by industry\ng = sns.factorplot(x=\"Date\", y=\"Close\", \n                   hue=\"Company\", col=\"Industry\", \n                   data=stock_df, size=4, \n                   aspect=1.5, scale=0.5)\n\nlocs, labels = plt.xticks()\ng.set(xticks=locs[0::10], xticklabels=labels[0::10])\ng.set_xticklabels(rotation=30)\nplt.show()\n```", "```py\n# Create a FacetGrid\ng = sns.FacetGrid(stock_df, col=\"Company\", hue=\"Company\",\n                  size=3, aspect=2, col_wrap=2)\n\n# Map the seaborn.distplot function to the panels,\n# which shows a histogram of closing prices.\ng.map(sns.distplot, \"Close\")\n\n# Label the axes\ng.set_axis_labels(\"Closing price (US Dollars)\", \"Density\")\n\nplt.show()\n```", "```py\ng = sns.FacetGrid(stock_df, col=\"Company\", hue=\"Company\",\n                  size=3, aspect=2.2, col_wrap=2)\n\n# We can supply extra kwargs to the plotting function.\n# Let's turn off KDE line (kde=False), and plot raw \n# frequency of bins only (norm_hist=False).\n# By setting rug=True, tick marks that denotes the\n# density of data points will be shown in the bottom.\ng.map(sns.distplot, \"Close\", kde=False, norm_hist=False, rug=True)\n\ng.set_axis_labels(\"Closing price (US Dollars)\", \"Density\")\n\nplt.show()\n```", "```py\nfrom matplotlib.dates import DateFormatter\n\ng = sns.FacetGrid(stock_df, hue=\"Company\", col=\"Industry\",\n                  size=4, aspect=1.5, col_wrap=2)\n\n# plt.plot doesn't support string-formatted Date,\n# so we need to use the Datetime column that we\n# prepared earlier instead.\ng.map(plt.plot, \"Datetime\", \"Close\", marker=\"o\", markersize=3, linewidth=1)\ng.add_legend()\n\n# We can access individual axes through g.axes[column]\n# or g.axes[row,column] if multiple rows are present.\n# Let's adjust the tick formatter and rotate the tick labels\n# in each axes.\nfor col in range(2):\n    g.axes[col].xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\n    plt.setp(g.axes[col].get_xticklabels(), rotation=30)\n\ng.set_axis_labels(\"\", \"Closing price (US Dollars)\")\nplt.show()\n```", "```py\n# Show a pairplot of three selected variables (vars=[\"Open\", \"Volume\", \"Close\"])\ng = sns.pairplot(stock_df, hue=\"Company\", \n                 vars=[\"Open\", \"Volume\", \"Close\"])\n\nplt.show()\n```", "```py\n# Adjust the aesthetics of the plot\ng = sns.pairplot(stock_df, hue=\"Company\", \n                 aspect=1.5, diag_kind=\"kde\", \n                 diag_kws=dict(shade=True),\n                 plot_kws=dict(s=15, marker=\"+\"),\n                 vars=[\"Open\", \"Volume\", \"Close\"])\n\nplt.show()\n```", "```py\n# Manually defining the comparisons that we are interested.\ng = sns.pairplot(stock_df, hue=\"Company\", aspect=1.5,\n                 x_vars=[\"Open\", \"Volume\"],\n                 y_vars=[\"Close\", \"Close_change\"])\n\nplt.show()\n```", "```py\nstock_change = stock_df.pivot(index='Date', columns='Company', values='Close_change')\nstock_change = stock_change.loc[\"2017-06-01\":\"2017-06-30\"]\nstock_change.head()\n```", "```py\nax = sns.heatmap(stock_change)\nplt.show()\n```", "```py\n# Create a new red-green color map using the husl color system\n# h_neg and h_pos determines the hue of the extents of the color map.\n# s determines the color saturation\n# l determines the lightness\n# sep determines the width of center point\n# In addition, we need to set as_cmap=True as the cmap parameter of \n# sns.heatmap expects matplotlib colormap object.\nrdgn = sns.diverging_palette(h_neg=10, h_pos=140, s=80, l=50,\n                             sep=10, as_cmap=True)\n\n# Change to square blocks (square=True), add a thin\n# border (linewidths=.5), and change the color map\n# to follow US stocks market convention (cmap=\"RdGn\").\nax = sns.heatmap(stock_change, cmap=rdgn,\n                 linewidths=.5, square=True)\n\n# Prevent x axes label from being cropped\nplt.tight_layout()\nplt.show()\n```", "```py\nfig = plt.figure(figsize=(6,8))\n\n# Set annot=True to overlay the values.\n# We can also assign python format string to fmt. \n# For example \".2%\" refers to percentage values with\n# two decimal points.\n```", "```py\nax = sns.heatmap(stock_change, cmap=rdgn,\n                 annot=True, fmt=\".2%\",\n                 linewidths=.5, cbar=False)\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import date2num, WeekdayLocator, DayLocator, DateFormatter, MONDAY\nfrom matplotlib.finance import candlestick_ohlc\n\n# Extract stocks data for AAPL.\n# candlestick_ohlc expects Date (in floating point number), Open, High, Low,\n# Close columns only\n# So we need to select the useful columns first using DataFrame.loc[]. Extra \n# columns can exist, \n# but they are ignored. Next we get the data for the last 50 trading only for \n# simplicity of plots.\ncandlestick_data = stock_df[stock_df[\"Company\"]==\"AAPL\"]\\\n                       .loc[:, [\"Datetime\", \"Open\", \"High\", \"Low\", \"Close\",\n                       \"Volume\"]]\\\n                       .iloc[-50:]\n\n# Create a new Matplotlib figure\nfig, ax = plt.subplots()\n\n# Prepare a candlestick plot\ncandlestick_ohlc(ax, candlestick_data.values, width=0.6)\n\nax.xaxis.set_major_locator(WeekdayLocator(MONDAY)) # major ticks on the mondays\nax.xaxis.set_minor_locator(DayLocator()) # minor ticks on the days\nax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\nax.xaxis_date() # treat the x data as dates\n# rotate all ticks to vertical\nplt.setp(ax.get_xticklabels(), rotation=90, horizontalalignment='right')\n\nax.set_ylabel('Price (US $)') # Set y-axis label\nplt.show()\n```", "```py\nfrom stockstats import StockDataFrame\n\n# Convert to StockDataFrame\n# Need to pass a copy of candlestick_data to StockDataFrame.retype\n# Otherwise the original candlestick_data will be modified\nstockstats = StockDataFrame.retype(candlestick_data.copy())\n\n# 5-day exponential moving average on closing price\nema_5 = stockstats[\"close_5_ema\"]\n# 20-day exponential moving average on closing price\nema_20 = stockstats[\"close_20_ema\"]\n# 50-day exponential moving average on closing price\nema_50 = stockstats[\"close_50_ema\"]\n# Upper Bollinger band\nboll_ub = stockstats[\"boll_ub\"]\n# Lower Bollinger band\nboll_lb = stockstats[\"boll_lb\"]\n# 7-day Relative Strength Index\nrsi_7 = stockstats['rsi_7']\n# 14-day Relative Strength Index\nrsi_14 = stockstats['rsi_14']\n```", "```py\nimport datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import date2num, WeekdayLocator, DayLocator, DateFormatter, MONDAY\nfrom matplotlib.finance import candlestick_ohlc\n\n# Create a new Matplotlib figure\nfig, ax = plt.subplots()\n\n# Prepare a candlestick plot\ncandlestick_ohlc(ax, candlestick_data.values, width=0.6)\n\n# Plot stock indicators in the same plot\nax.plot(candlestick_data[\"Datetime\"], ema_5, lw=1, label='EMA (5)')\nax.plot(candlestick_data[\"Datetime\"], ema_20, lw=1, label='EMA (20)')\nax.plot(candlestick_data[\"Datetime\"], ema_50, lw=1, label='EMA (50)')\nax.plot(candlestick_data[\"Datetime\"], boll_ub, lw=2, linestyle=\"--\", label='Bollinger upper')\nax.plot(candlestick_data[\"Datetime\"], boll_lb, lw=2, linestyle=\"--\", label='Bollinger lower')\n\nax.xaxis.set_major_locator(WeekdayLocator(MONDAY)) # major ticks on \n# the mondays\nax.xaxis.set_minor_locator(DayLocator()) # minor ticks on the days\nax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\nax.xaxis_date() # treat the x data as dates\n# rotate all ticks to vertical\nplt.setp(ax.get_xticklabels(), rotation=90, horizontalalignment='right')\n\nax.set_ylabel('Price (US $)') # Set y-axis label\n\n# Limit the x-axis range from 2017-4-23 to 2017-7-1\ndatemin = datetime.date(2017, 4, 23)\ndatemax = datetime.date(2017, 7, 1)\nax.set_xlim(datemin, datemax)\n\nplt.legend() # Show figure legend\nplt.tight_layout()\nplt.show()\n```", "```py\nimport datetime\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import date2num, WeekdayLocator, DayLocator, DateFormatter, MONDAY\nfrom matplotlib.finance import candlestick_ohlc\nfrom matplotlib.ticker import FuncFormatter\n\n# FuncFormatter to convert tick values to Millions\ndef millions(x, pos):\n    return '%dM' % (x/1e6)\n\n# Create 3 subplots spread acrosee three rows, with shared x-axis. \n# The height ratio is specified via gridspec_kw\nfig, axarr = plt.subplots(nrows=3, ncols=1, sharex=True, figsize=(8,8),\n                          gridspec_kw={'height_ratios':[3,1,1]})\n\n# Prepare a candlestick plot in the first axes\ncandlestick_ohlc(axarr[0], candlestick_data.values, width=0.6)\n\n# Overlay stock indicators in the first axes\naxarr[0].plot(candlestick_data[\"Datetime\"], ema_5, lw=1, label='EMA (5)')\naxarr[0].plot(candlestick_data[\"Datetime\"], ema_20, lw=1, label='EMA (20)')\naxarr[0].plot(candlestick_data[\"Datetime\"], ema_50, lw=1, label='EMA (50)')\naxarr[0].plot(candlestick_data[\"Datetime\"], boll_ub, lw=2, linestyle=\"--\", label='Bollinger upper')\naxarr[0].plot(candlestick_data[\"Datetime\"], boll_lb, lw=2, linestyle=\"--\", label='Bollinger lower')\n\n# Display RSI in the second axes\naxarr[1].axhline(y=30, lw=2, color = '0.7') # Line for oversold threshold\naxarr[1].axhline(y=50, lw=2, linestyle=\"--\", color = '0.8') # Neutral RSI\naxarr[1].axhline(y=70, lw=2, color = '0.7') # Line for overbought threshold\naxarr[1].plot(candlestick_data[\"Datetime\"], rsi_7, lw=2, label='RSI (7)')\naxarr[1].plot(candlestick_data[\"Datetime\"], rsi_14, lw=2, label='RSI (14)')\n\n# Display trade volume in the third axes\naxarr[2].bar(candlestick_data[\"Datetime\"], candlestick_data['Volume'])\n\n# Mark the market reaction to the Bloomberg news\n# https://www.bloomberg.com/news/articles/2017-06-09/apple-s-new\n# -iphones-said-to-miss-out-on-higher-speed-data-links\n# http://markets.businessinsider.com/news/stocks/apple-stock-price\n# -falling-new-iphone-speed-2017-6-1002082799\naxarr[0].annotate(\"Bloomberg News\",\n                  xy=(datetime.date(2017, 6, 9), 155), xycoords='data',\n                  xytext=(25, 10), textcoords='offset points', size=12,\n                  arrowprops=dict(arrowstyle=\"simple\",\n                  fc=\"green\", ec=\"none\"))\n\n# Label the axes\naxarr[0].set_ylabel('Price (US $)')\naxarr[1].set_ylabel('RSI')\naxarr[2].set_ylabel('Volume (US $)')\n\naxarr[2].xaxis.set_major_locator(WeekdayLocator(MONDAY)) # major ticks on the mondays\naxarr[2].xaxis.set_minor_locator(DayLocator()) # minor ticks on the days\naxarr[2].xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))\naxarr[2].xaxis_date() # treat the x data as dates\naxarr[2].yaxis.set_major_formatter(FuncFormatter(millions)) # Change the y-axis ticks to millions\nplt.setp(axarr[2].get_xticklabels(), rotation=90, horizontalalignment='right') # Rotate x-tick labels by 90 degree\n\n# Limit the x-axis range from 2017-4-23 to 2017-7-1\ndatemin = datetime.date(2017, 4, 23)\ndatemax = datetime.date(2017, 7, 1)\naxarr[2].set_xlim(datemin, datemax)\n\n# Show figure legend\naxarr[0].legend()\naxarr[1].legend()\n\n# Show figure title\naxarr[0].set_title(\"AAPL (Apple Inc.) NASDAQ\", loc='left')\n\n# Reduce unneccesary white space\nplt.tight_layout()\nplt.show()\n```", "```py\nimport pandas as pd\n\nsource = \"https://raw.githubusercontent.com/PointCloudLibrary/data/master/tutorials/ism_train_cat.pcd\"\ncat_df = pd.read_csv(source, skiprows=11, delimiter=\" \", names=[\"x\",\"y\",\"z\"], encoding='latin_1') \ncat_df.head()\n```", "```py\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(cat_df.x, cat_df.y, cat_df.z)\n\nplt.show()\n```", "```py\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Change the size, shape and color of markers\nax.scatter(cat_df.x, cat_df.y, cat_df.z, s=4, c=\"g\", marker=\"o\")\n\nplt.show()\n```", "```py\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(cat_df.x, cat_df.y, cat_df.z,s=4, c=\"g\", marker=\"o\")\n\n# elev stores the elevation angle in the z plane azim stores the \n# azimuth angle in the x,y plane\nax.view_init(azim=180, elev=10)\n\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Get 1 and every fifth row for the 5-day AAPL OHLC data\nohlc_5d = stock_df[stock_df[\"Company\"]==\"AAPL\"].iloc[1::5, :]\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\n# Create one color-coded bar chart for Open, High, Low and Close prices.\nfor color, col, z in zip(['r', 'g', 'b', 'y'], [\"Open\", \"High\", \"Low\", \n                          \"Close\"], [30, 20, 10, 0]):\n    xs = np.arange(ohlc_5d.shape[0])\n    ys = ohlc_5d[col]\n    # Assign color to the bars\n    colors = [color] * len(xs)\n    ax.bar(xs, ys, zs=z, zdir='y', color=colors, alpha=0.8, width=5)\n\nplt.show()\n```", "```py\nfig = plt.figure(figsize=(9,7))\nax = fig.add_subplot(111, projection='3d')\n\n# Create one color-coded bar chart for Open, High, Low and Close prices.\nfor color, col, z in zip(['r', 'g', 'b', 'y'], [\"Open\", \"High\", \"Low\", \n                          \"Close\"], [30, 20, 10, 0]):\n    xs = np.arange(ohlc_5d.shape[0])\n    ys = ohlc_5d[col]\n    # Assign color to the bars \n    colors = [color] * len(xs)\n    ax.bar(xs, ys, zs=z, zdir='y', color=colors, alpha=0.8)\n\n# Manually assign the ticks and tick labels\nax.set_xticks(np.arange(ohlc_5d.shape[0]))\nax.set_xticklabels(ohlc_5d[\"Date\"], rotation=20,\n                   verticalalignment='baseline',\n                   horizontalalignment='right',\n                   fontsize='8')\nax.set_yticks([30, 20, 10, 0])\nax.set_yticklabels([\"Open\", \"High\", \"Low\", \"Close\"])\n\n# Set the z-axis label\nax.set_zlabel('Price (US $)')\n\n# Rotate the viewport\nax.view_init(azim=-42, elev=31)\nplt.tight_layout()\nplt.show()\n```", "```py\n# FuncFormatter to add 110 to the tick labels\ndef major_formatter(x, pos):\n    return \"{}\".format(x+110)\n\nfig = plt.figure(figsize=(9,7))\nax = fig.add_subplot(111, projection='3d')\n\n# Create one color-coded bar chart for Open, High, Low and Close prices.\nfor color, col, z in zip(['r', 'g', 'b', 'y'], [\"Open\", \"High\", \"Low\", \n                          \"Close\"], [30, 20, 10, 0]):\n    xs = np.arange(ohlc_5d.shape[0])\n    ys = ohlc_5d[col]\n\n    # Assign color to the bars \n    colors = [color] * len(xs)\n\n    # Truncate the y-values by 110\n    ax.bar(xs, ys-110, zs=z, zdir='y', color=colors, alpha=0.8)\n\n# Manually assign the ticks and tick labels\nax.set_xticks(np.arange(ohlc_5d.shape[0]))\nax.set_xticklabels(ohlc_5d[\"Date\"], rotation=20,\n                   verticalalignment='baseline',\n                   horizontalalignment='right',\n                   fontsize='8')\n\n# Set the z-axis label\nax.set_yticks([30, 20, 10, 0])\nax.set_yticklabels([\"Open\", \"High\", \"Low\", \"Close\"])\nax.zaxis.set_major_formatter(FuncFormatter(major_formatter))\nax.set_zlabel('Price (US $)')\n\n# Rotate the viewport\nax.view_init(azim=-42, elev=31)\n\nplt.tight_layout()\nplt.show()\n```"]