["```py\nmkdir streamlit_goodreads_book\ncd streamlit_goodreads_book\ntouch goodreads_app.py \n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.title('Analyzing Your Goodreads Reading Habits')\nst.subheader('A Web App by [Tyler Richards](http://www.tylerjrichards.com)')\n\"\"\"\nHey there! Welcome to Tyler's Goodreads Analysis App. This app analyzes (and never stores!)\nthe books you've read using the popular service Goodreads, including looking at the distribution\nof the age and length of books you've read. Give it a go by uploading your data below!\n\"\"\"\ngoodreads_file = st.file_uploader('Please Import Your Goodreads Data')\nif goodreads_file is None:\n     books_df = pd.read_csv('goodreads_history.csv')\n     st.write(\"Analyzing Tyler's Goodreads history\")\nelse:\n     books_df = pd.read_csv(goodreads_file)\n     st.write('Analyzing your Goodreads history')\nst.write(books_df.head()) \n```", "```py\n goodreads_file = st.file_uploader('Please Import Your Goodreads Data')\nif goodreads_file is None:\n     books_df = pd.read_csv('goodreads_history.csv')\n     st.write(\"Analyzing Tyler's Goodreads history\")\nelse:\n     books_df = pd.read_csv(goodreads_file)\n     st.write('Analyzing your Goodreads history')\nbooks_df['Year Finished'] = pd.to_datetime(books_df['Date Read']).dt.year\nbooks_per_year = books_df.groupby('Year Finished')['Book Id'].count().reset_index()\nbooks_per_year.columns = ['Year Finished', 'Count']\nfig_year_finished = px.bar(books_per_year, x='Year Finished', y='Count', title='Books Finished per Year')\nst.plotly_chart(fig_year_finished) \n```", "```py\nbooks_df['days_to_finish'] = (pd.to_datetime(\n            books_df['Date Read']) - pd.to_datetime(books_df['Date Added'])).dt.days\nfig_days_finished = px.histogram(books_df, x='days_to_finish')\nst.plotly_chart(fig_days_finished) \n```", "```py\nbooks_df['days_to_finish'] = (pd.to_datetime(\n            books_df['Date Read']) - pd.to_datetime(books_df['Date Added'])).dt.days\nbooks_finished_filtered = books_df[(books_df['Exclusive Shelf'] == 'read') & (books_df['days_to_finish'] >= 0)]\nfig_days_finished = px.histogram(books_finished_filtered,\nx='days_to_finish', title='Time Between Date Added And Date Finished',\n     labels={'days_to_finish':'days'})\nst.plotly_chart(fig_days_finished) \n```", "```py\nfig_num_pages = px.histogram(books_df, x='Number of Pages', title='Book Length Histogram')\nst.plotly_chart(fig_num_pages) \n```", "```py\nst.write('Assumption check')\nst.write(len(books_df[books_df['Original Publication Year'] > books_df['Year Published']])) \n```", "```py\nbooks_publication_year = books_df.groupby('Original Publication Year')['Book Id'].count().reset_index()\nbooks_publication_year.columns = ['Year Published', 'Count']\nfig_year_published = px.bar(books_publication_year, x='Year Published', y='Count', title='Book Age Plot')\nst.plotly_chart(fig_year_published) \n```", "```py\nBooks_publication_year = books_df.groupby('Original Publication Year')['Book Id'].count().reset_index()\nbooks_publication_year.columns = ['Year Published', 'Count']\nst.write(books_df.sort_values(by='Original Publication Year').head())\nfig_year_published = px.bar(books_publication_year, x='Year Published', y='Count', title='Book Age Plot')\nfig_year_published.update_xaxes(range=[1850, 2021])\nst.plotly_chart(fig_year_published)\nst.write('This chart is zoomed into the period of 1850-2021, but is interactive so try zooming in/out on interesting periods!') \n```", "```py\nbooks_rated = books_df[books_df['My Rating'] != 0]\nfig_my_rating = px.histogram(books_rated, x='My Rating', title='User Rating')\nst.plotly_chart(fig_my_rating)\nfig_avg_rating = px.histogram(books_rated, x='Average Rating', title='Average Goodreads Rating')\nst.plotly_chart(fig_avg_rating) \n```", "```py\nFig_avg_rating = px.histogram(books_rated, x='Average Rating', title='Average Goodreads Rating')\nst.plotly_chart(fig_avg_rating)\nimport numpy as np\navg_difference = np.round(np.mean(books_rated['My Rating'] â€“ books_rated['Average Rating']), 2)\nif avg_difference >= 0:\n     sign = 'higher'\nelse:\n     sign = 'lower'\nst.write(f\"You rate books {sign} than the average Goodreads user by {abs(avg_difference)}!\") \n```", "```py\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport numpy as np\nfrom streamlit_lottie import st_lottie\nimport requests\ndef load_lottieurl(url: str):\n    r = requests.get(url)\n    if r.status_code != 200:\n        return None\n    return r.json()\nfile_url = 'https://assets4.lottiefiles.com/temp/lf20_aKAfIn.json'\nlottie_book = load_lottieurl(file_url)\nst_lottie(lottie_book, speed=1, height=200, key=\"initial\") \n```", "```py\nimport requests\nst.set_page_config(layout=\"wide\")\ndef load_lottieurl(url: str):\n    r = requests.get(url)\n    if r.status_code != 200:\n        return None\n    return r.json() \n```", "```py\nrow1_col1, row1_col2 = st.columns(2)\nrow2_col1, row2_col2 = st.columns(2)\nrow3_col1, row3_col2 = st.columns(2)\nwith row1_col1:\n     st.plotly_chart(fig_year_finished)\nwith row1_col2:\n     st.plotly_chart(fig_days_finished)\nwith row2_col1:\n     st.plotly_chart(fig_num_pages)\nwith row2_col2:\n     st.plotly_chart(fig_year_published)\n     st.write('This chart is zoomed into the period of 1850-2021, but is interactive so try zooming in/out on interesting periods!')\nwith row3_col1:\n     st.plotly_chart(fig_my_rating)\nwith row3_col2:\n     st.plotly_chart(fig_avg_rating)\n     st.write(f\"You rate books {sign} than the average Goodreads user by {abs(avg_difference)}!\") \n```", "```py\nif goodreads_file is None:\n     st.subheader(\"Tyler's Analysis Results:\")\nelse:\n     st.subheader('Your Analysis Results:')\nbooks_finished = books_df[books_df['Exclusive Shelf'] == 'read']\nu_books = len(books_finished['Book Id'].unique())\nu_authors = len(books_finished['Author'].unique())\nmode_author = books_finished['Author'].mode()[0]\nst.write(f'It looks like you have finished {u_books} books with a total of {u_authors} unique authors. Your most read author is {mode_author}!')\nst.write(f'Your app results can be found below, we have analyzed everything from your book length distribution to how you rate books. Take a look around, all the graphs are interactive!')\nrow1_col1, row1_col2 = st.columns(2) \n```", "```py\nrow1_col1, row1_col2 = st.columns(2)\nrow2_col1, row2_col2 = st.columns(2)\nrow3_col1, row3_col2 = st.columns(2)\nwith row1_col1:\n     mode_year_finished = int(books_df['Year Finished'].mode()[0])\n     st.plotly_chart(fig_year_finished)\n     st.write(f'You finished the most books in {mode_year_finished}. Awesome job!')\nwith row1_col2:\n     st.plotly_chart(fig_days_finished)\n     mean_days_to_finish = int(books_finished_filtered['days_to_finish'].mean())\n     st.write(f'It took you an average of {mean_days_to_finish} days between when the book was added to Goodreads and when you finished the book. This is not a perfect metric, as you may have added this book to a to-read list!')\nwith row2_col1:\n     st.plotly_chart(fig_num_pages)\n     avg_pages = int(books_df['Number of Pages'].mean())\n     st.write(f'Your books are an average of {avg_pages} pages long, check out the distribution above!') \n```", "```py\nwith row2_col2:\n     st.plotly_chart(fig_year_published)\n     st.write('This chart is zoomed into the period of 1850-2021, but is interactive so try zooming in/out on interesting periods!')\nwith row3_col1:\n     st.plotly_chart(fig_my_rating)\n     avg_my_rating = round(books_rated['My Rating'].mean(), 2)\n     st.write(f'You rate books an average of {avg_my_rating} stars on Goodreads.')\nwith row3_col2:\n     st.plotly_chart(fig_avg_rating)\n     st.write(f\"You rate books {sign} than the average Goodreads user by {abs(avg_difference)}!\") \n```"]