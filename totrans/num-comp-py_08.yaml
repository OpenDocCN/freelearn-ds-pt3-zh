- en: Visualizing Multivariate Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we have **big data** that contains many variables, the plot types in [Chapter
    7](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml), *Visualizing Online Data* may
    no longer be an effective way of data visualization. We may try to cramp as many
    variables in a single plot as possible, but the overcrowded or cluttered details
    would quickly reach the boundary of a human's visual perception capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we aim to introduce multivariate data visualization techniques;
    they enable us to better understand the distribution of data and the relationships
    between variables. Here is the outline of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting End-of-Day (EOD) stock data from Quandl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two-dimensional faceted plots:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Factor plot in Seaborn
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Faceted grid in Seaborn
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pair plot in Seaborn
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other two-dimensional multivariate plots:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heatmap in Seaborn
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Candlestick plot in matplotlib.finance:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing various stock market indicators
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a comprehensive stock chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Three-dimensional plots:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scatter plot
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar chart
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Caveats of using Matplotlib 3D
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will discuss faceted plots, which is a divide-and-conquer approach
    to visualizing multivariate data. The gestalt of this approach is to slice input
    data into different facets such that only a handful of attributes will be represented
    in each visualization panel. This will reduce visual clutter by allowing inspection
    of variables in reduced subsets. Sometimes, finding a suitable way to represent
    multivariate data in a 2D graph is difficult. Therefore, we are going to introduce
    3D plotting functions in Matplotlib as well.
  prefs: []
  type: TYPE_NORMAL
- en: The data used in this chapter was collected from Quandl's End-of-Day (EOD) stock
    database. Let's get the data from Quandl first.
  prefs: []
  type: TYPE_NORMAL
- en: Getting End-of-Day (EOD) stock data from Quandl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are going to discuss stock data extensively, note that we do not guarantee
    the accuracy, completeness, or validity of the content presented; nor are we responsible
    for any errors or omissions that may have occurred. The data, visualizations,
    and analyses are provided on an “as is” basis for educational purposes only, without
    any representations, warranties, or conditions of any kind. Therefore, the publisher
    and the authors do not accept liability for your use of the content. It should
    be noted that past stock performance may not predict future performance. Readers
    should also be aware of the risks involved in stock investments and should not
    take any investment decisions based on the content in this chapter. In addition,
    readers are advised to conduct their own independent research into individual
    stocks before making an investment decision.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to adapt the Quandl JSON API code in [Chapter 7](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml), *Visualizing
    Online Data* to get EOD stock data from Quandl. The historical stock data from
    January 1, 2017 to June 30, 2017 for six stock codes will be obtained: Apple Inc.(EOD/AAPL),
    The Procter & Gamble Company (EOD/PG), Johnson & Johnson (EOD/JNJ), Exxon Mobil
    Corporation (EOD/XOM), International Business Machines Corporation (EOD/IBM),
    and Microsoft Corporation (EOD/MSFT). Again, we will use the default `urllib`
    and `json` modules to handle Quandl API calls, followed by converting the data
    into a Pandas DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| - | **Date** | **Open** | **High** | **Low** | **Close** | **Volume** | **Dividend**
    | **Split** | **Adj_Open** | **Adj_High** | **Adj_Low** | **Adj_Close** | **Adj_Volume**
    | **Company** |'
  prefs: []
  type: TYPE_TB
- en: '| **124** | 2017-01-03 | 115.80 | 116.3300 | 114.76 | 116.15 | 28781865.0 |
    0.0 | 1.0 | 114.833750 | 115.359328 | 113.802428 | 115.180830 | 28781865.0 | AAPL
    |'
  prefs: []
  type: TYPE_TB
- en: '| **123** | 2017-01-04 | 115.85 | 116.5100 | 115.75 | 116.02 | 21118116.0 |
    0.0 | 1.0 | 114.883333 | 115.537826 | 114.784167 | 115.051914 | 21118116.0 | AAPL
    |'
  prefs: []
  type: TYPE_TB
- en: '| **122** | 2017-01-05 | 115.92 | 116.8642 | 115.81 | 116.61 | 22193587.0 |
    0.0 | 1.0 | 114.952749 | 115.889070 | 114.843667 | 115.636991 | 22193587.0 | AAPL
    |'
  prefs: []
  type: TYPE_TB
- en: '| **121** | 2017-01-06 | 116.78 | 118.1600 | 116.47 | 117.91 | 31751900.0 |
    0.0 | 1.0 | 115.805573 | 117.174058 | 115.498159 | 116.926144 | 31751900.0 | AAPL
    |'
  prefs: []
  type: TYPE_TB
- en: '| **120** | 2017-01-09 | 117.95 | 119.4300 | 117.94 | 118.99 | 33561948.0 |
    0.0 | 1.0 | 116.965810 | 118.433461 | 116.955894 | 117.997132 | 33561948.0 | AAPL
    |'
  prefs: []
  type: TYPE_TB
- en: The dataframe contains **Opening, High, Low, and Closing** (**OHLC**) prices
    for each stock. Extra information is also available; for example, the dividend
    column reflects the cash dividend value on that day. The split column shows the
    ratio of new shares to old shares if a split occurred on that day. The adjusted
    prices account for price fluctuations due to distributions or corporate actions
    by assuming that all these actions were reinvested into the current stock. For
    more information about these columns, consult the documentation pages on Quandl.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping the companies by industry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you may have noticed, three of the companies (AAPL, IBM, and MSFT) are tech
    companies, while the remaining three companies are not. Stock analysts often group
    companies by industry to gain deeper insights. Let''s try to label the companies
    by industry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Converting the date to a supported format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Date` column in `stock_df` is recorded as a series of Python strings.
    Although Seaborn can use string-formatted dates in some functions, Matplotlib
    cannot. To make the dates malleable to data processing and visualizations, we
    need to convert the values to float numbers supported by Matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Getting the percentage change of the closing price
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we want to calculate the change of the closing price with regard to the
    previous day''s close. The `pct_change()` function in Pandas makes this task very
    easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Two-dimensional faceted plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to introduce three major ways to create faceted plots: `seaborn.factorplot()`,
    `seaborn.FacetGrid()`, and `seaborn.pairplot()`. You might have seen some faceted
    plots in the previous chapter, when we talked about `seaborn.lmplot()`. Actually,
    the `seaborn.lmplot()` function combines `seaborn.regplot()` with `seaborn.FacetGrid()`,
    and the definitions of data subsets can be adjusted by the `hue`, `col`, and `row` parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to introduce three major ways to create faceted plots: `seaborn.factorplot()`,
    `seaborn.FacetGrid()`, and `seaborn.pairplot()`. These functions actually work
    similarly to `seaborn.lmplot()` in the way of defining facets.'
  prefs: []
  type: TYPE_NORMAL
- en: Factor plot in Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the help of `seaborn.factorplot()`, we can draw categorical point plots,
    box plots, violin plots, bar plots, or strip plots onto a `seaborn.FacetGrid()`
    by tuning the `kind` parameter. The default plot type for `factorplot` is point
    plot. Unlike other plotting functions in Seaborn, which support a wide variety
    of input data formats, `factorplot` supports pandas DataFrames as input only,
    while variable/column names can be supplied as string to `x`, `y`, `hue`, `col`,
    or `row`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/a7c1f5ff-03a5-457c-88df-43387f11b9eb.png)'
  prefs: []
  type: TYPE_IMG
- en: There are several issues in the preceding plot.
  prefs: []
  type: TYPE_NORMAL
- en: First, the aspect ratio (length divided by height) is slightly suboptimal for
    a time series chart. A wider plot would allow us to observe minute changes during
    the time period. We are going to adjust that using the `aspect` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Second, the lines and dots are too thick, thereby masking some details in the
    plot. We can reduce the size of these visual elements by tweaking the `scale` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, the ticks are too close to each other, and the tick labels are overlapping.
    After plotting, `sns.factorplot()` returns a FacetGrid, which was denoted as `g` in
    the code. We can further tweak the aesthetics of the plot, such as tick positions
    and labels, by calling the relevant functions in the `FacetGrid` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/7d9f248d-c1a1-49a3-8bce-5e0fcd17860d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/9bd895a6-fd03-4b75-b4ec-aceacf3e227b.png)'
  prefs: []
  type: TYPE_IMG
- en: Faceted grid in Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we have already mentioned `FacetGrid` a few times, but what exactly
    is it?
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may know, `FacetGrid` is an engine for subsetting data and drawing plot
    panels determined by assigning variables to the rows and columns of `hue` parameters.
    While we can use wrapper functions such as `lmplot` and `factorplot` to scaffold
    plots on `FacetGrid` easily, it would be more flexible to build FacetGrid from
    scratch. To do that, we first supply a pandas DataFrame to the `FacetGrid` object
    and specify the way to lay out the grid via `col`, `row`, and `hue` parameters.
    Then we can assign a Seaborn or Matplotlib plotting function to each panel by
    calling the `map()` function of the `FacetGrid` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e74166a5-0600-434c-8e64-6a522ee0e42b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also supply keyword arguments to the plotting functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/b43fd7ec-bb68-4cbd-9774-0e4b67927941.png)'
  prefs: []
  type: TYPE_IMG
- en: '`FacetGrid` is not limited to the use of Seaborn plotting functions; let''s
    try to map the good old `Matplotlib.pyplot.plot()` function to `FacetGrid`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f84aae52-3a98-4977-a152-67f75474aa82.png)'
  prefs: []
  type: TYPE_IMG
- en: Pair plot in Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A pair plot is a special type of `FacetGrid`. Pairwise relationships between
    all variables in the input DataFrame will be visualized as scatter plots. In addition,
    a series of histograms will be displayed along the diagonal axes to show the distribution
    of the variable in that column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/41b3562e-4fe4-44d6-a6b9-6513e117f5a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can tweak many aspects of the plot. In the next example, we will increase
    the aspect ratio, change the plot type in the diagonal line to KDE plot, and adjust
    the aesthetics of the plots using keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/0cc657ec-9fb4-4433-862f-8dac69d6e56c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similar to other plots based on `FacetGrid`, we can define the variables to
    be displayed in each panel. We can also manually define the comparisons that matter
    to us instead of an all-versus-all comparison by setting the `x_vars` and `y_vars` parameters.
    You may also use `seaborn.PairGrid()` directly if you require even higher flexibility
    for defining comparison groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/6978d291-58f4-41f9-a2d0-ac3c3ffa0622.png)'
  prefs: []
  type: TYPE_IMG
- en: Other two-dimensional multivariate plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FacetGrid, factor plot, and pair plot may take up a lot of space when we need
    to visualize more variables or samples. There are two special plot types that
    come in handy if you want the maximize space efficiency - Heatmaps and Candlestick
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: Heatmap in Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A heatmap is an extremely compact way to display a large amount of data. In
    the finance world, color-coded blocks can give investors a quick glance at which
    stocks are up or down. In the scientific world, heatmaps allow researchers to
    visualize the expression level of thousands of genes.
  prefs: []
  type: TYPE_NORMAL
- en: The `seaborn.heatmap()` function expects a 2D list, 2D Numpy array, or pandas
    DataFrame as input. If a list or array is supplied, we can supply column and row
    labels via `xticklabels` and `yticklabels` respectively. On the other hand, if
    a DataFrame is supplied, the column labels and index values will be used to label
    the columns and rows respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, we will plot an overview of the performance of the six stocks
    using a heatmap. We define stock performance as the change of closing price when
    compared to the previous close. This piece of information was already calculated
    earlier in this chapter (that is, the `Close_change` column). Unfortunately, we
    can't supply the whole DataFrame to `seaborn.heatmap()` directly, since it expects
    company names as columns, date as index, and the change in closing price as values.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are familiar with Microsoft Excel, you might have experience in using
    pivot tables, a powerful technique to summarize the levels or values of a particular
    variable. pandas includes such functionality. The following code excerpt makes
    use of the wonderful `Pandas.DataFrame.pivot()` function to make a pivot table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '| **Company Date** | **AAPL** | **IBM** | **JNJ** | **MSFT** | **PG** | **XOM**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **2017-06-01** | 0.002749 | 0.000262 | 0.004133 | 0.003723 | 0.000454 | 0.002484
    |'
  prefs: []
  type: TYPE_TB
- en: '| **2017-06-02** | 0.014819 | -0.004061 | 0.010095 | 0.023680 | 0.005220 |
    -0.014870 |'
  prefs: []
  type: TYPE_TB
- en: '| **2017-06-05** | -0.009778 | 0.002368 | 0.002153 | 0.007246 | 0.001693 |
    0.007799 |'
  prefs: []
  type: TYPE_TB
- en: '| **2017-06-06** | 0.003378 | -0.000262 | 0.003605 | 0.003320 | 0.000676 |
    0.013605 |'
  prefs: []
  type: TYPE_TB
- en: '| **2017-06-07** | 0.005957 | -0.009123 | -0.000611 | -0.001793 | -0.000338
    | -0.003694 |'
  prefs: []
  type: TYPE_TB
- en: 'With the pivot table ready, we can proceed to plot our first heatmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/67b07b08-fcdf-4b0c-a0e6-6a95b296085c.png)'
  prefs: []
  type: TYPE_IMG
- en: The default heatmap implementation is not really compact enough. Of course,
    we can resize the figure via `plt.figure(figsize=(width, height))`; we can also
    toggle the square parameter to create square-shaped blocks. To ease visual recognition,
    we can add a thin border around the blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'By US stock market convention, green denotes a rise and red denotes a fall
    in prices. Hence we can adjust the `cmap` parameter to adjust the color map. However,
    neither Matplotlib nor Seaborn includes a red-green color map, so we need to create
    our own:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of [Chapter 7](7daeb59b-3e8e-4a33-9437-2839c6ed47e4.xhtml), *Visualizing
    Online Data*, we briefly introduced functions for creating custom color maps.
    Here we will use `seaborn.diverging_palette()` to create the red-green color map,
    which requires us to specify the hues, saturation, and lightness (husl) for the
    negative and positive extents of the color map. You may also use this code to
    launch an interactive widget in Jupyter Notebook to help select the colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%matplotlib notebook`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import seaborn as sns`'
  prefs: []
  type: TYPE_NORMAL
- en: '`sns.choose_diverging_palette(as_cmap=True)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/6c6e3457-478c-4902-9df9-38304a360e53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It could be hard to discern small differences in values when color is the only
    discriminative factor. Adding text annotations to each color block may help readers
    understand the magnitude of the difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8157d51c-154a-4507-b8f8-845ed511a41a.png)'
  prefs: []
  type: TYPE_IMG
- en: Candlestick plot in matplotlib.finance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen in the first part of this chapter, our dataset contains the
    opening and closing prices as well as the highest and lowest price per trading
    day. None of the plots we have described thus far are able to describe the trend
    of all these variables in a single plot.
  prefs: []
  type: TYPE_NORMAL
- en: In the financial world, the candlestick plot is almost the default choice for
    describing price movements of stocks, currencies, and commodities over a time
    period. Each candlestick consists of the body, describing the opening and closing
    prices, and extended wicks illustrating the highest and lowest prices of a particular
    trading day. If the closing price is higher than the opening price, the candlestick
    is often colored black. Conversely, the candlestick is colored red if the closing
    price is lower. The trader can then infer the opening and closing prices based
    on the combination of color and the boundary of the candlestick body.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we are going to prepare a candlestick chart of Apple
    Incorporation in the last 50 trading days of our DataFrame. We will also apply
    the tick formatter to label the ticks as dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/3c187f5e-6be3-47c0-b30d-e6f741886c36.png)'
  prefs: []
  type: TYPE_IMG
- en: Starting from Matplotlib 2.0, `matplotlib.finance` is deprecated. Readers should
    use `mpl_finance` ([https://github.com/matplotlib/mpl_finance](https://github.com/matplotlib/mpl_finance))
    in the future instead. However, as of writing this chapter, `mpl_finance` is not
    yet available on PyPI, so let's stick to `matplotlib.finance` for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing various stock market indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The candlestick plot in the current form is a bit bland. Traders usually overlay
    stock indicators such as **Average True Range** (**ATR**), Bollinger band, **Commodity
    Channel Index** (**CCI**), **Exponential Moving Average** (**EMA**), **Moving
    Average Convergence Divergence** (**MACD**), **Relative Strength Index** (**RSI**),
    and various other stats for technical analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stockstats ([https://github.com/jealous/stockstats](https://github.com/jealous/stockstats))
    is a great package for calculating these indicators/stats and many more. It wraps
    around pandas DataFrames and generate the stats on the fly when they are accessed.
    To use `stockstats`, we simply install it via PyPI: `pip install stockstats`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can convert a pandas DataFrame to a stockstats DataFrame via `stockstats.StockDataFrame.retype()`.
    A plethora of stock indicators can then be accessed by following the pattern `StockDataFrame["variable_timeWindow_indicator"]`.
    For example, `StockDataFrame[''open_2_sma'']` would give us the 2-day simple moving
    average on the opening price. Shortcuts may be available for some indicators,
    so please consult the official documentation for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'With the stock indicators ready, we can overlay them on the same candlestick
    chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/cc3ee719-5c97-415e-a83b-fc86db81482a.png)'
  prefs: []
  type: TYPE_IMG
- en: Building a comprehensive stock chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following elaborate example, we are going to apply the many techniques
    that we have covered thus far to create a more comprehensive stock chart. In addition
    to the preceding plot, we will add a line chart to display the **Relative Strength
    Index** (**RSI**) and a bar chart to show trade volume. A special market event
    ([http://markets.businessinsider.com/news/stocks/apple-stock-price-falling-new-iphone-speed-2017-6-1002082799](http://markets.businessinsider.com/news/stocks/apple-stock-price-falling-new-iphone-speed-2017-6-1002082799))
    is going to be annotated on the chart as well:'
  prefs: []
  type: TYPE_NORMAL
- en: If you look closely at the charts, you might notice some missing dates. These
    days are usually non-trading days or public holidays that were not present in
    our DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/69797210-b5fa-42bc-9a89-e4eedda2a87b.png)'
  prefs: []
  type: TYPE_IMG
- en: Three-dimensional (3D) plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By transitioning to the three-dimensional space, you may enjoy greater creative
    freedom when creating visualizations. The extra dimension can also accommodate
    more information in a single plot. However, some may argue that 3D is nothing
    more than a visual gimmick when projected to a 2D surface (such as paper) as it
    would obfuscate the interpretation of data points.
  prefs: []
  type: TYPE_NORMAL
- en: In Matplotlib version 2, despite significant developments in the 3D API, annoying
    bugs or glitches still exist. We will discuss some workarounds toward the end
    of this chapter. More powerful Python 3D visualization packages do exist (such
    as MayaVi2, Plotly, and VisPy), but it's good to use Matplotlib's 3D plotting
    functions if you want to use the same package for both 2D and 3D plots, or you
    would like to maintain the aesthetics of its 2D plots.
  prefs: []
  type: TYPE_NORMAL
- en: For the most part, 3D plots in Matplotlib have similar structures to 2D plots.
    As such, we will not go through every 3D plot type in this section. We will put
    our focus on 3D scatter plots and bar charts.
  prefs: []
  type: TYPE_NORMAL
- en: 3D scatter plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 6](bf358e3c-35c4-47c5-9683-7378dfa01c4e.xhtml), *Hello Plotting
    World!*, we have already explored scatter plots in two dimensions. In this section,
    let''s try to create a 3D scatter plot. Before doing that, we need some data points
    in three dimensions (*x*, *y*, *z*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '| **Point** | **x** | **y** | **z** |'
  prefs: []
  type: TYPE_TB
- en: '| **0** | -17.034178 | 18.972282 | 40.482403 |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | -16.881481 | 21.815451 | 44.156799 |'
  prefs: []
  type: TYPE_TB
- en: '| **2** | -16.749582 | 18.154911 | 34.131474 |'
  prefs: []
  type: TYPE_TB
- en: '| **3** | -16.876919 | 20.598286 | 36.271809 |'
  prefs: []
  type: TYPE_TB
- en: '| **4** | -16.849340 | 17.403711 | 42.993984 |'
  prefs: []
  type: TYPE_TB
- en: 'To declare a 3D plot, we first need to import the `Axes3D` object from the
    `mplot3d` extension in `mpl_toolkits`, which is responsible for rendering 3D plots
    in a 2D plane. After that, we need to specify `projection=''3d''` when we create
    subplots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/0c1800e1-f59a-4c26-a62e-f42eac2c6a47.png)'
  prefs: []
  type: TYPE_IMG
- en: Behold, the mighty sCATter plot in 3D. Cats are currently taking over the internet.
    According to the New York Times, cats are "the essential building block of the
    Internet" ([https://www.nytimes.com/2014/07/23/upshot/what-the-internet-can-see-from-your-cat-pictures.html](https://www.nytimes.com/2014/07/23/upshot/what-the-internet-can-see-from-your-cat-pictures.html)).
    Undoubtedly, they deserve a place in this chapter as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Contrary to the 2D version of `scatter()`, we need to provide X, Y, and Z coordinates
    when we are creating a 3D scatter plot. Yet the parameters that are supported
    in 2D `scatter()` can be applied to 3D `scatter()` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/06ee11d2-4d8c-495c-a134-117b8d0bb11b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To change the viewing angle and elevation of the 3D plot, we can make use of
    `view_init()`. The `azim` parameter specifies the azimuth angle in the X-Y plane,
    while `elev` specifies the elevation angle. When the azimuth angle is 0, the X-Y
    plane would appear to the north from you. Meanwhile, an azimuth angle of 180 would
    show you the south side of the X-Y plane:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/8e24fedd-2a1c-4960-a65c-9912cb91dca5.png)'
  prefs: []
  type: TYPE_IMG
- en: 3D bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We introduced candlestick plots for showing **Open-High-Low-Close** (**OHLC**)
    financial data. In addition, a 3D bar chart can be employed to show OHLC across
    time. The next figure shows a typical example of plotting a 5-day OHLC bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/cd5659d3-e410-4dbe-a51c-12fb5a218e01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The method for setting ticks and labels is similar to other Matplotlib plotting
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/802994e2-c7c6-4e94-aece-6fea3a3eeea7.png)'
  prefs: []
  type: TYPE_IMG
- en: Caveats of Matplotlib 3D
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Due to the lack of a true 3D graphical rendering backend (such as OpenGL) and
    proper algorithm for detecting 3D objects' intersections, the 3D plotting capabilities
    of Matplotlib are not great but just adequate for typical applications. In the
    official Matplotlib FAQ ([https://matplotlib.org/mpl_toolkits/mplot3d/faq.html](https://matplotlib.org/mpl_toolkits/mplot3d/faq.html)),
    the author noted that 3D plots may not look right at certain angles. Besides,
    we also reported that `mplot3d` would fail to clip bar charts if zlim is set ([https://github.com/matplotlib/matplotlib/issues/8902](https://github.com/matplotlib/matplotlib/issues/8902);
    see also [https://github.com/matplotlib/matplotlib/issues/209](https://github.com/matplotlib/matplotlib/issues/209)).
    Without improvements in the 3D rendering backend, these issues are hard to fix.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better illustrate the latter issue, let''s try to add `ax.set_zlim3d(bottom=110,
    top=150)` right above `plt.tight_layout()` in the previous 3D bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8edd8612-18d7-40dc-880f-1d264127265f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clearly, something is going wrong, as the bars overshoot the lower boundary
    of the axes. We will try to address the latter issue through the following workaround:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/3893c300-afb5-489e-9222-2088a3ff323c.png)'
  prefs: []
  type: TYPE_IMG
- en: Basically, we truncated the *y* values by 110, and then we used a tick formatter
    (`major_formatter`) to shift the tick value back to the original. For 3D scatter
    plots, we can simply remove the data points that exceed the boundary of `set_zlim3d()`
    in order to generate a proper figure. However, these workarounds may not work
    for every 3D plot type.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have successfully learned the techniques for visualizing multivariate data
    in 2D and 3D forms. Although most examples in this chapter revolved around the
    topic of stock trading, the data processing and visualization methods can be applied readily to
    other fields as well. In particular, the divide-and-conquer approach used to visualize
    multivariate data in facets is extremely useful in the scientific field.
  prefs: []
  type: TYPE_NORMAL
- en: We didn't go into too much detail of the 3D plotting capability of Matplotlib,
    as it is yet to be polished. For simple 3D plots, Matplotlib already suffices.
    The learning curve can be reduced if we use the same package for both 2D and 3D
    plots. You are advised to take a look at MayaVi2, Plotly, and VisPy if you require
    more powerful 3D plotting functions.
  prefs: []
  type: TYPE_NORMAL
