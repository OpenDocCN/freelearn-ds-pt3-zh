["```py\n    import pandas as pd\n    poverty = pd.read_csv('data/poverty.csv')\n    df = poverty[poverty['is_country'] & poverty['year'].eq(2015)]\n    ```", "```py\n    import plotly.express as px\n    gini = 'GINI index (World Bank estimate)'\n    px.histogram(data_frame=df, x=gini)\n    ```", "```py\n    df = poverty[poverty['is_country'] & poverty['year'].isin([2010, 2015])]\n    ```", "```py\n    px.histogram(df, x=gini, color='year', barmode='group')\n    ```", "```py\npx.histogram(df, x=gini, color='year', facet_col='year')\n```", "```py\nfig = px.histogram(df, x=gini, color='year', facet_col='year',\n```", "```py\nfig.layout.yaxis.ticksuffix = '%'\n```", "```py\nfig.layout.yaxis.title = 'Percent of total'\n```", "```py\n    from jupyter_dash import JupyterDash\n    import dash_core_components as dcc\n    import dash_html_components as html\n    import dash_bootstrap_components as dbc\n    from dash.dependencies import Output, Input\n    ```", "```py\n    app = JupyterDash(__name__)\n    app.layout = html.Div([])\n    ```", "```py\n    html.Div([\n        dbc.Label('Indicator:'),\n        dcc.Dropdown(id='hist_indicator_dropdown',\n                     index (World Bank estimate)',\n                     indicator, 'value': indicator}\n    for indicator in poverty.columns[3:54]]),\n    ])\n    ```", "```py\n    dbc.Label('Years:'), dcc.Dropdown(id='hist_multi_year_selector',\n                 value=[2015],\n                 one or more years',\n                 year, 'value': year}\n                          for year in poverty['year'].drop_duplicates().sort_values()]),\n    ```", "```py\n    dbc.Label('Modify number of bins:'),\n    dcc.Slider(id='hist_bins_slider',\n               min=0,\n               step=5,\n               marks={x: str(x) for x in range(0, 105, 5)}),\n    ```", "```py\n    dcc.Graph(id='indicator_year_histogram')\n    ```", "```py\n    @app.callback(Output('indicator_year_histogram', 'figure'),\n                  Input('hist_multi_year_selector', 'value'),\n                  Input('hist_indicator_dropdown', 'value'),\n                  Input('hist_bins_slider', 'value'))\n    ```", "```py\n    def display_histogram(years, indicator, nbins):\n        if (not years) or (not indicator):\n            raise PreventUpdate\n    ```", "```py\n    df = poverty[poverty['year'].isin(years) & poverty['is_country']]\n    ```", "```py\n    fig = px.histogram(df,\n                       color='year',\n                       + ' Histogram',\n                       facet_col='year',\n                       height=700)\n    ```", "```py\n    fig.for_each_xaxis(lambda axis: axis.update(title=''))\n    ```", "```py\n    fig.add_annotation(text=indicator,\n                       y=-0.12,\n                       yref='paper',\n    ```", "```py\n@app.callback(Output('indicator_year_histogram', 'figure'),\n              Input('hist_multi_year_selector', 'value'),\n              Input('hist_indicator_dropdown', 'value'),\n              Input('hist_bins_slider', 'value'))\ndef display_histogram(years, indicator, nbins):\n    if (not years) or (not indicator):\n        raise PreventUpdate\n    df = poverty[poverty['year'].isin(years) & poverty['is_country']]\n    fig = px.histogram(df,\n                       color='year', \n                       + ' Histogram',\n                       facet_col='year',\n                       height=700)\n    fig.for_each_xaxis(lambda axis: axis.update(title=''))\n    fig.add_annotation(text=indicator, \n                       y=-0.12, \n                       yref='paper',\n                       fig\n```", "```py\n    df = poverty[poverty['year'].eq(2000) & poverty['is_country']]\n    ```", "```py\n    fig = go.Figure()\n    fig.add_histogram2d(x=df['Income share held by fourth 20%'],\n                        y=df['GINI index (World Bank estimate)'],\n                        colorscale='cividis')\n    ```", "```py\n    fig.layout.xaxis.title = 'Income share held by fourth 20%'\n    fig.layout.yaxis.title = 'GINI index (World Bank estimate)'\n    fig.show()\n    ```", "```py\n    df = poverty[poverty['year'].eq(2000)&poverty['is_country']].filter(regex='Country Name|Income share.*10')\n    ```", "```py\n    app = JupyterDash(__name__, external_stylesheets=[dbc.themes.COSMO])\n    app.layout = html.Div([])\n    ```", "```py\n    DataTable(data=df.to_dict('records'),\n              columns=[{'name': col, 'id': col}\n                       col in df.columns])\n    ```", "```py\n    df = poverty[poverty['year'].eq(2000)&poverty['is_country']].filter(regex='Country Name|Income share')\n    ```", "```py\n    dbc.Col([], lg=7)\n    ```", "```py\n    style_header={'whiteSpace': 'normal'}\n    ```", "```py\n    fixed_rows={'headers': True}\n    ```", "```py\n    style_table={'height': '400px'}\n    ```", "```py\n    virtualization=True\n    ```", "```py\ndbc.Col([\n    DataTable(data=df.to_dict('records'),\n              columns=[{'name': col, 'id': col}\n                       col in df.columns],\n              style_header={'whiteSpace': 'normal'},\n              fixed_rows={'headers': True},\n              virtualization=True,\n              style_table={'height': '400px'})\n], lg =7),\n```", "```py\n    html.Div(id='table_histogram_output')\n    ```", "```py\n    @app.callback(Output('indicator_year_histogram', 'figure'),\n                  Output('table_histogram_output', 'children'),\n                  Input('hist_multi_year_selector', 'value'),\n                  Input('hist_indicator_dropdown', 'value'),\n                  Input('hist_bins_slider', 'value'))\n    ```", "```py\n    sort_action='native'\n    ```", "```py\n    filter_action='native'\n    ```", "```py\n    export_format='csv'\n    ```", "```py\n    style_cell={'minWidth': '150px'}\n    ```", "```py\n    return fig, table\n    ```"]