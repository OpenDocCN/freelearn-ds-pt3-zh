["```py\n>>> import numpy as np \n>>> from scipy import stats \n\n>>> data = np.array([4,5,1,2,7,2,6,9,3]) \n\n# Calculate Mean \n>>> dt_mean = np.mean(data) ; print (\"Mean :\",round(dt_mean,2)) \n\n# Calculate Median \n>>> dt_median = np.median(data) ; print (\"Median :\",dt_median)          \n\n# Calculate Mode \n>>> dt_mode =  stats.mode(data); print (\"Mode :\",dt_mode[0][0])                    \n```", "```py\ndata <- c(4,5,1,2,7,2,6,9,3) \ndt_mean = mean(data) ; print(round(dt_mean,2)) \ndt_median = median (data); print (dt_median) \n\nfunc_mode <- function (input_dt) { \n  unq <- unique(input_dt)  unq[which.max(tabulate(match(input_dt,unq)))] \n} \n\ndt_mode = func_mode (data); print (dt_mode) \n```", "```py\n>>> from statistics import variance, stdev \n>>> game_points = np.array([35,56,43,59,63,79,35,41,64,43,93,60,77,24,82]) \n\n# Calculate Variance \n>>> dt_var = variance(game_points) ; print (\"Sample variance:\", round(dt_var,2)) \n\n# Calculate Standard Deviation \n>>> dt_std = stdev(game_points) ; print (\"Sample std.dev:\", round(dt_std,2)) \n\n# Calculate Range \n>>> dt_rng = np.max(game_points,axis=0) - np.min(game_points,axis=0) ; print (\"Range:\",dt_rng) \n\n#Calculate percentiles \n>>> print (\"Quantiles:\") \n>>> for val in [20,80,100]: \n>>>      dt_qntls = np.percentile(game_points,val)  \n>>>      print (str(val)+\"%\" ,dt_qntls) \n\n# Calculate IQR                             \n>>> q75, q25 = np.percentile(game_points, [75 ,25]); print (\"Inter quartile range:\",q75-q25) \n```", "```py\ngame_points <- c(35,56,43,59,63,79,35,41,64,43,93,60,77,24,82) \ndt_var = var(game_points); print(round(dt_var,2)) \ndt_std = sd(game_points); print(round(dt_std,2)) \nrange_val<-function(x) return(diff(range(x)))  \ndt_range = range_val(game_points); print(dt_range) \ndt_quantile = quantile(game_points,probs = c(0.2,0.8,1.0)); print(dt_quantile) \ndt_iqr = IQR(game_points); print(dt_iqr) \n```", "```py\n>>> from scipy import stats  \n>>> xbar = 990; mu0 = 1000; s = 12.5; n = 30 \n\n# Test Statistic \n>>> t_smple  = (xbar-mu0)/(s/np.sqrt(float(n))); print (\"Test Statistic:\",round(t_smple,2)) \n\n# Critical value from t-table \n>>> alpha = 0.05 \n>>> t_alpha = stats.t.ppf(alpha,n-1); print (\"Critical value from t-table:\",round(t_alpha,3))           \n\n#Lower tail p-value from t-table                          \n>>> p_val = stats.t.sf(np.abs(t_smple), n-1); print (\"Lower tail p-value from t-table\", p_val)  \n```", "```py\nxbar = 990; mu0 = 1000; s = 12.5 ; n = 30 \nt_smple = (xbar - mu0)/(s/sqrt(n));print (round(t_smple,2)) \n\nalpha = 0.05 \nt_alpha = qt(alpha,df= n-1);print (round(t_alpha,3)) \n\np_val = pt(t_smple,df = n-1);print (p_val) \n```", "```py\n>>> from scipy import stats \n>>> xbar = 67; mu0 = 52; s = 16.3 \n\n# Calculating z-score \n>>> z = (67-52)/16.3  \n\n# Calculating probability under the curve     \n>>> p_val = 1- stats.norm.cdf(z) \n>>> print (\"Prob. to score more than 67 is \",round(p_val*100,2),\"%\") \n```", "```py\nxbar = 67; mu0 = 52; s = 16.3 \npr = 1- pnorm(67, mean=52, sd=16.3) \nprint(paste(\"Prob. to score more than 67 is \",round(pr*100,2),\"%\")) \n```", "```py\n>>> import pandas as pd \n>>> from scipy import stats \n\n>>> survey = pd.read_csv(\"survey.csv\")   \n\n# Tabulating 2 variables with row & column variables respectively \n>>> survey_tab = pd.crosstab(survey.Smoke, survey.Exer, margins = True) \n```", "```py\n# Creating observed table for analysis \n>>> observed = survey_tab.ix[0:4,0:3]  \n```", "```py\n>>> contg = stats.chi2_contingency(observed= observed) \n>>> p_value = round(contg[1],3) \n>>> print (\"P-value is: \",p_value) \n```", "```py\nsurvey = read.csv(\"survey.csv\",header=TRUE) \ntbl = table(survey$Smoke,survey$Exer) \np_val = chisq.test(tbl) \n```", "```py\n>>> import pandas as pd \n>>> from scipy import stats \n>>> fetilizers = pd.read_csv(\"fetilizers.csv\") \n```", "```py\n>>> one_way_anova = stats.f_oneway(fetilizers[\"fertilizer1\"], fetilizers[\"fertilizer2\"], fetilizers[\"fertilizer3\"]) \n\n>>> print (\"Statistic :\", round(one_way_anova[0],2),\", p-value :\",round(one_way_anova[1],3)) \n```", "```py\nfetilizers = read.csv(\"fetilizers.csv\",header=TRUE) \nr = c(t(as.matrix(fetilizers))) \nf = c(\"fertilizer1\",\"fertilizer2\",\"fertilizer3\") \nk = 3; n = 6 \ntm = gl(k,1,n*k,factor(f)) \nblk = gl(n,k,k*n) \nav = aov(r ~ tm + blk) \nsmry = summary(av) \n```", "```py\n# Train & Test split \n>>> import pandas as pd       \n>>> from sklearn.model_selection import train_test_split \n\n>>> original_data = pd.read_csv(\"mtcars.csv\")      \n```", "```py\n>>> train_data,test_data = train_test_split(original_data,train_size = 0.7,random_state=42) \n```", "```py\nfull_data = read.csv(\"mtcars.csv\",header=TRUE) \nset.seed(123) \nnumrow = nrow(full_data) \ntrnind = sample(1:numrow,size = as.integer(0.7*numrow)) \ntrain_data = full_data[trnind,] \ntest_data = full_data[-trnind,] \n```"]