["```py\n    In [1]: print(\"Hello world!\")\n    Hello world!\n    ```", "```py\n    In [2]: 2+2\n    Out[2]: 4\n    ```", "```py\n    In [3]: _ * 3\n    Out[3]: 12\n    ```", "```py\n    In [4]: !ls *.ipynb\n    notebook1.ipynb  ...\n    ```", "```py\n    In [5]: %lsmagic\n    Out[5]: Available line magics:\n    %alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %colors  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %install_default_config  %install_ext  %install_profiles  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\n    Available cell magics:\n    %%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%latex  %%perl  %%powershell  %%prun  %%pypy  %%python  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n    ```", "```py\n    In [6]: %%writefile test.txt\n            Hello world!\n    Writing test.txt\n    In [7]: # Let's check what this file contains.\n            with open('test.txt', 'r') as f:\n                print(f.read())\n    Hello world!\n    ```", "```py\n    In [9]: %run?\n    Type:        Magic function\n    Namespace:   IPython internal\n    ...\n    Docstring:\n    Run the named file inside IPython as a program.\n    [full documentation of the magic command...]\n    ```", "```py\n    ### New paragraph \n    This is *rich* **text** with [links](http://ipython.org),\n    equations:\n\n    $$\\hat{f}(\\xi) = \\int_{-\\infty}^{+\\infty} f(x)\\,\n                     \\mathrm{e}^{-i \\xi x}$$\n\n    code with syntax highlighting: \n    ```", "```py \n    and images: \n    ![This is an image](http://ipython.org/_static/IPy_header.png)\n    ```", "```py\n    In [11]: from IPython.display import HTML, SVG, YouTubeVideo\n    ```", "```py\n    In [12]: HTML('''\n             <table style=\"border: 2px solid black;\">\n             ''' + \n             ''.join(['<tr>' + \n                      ''.join(['<td>{row},{col}</td>'.format(\n                                     row=row, col=col\n                                     ) for col in range(5)]) +\n                      '</tr>' for row in range(5)]) +\n             '''\n             </table>\n             ''')\n    ```", "```py\n    In [13]: SVG('''<svg width=\"600\" height=\"80\">''' + \n             ''.join(['''<circle cx=\"{x}\" cy=\"{y}\" r=\"{r}\"\n                                 fill=\"red\"\n                                 stroke-width=\"2\"\n                                 stroke=\"black\">\n                         </circle>'''.format(x=(30+3*i)*(10-i),\n                                             y=30,\n                                             r=3.*float(i)\n                                             ) for i in range(10)]) + \n             '''</svg>''')\n    ```", "```py\n    In [14]: YouTubeVideo('j9YpkSX7NNM')\n    ```", "```py\n    In [15]: from collections import OrderedDict\n             from IPython.display import (display,\n                                          clear_output,\n                                          YouTubeVideo)\n             from IPython.html.widgets import DropdownWidget\n    In [16]: # We create a DropdownWidget, with a dictionary\n             # containing the keys (video name) and the values\n             # (Youtube identifier) of every menu item.\n             dw = DropdownWidget(values=OrderedDict([\n                               ('SciPy 2012', 'iwVvqwLDsJo'),\n                               ('PyCon 2012', '2G5YTlheCbw'),\n                               ('SciPy 2013', 'j9YpkSX7NNM')]\n                                                    )\n                                 )\n\n             # We create a callback function that displays the \n             # requested Youtube video.\n             def on_value_change(name, val):\n                 clear_output()\n                 display(YouTubeVideo(val))\n\n             # Every time the user selects an item, the \n             # function `on_value_change` is called, and the \n             # `val` argument contains the value of the selected \n             # item.\n             dw.on_trait_change(on_value_change, 'value')\n\n             # We choose a default value.\n             dw.value = dw.values['SciPy 2013']\n\n             # Finally, we display the widget.\n             display(dw)\n    ```", "```py\n{\n \"metadata\": {\n  \"name\": \"\"\n },\n \"nbformat\": 3,\n \"nbformat_minor\": 0,\n \"worksheets\": [\n  {\n   \"cells\": [\n    {\n     \"cell_type\": \"code\",\n     \"collapsed\": false,\n     \"input\": [\n      \"print(\\\"Hello World!\\\")\"\n     ],\n     \"language\": \"python\",\n     \"metadata\": {},\n     \"outputs\": [\n      {\n       \"output_type\": \"stream\",\n       \"stream\": \"stdout\",\n       \"text\": [\n        \"Hello World!\\n\"\n       ]\n      }\n     ],\n     \"prompt_number\": 1\n    }\n   ],\n   \"metadata\": {}\n  }\n ]\n}\n```", "```py\n    In [1]: import numpy as np\n            import pandas as pd\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: url = \"http://donnees.ville.montreal.qc.ca/storage/f/2014-01-20T20%3A48%3A50.296Z/2013.csv\"\n    ```", "```py\n    In [3]: df = pd.read_csv(url, index_col='Date',\n                             parse_dates=True, dayfirst=True)\n    ```", "```py\n    In [4]: df.head(2)\n    ```", "```py\n    In [5]: df.describe()\n    ```", "```py\n    In [6]: df[['Berri1', 'PierDup']].plot()\n    ```", "```py\n    In [7]: df.index.weekday\n    Out[7]: array([1, 2, 3, 4, 5, 6, 0, 1, 2, ..., 0, 1, 2])\n    ```", "```py\n    In [8]: days = np.array(['Monday', 'Tuesday', 'Wednesday', \n                             'Thursday', 'Friday', 'Saturday', \n                             'Sunday'])\n            df['Weekday'] = days[df.index.weekday]\n    ```", "```py\n    In [9]: df_week = df.groupby('Weekday').sum()\n    In [10]: df_week\n    ```", "```py\n    In [11]: df_week.ix[days].plot(lw=3)\n             plt.ylim(0);  # Set the bottom axis to 0.\n    ```", "```py\n    In [12]: from IPython.html.widgets import interact\n             @interact\n             def plot(n=(1, 30)):\n                 pd.rolling_mean(df['Berri1'], n).dropna().plot()\n                 plt.ylim(0, 8000)\n                 plt.show()\n    ```", "```py\n    In [1]: import random\n            import numpy as np\n    ```", "```py\n    In [2]: %precision 3\n    Out[2]: u'%.3f'\n    ```", "```py\n    In [3]: n = 1000000\n            x = [random.random() for _ in range(n)]\n            y = [random.random() for _ in range(n)]\n    In [4]: x[:3], y[:3]\n    Out[4]: ([0.996, 0.846, 0.202], [0.352, 0.435, 0.531])\n    ```", "```py\n    In [5]: z = [x[i] + y[i] for i in range(n)]\n            z[:3]\n    Out[5]: [1.349, 1.282, 0.733]\n    ```", "```py\n    In [6]: %timeit [x[i] + y[i] for i in range(n)]\n    1 loops, best of 3: 273 ms per loop\n    ```", "```py\n    In [7]: xa = np.array(x)\n            ya = np.array(y)\n    In [8]: xa[:3]\n    Out[8]: array([ 0.996,  0.846,  0.202])\n    ```", "```py\n    In [9]: za = xa + ya\n            za[:3]\n    Out[9]: array([ 1.349,  1.282,  0.733])\n    ```", "```py\n    In [10]: %timeit xa + ya\n    100 loops, best of 3: 10.7 ms per loop\n    ```", "```py\n    In [11]: %timeit sum(x)  # pure Python\n             %timeit np.sum(xa)  # NumPy\n    100 loops, best of 3: 17.1 ms per loop\n    1000 loops, best of 3: 2.01 ms per loop\n    ```", "```py\n    In [12]: d = [abs(x[i] - y[j]) \n                  for i in range(1000) for j in range(1000)]\n    In [13]: d[:3]\n    Out[13]: [0.230, 0.037, 0.549]\n    ```", "```py\n    In [14]: da = np.abs(xa[:1000,None] - ya[:1000])\n    In [15]: da\n    Out[15]: array([[ 0.23 ,  0.037,  ...,  0.542,  0.323,  0.473],\n                     ...,\n                    [ 0.511,  0.319,  ...,  0.261,  0.042,  0.192]])\n    In [16]: %timeit [abs(x[i] - y[j]) \n                      for i in range(1000) for j in range(1000)]\n             %timeit np.abs(xa[:1000,None] - ya[:1000])\n    1 loops, best of 3: 292 ms per loop\n    100 loops, best of 3: 18.4 ms per loop\n    ```", "```py\n    In [1]: from IPython.core.magic import (register_line_magic, \n                                            register_cell_magic)\n    ```", "```py\n    In [2]: @register_line_magic\n            def hello(line):\n                if line == 'french':\n                    print(\"Salut tout le monde!\")\n                else:\n                    print(\"Hello world!\")\n    In [3]: %hello\n    Hello world!\n    In [4]: %hello french\n    Salut tout le monde!\n    ```", "```py\n    In [5]: import pandas as pd\n            #from StringIO import StringIO  # Python 2\n            from io import StringIO  # Python 3\n\n            @register_cell_magic\n            def csv(line, cell):\n                # We create a string buffer containing the\n                # contents of the cell.\n                sio = StringIO(cell)\n                # We use pandas' read_csv function to parse\n                # the CSV string.\n                return pd.read_csv(sio)\n    In [6]: %%csv\n            col1,col2,col3\n            0,1,2\n            3,4,5\n            7,8,9\n    Out[6]:\n        col1  col2  col3\n    0     0     1     2\n    1     3     4     5\n    2     7     8     9\n    ```", "```py\n    In [7]: df = _\n            df.describe()\n    Out[7]:\n               col1      col2      col3\n    count  3.000000  3.000000  3.000000\n    mean   3.333333  4.333333  5.333333\n    ...\n    min    0.000000  1.000000  2.000000\n    max    7.000000  8.000000  9.000000\n    ```", "```py\n    In [8]: %%writefile csvmagic.py\n            import pandas as pd\n            #from StringIO import StringIO  # Python 2\n            from io import StringIO  # Python 3\n            def csv(line, cell):\n                sio = StringIO(cell)\n                return pd.read_csv(sio)\n\n            def load_ipython_extension(ipython):\n                \"\"\"This function is called when the extension \n                is loaded. It accepts an \n                IPython InteractiveShell instance.\n                We can register the magic with the\n                `register_magic_function` method.\"\"\"\n                ipython.register_magic_function(csv, 'cell')\n    Overwriting csvmagic.py\n    ```", "```py\n    In [9]: %load_ext csvmagic\n    In [10]: %%csv\n             col1,col2,col3\n             0,1,2\n             3,4,5\n             7,8,9\n    Out[10]:\n       col1  col2  col3\n    0     0     1     2\n    1     3     4     5\n    2     7     8     9\n    ```", "```py\n    from IPython.utils.traitlets import Int, Float, Unicode, Bool\n    from IPython.core.magic import (Magics, magics_class, line_magic)\n    import numpy as np\n    ```", "```py\n    @magics_class\n    class RandomMagics(Magics):\n        text = Unicode(u'{n}', config=True)\n        max = Int(1000, config=True)\n        seed = Int(0, config=True)\n    ```", "```py\n        def __init__(self, shell):\n            super(RandomMagics, self).__init__(shell)\n            self._rng = np.random.RandomState(self.seed or None)\n    ```", "```py\n        @line_magic\n        def random(self, line):\n            return self.text.format(n=self._rng.randint(self.max))\n    ```", "```py\n    def load_ipython_extension(ipython):\n        ipython.register_magics(RandomMagics)\n    ```", "```py\n    In [1]: %load_ext random_magics\n    In [2]: %random\n    Out[2]: '635'\n    In [3]: %random\n    Out[3]: '47'\n    ```", "```py\n    ipython --RandomMagics.text='Your number is {n}.' --RandomMagics.max=10 --RandomMagics.seed=1\n\n    ```", "```py\n    In [1]: %load_ext random_magics\n    In [2]: %random\n    Out[2]: u'Your number is 5.'\n    In [3]: %random\n    Out[3]: u'Your number is 8.'\n    ```", "```py\n    c.RandomMagics.text = 'random {n}'\n    ```", "```py\n    In [4]: %random\n    Out[4]: 'random 652'\n    ```", "```py\nfrom IPython.config.configurable import Configurable\nfrom IPython.utils.traitlets import Float\n\nclass MyConfigurable(Configurable):\n    myvariable = Float(100.0, config=True)\n```", "```py\nc = get_config()\nc.MyConfigurable.myvariable = 123.\n```", "```py\n    from IPython.kernel.zmq.kernelbase import Kernel\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from io import BytesIO\n    import urllib, base64\n    ```", "```py\n    def _to_png(fig):\n        \"\"\"Return a base64-encoded PNG from a \n        matplotlib figure.\"\"\"\n        imgdata = BytesIO()\n        fig.savefig(imgdata, format='png')\n        imgdata.seek(0)\n        return urllib.parse.quote(\n            base64.b64encode(imgdata.getvalue()))\n    ```", "```py\n    _numpy_namespace = {n: getattr(np, n) \n                        for n in dir(np)}\n    def _parse_function(code):\n        \"\"\"Return a NumPy function from a string 'y=f(x)'.\"\"\"\n        return lambda x: eval(code.split('=')[1].strip(),\n                              _numpy_namespace, {'x': x})\n    ```", "```py\n    class PlotKernel(Kernel):\n        implementation = 'Plot'\n        implementation_version = '1.0'\n        language = 'python'  # will be used for\n                             # syntax highlighting\n        language_version = ''\n        banner = \"Simple plotting\"\n    ```", "```py\n    def do_execute(self, code, silent,\n                   store_history=True,\n                   user_expressions=None,\n                   allow_stdin=False):\n\n        # We create the plot with matplotlib.\n        fig = plt.figure(figsize=(6,4), dpi=100)\n        x = np.linspace(-5., 5., 200)\n        functions = code.split('\\n')\n        for fun in functions:\n            f = _parse_function(fun)\n            y = f(x)\n            plt.plot(x, y)\n        plt.xlim(-5, 5)\n\n        # We create a PNG out of this plot.\n        png = _to_png(fig)\n\n        if not silent:\n            # We send the standard output to the client.\n            self.send_response(self.iopub_socket,\n                'stream', {\n                    'name': 'stdout', \n                    'data': 'Plotting {n} function(s)'. \\\n                                format(n=len(functions))})\n\n            # We prepare the response with our rich data\n            # (the plot).\n            content = {\n                'source': 'kernel',\n\n                # This dictionary may contain different\n                # MIME representations of the output.\n                'data': {\n                    'image/png': png\n                },\n\n                # We can specify the image size\n                # in the metadata field.\n                'metadata' : {\n                      'image/png' : {\n                        'width': 600,\n                        'height': 400\n                      }\n                    }\n            }        \n\n            # We send the display_data message with the\n            # contents.\n            self.send_response(self.iopub_socket,\n                'display_data', content)\n\n        # We return the execution results.\n        return {'status': 'ok',\n                'execution_count': self.execution_count,\n                'payload': [],\n                'user_expressions': {},\n               }\n    ```", "```py\n    if __name__ == '__main__':\n        from IPython.kernel.zmq.kernelapp import IPKernelApp\n        IPKernelApp.launch_instance(kernel_class=PlotKernel)\n    ```", "```py\n    {\n     \"argv\": [\"python\", \"-m\",\n              \"plotkernel\", \"-f\",\n              \"{connection_file}\"],\n     \"display_name\": \"Plot\",\n     \"language\": \"python\"\n    }\n    ```", "```py\ndef do_complete(self, code, cursor_pos):\n    return {'status': 'ok',\n            'cursor_start': ...,\n            'cursor_end': ...,\n            'matches': [...]}\n```"]