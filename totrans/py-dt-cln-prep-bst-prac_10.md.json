["```py\npip install scikit-learn==1.5.0\npip install matplotlib==3.9.0\npip install seaborn==0.13.2\npip install category_encoders==2.6.3\n```", "```py\nEmployee   Rating  Salary  Years of Experience  Department\n0            Poor   35000                    2          HR\n1            Good   50000                    5          IT\n2    Satisfactory   42000                    3     Finance\n3       Excellent   60000                    8          IT\n4            Good   52000                    6   Marketing\n```", "```py\n    import pandas as pd\n    from sklearn.preprocessing import LabelEncoder\n    ```", "```py\n    data = {\n        'Employee Rating': ['Poor', 'Good', 'Satisfactory', 'Excellent', 'Good'],\n        'Salary': [35000, 50000, 42000, 60000, 52000],\n        'Years of Experience': [2, 5, 3, 8, 6],\n        'Department': ['HR', 'IT', 'Finance', 'IT', 'Marketing']\n    }\n    df = pd.DataFrame(data)\n    ```", "```py\n    label_encoder = LabelEncoder()\n    ```", "```py\n    df['Employee Rating (Encoded)'] = label_encoder.fit_transform(df['Employee Rating'])\n    ```", "```py\n    ordered_categories = {\n        'Poor': '1.Poor',\n        'Satisfactory': '2.Satisfactory',\n        'Good': '3.Good',\n        'Excellent': '4.Excellent'\n    }\n    ```", "```py\n    df['Employee Rating Ordered'] = df['Employee Rating'].map(ordered_categories)\n    ```", "```py\n      Employee Rating Ordered  Employee Rating (Encoded)\n    0                    Poor                          0\n    1                    Good                          2\n    2            Satisfactory                          1\n    3               Excellent                          3\n    4                    Good                          2\n    ```", "```py\n    df['Employee Rating (Encoded)'] = label_encoder.fit_transform(df['Employee Rating'])\n    ```", "```py\n    joblib.dump(label_encoder, 'label_encoder.pkl')\n    ```", "```py\n    loaded_encoder = joblib.load('label_encoder.pkl')\n    ```", "```py\n    df['Employee Rating (Encoded)'] = loaded_encoder.transform(df['Employee Rating'])\n    ```", "```py\n  Customer ID  Contract Type Internet Service Payment Method\n0           1 Month-to-Month              DSL  Electronic Check\n1           2       One Year      Fiber Optic  Mailed Check\n2           3 Month-to-Month              DSL Bank Transfer\n3           4       Two Year      Fiber Optic   Credit Card\n```", "```py\n    one_hot_encoder = OneHotEncoder(sparse_output=False, drop='first')\n    ```", "```py\n    encoded_columns = one_hot_encoder.fit_transform(df[['Contract Type', 'Internet Service', 'Payment Method']])\n    ```", "```py\n    encoded_df = pd.DataFrame(encoded_columns, columns=one_hot_encoder.get_feature_names_out(['Contract Type', 'Internet Service', 'Payment Method']))\n    ```", "```py\n    df_encoded = pd.concat([df, encoded_df], axis=1)\n    ```", "```py\n    df_encoded = df_encoded.drop(['Contract Type', 'Internet Service', 'Payment Method'], axis=1)\n    ```", "```py\n    Store Type  Number of Employees  Advertising Budget   Daily Sales\n0       Type C                   21        23117.964192  16195.682148\n1       Type D                   13         9017.567238    851.127834\n2       Type A                   37        39945.667889  19274.801963\n3       Type C                   24        34990.429063  14670.084345\n4       Type C                   17        11817.711027   6442.646360\n```", "```py\n    np.random.seed(42)\n    n_samples = 1000\n    ```", "```py\n    data = {\n      'Store Type': np.random.choice(['Type A', 'Type B', 'Type C', 'Type D'], size=n_samples),\n      'Number of Employees': np.random.randint(5, 50, size=n_samples),\n      'Advertising Budget': np.random.uniform(1000, 50000, size=n_samples),\n      'Daily Sales': np.random.uniform(500, 20000, size=n_samples)\n    }\n    ```", "```py\n    df = pd.DataFrame(data)\n    ```", "```py\n    X = df.drop(columns=['Daily Sales']) # Features\n    y = df['Daily Sales'] # Target variable\n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    ```", "```py\n    target_encoder = TargetEncoder(cols=['Store Type'])\n    ```", "```py\n    X_train_encoded = target_encoder.fit_transform(X_train, y_train)\n    ```", "```py\n       Store Type  Number of Employees  Advertising Budget\n29   10025.134200                   37        43562.535230\n535  10190.055174                   12         1940.421564\n695  10025.134200                   14        47945.600526\n557  10190.055174                   23        19418.525972\n836  10560.489044                   27        35683.919764\n```", "```py\n  Customer ID Product Category  Total Purchases\n0            1      Electronics                5\n1            2         Clothing                2\n2            3      Electronics                3\n3            4            Books                8\n4            5            Books                7\n5            6         Clothing                4\n```", "```py\n    data = {\n        'Customer ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        'Product Category': ['Electronics', 'Clothing', 'Electronics', 'Books', 'Books', 'Clothing', 'Electronics', 'Books', 'Clothing', 'Books'],\n        'Total Purchases': [5, 2, 3, 8, 7, 4, 2, 5, 1, 6]\n    }\n    df = pd.DataFrame(data)\n    ```", "```py\n    X = df[['Customer ID', 'Product Category', 'Total Purchases']]\n    ```", "```py\n    X_train, X_test = train_test_split(X, test_size=0.2, random_state=42)\n    ```", "```py\n    count_encoder = CountEncoder(cols=['Product Category'])\n    ```", "```py\n    X_train_encoded = count_encoder.fit_transform(X_train)\n    ```", "```py\n   Customer ID  Product Category  Total Purchases\n5            6                 1                4\n0            1                 3                5\n7            8                 4                5\n2            3                 3                3\n9           10                 4                6\n```", "```py\n  Country  Age  Income  Subscription\n0     USA   25   50000             1\n1  Canada   30   60000             0\n2     USA   35   70000             1\n3  Canada   40   80000             0\n4  Mexico   45   90000             1\n```", "```py\n    data = {\n        'Country': ['USA', 'Canada', 'USA', 'Canada', 'Mexico', 'USA', 'Mexico', 'Canada'],\n        'Age': [25, 30, 35, 40, 45, 50, 55, 60],\n        'Income': [50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000],\n        'Subscription': [1, 0, 1, 0, 1, 0, 1, 0]\n    }\n    df = pd.DataFrame(data)\n    ```", "```py\n    encoder = BinaryEncoder(cols=['Country'])\n    df_encoded = encoder.fit_transform(df)\n    ```", "```py\n    print(df_encoded)\n    ```", "```py\n   Country_0  Country_1  Age  Income  Subscription\n0          0          1   25   50000             1\n1          1          0   30   60000             0\n2          0          1   35   70000             1\n3          1          0   40   80000             0\n4          1          1   45   90000             1\n5          0          1   50  100000             0\n6          1          1   55  110000             1\n7          1          0   60  120000             0\n```"]