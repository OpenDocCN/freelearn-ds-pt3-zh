["```py\nwith open('../../Data/xgb_model_w_data.pkl', 'rb') as f:\n    features_response, X_train_all, y_train_all, X_test_all,\\\n    y_test_all, xgb_model_4 = pickle.load(f)\n```", "```py\ntest_set_pred_proba = xgb_model_4.predict_proba(X_test_all)[:,1]\n```", "```py\nfrom sklearn.metrics import roc_auc_score\ntest_auc = roc_auc_score(y_test_all, test_set_pred_proba)\ntest_auc\n```", "```py\n0.7735528979671706\n```", "```py\nmpl.rcParams['figure.dpi'] = 400\nplt.hist(test_set_pred_proba, bins=50)\nplt.xlabel('Predicted probability')\nplt.ylabel('Number of samples')\n```", "```py\ndeciles, decile_bin_edges = pd.qcut(x=test_set_pred_proba,\\\n                                    q=10,\\\n                                    retbins=True)\n```", "```py\ndecile_bin_edges\n```", "```py\narray([0.02213463, 0.06000734, 0.08155108, 0.10424594, 0.12708404,\n       0.15019046, 0.18111563, 0.23032923, 0.32210371, 0.52585585,\n       0.89491451])\n```", "```py\ntest_set_df = pd.DataFrame({'Predicted probability':test_set_pred_proba,\\\n                            'Prediction decile':deciles,\\\n                            'Outcome':y_test_all})\ntest_set_df.head()\n```", "```py\ntest_set_gr = test_set_df.groupby('Prediction decile')\n```", "```py\ngr_df = test_set_gr.agg({'Outcome':['count', 'mean']})\n```", "```py\ngr_df.columns\n```", "```py\nMultiIndex([('Outcome', 'count'),\n            ('Outcome',  'mean')],\n           )\n```", "```py\nax_1 = plt.axes()\ncolor_1 = 'tab:blue'\ngr_df[('Outcome', 'count')].plot.bar(ax=ax_1, color=color_1)\nax_1.set_ylabel('Count of observations', color=color_1)\nax_1.tick_params(axis='y', labelcolor=color_1)\nax_1.tick_params(axis='x', labelrotation = 45)\n```", "```py\nax_2 = ax_1.twinx()\ncolor_2 = 'tab:red'\ngr_df[('Outcome', 'mean')].plot(ax=ax_2, color=color_2)\nax_2.set_ylabel('Default rate', color=color_2)\nax_2.tick_params(axis='y', labelcolor=color_2)\n```", "```py\n    equal_intervals, equal_interval_bin_edges = \\\n        pd.cut(x=test_set_pred_proba,\\\n               bins=5,\\\n               retbins=True)\n    ```", "```py\n    equal_interval_bin_edges\n    ```", "```py\n    array([0.02126185, 0.1966906 , 0.37124658, 0.54580256, 0.72035853,\n           0.89491451])\n    ```", "```py\n    equal_interval_bin_edges[1:] - equal_interval_bin_edges[:-1]\n    ```", "```py\n    array([0.17542876, 0.17455598, 0.17455598, 0.17455598, 0.17455598])\n    ```", "```py\n    test_set_bins_df =\\\n    pd.DataFrame({'Predicted probability':test_set_pred_proba,\\\n                  'Prediction bin':equal_intervals,\\\n                  'Outcome':y_test_all})\n    test_set_bins_df.head()\n    ```", "```py\n    test_set_equal_gr = test_set_bins_df.groupby('Prediction bin')\n    gr_eq_df = test_set_equal_gr.agg({'Outcome':['count', 'mean']})\n    gr_eq_df\n    ```", "```py\n    p = gr_eq_df[('Outcome', 'mean')].values\n    n = gr_eq_df[('Outcome', 'count')].values\n    std_err = np.sqrt(p * (1-p) / n)\n    std_err\n    ```", "```py\n    array([0.00506582, 0.01258848, 0.02528987, 0.02762643, 0.02683029])\n    ```", "```py\n    ax_1 = plt.axes()\n    color_1 = 'tab:blue'\n    gr_eq_df[('Outcome', 'count')].plot.bar(ax=ax_1, color=color_1)\n    ax_1.set_ylabel('Count of observations', color=color_1)\n    ax_1.tick_params(axis='y', labelcolor=color_1)\n    ax_1.tick_params(axis='x', labelrotation = 45)\n    ax_2 = ax_1.twinx()\n    color_2 = 'tab:red'\n    gr_eq_df[('Outcome', 'mean')].plot(ax=ax_2, color=color_2,\n                                       yerr=std_err)\n    ax_2.set_ylabel('Default rate', color=color_2)\n    ax_2.tick_params(axis='y', labelcolor=color_2)\n    ```", "```py\ncal_df = test_set_gr.agg({'Outcome':['count', 'mean'],\\\n                          'Predicted probability':'mean'})\ncal_df\n```", "```py\nF = cal_df[('Outcome', 'count')].values/y_test_all.shape[0]\nF\n```", "```py\narray([0.10003368, 0.10003368, 0.10003368, 0.09986527, 0.10003368,\n       0.10003368, 0.09986527, 0.10003368, 0.10003368, 0.10003368])\n```", "```py\nECE = np.sum(\n    F\n    * np.abs(\n             cal_df[('Outcome', 'mean')]\n             - cal_df[('Predicted probability', 'mean')]))\nECE\n```", "```py\n0.008144502190176022\n```", "```py\nax = plt.axes()\nax.plot([0, 0.8], [0, 0.8], 'k--', linewidth=1,\n        label='Perfect calibration')\nax.plot(cal_df[('Outcome', 'mean')],\\\n        cal_df[('Predicted probability', 'mean')],\\\n        marker='x',\\\n        label='Model calibration on test set')\nax.set_xlabel('True default rate in bin')\nax.set_ylabel('Average model prediction in bin')\nax.legend()\n```", "```py\n    thresholds = np.linspace(0, 1, 101)\n    ```", "```py\n    features_response[5]\n    ```", "```py\n    'BILL_AMT1'\n    ```", "```py\n    cost_per_counseling = 7500\n    ```", "```py\n    effectiveness = 0.70\n    ```", "```py\n    n_pos_pred = np.empty_like(thresholds)\n    total_cost = np.empty_like(thresholds)\n    n_true_pos = np.empty_like(thresholds)\n    total_savings = np.empty_like(thresholds)\n    ```", "```py\n    counter = 0\n    for threshold in thresholds:\n    ```", "```py\n        pos_pred = test_set_pred_proba > threshold\n    ```", "```py\n        n_pos_pred[counter] = sum(pos_pred)\n    ```", "```py\n        total_cost[counter] \\\n            = n_pos_pred[counter] * cost_per_counseling\n    ```", "```py\n        true_pos = pos_pred & y_test_all.astype(bool)\n    ```", "```py\n        n_true_pos[counter] = sum(true_pos)\n    ```", "```py\n        total_savings[counter] = np.sum(\n            true_pos.astype(int)\n            * X_test_all[:,5]\n            * effectiveness\n            ) \n    ```", "```py\n    counter += 1\n    ```", "```py\n    net_savings = total_savings - total_cost\n    ```", "```py\n    mpl.rcParams['figure.dpi'] = 400\n    plt.plot(thresholds, net_savings)\n    plt.xlabel('Threshold')\n    plt.ylabel('Net savings (NT$)')\n    plt.xticks(np.linspace(0,1,11))\n    plt.grid(True)\n    ```", "```py\n    max_savings_ix = np.argmax(net_savings)\n    ```", "```py\n    thresholds[max_savings_ix]\n    ```", "```py\n    0.36\n    ```", "```py\n    net_savings[max_savings_ix]\n    ```", "```py\n    13415710.0\n    ```"]