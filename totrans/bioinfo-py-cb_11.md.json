["```py\npip install pygenomics\n```", "```py\n    import os\n    from sklearn.decomposition import PCA\n    import numpy as np\n    from genomics.popgen.pca import plot\n    f = open('../Chapter06/relationships_w_pops_041510.txt')\n    ind_pop = {}\n    f.readline()  # header\n    for l in f:\n        toks = l.rstrip().split('\\t')\n        fam_id = toks[0]\n        ind_id = toks[1]\n        pop = toks[-1]\n        ind_pop['/'.join([fam_id, ind_id])] = pop\n    f.close()\n    ```", "```py\n    f = open('../Chapter06/hapmap10_auto_noofs_ld_12.ped')\n    ninds = 0\n    ind_order = []\n    for line in f:\n        ninds += 1\n        toks = line[:100].replace(' ', '\\t').split('\\t')\n        fam_id = toks[0]\n        ind_id = toks[1]\n        ind_order.append('%s/%s' % (fam_id, ind_id))\n    nsnps = (len(line.replace(' ', '\\t').split('\\t')) - 6) // 2\n    f.close()\n    ```", "```py\n    pca_array = np.empty((ninds, nsnps), dtype=int)\n    print(pca_array.shape)\n    f = open('../Chapter06/hapmap10_auto_noofs_ld_12.ped')\n    for ind, line in enumerate(f):\n        snps = line.replace(' ', '\\t').split('\\t')[6:]\n        for pos in range(len(snps) // 2):\n            a1 = int(snps[2 * pos])\n            a2 = int(snps[2 * pos])\n            my_code = a1 + a2 - 2\n            pca_array[ind, pos] = my_code\n    f.close()\n    ```", "```py\n    my_pca = PCA(n_components=8)\n    my_pca.fit(pca_array)\n    trans = my_pca.transform(pca_array)\n    ```", "```py\n    sc_ind_comp = {}\n    for i, ind_pca in enumerate(trans):\n        sc_ind_comp[ind_order[i]] = ind_pca\n    plot.render_pca_eight(sc_ind_comp, cluster=ind_pop)\n    ```", "```py\n    import os\n    import matplotlib.pyplot as plt\n    from sklearn.cluster import KMeans\n    from sklearn.decomposition import PCA\n    import numpy as np\n    from genomics.popgen.pca import plot\n    f = open('../Chapter06/relationships_w_pops_041510.txt')\n    ind_pop = {}\n    f.readline()  # header\n    for l in f:\n        toks = l.rstrip().split('\\t')\n        fam_id = toks[0]\n        ind_id = toks[1]\n        pop = toks[-1]\n        ind_pop['/'.join([fam_id, ind_id])] = pop\n    f.close()\n\n    f = open('../Chapter06/hapmap10_auto_noofs_ld_12.ped')\n    ninds = 0\n    ind_order = []\n    for line in f:\n        ninds += 1\n        toks = line[:100].replace(' ', '\\t').split('\\t') #  for speed\n        fam_id = toks[0]\n        ind_id = toks[1]\n        ind_order.append('%s/%s' % (fam_id, ind_id))\n    nsnps = (len(line.replace(' ', '\\t').split('\\t')) - 6) // 2\n    print (nsnps)\n    f.close()\n    ```", "```py\n    all_array = np.empty((ninds, nsnps), dtype=int)\n    f = open('../Chapter06/hapmap10_auto_noofs_ld_12.ped')\n    for ind, line in enumerate(f):\n        snps = line.replace(' ', '\\t').split('\\t')[6:]\n        for pos in range(len(snps) // 2):\n            a1 = int(snps[2 * pos])\n            a2 = int(snps[2 * pos])\n            my_code = a1 + a2 - 2\n            all_array[ind, pos] = my_code\n    f.close()\n    ```", "```py\n    predict_case = all_array[-1, :]\n    pca_array = all_array[:-1,:]\n\n    last_ind = ind_order[-1]\n    last_ind, ind_pop[last_ind]\n    ```", "```py\n    my_pca = PCA(n_components=2)\n    my_pca.fit(pca_array)\n    trans = my_pca.transform(pca_array)\n\n    sc_ind_comp = {}\n    for i, ind_pca in enumerate(trans):\n        sc_ind_comp[ind_order[i]] = ind_pca\n    plot.render_pca(sc_ind_comp, cluster=ind_pop)\n    ```", "```py\n    def plot_kmeans_pca(trans, kmeans):\n        x_min, x_max = trans[:, 0].min() - 1, trans[:, 0].max() + 1\n        y_min, y_max = trans[:, 1].min() - 1, trans[:, 1].max() + 1\n        mesh_x, mesh_y = np.meshgrid(np.arange(x_min, x_max, 0.5), np.arange(y_min, y_max, 0.5))\n\n        k_surface = kmeans.predict(np.c_[mesh_x.ravel(), mesh_y.ravel()]).reshape(mesh_x.shape)\n        fig, ax = plt.subplots(1,1, dpi=300)\n        ax.imshow(\n            k_surface, origin=\"lower\", cmap=plt.cm.Pastel1,\n            extent=(mesh_x.min(), mesh_x.max(), mesh_y.min(), mesh_y.max()),\n        )\n        ax.plot(trans[:, 0], trans[:, 1], \"k.\", markersize=2)\n        ax.set_title(\"KMeans clustering of PCA data\")\n        ax.set_xlim(x_min, x_max)\n        ax.set_ylim(y_min, y_max)\n        ax.set_xticks(())\n        ax.set_yticks(())\n        return ax\n    ```", "```py\n    kmeans11 = KMeans(n_clusters=11).fit(trans)\n    plot_kmeans_pca(trans, kmeans11)\n    ```", "```py\n    kmeans4 = KMeans(n_clusters=4).fit(trans)\n    plot_kmeans_pca(trans, kmeans4)\n    ```", "```py\n    pca_predict = my_pca.transform([predict_case])\n    kmeans4.predict(pca_predict)\n    ```", "```py\n    last_train = ind_order[-2]\n    last_train, ind_pop[last_train]\n    kmeans4.predict(trans)[0]\n    ```", "```py\nwget http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data\nwget http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.names\n```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import pandas as pd\n    from sklearn import tree\n    f = open('breast-cancer-wisconsin.data')\n    w = open('clean.data', 'w')\n    for line in f:\n        if line.find('?') > -1:\n            continue\n        w.write(line)\n    f.close()\n    w.close()\n    ```", "```py\n    column_names = [\n        'sample_id', 'clump_thickness', 'uniformity_cell_size',\n        'uniformity_cell shape', 'marginal_adhesion',\n        'single_epithelial_cell_size', 'bare_nuclei',\n        'bland_chromatin', 'normal_nucleoli', 'mitoses',\n        'class'\n    ]\n    samples = pd.read_csv('clean.data', header=None, names=column_names, index_col=0)\n    ```", "```py\n    training_input = samples.iloc[:,:-1]\n    target = samples.iloc[:,-1].apply(lambda x: 0 if x == 2 else 1)\n    ```", "```py\n    clf = tree.DecisionTreeClassifier(max_depth=3)\n    clf.fit(training_input, target)\n    ```", "```py\n    importances = pd.Series(\n        clf.feature_importances_ * 100,\n        index=training_input.columns).sort_values(ascending=False)\n    importances\n    ```", "```py\nuniformity_cell_size           83.972870\nuniformity_cell shape           7.592903\nbare_nuclei                     4.310045\nclump_thickness                 4.124183\nmarginal_adhesion               0.000000\nsingle_epithelial_cell_size     0.000000\nbland_chromatin                 0.000000\nnormal_nucleoli                 0.000000\nmitoses                         0.000000\n```", "```py\n    100 * clf.score(training_input, target)\n    ```", "```py\n    fig, ax = plt.subplots(1, dpi=300)\n    tree.plot_tree(clf,ax=ax, feature_names=training_input.columns, class_names=['Benign', 'Malignant'])\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import pandas as pd\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.model_selection import train_test_split\n    from sklearn.tree import export_graphviz\n    f = open('breast-cancer-wisconsin.data')\n    w = open('clean.data', 'w')\n    for line in f:\n        if line.find('?') > -1:\n            continue\n        w.write(line)\n    f.close()\n    w.close()\n    ```", "```py\n    column_names = [\n        'sample_id', 'clump_thickness', 'uniformity_cell_size',\n        'uniformity_cell shape', 'marginal_adhesion',\n        'single_epithelial_cell_size', 'bare_nuclei',\n        'bland_chromatin', 'normal_nucleoli', 'mitoses',\n        'class'\n    ]\n    samples = pd.read_csv('clean.data', header=None, names=column_names, index_col=0)\n    samples\n\n    ```", "```py\n    training_input = samples.iloc[:, :-1]\n    target = samples.iloc[:, -1]\n    ```", "```py\n    clf = RandomForestClassifier(max_depth=3, n_estimators=200)\n    clf.fit(training_input, target)\n    ```", "```py\n    importances = pd.Series(\n        clf.feature_importances_ * 100,\n        index=training_input.columns).sort_values(ascending=False)\n    importances\n    ```", "```py\nuniformity_cell_size           30.422515\nuniformity_cell shape          21.522259\nbare_nuclei                    18.410346\nsingle_epithelial_cell_size    10.959655\nbland_chromatin                 9.600714\nclump_thickness                 3.619585\nnormal_nucleoli                 3.549669\nmarginal_adhesion               1.721133\nmitoses                         0.194124\n```", "```py\n    clf.score(training_input, target)\n    ```", "```py\n    for test_size in [0.01, 0.1, 0.2, 0.5, 0.8, 0.9, 0.99]:\n        X_train, X_test, y_train, y_test = train_test_split(\n            trainning_input, target, test_size=test_size)\n        tclf = RandomForestClassifier(max_depth=3)\n        tclf.fit(X_train, y_train)\n        score = tclf.score(X_test, y_test)\n        print(f'{1 - test_size:.1%} {score:.2%}')\n    ```", "```py\n99.0% 71.43%\n90.0% 94.20%\n80.0% 97.81%\n50.0% 97.66%\n20.0% 96.89%\n10.0% 94.80%\n1.0% 92.02%\n```"]