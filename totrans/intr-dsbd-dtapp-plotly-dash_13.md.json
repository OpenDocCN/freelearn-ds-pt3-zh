["```py\n@app.callback(Output('output', 'children'),\n              Input('dropdown', 'value'),\n              Input('textarea', 'value'))\ndef display_values(dropdown_val, textarea_val):\n    return f'You chose \"{dropdown_val}\" from the dropdown, and wrote \"{textarea_val}\" in the textarea.'\n```", "```py\n    import dash_bootstrap_components as dbc\n    dbc.Button(\"Submit\", id=\"button\")\n    # OR\n    import dash_html_components as html\n    html.Button(\"Submit\", id=\"button\")\n    ```", "```py\n    Input(\"button\", \"n_clicks\")\n    ```", "```py\n    @app.callback(Output('output', 'children'),\n                  Input('button', 'n_clicks'),\n                  State('dropdown', 'value'),\n                  State('textarea', 'value'))\n    ```", "```py\n    def display_values(n_clicks, dropdown_val, textarea_val):\n        if not n_clicks:\n            raise PreventUpdate\n        return … \n    ```", "```py\nimport dash_core_components as dcc\ndcc.Loading([\n    dcc.Graph(id='clustered_map_chart')\n])\n```", "```py\n@app.callback(Output('clustered_map_chart', 'figure'),\n              Input('clustering_submit_button', 'n_clicks'),\n              State('year_cluster_slider', 'value'),\n              State('ncluster_cluster_slider', 'value'),\n              State('cluster_indicator_dropdown', 'value'))\ndef clustered_map(n_clicks, year, n_clusters, indicators):\n```", "```py\n    from jupyter_dash import JupyterDash\n    import dash_core_components as dcc\n    import dash_html_components as html\n    import dash_bootstrap_components as dbc\n    import pandas as pd\n    poverty = pd.read_csv('data/poverty.csv')\n    ```", "```py\n    app = JupyterDash(__name__,\n                      external_stylesheets=[dbc.themes.COSMO])\n    app.layout = html.Div([\n        component_1,\n        component_2\n        …\n    ])\n    ```", "```py\n    html.Div(id='feedback')\n    ```", "```py\n    dbc.Label(\"Create your own dropdown, add options one per line:\")\n    ```", "```py\n    dbc.Textarea(id='text', cols=40, rows=5)\n    ```", "```py\n    dbc.Button(\"Set options\", id='button')\n    ```", "```py\n    dcc.Dropdown(id='dropdown')\n    ```", "```py\n    dcc.Graph(id=chart')\n    ```", "```py\n    @app.callback(Output('dropdown', 'options'),\n                  Output('feedback', 'children'),\n                  Input('button', 'n_clicks'),\n                  State('text', 'value'))\n    ```", "```py\n    def set_dropdown_options(n_clicks, options):\n    ```", "```py\n    if not n_clicks:\n        raise PreventUpdate\n    text = options.split()\n    ```", "```py\n    message = dbc.Alert(f\"Success! you added the options: {', '.join(text)}\",\n                        color='success',\n                        dismissable=True)\n    ```", "```py\n    options = [{'label': t, 'value': t} for t in text]\n    ```", "```py\n    return options, message\n    ```", "```py\n    @app.callback(Output('chart', 'figure'),\n                  Input('dropdown', 'value'))\n    ```", "```py\n    def create_population_chart(country_code):\n        if not country_code:\n            raise PreventUpdate\n    ```", "```py\n    df = poverty[poverty['Country Code']==country_code]\n    ```", "```py\n    return px.line(df,\n                   x='year',\n                   y='Population, total',\n                   title=f\"Population of {country_code}\")\n    ```", "```py\n    dbc.Button(\"Add Chart\", id='button')\n    ```", "```py\n    html.Div(id='output', children=[])\n    ```", "```py\n    @app.callback(Output('output', 'children'),\n                  Input('button', 'n_clicks'),\n                  State('output', 'children'))\n    ```", "```py\n    def add_new_chart(n_clicks, children):\n        if not n_clicks:\n            raise PreventUpdate\n    ```", "```py\n    new_chart = dcc.Graph(figure=px.bar(title=f\"Chart {n_clicks}\"))\n    ```", "```py\n    children.append(new_chart)\n    ```", "```py\n    return children\n    ```", "```py\n    new_chart = dcc.Graph(figure=px.bar(title=f\"Chart {n_clicks}\"))\n    countries = poverty[poverty['is_country']]['Country Name'].drop_duplicates().sort_values()\n    new_dropdown = dcc.Dropdown(options=[{'label': c, 'value': c}\n                                for c in countries])\n    ```", "```py\n    children.append(html.Div([\n        new_chart,\n        new_dropdown\n    ]))\n    ```", "```py\ndef create_population_chart(country):\n    if not country:\n        raise PreventUpdate\n    df = poverty[poverty['Country Name']==country]\n    fig = px.line(df, \n                  x='year', y='Population, total',\n                  title=f'Population of {country}')\n    return fig\n```", "```py\ndef add_new_chart(n_clicks, children):\n    new_chart = dcc.Graph(id={'type': 'chart',\n                              'index': n_clicks},\n                          figure=px.bar())\n    new_dropdown = dcc.Dropdown(id={'type': 'dropdown',\n                                    'index': n_clicks},\n                                options=[option_1, option_2, …])\n```", "```py\n@app.callback(Output({'type': 'chart', 'index': MATCH}, 'figure'),\n              Input({'type': 'dropdown', 'index': MATCH}, 'value'))\ndef create_population_chart(country):\n    …\n```", "```py\nfrom dash.dependencies import Output, Input, State, MATCH\n@app.callback(Output('output', 'children'),\n              Input('button', 'n_clicks'),\n              State('output', 'children'))\ndef add_new_chart(n_clicks, children):\n    if not n_clicks:\n        raise PreventUpdate\n    new_chart = dcc.Graph(id={'type': 'chart',\n                              'index': n_clicks},\n                          figure=px.bar(title=f\"Chart {n_clicks}\"))\n    countries = poverty[poverty['is_country']]['Country Name'].drop_duplicates().sort_values()\n    new_dropdown = dcc.Dropdown(id={'type': 'dropdown',\n                                    'index': n_clicks},\n                                options=[{'label': c, 'value': c}\n                                         for c in countries])\n    children.append(html.Div([\n        new_chart, new_dropdown\n    ]))\n    return children\n@app.callback(Output({'type': 'chart', \n                      'index': MATCH}, 'figure'),\n              Input({'type': 'dropdown',\n                     'index': MATCH}, 'value'))\ndef create_population_chart(country):\n    if not country:\n        raise PreventUpdate\n    df = poverty[poverty['Country Name']==country]\n    fig = px.line(df,\n                  x='year',\n                  y='Population, total',\n                  title=f'Population of {country}')\n    return fig\n```"]