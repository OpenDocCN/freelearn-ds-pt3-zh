["```py\n    import pandas as pd\n    nls97 = pd.read_csv(\"data/nls97f.csv\", low_memory=False)\n    nls97.set_index(\"personid\", inplace=True) \n    ```", "```py\ngpaoverall = nls97.gpaoverall\ntype(gpaoverall) \n```", "```py\npandas.core.series.Series \n```", "```py\ngpaoverall.head() \n```", "```py\npersonid\n135335   3.09\n999406   2.17\n151672    NaN\n750699   2.53\n781297   2.43\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.index \n```", "```py\nIndex([135335, 999406, 151672, 750699, 781297, 613800,\n       403743, 474817, 530234, 351406,\n       ...\n       290800, 209909, 756325, 543646, 411195, 505861,\n       368078, 215605, 643085, 713757],\n      dtype='int64', name='personid', length=8984) \n```", "```py\ngpaoverall[:5] \n```", "```py\n135335   3.09\n999406   2.17\n151672    NaN\n750699   2.53\n781297   2.43\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.tail() \n```", "```py\npersonid\n505861    NaN\n368078    NaN\n215605   3.22\n643085   2.30\n713757    NaN\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall[-5:] \n```", "```py\npersonid\n505861    NaN\n368078    NaN\n215605   3.22\n643085   2.30\n713757    NaN\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.loc[135335]\n3.09 \n```", "```py\ngpaoverall.loc[[135335]] \n```", "```py\npersonid\n135335   3.09\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.loc[[135335,999406,151672]] \n```", "```py\npersonid\n135335   3.09\n999406   2.17\n151672    NaN\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.loc[135335:151672] \n```", "```py\npersonid\n135335   3.09\n999406   2.17\n151672    NaN\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.iloc[[0]] \n```", "```py\npersonid\n135335   3.09\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.iloc[[0,1,2,3,4]] \n```", "```py\npersonid\n135335   3.09\n999406   2.17\n151672    NaN\n750699   2.53\n781297   2.43\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.iloc[:5] \n```", "```py\npersonid\n135335   3.09\n999406   2.17\n151672    NaN\n750699   2.53\n781297   2.43\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall.iloc[-5:] \n```", "```py\npersonid\n505861    NaN\n368078    NaN\n215605   3.22\n643085   2.30\n713757    NaN\nName: gpaoverall, dtype: float64 \n```", "```py\n    import pandas as pd\n    import numpy as np\n    nls97 = pd.read_csv(\"data/nls97f.csv\",\n    low_memory=False)\n    nls97.set_index(\"personid\", inplace=True) \n    ```", "```py\n    gpaoverall = nls97.gpaoverall\n    gpaoverall.mean() \n    ```", "```py\n    2.8184077281812145 \n    ```", "```py\n    gpaoverall.describe() \n    ```", "```py\n    count\t6,004.00\n    mean\t2.82\n    std\t0.62\n    min\t0.10\n    25%\t2.43\n    50%\t2.86\n    75%\t3.26\n    max\t4.17\n    Name: gpaoverall, dtype: float64 \n    ```", "```py\n    gpaoverall.quantile(np.arange(0.1,1.1,0.1)) \n    ```", "```py\n    0.10\t2.02\n    0.20\t2.31\n    0.30\t2.52\n    0.40\t2.70\n    0.50\t2.86\n    0.60\t3.01\n    0.70\t3.17\n    0.80\t3.36\n    0.90\t3.60\n    1.00\t4.17\n    Name: gpaoverall, dtype: float64 \n    ```", "```py\n    gpaoverall.loc[gpaoverall.between(3,3.5)].head(5) \n    ```", "```py\n    personid\n    135335   3.09\n    370417   3.41\n    684388   3.00\n    984178   3.15\n    730045   3.44\n    Name: gpaoverall, dtype: float64 \n    ```", "```py\n    gpaoverall.loc[gpaoverall.between(3,3.5)].count() \n    ```", "```py\n    1679 \n    ```", "```py\n    gpaoverall.loc[(gpaoverall<2) | (gpaoverall>4)].sample(5, random_state=10) \n    ```", "```py\n    personid\n    382527   1.66\n    436086   1.86\n    556245   4.02\n    563504   1.94\n    397487   1.84\n    Name: gpaoverall, dtype: float64 \n    ```", "```py\n    gpaoverall.loc[gpaoverall>gpaoverall.quantile(0.99)].\\\n    ...   agg(['count','min','max']) \n    ```", "```py\n    count     60.00\n    min       3.98\n    max       4.17\n    Name: gpaoverall, dtype: float64 \n    ```", "```py\n(gpaoverall>4).any() # any person has GPA greater than 4 \n```", "```py\nTrue \n```", "```py\n(gpaoverall>=0).all() # all people have GPA greater than or equal 0 \n```", "```py\nFalse \n```", "```py\n(gpaoverall>=0).sum() # of people with GPA greater than or equal 0 \n```", "```py\n6004 \n```", "```py\n(gpaoverall==0).sum() # of people with GPA equal to 0 \n```", "```py\n0 \n```", "```py\ngpaoverall.isnull().sum() # of people with missing value for GPA \n```", "```py\n2980 \n```", "```py\nnls97.loc[nls97.wageincome20 > nls97.wageincome20.quantile(0.75),'gpaoverall'].mean() \n```", "```py\n3.0672837022132797 \n```", "```py\nnls97.loc[nls97.wageincome20 < nls97.wageincome20.quantile(0.25),'gpaoverall'].mean() \n```", "```py\n2.6852676399026763 \n```", "```py\n    nls97.maritalstatus.describe() \n    ```", "```py\n    count      6675\n    unique     5\n    top        Married\n    freq       3068\n    Name: maritalstatus, dtype: object \n    ```", "```py\n    nls97.maritalstatus.value_counts() \n    ```", "```py\n    Married           3068\n    Never-married     2767\n    Divorced           669\n    Separated          148\n    Widowed             23\n    Name: maritalstatus, dtype: int64 \n    ```", "```py\n(gpaoverall>4) \n```", "```py\npersonid\n135335    False\n999406    False\n151672    False\n750699    False\n781297    False\n505861    False\n368078    False\n215605    False\n643085    False\n713757    False\nName: gpaoverall, Length: 8984, dtype: bool \n```", "```py\n    import pandas as pd\n    nls97 = pd.read_csv(\"data/nls97f.csv\",\n    low_memory=False)\n    nls97.set_index(\"personid\", inplace=True) \n    ```", "```py\nnls97.gpaoverall.head() \n```", "```py\npersonid\n135335   3.09\n999406   2.17\n151672    NaN\n750699   2.53\n781297   2.82\nName: gpaoverall, dtype: float64 \n```", "```py\ngpaoverall100 = nls97['gpaoverall'] * 100\ngpaoverall100.head() \n```", "```py\npersonid\n135335   309.00\n999406   217.00\n151672      NaN\n750699   253.00\n781297   243.00\nName: gpaoverall, dtype: float64 \n```", "```py\nnls97.loc[[135335], 'gpaoverall'] = 3\nnls97.loc[[999406,151672,750699],'gpaoverall'] = 0\nnls97.gpaoverall.head() \n```", "```py\npersonid\n135335   3.00\n999406   0.00\n151672   0.00\n750699   0.00\n781297   2.43\nName: gpaoverall, dtype: float64 \n```", "```py\nnls97['childnum'] = nls97.childathome + nls97.childnotathome\nnls97.childnum.value_counts().sort_index() \n```", "```py\n0.00\t\t23\n1.00\t\t1364\n2.00\t\t1729\n3.00\t\t1020\n4.00\t\t420\n5.00\t\t149\n6.00\t\t55\n7.00\t\t21\n8.00\t\t7\n9.00\t\t1\n12.00\t\t2\nName: childnum, dtype: int64 \n```", "```py\nnls97.loc[135335:781297,'gpaoverall'] = nls97.gpaoverall.mean()\nnls97.gpaoverall.head() \n```", "```py\npersonid\n135335   2.82\n999406   2.82\n151672   2.82\n750699   2.82\n781297   2.82\nName: gpaoverall, dtype: float64 \n```", "```py\nnls97.iloc[0, 15] = 2\nnls97.iloc[1:4, 15] = 1\nnls97.gpaoverall.head() \n```", "```py\npersonid\n135335   2.00\n999406   1.00\n151672   1.00\n750699   1.00\n781297   2.43\nName: gpaoverall, dtype: float64 \n```", "```py\nnls97.gpaoverall.nlargest() \n```", "```py\npersonid\n312410     4.17\n639701     4.11\n850001     4.10\n279096     4.08\n620216     4.07\nName: gpaoverall, dtype: float64 \n```", "```py\nnls97.loc[nls97.gpaoverall>4, 'gpaoverall'] = 4\nnls97.gpaoverall.nlargest() \n```", "```py\npersonid\n588585   4.00\n864742   4.00\n566248   4.00\n990608   4.00\n919755   4.00\nName: gpaoverall, dtype: float64 \n```", "```py\ntype(nls97.loc[[135335], 'gpaoverall']) \n```", "```py\n<class 'pandas.core.series.Series'> \n```", "```py\ntype(nls97.loc[[135335], ['gpaoverall']]) \n```", "```py\n<class 'pandas.core.frame.DataFrame'> \n```", "```py\n    import pandas as pd\n    import numpy as np\n    nls97 = pd.read_csv(\"data/nls97f.csv\", low_memory=False)\n    nls97.set_index(\"personid\", inplace=True)\n    landtemps = pd.read_csv(\"data/landtemps2023avgs.csv\") \n    ```", "```py\nlandtemps.elevation.quantile(np.arange(0.2,1.1,0.2)) \n```", "```py\n0.2      47.9\n0.4     190.5\n0.6     395.0\n0.8   1,080.0\n1.0   9,999.0\nName: elevation, dtype: float64 \n```", "```py\nlandtemps['elevation_group'] = np.where(landtemps.elevation>landtemps.elevation.quantile(0.8),'High','Low')\nlandtemps.elevation_group = landtemps.elevation_group.astype('category')\nlandtemps.groupby(['elevation_group'],\n  observed=False)['elevation'].\\\n  agg(['count','min','max']) \n```", "```py\n count     min    max\nelevation_group                  \nHigh              2428   1,080    9,999\nLow               9709    -350    1,080 \n```", "```py\nlandtemps['elevation_group'] = \\\n  np.where(landtemps.elevation>\n    landtemps.elevation.quantile(0.8),'High',\n    np.where(landtemps.elevation>landtemps.elevation.\\\n      median(),'Medium','Low'))\nlandtemps.elevation_group = landtemps.elevation_group.astype('category')\nlandtemps.groupby(['elevation_group'])['elevation'].\\\n  agg(['count','min','max']) \n```", "```py\n count     min     max\nelevation_group                        \nHigh              2428    1,080   9,999\nLow               6072     -350     271\nMedium            3637      271   1,080 \n```", "```py\ntest = [(nls97.gpaoverall<2) &\n  (nls97.highestdegree=='0\\. None'),\n   nls97.highestdegree=='0\\. None',\n   nls97.gpaoverall<2]\nresult = ['1\\. Low GPA/No Dip','2\\. No Diploma',\n '3\\. Low GPA']\nnls97['hsachieve'] = np.select(test, result, '4\\. Did Okay')\nnls97[['hsachieve','gpaoverall','highestdegree']].\\\n  sample(7, random_state=6) \n```", "```py\n hsachieve    gpaoverall     highestdegree\npersonid                                              \n102951     1\\. Low GPA/No Dip           1.4           0\\. None\n583984           4\\. Did Okay           3.3    2\\. High School\n116430           4\\. Did Okay           NaN     3\\. Associates\n859586           4\\. Did Okay           2.3    2\\. High School\n288527           4\\. Did Okay           2.7      4\\. Bachelors\n161698           4\\. Did Okay           3.4      4\\. Bachelors\n943703         2\\. No Diploma           NaN           0\\. None \n```", "```py\nnls97.hsachieve.value_counts().sort_index() \n```", "```py\nhsachieve\n1\\. Low GPA/No Dip              90\n2\\. No Diploma                 787\n3\\. Low GPA                    464\n4\\. Did Okay                  7643\nName: count, dtype: int64 \n```", "```py\ndef gethsachieve(row):\n  if (row.gpaoverall<2 and row.highestdegree==\"0\\. None\"):\n    hsachieve2 = \"1\\. Low GPA/No Dip\"\n  elif (row.highestdegree==\"0\\. None\"):\n    hsachieve2 = \"2\\. No Diploma\"\n  elif (row.gpaoverall<2):\n    hsachieve2 = \"3\\. Low GPA\"\n  else:\n    hsachieve2 = '4\\. Did Okay'\n  return hsachieve2\nnls97['hsachieve2'] = nls97.apply(gethsachieve,axis=1)\nnls97.groupby(['hsachieve','hsachieve2']).size() \n```", "```py\n hsachieve          hsachieve2      \n1\\. Low GPA/No Dip  1\\. Low GPA/No Dip      90\n2\\. No Diploma      2\\. No Diploma         787\n3\\. Low GPA         3\\. Low GPA            464\n4\\. Did Okay        4\\. Did Okay          7643\ndtype: int64 \n```", "```py\ndef getsleepdeprivedreason(row):\n  sleepdeprivedreason = \"Unknown\"\n  if (row.nightlyhrssleep>=6):\n    sleepdeprivedreason = \"Not Sleep Deprived\"\n  elif (row.nightlyhrssleep>0):\n    if (row.weeksworked20+row.weeksworked21 < 80):\n      if (row.childathome>2):\n        sleepdeprivedreason = \"Child Rearing\"\n      else:\n        sleepdeprivedreason = \"Other Reasons\"\n    else:\n      if (row.wageincome20>=62000 or row.highestgradecompleted>=16):\n        sleepdeprivedreason = \"Work Pressure\"\n      else:\n        sleepdeprivedreason = \"Income Pressure\"\n  else:\n    sleepdeprivedreason = \"Unknown\"\n  return sleepdeprivedreason \n```", "```py\n    nls97['sleepdeprivedreason'] = nls97.apply(getsleepdeprivedreason, axis=1)\n    nls97.sleepdeprivedreason = nls97.sleepdeprivedreason.astype('category')\n    nls97.sleepdeprivedreason.value_counts() \n    ```", "```py\n    sleepdeprivedreason\n    Not Sleep Deprived    5595\n    Unknown               2286\n    Income Pressure        453\n    Work Pressure          324\n    Other Reasons          254\n    Child Rearing           72\n    Name: count, dtype: int64 \n    ```", "```py\nnls97.loc[[999406,750699],\n  'colenrfeb00':'colenroct04'].T \n```", "```py\npersonid                 999406                750699\ncolenrfeb00     1\\. Not enrolled       1\\. Not enrolled\ncolenroct00   3\\. 4-year college       1\\. Not enrolled\ncolenrfeb01   3\\. 4-year college       1\\. Not enrolled\ncolenroct01   2\\. 2-year college       1\\. Not enrolled\ncolenrfeb02     1\\. Not enrolled     2\\. 2-year college\ncolenroct02   3\\. 4-year college       1\\. Not enrolled\ncolenrfeb03   3\\. 4-year college       1\\. Not enrolled\ncolenroct03   3\\. 4-year college       1\\. Not enrolled\ncolenrfeb04   3\\. 4-year college       1\\. Not enrolled\ncolenroct04   3\\. 4-year college       1\\. Not enrolled \n```", "```py\nnls97['baenrollment'] = nls97.filter(like=\"colenr\").\\\n...   transform(lambda x: x.str[0:1]=='3').\\\n...   any(axis=1)\nnls97.loc[[999406,750699], ['baenrollment']].T \n```", "```py\npersonid      999406  750699\nbaenrollment    True   False \n```", "```py\nnls97.baenrollment.value_counts() \n```", "```py\nbaenrollment\nFalse    4987\nTrue     3997\nName: count, dtype: int64 \n```", "```py\ndef getsleepdeprivedreason(childathome, nightlyhrssleep, wageincome, weeksworked20, weeksworked21, highestgradecompleted):\n...   sleepdeprivedreason = \"Unknown\"\n...   if (nightlyhrssleep>=6):\n...     sleepdeprivedreason = \"Not Sleep Deprived\"\n...   elif (nightlyhrssleep>0):\n...     if (weeksworked16+weeksworked17 < 80):\n...       if (childathome>2):\n...         sleepdeprivedreason = \"Child Rearing\"\n...       else:\n...         sleepdeprivedreason = \"Other Reasons\"\n...     else:\n...       if (wageincome>=62000 or highestgradecompleted>=16):\n...         sleepdeprivedreason = \"Work Pressure\"\n...       else:\n...         sleepdeprivedreason = \"Income Pressure\"\n...   else:\n...     sleepdeprivedreason = \"Unknown\"\n...   return sleepdeprivedreason\n...\nnls97['sleepdeprivedreason'] = nls97.apply(lambda x: getsleepdeprivedreason(x.childathome, x.nightlyhrssleep, x.wageincome, x.weeksworked16, x.weeksworked17, x.highestgradecompleted), axis=1) \n```", "```py\n    import pandas as pd\n    import numpy as np\n    nls97 = pd.read_csv(\"data/nls97ca.csv\", low_memory=False)\n    nls97.set_index(\"personid\", inplace=True) \n    ```", "```py\nnls97.govprovidejobs.value_counts() \n```", "```py\n2\\. Probably           617\n3\\. Probably not       462\n1\\. Definitely         454\n4\\. Definitely not     300\nName: govprovidejobs, dtype: int64 \n```", "```py\nnls97['govprovidejobsdefprob'] = \\\n  np.where(nls97.govprovidejobs.isnull(),\n    np.nan,\n      np.where(nls97.govprovidejobs.str.\\\n      contains(\"not\"),\"No\",\"Yes\"))\npd.crosstab(nls97.govprovidejobs, nls97.govprovidejobsdefprob) \n```", "```py\ngovprovidejobsdefprob       No       Yes\ngovprovidejobs                          \n1\\. Definitely                0       454\n2\\. Probably\t                0       617\n3\\. Probably not            462         0\n4\\. Definitely not          300         0 \n```", "```py\nnls97.maritalstatus.value_counts() \n```", "```py\nMarried           3066\nNever-married     2764\nDivorced           663\nSeparated          154\nWidowed             23\nNever-married        2\nName: count, dtype: int64 \n```", "```py\nnls97.maritalstatus.str.startswith(' ').any() \n```", "```py\nFalse \n```", "```py\nnls97.maritalstatus.str.endswith(' ').any() \n```", "```py\nTrue \n```", "```py\nnls97['evermarried'] = \\\n  np.where(nls97.maritalstatus.isnull(),np.nan,\n    np.where(nls97.maritalstatus.str.\\\n      strip()==\"Never-married\",\"No\",\"Yes\"))\npd.crosstab(nls97.maritalstatus, nls97.evermarried) \n```", "```py\nevermarried        No    Yes\nmaritalstatus             \nDivorced            0    663\nMarried             0   3066\nNever-married    2764      0\nNever-married       2      0\nSeparated           0    154\nWidowed             0     23 \n```", "```py\n    nls97['receivedba'] = \\\n      np.where(nls97.highestdegree.isnull(),np.nan,\n        np.where(nls97.highestdegree.str[0:1].\\\n          isin(['4','5','6','7']),\"Yes\",\"No\"))\n    pd.crosstab(nls97.highestdegree, nls97.receivedba) \n    ```", "```py\n    receivedba             No      Yes\n    highestdegree                  \n    0\\. None               953        0\n    1\\. GED               1146        0\n    2\\. High School       3667        0\n    3\\. Associates         737        0\n    4\\. Bachelors            0     1673\n    5\\. Masters              0      603\n    6\\. PhD                  0       54\n    7\\. Professional         0      120 \n    ```", "```py\nnls97.fillna({\"highestdegree\":\"99\\. Unknown\"},\n  inplace=True)\nonlytext = lambda x: x[x.find(\".\") + 2:]\nhighestdegreenonum = nls97.highestdegree.\\\n  astype(str).transform(onlytext)\nhighestdegreenonum.value_counts(dropna=False).\\\n  sort_index() \n```", "```py\nhighestdegree\nAssociates       737\nBachelors       1673\nGED             1146\nHigh School     3667\nMasters          603\nNone             953\nPhD               54\nProfessional     120\nUnknown           31\nName: count, dtype: int64 \n```", "```py\nnls97.maritalstatus.head() \n```", "```py\npersonid\n100061           Married\n100139           Married\n100284     Never-married\n100292               NaN\n100583           Married\nName: maritalstatus, dtype: object \n```", "```py\nnls97.maritalstatus.head().str.findall(\"r\") \n```", "```py\npersonid\n100061       [r, r]\n100139       [r, r]\n100284    [r, r, r]\n100292          NaN\n100583       [r, r]\nName: maritalstatus, dtype: object \n```", "```py\npd.concat([nls97.maritalstatus.head(),\n   nls97.maritalstatus.head().str.findall(\"r\"),\n   nls97.maritalstatus.head().str.findall(\"r\").\\\n       str.len()],\n   axis=1) \n```", "```py\n maritalstatus    maritalstatus   maritalstatus\npersonid                                            \n100061             Married           [r, r]               2\n100139             Married           [r, r]               2\n100284       Never-married        [r, r, r]               3\n100292                 NaN              NaN             NaN\n100583             Married            [r, r]              2 \n```", "```py\n    pd.concat([nls97.weeklyhrstv.head(),\\\n    ...   nls97.weeklyhrstv.str.findall(\"\\d+\").head()], axis=1) \n    ```", "```py\n     weeklyhrstv             weeklyhrstv\n    personid                                      \n    100061     11 to 20 hours a week      [11, 20]\n    100139     3 to 10 hours a week        [3, 10]\n    100284     11 to 20 hours a week      [11, 20]\n    100292     NaN                             NaN\n    100583     3 to 10 hours a week        [3, 10] \n    ```", "```py\ndef getnum(numlist):\n...   highval = 0\n...   if (type(numlist) is list):\n...     lastval = int(numlist[-1])\n...     if (numlist[0]=='40'):\n...       highval = 45\n...     elif (lastval==2):\n...       highval = 1\n...     else:\n...       highval = lastval - 5\n...   else:\n...     highval = np.nan\n...   return highval\n...\nnls97['weeklyhrstvnum'] = nls97.weeklyhrstv.str.\\\n...   findall(\"\\d+\").apply(getnum)\nnls97[['weeklyhrstvnum','weeklyhrstv']].head(7) \n```", "```py\n weeklyhrstvnum                 weeklyhrstv\npersonid                                           \n100061                15       11 to 20 hours a week\n100139                 5        3 to 10 hours a week\n100284                15       11 to 20 hours a week\n100292               NaN                         NaN\n100583                 5        3 to 10 hours a week\n100833                 5        3 to 10 hours a week\n100931                 1  Less than 2 hours per week \n```", "```py\npd.crosstab(nls97.weeklyhrstv, nls97.weeklyhrstvnum) \n```", "```py\nweeklyhrstvnum                1       5      15     25     35      45\nweeklyhrstv                                                 \n11 to 20 hours a week         0       0    1145      0      0       0\n21 to 30 hours a week         0       0       0    299      0       0\n3 to 10 hours a week          0    3625       0      0      0       0\n31 to 40 hours a week         0       0       0      0    116       0\nLess than 2 hrs.           1350       0       0      0      0       0\nMore than 40 hrs.             0       0       0      0      0     176 \n```", "```py\ncomphrsold = ['Less than 1 hour a week',\n  '1 to 3 hours a week','4 to 6 hours a week',\n  '7 to 9 hours a week','10 hours or more a week']\ncomphrsnew = ['A. Less than 1 hour a week',\n  'B. 1 to 3 hours a week','C. 4 to 6 hours a week',\n  'D. 7 to 9 hours a week','E. 10 hours or more a week']\nnls97.weeklyhrscomputer.value_counts().sort_index() \n```", "```py\n1 to 3 hours a week         733\n10 hours or more a week    3669\n4 to 6 hours a week         726\n7 to 9 hours a week         368\nLess than 1 hour a week     296\nName: weeklyhrscomputer, dtype: int64 \n```", "```py\nnls97.weeklyhrscomputer.replace(comphrsold, comphrsnew, inplace=True)\nnls97.weeklyhrscomputer.value_counts().sort_index() \n```", "```py\nA. Less than 1 hour a week     296\nB. 1 to 3 hours a week         733\nC. 4 to 6 hours a week         726\nD. 7 to 9 hours a week         368\nE. 10 hours or more a week    3669\nName: weeklyhrscomputer, dtype: int64 \n```", "```py\n    import pandas as pd\n    from dateutil.relativedelta import relativedelta\n    covidcases = pd.read_csv(\"data/covidcases.csv\")\n    nls97 = pd.read_csv(\"data/nls97c.csv\")\n    nls97.set_index(\"personid\", inplace=True) \n    ```", "```py\nnls97[['birthmonth','birthyear']].isnull().sum() \n```", "```py\nbirthmonth    1\nbirthyear     0\ndtype: int64 \n```", "```py\nnls97.birthmonth.value_counts(dropna=False).\\\n  sort_index() \n```", "```py\nbirthmonth\n1      815\n2      693\n3      760\n4      659\n5      689\n6      720\n7      762\n8      782\n9      839\n10     765\n11     763\n12     736\nNaN      1\nName: count, dtype: int64 \n```", "```py\nnls97.birthyear.value_counts().sort_index() \n```", "```py\n1980     1691\n1981     1874\n1982     1841\n1983     1807\n1984     1771\nName: birthyear, dtype: int64 \n```", "```py\nnls97.fillna({\"birthmonth\":\\\n int(nls97.birthmonth.mean())}, inplace=True)\nnls97.birthmonth.value_counts(dropna=False).\\\n  sort_index() \n```", "```py\nbirthmonth\n1     815\n2     693\n3     760\n4     659\n5     689\n6     721\n7     762\n8     782\n9     839\n10    765\n11    763\n12    736\nName: count, dtype: int64 \n```", "```py\nnls97['birthdate'] = pd.to_datetime(dict(year=nls97.birthyear, month=nls97.birthmonth, day=15))\nnls97[['birthmonth','birthyear','birthdate']].head() \n```", "```py\n birthmonth     birthyear             birthdate\npersonid                                                 \n100061     5              1980                 1980-05-15\n100139     9              1983                 1983-09-15\n100284     11             1984                 1984-11-15\n100292     4              1982                 1982-04-15\n100583     6              1980                 1980-06-15 \n```", "```py\nnls97[['birthmonth','birthyear','birthdate']].isnull().sum() \n```", "```py\nbirthmonth    0\nbirthyear     0\nbirthdate     0\ndtype: int64 \n```", "```py\ndef calcage(startdate, enddate):\n...   age = enddate.year - startdate.year\n...   if (enddate.month<startdate.month or (enddate.month==startdate.month and enddate.day<startdate.day)):\n...     age = age -1\n...   return age\n...\nrundate = pd.to_datetime('2024-03-01')\nnls97[\"age\"] = nls97.apply(lambda x: calcage(x.birthdate, rundate), axis=1)\nnls97.loc[100061:100583, ['age','birthdate']] \n```", "```py\n age     birthdate\npersonid                   \n100061     43    1980-05-15\n100139     40    1983-09-15\n100284     39    1984-11-15\n100292     41    1982-04-15\n100583     43    1980-06-15 \n```", "```py\n    nls97[\"age2\"] = nls97.\\\n      apply(lambda x: relativedelta(rundate,\n        x.birthdate).years,\n        axis=1) \n    ```", "```py\n    (nls97['age']!=nls97['age2']).sum() \n    ```", "```py\n    0 \n    ```", "```py\n    nls97.groupby(['age','age2']).size() \n    ```", "```py\n    age  age2\n    39   39      1463\n    40   40      1795\n    41   41      1868\n    42   42      1874\n    43   43      1690\n    44   44       294\n    dtype: int64 \n    ```", "```py\ncovidcases.iloc[:, 0:6].dtypes \n```", "```py\niso_code        object\ncontinent       object\nlocation        object\ncasedate        object\ntotal_cases\t   float64\nnew_cases       float64\ndtype: object \n```", "```py\ncovidcases.iloc[:, 0:6].sample(2, random_state=1).T \n```", "```py\n 628         26980\niso_code            AND           PRT\ncasedate     2020-03-15    2022-12-04\ncontinent        Europe        Europe\nlocation        Andorra      Portugal\ntotal_cases           2     5,541,211\nnew_cases             1         3,963 \n```", "```py\ncovidcases['casedate'] = pd.to_datetime(covidcases.casedate, format='%Y-%m-%d')\ncovidcases.iloc[:, 0:6].dtypes \n```", "```py\niso_code             object\ncontinent            object\nlocation             object\ncasedate     datetime64[ns]\ntotal_cases         float64\nnew_cases           float64\ndtype: object \n```", "```py\n    covidcases.casedate.nunique() \n    ```", "```py\n    214 \n    ```", "```py\n    covidcases.casedate.describe() \n    ```", "```py\n    count                            36501\n    mean     2021-12-16 05:41:07.954302720\n    min                2020-01-05 00:00:00\n    25%                2021-01-31 00:00:00\n    50%                2021-12-12 00:00:00\n    75%                2022-10-09 00:00:00\n    max                2024-02-04 00:00:00\n    Name: casedate, dtype: object \n    ```", "```py\nfirstcase = covidcases.loc[covidcases.new_cases>0,['location','casedate']].\\\n...   sort_values(['location','casedate']).\\\n...   drop_duplicates(['location'], keep='first').\\\n...   rename(columns={'casedate':'firstcasedate'})\ncovidcases = pd.merge(covidcases, firstcase, left_on=['location'], right_on=['location'], how=\"left\")\ncovidcases['dayssincefirstcase'] = covidcases.casedate - covidcases.firstcasedate\ncovidcases.dayssincefirstcase.describe() \n```", "```py\ncount                          36501\nmean     637 days 01:36:55.862579112\nstd      378 days 15:34:06.667833980\nmin                  0 days 00:00:00\n25%                315 days 00:00:00\n50%                623 days 00:00:00\n75%                931 days 00:00:00\nmax               1491 days 00:00:00\nName: dayssincefirstcase, dtype: object \n```", "```py\n    import pandas as pd\n    from pandasai.llm.openai import OpenAI\n    from pandasai import SmartDataframe\n    llm = OpenAI(api_token=\"Your API Token\") \n    ```", "```py\n    covidcases = pd.read_csv(\"data/covidcases.csv\")\n    nls97 = pd.read_csv(\"data/nls97f.csv\")\n    nls97.set_index(\"personid\", inplace=True)\n    nls97sdf = SmartDataframe(nls97, config={\"llm\": llm}) \n    ```", "```py\n    nls97sdf.chat(\"Show average of gpaoverall\") \n    ```", "```py\n    2.8184077281812128 \n    ```", "```py\n    nls97sdf.chat(\"Show average for each weeks worked column\") \n    ```", "```py\n     Average Weeks Worked\n                      0\n    weeksworked00 26.42\n    weeksworked01 29.78\n    weeksworked02 31.83\n    weeksworked03 33.51\n    weeksworked04 35.10\n    weeksworked05 37.34\n    weeksworked06 38.44\n    weeksworked07 39.29\n    weeksworked08 39.33\n    weeksworked09 37.51\n    weeksworked10 37.12\n    weeksworked11 38.06\n    weeksworked12 38.15\n    weeksworked13 38.79\n    weeksworked14 38.73\n    weeksworked15 39.67\n    weeksworked16 40.19\n    weeksworked17 40.37\n    weeksworked18 40.01\n    weeksworked19 41.22\n    weeksworked20 38.35\n    weeksworked21 36.17\n    weeksworked22 11.43 \n    ```", "```py\n    nls97sdf.chat(\"Show satmath average by gender\") \n    ```", "```py\n     Female   Male\n    0  486.65 516.88 \n    ```", "```py\n    nls97sdf = nls97sdf.chat(\"Set childnum to child at home plus child not at home\")\n    nls97sdf[['childnum','childathome','childnotathome']].\\\n      sample(5, random_state=1) \n    ```", "```py\n     childnum  childathome  childnotathome\n    personid                                      \n    211230        2.00         2.00            0.00\n    990746        3.00         3.00            0.00\n    308169        3.00         1.00            2.00\n    798458         NaN          NaN             NaN\n    312009         NaN          NaN             NaN \n    ```", "```py\n    nls97sdf = nls97sdf.chat(\"evermarried is 'No' when maritalstatus is 'Never-married', else 'Yes'\")\n    nls97sdf.groupby(['evermarried','maritalstatus']).size() \n    ```", "```py\n    evermarried  maritalstatus\n    No           Never-married    2767\n    Yes          Divorced          669\n                 Married          3068\n                 Separated         148\n                 Widowed            23\n    dtype: int64 \n    ```", "```py\n    nls97sdf = nls97sdf.chat(\"if maritalstatus is 'Never-married' set evermarried2 to 'No', otherwise 'Yes'\")\n    nls97sdf.groupby(['evermarried2','maritalstatus']).size() \n    ```", "```py\n    evermarried2  maritalstatus\n    No            Never-married    2767\n    Yes           Divorced          669\n                  Married          3068\n                  Separated         148\n                  Widowed            23\n    dtype: int64 \n    ```", "```py\n    nls97sdf = nls97sdf.chat(\"set weeksworkedavg to the average for weeksworked columns\") \n    ```", "```py\n    nls97sdf.gpaenglish.describe() \n    ```", "```py\n    count   5,798\n    mean      273\n    std        74\n    min         0\n    25%       227\n    50%       284\n    75%       323\n    max       418\n    Name: gpaenglish, dtype: float64 \n    ```", "```py\n    nls97sdf = nls97sdf.chat(\"set missing gpaenglish to the average\")\n    nls97sdf.gpaenglish.describe() \n    ```", "```py\n    count   8,984\n    mean      273\n    std        59\n    min         0\n    25%       264\n    50%       273\n    75%       298\n    max       418\n    Name: gpaenglish, dtype: float64 \n    ```", "```py\n    firstcase = covidcases.\\\n      sort_values(['location','casedate']).\\\n      drop_duplicates(['location'], keep='first')\n    firstcase.set_index('location', inplace=True)\n    firstcase.shape \n    ```", "```py\n    (231, 67) \n    ```", "```py\n    firstcase[['iso_code','continent','casedate',\n      'total_cases','new_cases']].head(2).T \n    ```", "```py\n    location       Afghanistan        Albania\n    iso_code               AFG            ALB\n    continent             Asia         Europe\n    casedate        2020-03-01     2020-03-15\n    total_cases           1.00          33.00\n    new_cases             1.00          33.00 \n    ```", "```py\n    covidcasessdf = SmartDataframe(covidcases, config={\"llm\": llm})\n    firstcasesdf = covidcasessdf.chat(\"Show first casedate and location and other values for each country.\")\n    firstcasesdf.shape \n    ```", "```py\n    (231, 7) \n    ```", "```py\n    firstcasesdf[['location','continent','casedate',\n      'total_cases','new_cases']].head(2).T \n    ```", "```py\n    iso_code                  ABW             AFG\n    location                Aruba     Afghanistan\n    continent       North America            Asia\n    casedate           2020-03-22      2020-03-01\n    total_cases              5.00            1.00\n    new_cases                5.00            1.00 \n    ```"]