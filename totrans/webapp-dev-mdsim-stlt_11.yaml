- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying and Managing Complex Libraries on Streamlit Share
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s continue our exploration of deployment on Streamlit Share, a service provided
    by the Streamlit framework that allows users to deploy their web applications,
    implemented with Streamlit, to the cloud with just a few clicks. This time, we
    have to pack up the *Covid-19 Detection Tool* app and try to deploy it. Many heavy
    libraries will be involved here, so this time, the task is a little bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: When we deal with heavy files, the deployment task becomes more difficult because
    GitHub has some limitations regarding file size; in fact, it is not possible to
    directly upload files with a size over 25 MB. In the case of our *Covid-19 Detection
    Tool* app, unfortunately, the file of the AI model is over 25 MB. Files to be
    uploaded on GitHub can’t be any bigger than this, at least at the time of writing
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: There are some techniques we can use to bypass this limit; I’ll show you a rather
    smart way to do this in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Consolidating cloud deployment skills
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding bad behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing difficult libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the app on Streamlit Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use the following libraries, packages, and tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit Cloud
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/8e8d3b20f3de84b5ce02bc2352f86ad1c8018a4a/Chapter11](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/8e8d3b20f3de84b5ce02bc2352f86ad1c8018a4a/Chapter11)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consolidating cloud deployment skills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Considering that we are at [*Chapter 11*](B21147_11.xhtml#_idTextAnchor116)
    of this book, we should be aware of the fact that implementing a web application
    is only one part of the process and that the process ends only when the web app
    is deployed and shared.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already understand the importance of web application deployment as we covered
    this when we created the NLP web application in the first part of this book, as
    well as because it’s one of the first things we see when we land on Streamlit’s
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1: Streamlit’s slogan about app sharing](img/B21147_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Streamlit’s slogan about app sharing'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on the **Cloud** voice of the main menu, we are redirected to
    a page containing a quick video about the deployment and an important declaration:
    **Deploy, manage, and share your apps with the world, directly from Streamlit
    — all** **for free**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2: Streamlit Cloud](img/B21147_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Streamlit Cloud'
  prefs: []
  type: TYPE_NORMAL
- en: The most important message here is *share your apps with the world*. A web application
    is something that lives on the web – that’s its real essence.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we deployed the NLP application, we adopted quite a smooth process:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a requirements file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We hosted the web application on GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We signed into Streamlit Cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We shared the web application through a Streamlit Cloud/GitHub connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The procedure will be the same for our *Covid-19 Detection Tool* app, with
    one important difference: we must manage an external and large file – that is,
    the CNN pretrained model needed to detect Covid-19 cases. Let’s learn how to deal
    with this kind of large artifact.'
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding bad behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bad behavior is any kind of missing, wrong, or incomplete action that produces
    a runtime problem during the deployment, where the result is the deployment task
    failing. For this reason, in this section, we will learn about the steps that
    are required to complete any deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a list of all the packages that were installed and used to develop
    the Python code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we need to run our web application is the list of all the packages
    that were installed and used to develop the Python code. As we know, there are
    several ways to get this list, but the easiest one is to use `pipreqs`. Let’s
    take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let’s install `pipreqs` by typing the following command in the
    Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: covid is the name of the directory containing all the code for our web application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let’s check that the required file contains everything by simply writing
    the following instruction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Figure 11**.3* shows the contents of the `requirements.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3: The requirements.txt file](img/B21147_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: The requirements.txt file'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have all the code and the requirements file, we are ready to create
    a dedicated repository on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GitHub repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s log into GitHub with the same account we will be using later on to connect
    to Streamlit Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once on GitHub, we can create a new repository by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **New** tab on the **Repositories** page. We should see the following
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4: Creating a new repository on GitHub](img/B21147_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Creating a new repository on GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: Insert a repository name, such as `covid19-book`, and add a description (this
    is not necessary).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the repository public and check **Add a** **README file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click **Create repository**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a little while, we’ll get the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5: The new repository is empty](img/B21147_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: The new repository is empty'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the new repository is empty. We must add the Python file and
    the `requirements.txt` file to it. This operation is very easy – we just need
    to click **Add file** and upload the files of our interest.
  prefs: []
  type: TYPE_NORMAL
- en: In principle, we are ready to go to Streamlit Cloud to deploy the application
    and share it with the world.
  prefs: []
  type: TYPE_NORMAL
- en: However, every time we are at this stage of the deployment process, we must
    pay great attention to our actions. If we try to deploy the files contained in
    the newly created repository to Streamlit Cloud, we’ll get a runtime error and
    the application won’t run. Let’s learn how to fix that.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding runtime errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To avoid runtime errors during deployment, we have to think about what our web
    application needs to run properly.
  prefs: []
  type: TYPE_NORMAL
- en: The first item we need is the Covid-19 image that we display in the left sidebar
    of our *Covid-19 Detection Tool* app. This operation is very easy since we just
    have to add the `covid19.jpeg` file to our repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second point of attention is that the Streamlit version available at the
    time of writing this book has some problems with the `opencv` library: there are
    issues when it attempts to import this library. To avoid this issue, we must create
    a new file in the repository by clicking `packages.txt`. This new file must contain
    the following instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this way, all the right dependencies will be installed by Streamlit Cloud
    at deployment time.
  prefs: []
  type: TYPE_NORMAL
- en: The third item we must pay extra attention to when using the *Covid-19 Detection
    Tool* app is as follows. When we upload the X-ray image and click on **Diagnosis**
    to determine whether or not it represents a case of Covid-19, the pretrained CNN
    model is run. If the web application is unable to locate the model, we may encounter
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'The point of attention here is that uploading the AI model file is not enough
    because if we double-check the code we wrote on *line 81*, we’ll see that this
    model must be put inside a directory named `models`, living at the same level
    as the `app.py` file. In short, we must recreate the same files and directory
    order indicated in our Python code in our GitHub repository; otherwise, the files
    we need – specifically the CNN model – will never be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6: Line 81 indicates where we need to put the CNN model file](img/B21147_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Line 81 indicates where we need to put the CNN model file'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a rather big issue arises. When we try to upload `Covid19_CNN_Classifier.h5`,
    we discover that this operation is not possible since the file is larger than
    25 MB and GitHub on the web only accepts files that are smaller than this size.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll learn how to manage this problem.
  prefs: []
  type: TYPE_NORMAL
- en: Managing difficult libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To fix the problem of file size, we must install the GitHub Desktop application,
    which at the time of writing is only available for Windows or macOS. So, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the GitHub Desktop application from [desktop.github.com](http://desktop.github.com)
    and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, log into your GitHub account and authorize. You should see the following
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7: GitHub Desktop application](img/B21147_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: GitHub Desktop application'
  prefs: []
  type: TYPE_NORMAL
- en: Now, select the `covid19-book` repository (if you used another name, you must
    look for it) and click **Clone...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A clone of the repository will be created on your machine, as shown in *Figure
    11**.8*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.8: Cloning the GitHub repository locally](img/B21147_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Cloning the GitHub repository locally'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the cloning operation is finished, open the local folder of the repository
    on your Mac Finder or via Windows File Explorer, as shown in *Figure 11**.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9: Local folder of the repository](img/B21147_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: Local folder of the repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the `models` directory and copy the `Covid19_CNN_Classifier.h5`
    file inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10: Big file copied into the proper directory](img/B21147_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: Big file copied into the proper directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move back to the GitHub Desktop application. Here, you will see the big file
    we just added. Write something in the `adding cnn model`, and click **Commit**
    **to main**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11: Big file copied into the proper directory](img/B21147_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: Big file copied into the proper directory'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select **Push origin**, as suggested in *Figure 11**.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12: Push origin](img/B21147_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: Push origin'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can check in your browser whether the big file is included in your
    GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13: The GitHub repository containing all the necessary files](img/B21147_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.13: The GitHub repository containing all the necessary files'
  prefs: []
  type: TYPE_NORMAL
- en: What we have learned here is very important since it is common to deal with
    difficult libraries or heavy files is quite frequent, and knowing how to manage
    this issue properly makes a big difference. Managing this kind of issue makes
    it possible to deploy any kind of web application we could develop.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the app on Streamlit Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The hardest part is over. From here on, we can follow the same procedure we
    adopted for the NLP web application. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign into Streamlit Cloud by selecting **Continue with Github**, authorizing
    and using the same account you used for GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’re in, select **New app**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should only have the application we created in [*Chapter 7*](B21147_07.xhtml#_idTextAnchor080)
    among the deployed applications. The window should look like what’s shown in *Figure
    11**.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.14: Creating a new app on Streamlit Cloud](img/B21147_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.14: Creating a new app on Streamlit Cloud'
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting `app.py`), and specify a meaningful name to the app URL, as
    shown in *Figure 11**.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15: Deploying the web app on Streamlit Cloud](img/B21147_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.15: Deploying the web app on Streamlit Cloud'
  prefs: []
  type: TYPE_NORMAL
- en: 'When everything is ready, click **Deploy!** and wait since **Your app is in**
    **the oven**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16: Deploying animation](img/B21147_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.16: Deploying animation'
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this process, your *Covid-19 Detection Tool* app will be deployed
    and ready to be shared with everyone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how our new web application looks once the deployment process is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.17: The Covid-19 Detection Tool app deployed on Streamlit Cloud](img/B21147_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.17: The Covid-19 Detection Tool app deployed on Streamlit Cloud'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 11**.17*, the application now lives on the web, and its
    URL is self-explanatory since it contains `covid19-book-chapter11` in it.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, it’s very important to highlight how crucial proper deployment capabilities
    are in the web application development process. We can only consider this process
    completed once the web application lives on the cloud and anybody can use it.
    The contents of this chapter have enabled us to deploy any kind of web app, even
    those including difficult libraries and big files.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the versions of the packages you installed, it might be necessary
    to install the `opencv-python` library as well. If you get this suggestion during
    deployment, just install the library as usual (using `pipenv install...`), add
    it to the `requirements.txt` file, and let the standard deployment process from
    GitHub be completed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Great job! Deploying the *Covid-19 Detection Tool* app was complex. As we saw,
    there are many potential problems to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we needed to recreate the same structure of files and directories
    that were used in the Python code, and not forget to also include the picture
    files in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The second problem was allowing Streamlit Cloud to manage all the dependencies
    related to `opencv`. To do this, it was necessary to add a `packages.txt` file
    to the repository containing the instructions to get these dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we found out that GitHub – at least its online version – only manages
    files that are smaller than 25 MB, but sometimes, such as with the CNN AI model,
    we need to upload bigger files. This operation requires us to install the GitHub
    Desktop application and the local (on our computers) cloning of the repository.
    Once we have the repository on our computers, we can add this big file and push
    it back toward the origin (the Git *server*). In this way, even our AI model file,
    which is over 50 MB, will be hosted in the GitHub repository of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Once we’ve tackled all these issues, we are ready to deploy the web application
    to Streamlit Cloud and share it with everybody.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from the next chapter, we are going to cover some very advanced topics,
    such as smart file uploading, adding login and signup functionality to our web
    apps, managing databases, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Advanced Techniques for Secure and Customizable Web Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part 4 of the book is dedicated to mastering advanced techniques that are essential
    for creating secure and highly customizable web applications. It starts with an
    exploration of smart file uploading methods, tailored for professional-grade web
    applications, ensuring efficient and user-friendly file management. The section
    then addresses the critical aspect of security, providing in-depth guidance on
    creating secure login and signup processes, a cornerstone for any web application
    dealing with user data. Next, it dives into the customization of pages, personalization
    of themes, and implementation of multi-page layouts, allowing for a more tailored
    and engaging user experience. The part also covers enhancing web applications
    with forms, session state management, and the use of customizable subdomains,
    adding a layer of sophistication and functionality to web apps. The book concludes
    with key takeaways and a thoughtful conclusion, encapsulating what you have learned
    and preparing you for the future of web app development. This final part is essential
    for those looking to elevate their web apps from functional to exceptional, focusing
    on customization, security, and advanced user engagement.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21147_12.xhtml#_idTextAnchor128), *Smart File Uploading – Advanced
    Techniques for Professional Web Applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21147_13.xhtml#_idTextAnchor138), *Creating a Secure Login
    and Signup Process for Web Applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B21147_14.xhtml#_idTextAnchor150), *Customizing Pages, Personalizing
    Themes, and Implementing Multi-Pages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B21147_15.xhtml#_idTextAnchor160), *Enhancing Web Apps with
    Forms, Session State, and Customizable Subdomains*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B21147_16.xhtml#_idTextAnchor169), *Takeaways and Conclusion*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
