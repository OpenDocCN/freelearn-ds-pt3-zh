["```py\n    import numpy as np #numerical computation\n    import pandas as pd #data wrangling\n    import matplotlib.pyplot as plt #plotting package\n    #Next line helps with rendering plots\n    %matplotlib inline\n    import matplotlib as mpl #add'l plotting functionality\n    mpl.rcParams['figure.dpi'] = 400 #high res figures\n    import graphviz #to visualize decision trees\n    ```", "```py\n    df = pd.read_csv('../Data/Chapter_1_cleaned_data.csv')\n    ```", "```py\n    features_response = df.columns.tolist()\n    ```", "```py\n    items_to_remove = ['ID', 'SEX', 'PAY_2', 'PAY_3',\\\n                       'PAY_4', 'PAY_5', 'PAY_6',\\\n                       'EDUCATION_CAT', 'graduate school',\\\n                       'high school', 'none',\\\n                       'others', 'university']\n    ```", "```py\n    features_response = [item for item in features_response if item not in items_to_remove]\n    features_response\n    ```", "```py\n    ['LIMIT_BAL',\n     'EDUCATION',\n     'MARRIAGE',\n     'AGE',\n     'PAY_1',\n     'BILL_AMT1',\n     'BILL_AMT2',\n     'BILL_AMT3',\n     'BILL_AMT4',\n     'BILL_AMT5',\n     'BILL_AMT6',\n     'PAY_AMT1',\n     'PAY_AMT2',\n     'PAY_AMT3',\n     'PAY_AMT4',\n     'PAY_AMT5',\n     'PAY_AMT6',\n     'default payment next month']\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    from sklearn import tree\n    ```", "```py\n    X_train, X_test, y_train, y_test = \\\n    train_test_split(df[features_response[:-1]].values,\n                     df['default payment next month'].values,\n                     test_size=0.2, random_state=24)\n    ```", "```py\n    dt = tree.DecisionTreeClassifier(max_depth=2)\n    ```", "```py\n    dt.fit(X_train, y_train)\n    ```", "```py\n    DecisionTreeClassifier(max_depth=2)\n    ```", "```py\n    dot_data = tree.export_graphviz(dt,\n                                    out_file=None,\n                                    filled=True,\n                                    rounded=True,\n                                    feature_names=\\\n                                    features_response[:-1],\n                                    proportion=True,\n                                    class_names=[\n                                    'Not defaulted', 'Defaulted'])\n    ```", "```py\n    graph = graphviz.Source(dot_data) \n    graph\n    ```", "```py\n    features_response[:-1].index('PAY_1')\n    ```", "```py\n    4\n    ```", "```py\n    X_train.shape\n    ```", "```py\n    (21331, 17)\n    ```", "```py\n    (X_train[:,4] <= 1.5).sum()/X_train.shape[0]\n    ```", "```py\n    0.8946134733486475\n    ```", "```py\n    y_train.mean()\n    ```", "```py\n    0.223102526838873\n    ```", "```py\npm0 = np.linspace(0.01,0.99,99)\npm1 = 1 - pm0\n```", "```py\nmisclassification_rate = np.minimum(pm0, pm1)\n```", "```py\nmpl.rcParams['figure.dpi'] = 400\nplt.plot(pm0, misclassification_rate,\n         label='Misclassification rate')\nplt.xlabel('$p_{m0}$')\nplt.legend()\n```", "```py\ngini = (pm0*(1-pm0)) + (pm1*(1-pm1))\n```", "```py\ncross_ent = -1*((pm0*np.log(pm0)) + (pm1*np.log(pm1)))\n```", "```py\nmpl.rcParams['figure.dpi'] = 400\nplt.plot(pm0, misclassification_rate,\\\n         label='Misclassification rate')\nplt.plot(pm0, gini, label='Gini impurity')\nplt.plot(pm0, cross_ent, label='Cross entropy')\nplt.xlabel('$p_{m0}$')\nplt.legend()\n```", "```py\n    from sklearn.model_selection import GridSearchCV\n    ```", "```py\n    X_train.shape\n    ```", "```py\n    (21331, 17)\n    ```", "```py\n    params = {'max_depth':[1, 2, 4, 6, 8, 10, 12]}\n    ```", "```py\n    dt = tree.DecisionTreeClassifier()\n    ```", "```py\n    cv = GridSearchCV(dt, param_grid=params, scoring='roc_auc',\n                      n_jobs=None, refit=True, cv=4, verbose=1,\n                      pre_dispatch=None, error_score=np.nan,\n                      return_train_score=True)\n    ```", "```py\n    cv.fit(X_train, y_train)\n    ```", "```py\n    cv_results_df = pd.DataFrame(cv.cv_results_)\n    cv_results_df\n    ```", "```py\n    cv_results_df.columns\n    ```", "```py\n    Index(['mean_fit_time', 'std_fit_time',\\\n           'mean_score_time', 'std_score_time',\\\n           'param_max_depth', 'params',\\\n           'split0_test_score', 'split1_test_score',\\\n           'split2_test_score', 'split3_test_score',\\\n           'mean_test_score', 'std_test_score',\\\n           'rank_test_score', 'split0_train_score',\\\n           'split1_train_score', 'split2_train_score',\\\n           'split3_train_score', 'mean_train_score',\\\n           'std_train_score'],\n          dtype='object')\n    ```", "```py\n    ax = plt.axes()\n    ax.errorbar(cv_results_df['param_max_depth'],\n                cv_results_df['mean_train_score'],\n                yerr=cv_results_df['std_train_score']/np.sqrt(4),\n                label='Mean $\\pm$ 1 SE training scores')\n    ax.errorbar(cv_results_df['param_max_depth'],\n                cv_results_df['mean_test_score'],\n                yerr=cv_results_df['std_test_score']/np.sqrt(4),\n                label='Mean $\\pm$ 1 SE testing scores')\n    ax.legend()\n    plt.xlabel('max_depth')\n    plt.ylabel('ROC AUC')\n    ```", "```py\n    from sklearn.ensemble import RandomForestClassifier\n    ```", "```py\n    rf = RandomForestClassifier(n_estimators=10,\\\n                                criterion='gini',\\\n                                max_depth=3,\\\n                                min_samples_split=2,\\\n                                min_samples_leaf=1,\\\n                                min_weight_fraction_leaf=0.0,\\\n                                max_features='auto',\\\n                                max_leaf_nodes=None,\\\n                                min_impurity_decrease=0.0,\\\n                                min_impurity_split=None,\\\n                                bootstrap=True,\\\n                                oob_score=False,\\\n                                n_jobs=None,\n                                random_state=4,\\\n                                verbose=0,\\\n                                warm_start=False,\\\n                                class_weight=None)\n    ```", "```py\n    rf_params_ex = {'n_estimators':list(range(10,110,10))}\n    ```", "```py\n    cv_rf_ex = GridSearchCV(rf, param_grid=rf_params_ex,\n                            scoring='roc_auc', n_jobs=None,\n                            refit=True, cv=4, verbose=1,\n                            pre_dispatch=None, error_score=np.nan,\n                            return_train_score=True)\n    ```", "```py\n    cv_rf_ex.fit(X_train, y_train)\n    ```", "```py\n    cv_rf_ex_results_df = pd.DataFrame(cv_rf_ex.cv_results_)\n    ```", "```py\n    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(6, 3))\n    axs[0].plot(cv_rf_ex_results_df['param_n_estimators'],\n                cv_rf_ex_results_df['mean_fit_time'],\n                '-o')\n    axs[0].set_xlabel('Number of trees')\n    axs[0].set_ylabel('Mean fit time (seconds)')\n    axs[1].errorbar(cv_rf_ex_results_df['param_n_estimators'],\n                    cv_rf_ex_results_df['mean_test_score'],\n                    yerr=cv_rf_ex_results_df['std_test_score']/np.sqrt(4))\n    axs[1].set_xlabel('Number of trees')\n    axs[1].set_ylabel('Mean testing ROC AUC $\\pm$ 1 SE ')\n    plt.tight_layout()\n    ```", "```py\n    cv_rf_ex.best_params_\n    ```", "```py\n    {'n_estimators': 50}\n    ```", "```py\n    feat_imp_df = pd.DataFrame({\n        'Importance':cv_rf_ex.best_estimator_.feature_importances_\n        },\n        index=features_response[:-1]) \n    feat_imp_df.sort_values('Importance', ascending=True).plot.barh()\n    ```", "```py\nxx_example, yy_example = np.meshgrid(range(5), range(5))\nprint(xx_example)\nprint(yy_example)\n```", "```py\n[[0 1 2 3 4]\n [0 1 2 3 4]\n [0 1 2 3 4]\n [0 1 2 3 4]\n [0 1 2 3 4]]\n[[0 0 0 0 0]\n [1 1 1 1 1]\n [2 2 2 2 2]\n [3 3 3 3 3]\n [4 4 4 4 4]]\n```", "```py\nz_example = np.arange(1,17).reshape(4,4)\nz_example\n```", "```py\narray([[ 1,  2,  3,  4],\n       [ 5,  6,  7,  8],\n       [ 9, 10, 11, 12],\n       [13, 14, 15, 16]])\n```", "```py\nax = plt.axes()\npcolor_ex = ax.pcolormesh(xx_example, yy_example, z_example,\n                          cmap=plt.cm.jet)\nplt.colorbar(pcolor_ex, label='Color scale')\nax.set_xlabel('X coordinate')\nax.set_ylabel('Y coordinate') \n```"]