["```py\nfrom pyspark.ml.regression import LinearRegression\nretail_features = spark.read.table(\"retail_features\")\ntrain_df = retail_features.selectExpr(\"cust_age as label\", \"selected_features as features\")\nlr = LinearRegression(maxIter=10, regParam=0.3, \n                      elasticNetParam=0.8)\nlr_model = lr.fit(train_df)\nprint(\"Coefficients: %s\" % str(lr_model.coefficients))\nprint(\"Intercept: %s\" % str(lr_model.intercept))\nsummary = lr_model.summary\nprint(\"RMSE: %f\" % summary.rootMeanSquaredError)\nprint(\"r2: %f\" % summary.r2)\n```", "```py\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.regression import DecisionTreeRegressor\nretail_features = spark.read.table(\"retail_features\").selectExpr(\"cust_age as label\", \n           \"selected_features as features\")\n(train_df, test_df) = retail_features.randomSplit([0.8, 0.2])\ndtree = DecisionTreeRegressor(featuresCol=\"features\")\nmodel = dtree.fit(train_df)\npredictions = model.transform(test_df)\nevaluator = RegressionEvaluator(\n    labelCol=\"label\", predictionCol=\"prediction\", \n    metricName=\"rmse\")\nrmse = evaluator.evaluate(predictions)\nprint(\"RMSE for test data = %g\" % rmse)\nprint(model.toDebugString)\n```", "```py\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import StringIndexer\nfrom pyspark.ml.classification import LogisticRegression\ntrain_df = spark.read.table(\"retail_features\").selectExpr(\"gender\", \"selected_features as features\")\nstring_indexer = StringIndexer(inputCol=\"gender\", \n                               outputCol=\"label\", \n                               handleInvalid=\"skip\" )\nlr = LogisticRegression(maxIter=10, regParam=0.9, \n                        elasticNetParam=0.6)\npipeline = Pipeline(stages=[string_indexer, lr])\nmodel = pipeline.fit(train_df)\nlr_model = model.stages[1]\nprint(\"Coefficients: \" + str(lr_model.coefficientMatrix))\nprint(\"Intercepts: \" + str(lr_model.interceptVector))\nsummary.roc.show()\nprint(\"areaUnderROC: \" + str(summary.areaUnderROC))\n```", "```py\ntrain_df = spark.read.table(\"retail_features\").selectExpr(\"country_indexed as label\", \"selected_features as features\")\nmlr = LogisticRegression(maxIter=10, regParam=0.5, \n                         elasticNetParam=0.3, \n                         family=\"multinomial\")\nmlr_model = mlr.fit(train_df)\nprint(\"Coefficients: \" + str(mlr_model.coefficientMatrix))\nprint(\"Intercepts: \" + str(mlr_model.interceptVector))\nprint(\"areaUnderROC: \" + str(summary.areaUnderROC))\nsummary.roc.show()\n```", "```py\nretail_df = spark.read.table(\"retail_features\").selectExpr(\"gender\", \"selected_features as features\")\n(train_df, test_df) = retail_df.randomSplit([0.8, 0.2])\nstring_indexer = StringIndexer(inputCol=\"gender\", \n                               outputCol=\"label\", \n                               handleInvalid=\"skip\" )\ndtree = DecisionTreeClassifier(labelCol=\"label\", \n                               featuresCol=\"features\")\npipeline = Pipeline(stages=[string_indexer, dtree])\nmodel = pipeline.fit(train_df)\npredictions = model.transform(test_df)\nevaluator = MulticlassClassificationEvaluator(\n    labelCol=\"label\", predictionCol=\"prediction\", \n    metricName=\"accuracy\")\naccuracy = evaluator.evaluate(predictions)\nprint(\"Accuracy = %g \" % (accuracy))\ndtree_model = model.stages[1]\n#print(dtree_model.toDebugString)\n```", "```py\nfrom pyspark.ml.classification import NaiveBayes\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nretail_df = spark.read.table(\"retail_features\").selectExpr(\"gender\", \"selected_features as features\")\n(train_df, test_df) = retail_df.randomSplit([0.8, 0.2])\nstring_indexer = StringIndexer(inputCol=\"gender\", \n                               outputCol=\"label\", \n                               handleInvalid=\"skip\" )\nnb = NaiveBayes(smoothing=0.9, modelType=\"gaussian\")\npipeline = Pipeline(stages=[string_indexer, nb])\nmodel = pipeline.fit(train_df)\npredictions = model.transform(test_df)\nevaluator = MulticlassClassificationEvaluator(\n    labelCol=\"label\",\n    predictionCol=\"prediction\",\n    metricName=\"accuracy\")\naccuracy = evaluator.evaluate(predictions)\nprint(\"Model accuracy = %f\" % accuracy)\n```", "```py\nfrom pyspark.ml.classification import LinearSVC\ntrain_df = spark.read.table(\"retail_features\").selectExpr(\"gender\", \"selected_features as features\")\nstring_indexer = StringIndexer(inputCol=\"gender\",\n                               outputCol=\"label\", \n                               handleInvalid=\"skip\" )\nsvm = LinearSVC(maxIter=10, regParam=0.1)\npipeline = Pipeline(stages=[string_indexer, svm])\nmodel = pipeline.fit(train_df)\nsvm_model = model.stages[1]\n# Print the coefficients and intercept for linear SVC\nprint(\"Coefficients: \" + str(svm_model.coefficients))\nprint(\"Intercept: \" + str(svm_model.intercept))\n```", "```py\nfrom pyspark.ml.regression import RandomForestRegressor\nfrom pyspark.ml.evaluation import RegressionEvaluator\nretail_features = spark.read.table(\"retail_features\").selectExpr(\"cust_age as label\", \"selected_features as features\")\n(train_df, test_df) = retail_features.randomSplit([0.8, 0.2])\nrf = RandomForestRegressor(labelCol=\"label\", \n                           featuresCol=\"features\", \n                           numTrees=5)\nrf_model = rf.fit(train_df)\npredictions = rf_model.transform(test_df)\nevaluator = RegressionEvaluator(\n    labelCol=\"label\", predictionCol=\"prediction\", \n    metricName=\"rmse\")\nrmse = evaluator.evaluate(predictions)\nprint(\"RMSE for test data = %g\" % rmse)\nprint(rf_model.toDebugString)\n```", "```py\nretail_df = spark.read.table(\"retail_features\").selectExpr(\"gender\", \"selected_features as features\")\n(train_df, test_df) = retail_df.randomSplit([0.8, 0.2])\nstring_indexer = StringIndexer(inputCol=\"gender\", \n                               outputCol=\"label\", \n                               handleInvalid=\"skip\" )\nrf = RandomForestClassifier(labelCol=\"label\", \n                            featuresCol=\"features\", \n                            numTrees=5)\npipeline = Pipeline(stages=[string_indexer, rf])\nmodel = pipeline.fit(train_df)\npredictions = model.transform(test_df)\nevaluator = MulticlassClassificationEvaluator(\n    labelCol=\"label\", predictionCol=\"prediction\", \n    metricName=\"accuracy\")\naccuracy = evaluator.evaluate(predictions)\nprint(\"Accuracy = %g \" % (accuracy))\nrf_model = model.stages[1]\nprint(rf_model.toDebugString)\n```", "```py\nfrom pyspark.ml.regression import GBTRegressor\nfrom pyspark.ml.evaluation import RegressionEvaluator\nretail_features = spark.read.table(\"retail_features\").selectExpr(\"cust_age as label\", \"selected_features as features\")\n(train_df, test_df) = retail_features.randomSplit([0.8, 0.2])\ngbt = GBTRegressor(labelCol=\"label\",featuresCol=\"features\",\n                   maxIter=5)\ngbt_model = gbt.fit(train_df)\npredictions = gbt_model.transform(test_df)\nevaluator = RegressionEvaluator(\n    labelCol=\"label\", predictionCol=\"prediction\", \n    metricName=\"rmse\")\nrmse = evaluator.evaluate(predictions)\nprint(\"RMSE for test data = %g\" % rmse)\nprint(gbt_model.toDebugString)\n```", "```py\nretail_df = spark.read.table(\"retail_features\").selectExpr(\"gender\", \"selected_features as features\")\n(train_df, test_df) = retail_df.randomSplit([0.8, 0.2])\nstring_indexer = StringIndexer(inputCol=\"gender\", \n                               outputCol=\"label\", \n                               handleInvalid=\"skip\" )\ngbt = GBTClassifier(labelCol=\"label\", \n                    featuresCol=\"features\",\n                    maxIter=5)\npipeline = Pipeline(stages=[string_indexer, gbt])\nmodel = pipeline.fit(train_df)\npredictions = model.transform(test_df)\nevaluator = MulticlassClassificationEvaluator(\n    labelCol=\"label\", predictionCol=\"prediction\", \n    metricName=\"accuracy\")\naccuracy = evaluator.evaluate(predictions)\nprint(\"Accuracy = %g \" % (accuracy))\ngbt_model = model.stages[1]\nprint(gbt_model.toDebugString)\n```"]