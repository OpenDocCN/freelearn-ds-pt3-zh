["```py\nfrom pyspark.ml.clustering import KMeans\nfrom pyspark.ml.evaluation import ClusteringEvaluator\nretail_features = spark.read.table(\"retail_features\")\ntrain_df = retail_features.selectExpr(\"selected_features as features\")\nkmeans = KMeans(k=3, featuresCol='features')\nkmeans_model = kmeans.fit(train_df)\npredictions = kmeans_model.transform(train_df)\nevaluator = ClusteringEvaluator()\nsilhouette = evaluator.evaluate(predictions)\nprint(\"Silhouette measure using squared Euclidean distance = \" + str(silhouette))\ncluster_centers = kmeans_model.clusterCenters()\nprint(cluster_centers)\n```", "```py\nfrom pyspark.ml.clustering import BisectingKMeans\nfrom pyspark.ml.evaluation import ClusteringEvaluator\nretail_features = spark.read.table(\"retail_features\")\ntrain_df = retail_features.selectExpr(\"selected_features as features\")\nbkmeans = BisectingKMeans(k=3, featuresCol='features')\nbkmeans_model = kmeans.fit(train_df)\npredictions = bkmeans_model.transform(train_df)\nevaluator = ClusteringEvaluator()\nsilhouette = evaluator.evaluate(predictions)\nprint(\"Silhouette measure using squared euclidean distance = \" + str(silhouette))\ncluster_centers = kmeans_model.clusterCenters()\nprint(cluster_centers)\n```", "```py\nfrom pyspark.ml.clustering import LDA\ntrain_df = spark.read.table(\"retail_features\").selectExpr(\"selected_features as features\")\nlda = LDA(k=3, maxIter=1)\nlda_model = lda.fit(train_df)\ntopics = lda_model.describeTopics(3)\ntopics.show()\ntransformed = lda_model.transform(dataset)\ntransformed.show()\n```", "```py\nfrom pyspark.ml.clustering import GaussianMixture\ntrain_df = spark.read.table(\"retail_features\").selectExpr(\"selected_features as features\")\ngmm = GaussianMixture(k=3, featuresCol='features')\ngmm_model = gmm.fit(train_df)\ngmm_model.gaussiansDF.display()\n```", "```py\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.sql import Row\nratings_df = (spark.read.table(\"retail_features\").selectExpr(\n    \"CAST(invoice_num AS INT) as user_id\",\n    \"CAST(stock_code AS INT) as item_id\",\n    \"CAST(quantity AS INT) as rating\")\n    .where(\"user_id is NOT NULL AND item_id is NOT NULL\"))\ndf.display()\n(train_df, test_df) = ratings_df.randomSplit([0.7, 0.3])\nals = ALS(maxIter=3, regParam=0.03, userCol=\"user_id\", \n          itemCol=\"item_id\", ratingCol=\"rating\", \n          coldStartStrategy=\"drop\")\nals_model = als.fit(train_df)\npredictions = model.transform(test_df)\nevaluator = RegressionEvaluator(metricName=\"rmse\", \n                                labelCol=\"rating\", \n                                predictionCol=\"prediction\")\nrmse = evaluator.evaluate(predictions)\nprint(\"Root-mean-square error = \" + str(rmse))\nuser_recs = als_model.recommendForAllUsers(5)\nuser_recs.show()\nitem_recs = als_model.recommendForAllItems(5)\nitem_recs.show()\n```"]