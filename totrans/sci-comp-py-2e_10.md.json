["```py\nDate;Watt\n           :\n2019-10-20 08:22:00 ; 44.0\n2019-10-20 08:23:00 ; 61.0\n2019-10-20 08:24:00 ; 42.0\n           :\n```", "```py\nDate;SEK\n2019-10-20 01:00 ; 0.32\n2019-10-20 02:00 ; 0.28\n2019-10-20 03:00 ; 0.29\n       :\n```", "```py\nDate;Euro_SEK\n2019-10-21 ; 10.7311\n2019-10-22 ; 10.7303\n2019-10-23 ; 10.7385\n       :\n```", "```py\nA=array( [[ 1., 2., 3.],\n          [4., 5., 6.]])\n```", "```py\n[[1\\. 2\\. 3.]\n [4\\. 5\\. 6.]]\n```", "```py\nimport pandas as pd\nA=array( [[ 1., 2., 3.],\n          [ 4., 5., 6.]] )\nAF = pd.DataFrame(A)\n```", "```py\n\n      0   1  2\n 0   1.0 2.0 3.0\n 1   4.0 5.0 6.0\n```", "```py\nAF.columns = ['C1','C2','C3']     \nAF.index = ['R1', 'R2']\n```", "```py\n    C1 C2 C3\nR1 1.0 2.0 3.0\nR2 4.0 5.0 6.0\n```", "```py\nAF.loc['R1', 'C2']      # this returns 2.0 \n```", "```py\nAF.loc[['R1','R2'],['C1','C2']]\n```", "```py\n   C1   C2\nR1  1  2.0\nR2  4  5.0\n```", "```py\nAF.loc['R1']\n```", "```py\nC1    1.0\nC2    2.0\nC3    3.0\nName: R1, dtype: float64\n```", "```py\nAF.loc['R1'].loc['C1']    # returns 1.0\n```", "```py\nAF['C1']\n```", "```py\nR1    1.0\nR2    4.0\nName: C1, dtype: float64\n```", "```py\ntype(AF.C1) == pd.Series # True \n```", "```py\nAF.iloc[[0],[1]]\n```", "```py\n    C2\n R1 2.0\n```", "```py\nAF.loc['R1':,'C2':] \n```", "```py\nAF.loc[['R1','R2'], ['C2','C2']]\n```", "```py\nAF.loc['R1','C2'] # returns 2.0\n```", "```py\nsolarWatts = pd.read_csv(\"solarWatts.dat\", \n                         sep=';',\n                         index_col='Date',\n                         parse_dates=[0], infer_datetime_format=True)\n```", "```py\nsolarWatts.iloc[0] \n```", "```py\nWatt    7893.0\nName: 2019-10-06 13:23:00, dtype: float64\n```", "```py\nsolarWatts.index[-1]   # asking for the last index\n```", "```py\n# returns: Timedelta('0 days 00:01:00')\nsolarWatts.index[1]-solarWatts.index[0]\n```", "```py\nmax(numpy.diff(solarWatts.index).astype('timedelta64[m]'))\n```", "```py\nsolarWatts.iloc[np.argmax(np.diff(solarWatts.index))\n```", "```py\ntowns=[['Stockholm', 'Sweden', 188,975904],\n       ['Malmö', 'Sweden', 322, 316588],\n       ['Oslo', 'Norway', 481, 693491],\n       ['Bergen', 'Norway', 464, 28392]]\ntown=pd.DataFrame(towns, columns=['City','Country','area','population'])\n```", "```py\n        City Country  area  population\n0  Stockholm  Sweden   188      975904\n1      Malmö  Sweden   322      316588\n2       Oslo  Norway   481      693491\n3     Bergen  Norway   464      28392\n```", "```py\ntown.set_index('City', drop=False)      # duplicating\n# droping the column and making an index out of it\ntown.set_index('City', drop=True)\n```", "```py\n          Country  area  population\nCity                               \nStockholm  Sweden   188      975904\nMalmö      Sweden   322      316588\nOslo       Norway   481      693491\nBergen     Norway   464      283929\nTrondheim  Norway   322      199039\n```", "```py\ntown.set_index(['Country','City'], inplace=True)\n```", "```py\n                   area  population\nCountry City                       \nSweden  Stockholm   188      975904\n        Malmö       322      316588\nNorway  Oslo        481      693491\n```", "```py\ntown.loc['Sweden']\n```", "```py\ntown.loc[('Sweden','Malmö')]\n```", "```py\ntown=pd.DataFrame(towns, columns=['City','Country','area','population'])\ntown.set_index('City', inplace=True)\n```", "```py\ntown.drop('Bergen', axis=0)\n```", "```py\ntown.drop('area', axis=1)\n```", "```py\nsolar_all=pd.merge(solarWatts, price, how='outer', sort=True, on='Date')\nsolar_all=pd.merge(solar_all, rates, how='outer', sort=True, on='Date')\n```", "```py\n                       Watt  SEK  Euro_SEK\nDate                                      \n2019-10-06 15:03:00  4145.0  NaN       NaN\n2019-10-06 15:04:00  5784.0  NaN       NaN\n```", "```py\nframe = pd.DataFrame(array([[1., -5.,  3., NaN], \n                            [3.,  4., NaN, 17.], \n                            [6.,  8., 11.,  7.]]), \n                     columns=['a','b','c','d'])\n```", "```py\n     a    b    c     d\n0  1.0 -5.0  3.0   NaN\n1  3.0  4.0  NaN  17.0\n2  6.0  8.0 11.0   7.0\n```", "```py\n     a    b     c    d\n2  6.0  8.0  11.0  7.0\n```", "```py\n   a    b\n0  1.0 -5.0\n1  3.0  4.0\n2  6.0  8.0\n```", "```py\n    a    b     c     d\n0  1.0 -5.0   3.0   NaN\n1  3.0  4.0   3.0  17.0\n2  6.0  8.0  11.0   7.0  \n```", "```py\n  a    b     c     \n0  1.0 -5.0   3.0   NaN\n1  3.0  4.0   7.0  17.0\n2  6.0  8.0  11.0   7.0\n```", "```py\nframe['c'].fillna(method='pad', inplace=True)\nframe['d'].fillna(method='bfill',inplace=True)\n```", "```py\nsolar_all['SEK'].fillna(method='pad', axis=0, inplace=True)\nsolar_all['Euro_SEK'].fillna(method='pad', axis=0, inplace=True)\n```", "```py\nsolar_all.loc['2020-05-16'].plot(y='SEK')\n```", "```py\nsolar_all.loc['2020-05-16 00:00':'2020-05-16 23:59']\n```", "```py\nax1=solar_all.loc['2020-06-20':'2020-06-21'].plot(None,'Watt')\nax1.set_ylabel('Power')\n```", "```py\nsolar_converted=pd.DataFrame()\nsolar_converted['kW']=solar_all['Watt']/1000\nsolar_converted['Euro']=solar_all['SEK']/solar_all['Euro_SEK']\n```", "```py\n                      kW      Euro\nDate                                   \n2020-07-01 07:00:00  2.254  0.037147\n2020-07-01 07:01:00  1.420  0.037147\n2020-07-01 07:02:00  2.364  0.037147\n2020-07-01 07:03:00  0.762  0.037147\n2020-07-01 07:04:00  2.568  0.037147\n```", "```py\nimport numpy as np\n​np.max(solar_all['Watt']) # returns 12574\n```", "```py\nprint(solar_all.index[np.argmax(solar_all['Watt'])])\n```", "```py\n 2020-05-16 10:54:00\n```", "```py\nsolar_all['Watt'].fillna(value=0., inplace=True)\n```", "```py\nsolar_day=solar_all.groupby(solar_all.index.date).agg({'Watt':'max', \n                                                       'SEK':'mean'})\n```", "```py\nsolar_day.index=pd.to_datetime(solar_day.index,format='%Y-%m-%d')\nax=solar_day.loc['2020-06-01':'2020-06-30'].plot.bar('Watt')\n```", "```py\nax.set_xticklabels([tf.strftime(\"%m-%d\") \n                    for tf in solarday.loc['2020-06-01':'2020-06-30'].index])\n```", "```py\nsolar_hour=solar_all.groupby(solar_all.index.hour).agg({'SEK':mean})\nax=solar_hour.plot()\nax=solar_hour.plot(marker='*')\nax.set_title('The average energy price change on a day')\nax.set_xlabel('hour of day')\nax.set_ylabel('SEK/kWh')\n```", "```py\ngrouping_list=[solar_all.index.year, solar_all.index.month, \n               solar_all.index.day, solar_all.index.hour]\nsolar_hour=solar_all.groupby(grouping_list)\n```", "```py\n# integrating by summing up the data\nsolar_hour=solar_hour.agg({'Watt':sum}) \n\nsolar_hour=solar_hour/(1000*60) # Conversion from Wmin to kWh\n```", "```py\nax=solar_hour['Watt'].loc[(2020,6,19)].plot.bar()\nax.set_title('Energy production on June, 19 2020')\nax.set_xlabel('Hour')\nax.set_ylabel('Energy [kWh]')\n```"]