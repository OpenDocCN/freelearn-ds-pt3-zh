["```py\n    import pandas as pd\n    series = pd.read_csv('data/PovStatsSeries.csv')\n    ```", "```py\n    gini = 'GINI index (World Bank estimate)'\n    ```", "```py\n    series[series['Indicator Name']==gini]['Long definition'].values[0]\n    Gini index measures the extent to which the distribution of income (or, in some cases, consumption expenditure) among individuals or households within an economy deviates from a perfectly equal distribution. A Lorenz curve plots the cumulative percentages of total income received against the cumulative number of recipients, starting with the poorest individual or household. The Gini index measures the area between the Lorenz curve and a hypothetical line of absolute equality, expressed as a percentage of the maximum area under the line. Thus a Gini index of 0 represents perfect equality, while an index of 100 implies perfect inequality.\n    ```", "```py\n    poverty[gini].min(), poverty[gini].max()\n    (20.2, 65.8)\n    ```", "```py\n    Poverty[gini].describe()\n    count    1674.000000\n    mean       38.557766\n    std         9.384352\n    min        20.200000\n    25%        31.300000\n    50%        36.400000\n    75%        45.275000\n    max        65.800000\n    Name: GINI index (World Bank estimate), dtype: float64\n    ```", "```py\n    year = 1980\n    df =\\\n    poverty[poverty['year']==year].sort_values(gini).dropna(subset=[gini]) \n    ```", "```py\n    import plotly.express as px\n    px.bar(df,\n           x='Country Name',\n           y=gini, \n           title=' - '.join([gini, str(year)]))\n    ```", "```py\nyear = 2000\npx.bar(df,\n       x=gini,\n       y='Country Name',\n       title=' - '.join([gini, str(year)]),\n       orientation='h')\n```", "```py\nyear = 2000\ndf =\\\npoverty[poverty['year']==year].sort_values(gini).dropna(subset=[gini])\nn_countries = len(df['Country Name'])\npx.bar(df,\n       x=indicator,\n       y='Country Name',\n       title=' - '.join([gini, str(year)]),\n       height=200 + (20*n_countries),\n       orientation='h')\n```", "```py\ncountry = \"Sweden\"\ndf = poverty[poverty['Country Name']==country].dropna(subset=[gini])\n```", "```py\npx.bar(df,\n       x='year',\n       y=gini,\n       title=' - '.join([gini, country]))\n```", "```py\n    from jupyter_dash import JupyterDash\n    import dash_html_components as html\n    import dash_core_components as dcc\n    import dash_bootstrap_components as dbc\n    from dash.dependencies import Output, Input\n    from dash.exceptions import PreventUpdate\n    app = JupyterDash(__name__)\n    ```", "```py\n    gini_df = poverty[poverty[gini].notna()]\n    ```", "```py\n    app.layout  = html.Div()\n    ```", "```py\n    [\n        html.H2('Gini Index - World Bank Data',\n                 style={'textAlign': 'center'}),\n        dbc.Row([\n            dbc.Col([\n                dcc.Dropdown(id='gini_year_dropdown',\n                             options=[{'label': year, 'value': year}\n                             for year in gini_df['year'].drop_duplicates().sort_values()]),\n                   dcc.Graph(id='gini_year_barchart')\n    ]),\n                dbc.Col([\n                    dcc.Dropdown(id='gini_country_dropdown',\n                                 options=[{'label': country, 'value': country}\n        for country in gini_df['Country Name'].unique()]),\n        dcc.Graph(id='gini_country_barchart')\n        ])\n    ])\n    ]\n    ```", "```py\n    @app.callback(Output('gini_year_barchart', 'figure'),\n                  Input('gini_year_dropdown', 'value'))\n    def plot_gini_year_barchart(year):\n        if not year:\n            raise PreventUpdate\n        df =\\\n    gini_df[gini_df['year'].eq(year)].sort_values(gini).dropna(subset=[gini])\n        n_countries = len(df['Country Name'])\n        fig = px.bar(df,\n                     x=gini,\n                     y='Country Name',\n                     orientation='h',\n                     height=200 + (n_countries*20),\n                     title=gini + ' ' + str(year))\n        return fig\n    ```", "```py\n    @app.callback(Output('gini_country_barchart', 'figure'),\n                  Input('gini_country_dropdown', 'value'))\n    def plot_gini_country_barchart(country):\n        if not country:\n            raise PreventUpdate\n        df = gini_df[gini_df['Country Name']==country].dropna(subset=[gini])\n        fig = px.bar(df,\n                     x='year',\n                     y=gini,\n                     title=' - '.join([gini, country]))\n        return fig\n    ```", "```py\n    if __name__ == '__main__':\n        app.run_server(mode='inline')\n    ```", "```py\n…\ndcc.Graph(id='population_chart'),\nhtml.Br(),\nhtml.H2('Gini Index - World Bank Data', style={'textAlign': 'center'}),\nhtml.Br(),\ndbc.Row([\n    dbc.Col([\n…\n        dcc.Graph(id='gini_country_barchart')\n    ]),\n]),\ndbc.Tabs([\n    dbc.Tab([\n…\n```", "```py\nincome_share_df =\\\npoverty.filter(regex='Country Name|^year$|Income share.*?20').dropna()\nincome_share_df\n```", "```py\n    income_share_df = income_share_df.rename(columns={\n        'Income share held by lowest 20%': '1 Income share held by lowest 20%',\n        'Income share held by second 20%': '2 Income share held by second 20%',\n        'Income share held by third 20%': '3 Income share held by third 20%',\n        'Income share held by fourth 20%': '4 Income share held by fourth 20%',\n        'Income share held by highest 20%': '5 Income share held by highest 20%'\n    }).sort_index(axis=1)\n    ```", "```py\n    income_share_df.columns\n    Index(['1 Income share held by lowest 20%',\n           '2 Income share held by second 20%',\n           '3 Income share held by third 20%',\n           '4 Income share held by fourth 20%',\n           '5 Income share held by highest 20%',\n           'Country Name', 'year'],\n         dtype='object')\n    ```", "```py\n    import re\n    income_share_df.columns = [\\\n    re.sub('\\d Income share held by ', '', col).title() for col in income_share_df.columns\n    ]\n    ```", "```py\n    income_share_cols = income_share_df.columns[:-2]\n    income_share_cols\n    Index(['Lowest 20%', 'Second 20%', 'Third 20%', 'Fourth 20%', 'Highest 20%'], dtype='object')\n    ```", "```py\n    country = 'China'\n    ```", "```py\n    fig = \\\n    px.bar(income_share_df[income_share_df['Country Name']==country].dropna(),\n                 x=income_share_cols,\n                 y='Year',\n                 hover_name='Country Name',\n                 orientation='h',\n                 barmode='stack',\n                 height=600,\n                 title=f'Income Share Quintiles - {country}')\n    fig.show()\n    ```", "```py\n    fig.layout.legend.orientation = 'h'\n    fig.layout.legend.title = None\n    fig.layout.xaxis.title = 'Percent of Total Income'\n    fig.layout.legend.x = 0.25\n    ```", "```py\n    income_share_df =\\\n    poverty.filter(regex='Country Name|^year$|Income share.*?20').dropna()\n    income_share_df = income_share_df.rename(columns={\n        'Income share held by lowest 20%': '1 Income share held by lowest 20%',\n        'Income share held by second 20%': '2 Income share held by second 20%',\n        'Income share held by third 20%': '3 Income share held by third 20%',\n        'Income share held by fourth 20%': '4 Income share held by fourth 20%',\n        'Income share held by highest 20%': '5 Income share held by highest 20%'\n    }).sort_index(axis=1)\n    income_share_df.columns =\\\n    [re.sub('\\d Income share held by ', '', col).title() for col in income_share_df.columns]\n    income_share_cols = income_share_df.columns[:-2]\n    ```", "```py\n    dcc.Dropdown(id='income_share_country_dropdown',\n                 options=[{'label': country, 'value': country}\n                          for country in income_share_df['Country Name'].unique()]),\n    dcc.Graph(id='income_share_country_barchart')\n    ```", "```py\n    @app.callback(Output('income_share_country_barchart', 'figure'),\n                  Input('income_share_country_dropdown', 'value'))\n    def plot_income_share_barchart(country):\n        if country is None:\n            raise PreventUpdate\n        fig =\\\n    px.bar(income_share_df[income_share_df['Country Name']==country].dropna(),\n        x=income_share_cols,\n        y='Year',\n        barmode='stack',\n        height=600,\n        hover_name='Country Name',\n        title=f'Income Share Quintiles - {country}',\n        orientation='h')\n        fig.layout.legend.title = None\n        fig.layout.legend.orientation = 'h'\n        fig.layout.legend.x = 0.25\n        fig.layout.xaxis.title = 'Percent of Total Income'\n        return fig\n    ```", "```py\n    countries = ['Algeria', 'Japan']\n    ```", "```py\n    df =\\\n    gini_df[gini_df['Country Name'].isin(countries)].dropna(subset=[gini])\n    ```", "```py\n    px.bar(df,\n           x='year',\n           y=gini,\n           facet_row='Country Name')\n    ```", "```py\n    labels={gini: 'Gini Index'}\n    ```", "```py\n    color='Country Name' \n    ```", "```py\n    title='<br>'.join([gini, ', '.join(countries)])\n    ```", "```py\n    height=100 + 250*len(countries)\n    ```", "```py\n    px.bar(df,\n           x='year',\n           y=gini,\n           facet_row='Country Name',\n           labels={gini: 'Gini Index'},\n           color='Country Name',\n           title='<br>'.join([gini, ', '.join(countries)]),\n           height=100 + 250*len(countries))\n    ```", "```py\ndcc.Dropdown(id='gini_country_dropdown',\n             multi=True,\n             options=[{'label': country, 'value': country}\n                      for country in gini_df['Country Name'].unique()]),\n```", "```py\nplaceholder=\"Select a year\"\nplaceholder=\"Select one or more countries\"\n```", "```py\ndbc.Label(\"Year\")\ndbc.Label(\"Countries\")\n```", "```py\napp = dash.Dash(__name__,\n                external_stylesheets=[dbc.themes.COSMO])\n```", "```py\napp.layout = html.Div([\n…\n], style={'backgroundColor': '#E5ECF6'})\n```", "```py\nfig.layout.paper_bgcolor = '#E5ECF6'\n```", "```py\nimport plotly.graph_objects as go\ndef make_empty_fig():\n    fig = go.Figure()\n    fig.layout.paper_bgcolor =  '#E5ECF6'\n    fig.layout.plot_bgcolor = '#E5ECF6'\n    return fig\n```", "```py\ndcc.Graph(id='gini_year_barchart',\n          figure=make_empty_fig())\n```", "```py\ndbc.Col([\n…\n], md=12, lg=5),\n```"]