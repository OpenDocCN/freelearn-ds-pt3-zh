["```py\nconda install -c bioconda reportlab\n```", "```py\n    from Bio import SeqIO\n    genome_name = 'PlasmoDB-9.3_Pfalciparum3D7_Genome.fasta'\n    recs = SeqIO.parse(genome_name, 'fasta')\n    for rec in recs:\n        print(rec.description)\n    ```", "```py\n    from Bio import SeqUtils\n    recs = SeqIO.parse(genome_name, 'fasta')\n    chrom_sizes = {}\n    chrom_GC = {}\n    block_size = 50000\n    min_GC = 100.0\n    max_GC = 0.0\n    for rec in recs:\n        if rec.description.find('SO=chromosome') == -1:\n            continue\n        chrom = int(rec.description.split('_')[1])\n        chrom_GC[chrom] = []\n        size = len(rec.seq)\n        chrom_sizes[chrom] = size\n        num_blocks = size // block_size + 1\n        for block in range(num_blocks):\n            start = block_size * block\n            if block == num_blocks - 1:\n                end = size\n            else:\n                end = block_size + start + 1\n            block_seq = rec.seq[start:end]\n            block_GC = SeqUtils.GC(block_seq)\n            if block_GC < min_GC:\n                min_GC = block_GC\n            if block_GC > max_GC:\n                max_GC = block_GC\n            chrom_GC[chrom].append(block_GC)\n    print(min_GC, max_GC)\n    ```", "```py\n    from reportlab.lib import colors\n    from reportlab.lib.units import cm\n    from Bio.Graphics import BasicChromosome\n    chroms = list(chrom_sizes.keys())\n    chroms.sort()\n    biggest_chrom = max(chrom_sizes.values())\n    my_genome = BasicChromosome.Organism(output_format=\"png\")\n    my_genome.page_size = (29.7*cm, 21*cm)\n    telomere_length = 10\n    bottom_GC = 17.5\n    top_GC = 22.0\n    for chrom in chroms:\n        chrom_size = chrom_sizes[chrom]\n        chrom_representation = BasicChromosome.Chromosome ('Cr %d' % chrom)\n        chrom_representation.scale_num = biggest_chrom\n        tel = BasicChromosome.TelomereSegment()\n        tel.scale = telomere_length\n        chrom_representation.add(tel)\n        num_blocks = len(chrom_GC[chrom])\n        for block, gc in enumerate(chrom_GC[chrom]):\n            my_GC = chrom_GC[chrom][block]\n            body = BasicChromosome.ChromosomeSegment()\n            if my_GC > top_GC:\n                body.fill_color = colors.Color(1, 0, 0)\n            elif my_GC < bottom_GC:\n                body.fill_color = colors.Color(1, 1, 0)\n            else:\n                my_color = (my_GC - bottom_GC) / (top_GC -bottom_GC)\n                body.fill_color = colors.Color(my_color,my_color, 1)\n            if block < num_blocks - 1:\n                body.scale = block_size\n            else:\n                body.scale = chrom_size % block_size\n            chrom_representation.add(body)\n        tel = BasicChromosome.TelomereSegment(inverted=True)\n        tel.scale = telomere_length\n        chrom_representation.add(tel)\n        my_genome.add(chrom_representation)\n    my_genome.draw('falciparum.png', 'Plasmodium falciparum')\n    ```", "```py\n    from IPython.core.display import Image\n    Image(\"falciparum.png\")\n    ```", "```py\n    import gzip\n    from Bio import SeqIO\n    gambiae_name = 'gambiae.fa.gz'\n    atroparvus_name = 'atroparvus.fa.gz'\n    recs = SeqIO.parse(gzip.open(gambiae_name, 'rt', encoding='utf-8'), 'fasta')\n    for rec in recs:\n        print(rec.description)\n    ```", "```py\nAgamP4_2L | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=49364325 | SO=chromosome\nAgamP4_2R | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=61545105 | SO=chromosome\nAgamP4_3L | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=41963435 | SO=chromosome\nAgamP4_3R | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=53200684 | SO=chromosome\nAgamP4_X | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=24393108 | SO=chromosome\nAgamP4_Y_unplaced | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=237045 | SO=chromosome\nAgamP4_Mt | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=15363 | SO=mitochondrial_chromosome\n```", "```py\n    recs = SeqIO.parse(gzip.open(gambiae_name, 'rt', encoding='utf-8'), 'fasta')\n    chrom_Ns = {}\n    chrom_sizes = {}\n    for rec in recs:\n        if rec.description.find('supercontig') > -1:\n            continue\n        print(rec.description, rec.id, rec)\n        chrom = rec.id.split('_')[1]\n        if chrom in ['UNKN']:\n            continue\n        chrom_Ns[chrom] = []\n        on_N = False\n        curr_size = 0\n        for pos, nuc in enumerate(rec.seq):\n            if nuc in ['N', 'n']:\n                curr_size += 1\n                on_N = True\n            else:\n                if on_N:\n                    chrom_Ns[chrom].append(curr_size)\n                    curr_size = 0\n                on_N = False\n        if on_N:\n            chrom_Ns[chrom].append(curr_size)\n        chrom_sizes[chrom] = len(rec.seq)\n    for chrom, Ns in chrom_Ns.items():\n        size = chrom_sizes[chrom]\n        if len(Ns) > 0:\n            max_Ns = max(Ns)\n        else:\n            max_Ns = 'NA'\n        print(f'{chrom} ({size}): %Ns ({round(100 * sum(Ns) / size, 1)}), num Ns: {len(Ns)}, max N: {max_Ns}')\n    ```", "```py\n2L (49364325): %Ns (1.7), num Ns: 957, max N: 28884\n2R (61545105): %Ns (2.3), num Ns: 1658, max N: 36427\n3L (41963435): %Ns (2.9), num Ns: 1272, max N: 31063\n3R (53200684): %Ns (1.8), num Ns: 1128, max N: 24292\nX (24393108): %Ns (4.1), num Ns: 1287, max N: 21132\nY (237045): %Ns (43.0), num Ns: 63, max N: 7957\nMt (15363): %Ns (0.0), num Ns: 0, max N: NA\n```", "```py\n    import numpy as np\n    recs = SeqIO.parse(gzip.open(atroparvus_name, 'rt', encoding='utf-8'), 'fasta')\n    sizes = []\n    size_N = []\n    for rec in recs:\n        size = len(rec.seq)\n        sizes.append(size)\n        count_N = 0\n        for nuc in rec.seq:\n            if nuc in ['n', 'N']:\n                count_N += 1\n        size_N.append((size, count_N / size))\n    print(len(sizes), np.median(sizes), np.mean(sizes),\n          max(sizes), min(sizes),\n          np.percentile(sizes, 10), np.percentile(sizes, 90))\n    ```", "```py\n1320 7811.5 170678.2 58369459 1004 1537.1 39644.7\n```", "```py\n    import matplotlib.pyplot as plt\n    small_split = 4800\n    large_split = 540000\n    fig, axs = plt.subplots(1, 3, figsize=(16, 9), squeeze=False, sharey=True)\n    xs, ys = zip(*[(x, 100 * y) for x, y in size_N if x <= small_split])\n    axs[0, 0].plot(xs, ys, '.')\n    xs, ys = zip(*[(x, 100 * y) for x, y in size_N if x > small_split and x <= large_split])\n    axs[0, 1].plot(xs, ys, '.')\n    axs[0, 1].set_xlim(small_split, large_split)\n    xs, ys = zip(*[(x, 100 * y) for x, y in size_N if x > large_split])\n    axs[0, 2].plot(xs, ys, '.')\n    axs[0, 0].set_ylabel('Fraction of Ns', fontsize=12)\n    axs[0, 1].set_xlabel('Contig size', fontsize=12)\n    fig.suptitle('Fraction of Ns per contig size', fontsize=26)\n    ```", "```py\nconda install -c bioconda gffutils\n```", "```py\n    import gffutils\n    import sqlite3\n    try:\n        db = gffutils.create_db('gambiae.gff.gz', 'ag.db')\n    except sqlite3.OperationalError:\n        db = gffutils.FeatureDB('ag.db')\n    ```", "```py\n    print(list(db.featuretypes()))\n    for feat_type in db.featuretypes():\n        print(feat_type, db.count_features_of_type(feat_type))\n    ```", "```py\n    seqids = set()\n    for e in db.all_features():\n        seqids.add(e.seqid)\n    for seqid in seqids:\n        print(seqid)\n    ```", "```py\n    from collections import defaultdict\n    num_mRNAs = defaultdict(int)\n    num_exons = defaultdict(int)\n    max_exons = 0\n    max_span = 0\n    for seqid in seqids:\n        cnt = 0\n        for gene in db.region(seqid=seqid, featuretype='protein_coding_gene'):\n            cnt += 1\n            span = abs(gene.start - gene.end) # strand\n            if span > max_span:\n                max_span = span\n                max_span_gene = gene\n            my_mRNAs = list(db.children(gene, featuretype='mRNA'))\n            num_mRNAs[len(my_mRNAs)] += 1\n            if len(my_mRNAs) == 0:\n                exon_check = [gene]\n            else:\n                exon_check = my_mRNAs\n            for check in exon_check:\n                my_exons = list(db.children(check, featuretype='exon'))\n                num_exons[len(my_exons)] += 1\n                if len(my_exons) > max_exons:\n                    max_exons = len(my_exons)\n                    max_exons_gene = gene\n        print(f'seqid {seqid}, number of genes {cnt}')\n    print('Max number of exons: %s (%d)' % (max_exons_gene.id, max_exons))\n    print('Max span: %s (%d)' % (max_span_gene.id, max_span))\n    print(num_mRNAs)\n    print(num_exons)\n    ```", "```py\nimport gffutils\nimport sqlite3\ntry:\n    db = gffutils.create_db('gambiae.gff.gz', 'ag.db')\nexcept sqlite3.OperationalError:\n    db = gffutils.FeatureDB('ag.db')\n```", "```py\n    import gzip\n    from Bio import Seq, SeqIO\n    gene_id = 'AGAP004707'\n    gene = db[gene_id]\n    print(gene)\n    print(gene.seqid, gene.strand)\n    ```", "```py\nAgamP4_2L       VEuPathDB       protein_coding_gene     2358158 2431617 .       +       .       ID=AGAP004707;Name=para;description=voltage-gated sodium channel\nAgamP4_2L + \n```", "```py\n    recs = SeqIO.parse(gzip.open('gambiae.fa.gz', 'rt', encoding='utf-8'), 'fasta')\n    for rec in recs:\n        print(rec.description)\n        if rec.id == gene.seqid:\n            my_seq = rec.seq\n            break\n    ```", "```py\nAgamP4_2L | organism=Anopheles_gambiae_PEST | version=AgamP4 | length=49364325 | SO=chromosome\n```", "```py\n    def get_sequence(chrom_seq, CDSs, strand):\n        seq = Seq.Seq('')\n        for CDS in CDSs:\n            my_cds = Seq.Seq(str(my_seq[CDS.start - 1:CDS.end]))\n            seq += my_cds\n        return seq if strand == '+' else seq.reverse_complement()\n    ```", "```py\n    mRNAs = db.children(gene, featuretype='mRNA')\n    for mRNA in mRNAs:\n        print(mRNA.id)\n        if mRNA.id.endswith('RA'):\n            break\n    ```", "```py\n    CDSs = db.children(mRNA, featuretype='CDS', order_by='start')\n    gene_seq = get_sequence(my_seq, CDSs, gene.strand)\n    print(len(gene_seq), gene_seq)\n    prot = gene_seq.translate()\n    print(len(prot), prot)\n    ```", "```py\n    reverse_transcript_id = 'AGAP004708-RA'\n    reverse_CDSs = db.children(reverse_transcript_id, featuretype='CDS', order_by='start')\n    reverse_seq = get_sequence(my_seq, reverse_CDSs, '-')\n    print(len(reverse_seq), reverse_seq)\n    reverse_prot = reverse_seq.translate()\n    print(len(reverse_prot), reverse_prot)\n    ```", "```py\n    import requests\n    ensembl_server = 'http://rest.ensembl.org'\n    def do_request(server, service, *args, **kwargs):\n        url_params = ''\n        for a in args:\n            if a is not None:\n                url_params += '/' + a\n        req = requests.get('%s/%s%s' % (server, service, url_params), params=kwargs, headers={'Content-Type': 'application/json'})\n        if not req.ok:\n            req.raise_for_status()\n        return req.json()\n    ```", "```py\n    answer = do_request(ensembl_server, 'info/species')\n    for i, sp in enumerate(answer['species']):\n        print(i, sp['name'])\n    ```", "```py\n    ext_dbs = do_request(ensembl_server, 'info/external_dbs', 'homo_sapiens', filter='HGNC%')\n    print(ext_dbs)\n    ```", "```py\n    answer = do_request(ensembl_server, 'lookup/symbol', 'homo_sapiens', 'LCT')\n    print(answer)\n    lct_id = answer['id']\n    ```", "```py\n    lct_seq = do_request(ensembl_server, 'sequence/id', lct_id)\n    print(lct_seq)\n    ```", "```py\n    lct_xrefs = do_request(ensembl_server, 'xrefs/id', lct_id)\n    for xref in lct_xrefs:\n        print(xref['db_display_name'])\n        print(xref)\n    ```", "```py\n    hom_response = do_request(ensembl_server, 'homology/id', lct_id, type='orthologues', sequence='none')\n    homologies = hom_response['data'][0]['homologies']\n    for homology in homologies:\n        print(homology['target']['species'])\n        if homology['target']['species'] != 'equus_caballus':\n            continue\n        print(homology)\n        print(homology['taxonomy_level'])\n        horse_id = homology['target']['id']\n    ```", "```py\n    horse_req = do_request(ensembl_server, 'lookup/id', horse_id)\n    print(horse_req)\n    ```", "```py\nconda install pygraphviz\n```", "```py\n    lct_id = 'ENSG00000115850'\n    refs = do_request(ensembl_server, 'xrefs/id', lct_id,external_db='GO', all_levels='1')\n    print(len(refs))\n    print(refs[0].keys())\n    for ref in refs:\n        go_id = ref['primary_id']\n        details = do_request(ensembl_server, 'ontology/id', go_id)\n        print('%s %s %s' % (go_id, details['namespace'], ref['description']))\n        print('%s\\n' % details['definition'])\n    ```", "```py\nGO:0000016 molecular_function lactase activity\n \"Catalysis of the reaction: lactose + H2O = D-glucose + D-galactose.\" [EC:3.2.1.108]\n\n GO:0004553 molecular_function hydrolase activity, hydrolyzing O-glycosyl compounds\n \"Catalysis of the hydrolysis of any O-glycosyl bond.\" [GOC:mah]\n```", "```py\n    go_id = 'GO:0000016'\n    my_data = do_request(ensembl_server, 'ontology/id', go_id)\n    for k, v in my_data.items():\n        if k == 'parents':\n            for parent in v:\n                print(parent)\n                parent_id = parent['accession']\n        else:\n            print('%s: %s' % (k, str(v)))\n    parent_data = do_request(ensembl_server, 'ontology/id', parent_id)\n    print(parent_id, len(parent_data['children']))\n    ```", "```py\n    refs = do_request(ensembl_server, 'ontology/ancestors/chart', go_id)\n    for go, entry in refs.items():\n        print(go)\n        term = entry['term']\n        print('%s %s' % (term['name'], term['definition']))\n        is_a = entry.get('is_a', [])\n        print('\\t is a: %s\\n' % ', '.join([x['accession'] for x in is_a]))\n    ```", "```py\n    def get_upper(go_id):\n        parents = {}\n        node_data = {}\n        refs = do_request(ensembl_server, 'ontology/ancestors/chart', go_id)\n        for ref, entry in refs.items():\n            my_data = do_request(ensembl_server, 'ontology/id', ref)\n            node_data[ref] = {'name': entry['term']['name'], 'children': my_data['children']}\n            try:\n                parents[ref] = [x['accession'] for x in entry['is_a']]\n            except KeyError:\n                pass  # Top of hierarchy\n        return parents, node_data\n    ```", "```py\n    parents, node_data = get_upper(go_id)\n    import pygraphviz as pgv\n    g = pgv.AGraph(directed=True)\n    for ofs, ofs_parents in parents.items():\n        ofs_text = '%s\\n(%s)' % (node_data[ofs]['name'].replace(', ', '\\n'), ofs)\n        for parent in ofs_parents:\n            parent_text = '%s\\n(%s)' % (node_data[parent]['name'].replace(', ', '\\n'), parent)\n            children = node_data[parent]['children']\n            if len(children) < 3:\n                for child in children:\n                    if child['accession'] in node_data:\n                        continue\n                    g.add_edge(parent_text, child['accession'])\n            else:\n                g.add_edge(parent_text, '...%d...' % (len(children) - 1))\n            g.add_edge(parent_text, ofs_text)\n    print(g)\n    g.graph_attr['label']='Ontology tree for Lactase activity'\n    g.node_attr['shape']='rectangle'\n    g.layout(prog='dot')\n    g.draw('graph.png')\n    ```"]