["```py\n`column1|column2 a|b|c` \n```", "```py\n`column1|column2 \"a|b\"|c` \n```", "```py\n`df = pd.DataFrame([     [\"Paul\", \"McCartney\", 1942],     [\"John\", \"Lennon\", 1940],     [\"Richard\", \"Starkey\", 1940],     [\"George\", \"Harrison\", 1943], ], columns=[\"first\", \"last\", \"birth\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `first   last       birth 0       Paul    McCartney  1942 1       John    Lennon     1940 2       Richard Starkey    1940 3       George  Harrison   1943` \n```", "```py\n`import io buf = io.StringIO() df.to_csv(buf) print(buf.getvalue())` \n```", "```py\n`,first,last,birth 0,Paul,McCartney,1942 1,John,Lennon,1940 2,Richard,Starkey,1940 3,George,Harrison,1943` \n```", "```py\n`buf.seek(0) pd.read_csv(buf, dtype_backend=\"numpy_nullable\")` \n```", "```py\n `Unnamed: 0   first    last       birth 0    0            Paul     McCartney  1942 1    1            John     Lennon     1940 2    2            Richard  Starkey    1940 3    3            George   Harrison   1943` \n```", "```py\n`buf.seek(0) pd.read_csv(buf, dtype_backend=\"numpy_nullable\", index_col=0)` \n```", "```py\n `first    last       birth 0     Paul     McCartney  1942 1     John     Lennon     1940 2     Richard  Starkey    1940 3     George   Harrison   1943` \n```", "```py\n`buf = io.StringIO() df.to_csv(buf, index=False) print(buf.getvalue())` \n```", "```py\n`first,last,birth Paul,McCartney,1942 John,Lennon,1940 Richard,Starkey,1940 George,Harrison,1943` \n```", "```py\n`df = pd.DataFrame([     [\"McCartney, Paul\", 1942],     [\"Lennon, John\", 1940],     [\"Starkey, Richard\", 1940],     [\"Harrison, George\", 1943], ], columns=[\"name\", \"birth\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `name               birth 0    McCartney, Paul    1942 1    Lennon, John       1940 2    Starkey, Richard   1940 3    Harrison, George   1943` \n```", "```py\n`buf = io.StringIO() df.to_csv(buf, index=False) print(buf.getvalue())` \n```", "```py\n`name,birth \"McCartney, Paul\",1942 \"Lennon, John\",1940 \"Starkey, Richard\",1940 \"Harrison, George\",1943` \n```", "```py\n`buf = io.StringIO() df.to_csv(buf, index=False, sep=\"|\") print(buf.getvalue())` \n```", "```py\n`name|birth McCartney, Paul|1942 Lennon, John|1940 Starkey, Richard|1940 Harrison, George|1943` \n```", "```py\n`df = pd.DataFrame({     \"col1\": [\"a\"] * 1_000,     \"col2\": [\"b\"] * 1_000,     \"col3\": [\"c\"] * 1_000, }) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df.head()` \n```", "```py\n `col1     col2    col3 0      a        b       c 1      a        b       c 2      a        b       c 3      a        b       c 4      a        b       c` \n```", "```py\n`buf = io.StringIO() df.to_csv(buf, index=False) len(buf.getvalue())` \n```", "```py\n`6015` \n```", "```py\n`buf = io.BytesIO() df.to_csv(buf, index=False, compression=\"gzip\") len(buf.getvalue())` \n```", "```py\n`69` \n```", "```py\n`df = pd.read_csv(\"data/diamonds.csv\", dtype_backend=\"numpy_nullable\", nrows=1_000) df` \n```", "```py\n `carat  cut      color  clarity  depth  table  price  x      y      z 0  0.23   Ideal    E      SI2      61.5   55.0   326    3.95   3.98   2.43 1  0.21   Premium  E      SI1      59.8   61.0   326    3.89   3.84   2.31 2  0.23   Good     E      VS1      56.9   65.0   327    4.05   4.07   2.31 3  0.29   Premium  I      VS2      62.4   58.0   334    4.2    4.23   2.63 4  0.31   Good     J      SI2      63.3   58.0   335    4.34   4.35   2.75 …  …      …        …      …        …      …      …      …      …      … 995  0.54   Ideal    D    VVS2    61.4    52.0   2897   5.3    5.34   3.26 996  0.72   Ideal    E    SI1     62.5    55.0   2897   5.69   5.74   3.57 997  0.72   Good     F    VS1     59.4    61.0   2897   5.82   5.89   3.48 998  0.74   Premium  D    VS2     61.8    58.0   2897   5.81   5.77   3.58 999  1.12   Premium  J    SI2     60.6    59.0   2898   6.68   6.61   4.03 1000 rows × 10 columns` \n```", "```py\n`df.info()` \n```", "```py\n`<class 'pandas.core.frame.DataFrame'> RangeIndex: 1000 entries, 0 to 999 Data columns (total 10 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----  0   carat    1000 non-null   Float64 1   cut      1000 non-null   string 2   color    1000 non-null   string 3   clarity  1000 non-null   string 4   depth    1000 non-null   Float64 5   table    1000 non-null   Float64 6   price    1000 non-null   Int64  7   x        1000 non-null   Float64 8   y        1000 non-null   Float64 9   z        1000 non-null   Float64 dtypes: Float64(6), Int64(1), string(3) memory usage: 85.1 KB` \n```", "```py\n`df[\"price\"].describe()` \n```", "```py\n`count       1000.0 mean       2476.54 std      839.57562 min          326.0 25%         2777.0 50%         2818.0 75%         2856.0 max         2898.0 Name: price, dtype: Float64` \n```", "```py\n`df[\"carat\"].describe()` \n```", "```py\n`count      1000.0 mean      0.68928 std      0.195291 min           0.2 25%           0.7 50%          0.71 75%          0.79 max          1.27 Name: carat, dtype: Float64` \n```", "```py\n`df2 = pd.read_csv(     \"data/diamonds.csv\",     nrows=1_000,     dtype={         \"carat\": pd.Float32Dtype(),         \"cut\": pd.StringDtype(),         \"color\": pd.StringDtype(),         \"clarity\": pd.StringDtype(),         \"depth\": pd.Float32Dtype(),         \"table\": pd.Float32Dtype(),         \"price\": pd.Int16Dtype(),         \"x\": pd.Float32Dtype(),         \"y\": pd.Float32Dtype(),         \"z\": pd.Float32Dtype(),     } ) df2.info()` \n```", "```py\n`<class 'pandas.core.frame.DataFrame'> RangeIndex: 1000 entries, 0 to 999 Data columns (total 10 columns): #   Column   Non-Null Count  Dtype  ---  ------   --------------  -----  0   carat    1000 non-null   Float32 1   cut      1000 non-null   string 2   color    1000 non-null   string 3   clarity  1000 non-null   string 4   depth    1000 non-null   Float32 5   table    1000 non-null   Float32 6   price    1000 non-null   Int16  7   x        1000 non-null   Float32 8   y        1000 non-null   Float32 9   z        1000 non-null   Float32 dtypes: Float32(6), Int16(1), string(3) memory usage: 55.8 KB` \n```", "```py\n`df.describe()` \n```", "```py\n `carat    depth    table     price      x         y         z count   1000.0   1000.0\t  1000.0    1000.0     1000.0    1000.0    1000.0 mean    0.68928  61.7228  57.7347   2476.54    5.60594   5.59918   3.45753 std     0.195291 1.758879 2.467946  839.57562  0.625173  0.611974  0.389819 min     0.2      53.0     52.0      326.0      3.79      3.75      2.27 25%     0.7      60.9     56.0      2777.0     5.64      5.63      3.45 50%     0.71     61.8     57.0      2818.0     5.77      5.76      3.55 75%     0.79     62.6     59.0      2856.0     5.92      5.91      3.64 max     1.27     69.5     70.0      2898.0     7.12      7.05      4.33` \n```", "```py\n`df2.describe()` \n```", "```py\n `carat    depth     table      price      x        y        z count  1000.0   1000.0    1000.0     1000.0     1000.0   1000.0   1000.0 mean   0.68928  61.722801 57.734699  2476.54    5.60594  5.59918  3.45753 std    0.195291 1.758879  2.467946   839.57562  0.625173 0.611974 0.389819 min    0.2      53.0      52.0       326.0      3.79     3.75     2.27 25%    0.7      60.900002 56.0       2777.0     5.64     5.63     3.45 50%    0.71     61.799999 57.0       2818.0     5.77     5.76     3.55 75%    0.79     62.599998 59.0       2856.0     5.92     5.91     3.64 max    1.27     69.5      70.0       2898.0     7.12     7.05     4.33` \n```", "```py\n`df2[\"cut\"].unique()` \n```", "```py\n`<StringArray> ['Ideal', 'Premium', 'Good', 'Very Good', 'Fair'] Length: 5, dtype: string` \n```", "```py\n`df2[\"color\"].unique()` \n```", "```py\n`<StringArray> ['E', 'I', 'J', 'H', 'F', 'G', 'D'] Length: 7, dtype: string` \n```", "```py\n`df2[\"clarity\"].unique()` \n```", "```py\n`<StringArray> ['SI2', 'SI1', 'VS1', 'VS2', 'VVS2', 'VVS1', 'I1', 'IF'] Length: 8, dtype: string` \n```", "```py\n`df3 = pd.read_csv(     \"data/diamonds.csv\",     nrows=1_000,     dtype={         \"carat\": pd.Float32Dtype(),         \"cut\": pd.StringDtype(),         \"color\": pd.StringDtype(),         \"clarity\": pd.StringDtype(),         \"depth\": pd.Float32Dtype(),         \"table\": pd.Float32Dtype(),         \"price\": pd.Int16Dtype(),         \"x\": pd.Float32Dtype(),         \"y\": pd.Float32Dtype(),         \"z\": pd.Float32Dtype(),     } ) cat_cols = [\"cut\", \"color\", \"clarity\"] df3[cat_cols] = df3[cat_cols].astype(pd.CategoricalDtype()) df3.info()` \n```", "```py\n`<class 'pandas.core.frame.DataFrame'> RangeIndex: 1000 entries, 0 to 999 Data columns (total 10 columns): #   Column   Non-Null Count  Dtype   ---  ------   --------------  -----   0   carat    1000 non-null   Float32 1   cut      1000 non-null   category 2   color    1000 non-null   category 3   clarity  1000 non-null   category 4   depth    1000 non-null   Float32 5   table    1000 non-null   Float32 6   price    1000 non-null   Int16   7   x        1000 non-null   Float32 8   y        1000 non-null   Float32 9   z        1000 non-null   Float32 dtypes: Float32(6), Int16(1), category(3) memory usage: 36.2 KB` \n```", "```py\n`dtypes = {  # does not include x, y, or z     \"carat\": pd.Float32Dtype(),     \"cut\": pd.StringDtype(),     \"color\": pd.StringDtype(),     \"clarity\": pd.StringDtype(),     \"depth\": pd.Float32Dtype(),     \"table\": pd.Float32Dtype(),     \"price\": pd.Int16Dtype(), } df4 = pd.read_csv(     \"data/diamonds.csv\",     nrows=1_000,     dtype=dtypes,     usecols=dtypes.keys(), ) cat_cols = [\"cut\", \"color\", \"clarity\"] df4[cat_cols] = df4[cat_cols].astype(pd.CategoricalDtype()) df4.info()` \n```", "```py\n`<class 'pandas.core.frame.DataFrame'> RangeIndex: 1000 entries, 0 to 999 Data columns (total 7 columns): #   Column   Non-Null Count  Dtype   ---  ------   --------------  -----   0   carat    1000 non-null   Float32 1   cut      1000 non-null   category 2   color    1000 non-null   category 3   clarity  1000 non-null   category 4   depth    1000 non-null   Float32 5   table    1000 non-null   Float32 6   price    1000 non-null   Int16   dtypes: Float32(3), Int16(1), category(3) memory usage: 21.5 KB` \n```", "```py\n`dtypes = {  # does not include x, y, or z     \"carat\": pd.Float32Dtype(),     \"cut\": pd.StringDtype(),     \"color\": pd.StringDtype(),     \"clarity\": pd.StringDtype(),     \"depth\": pd.Float32Dtype(),     \"table\": pd.Float32Dtype(),     \"price\": pd.Int16Dtype(), } df_iter = pd.read_csv(     \"data/diamonds.csv\",     nrows=1_000,     dtype=dtypes,     usecols=dtypes.keys(),     chunksize=200 ) for df in df_iter:     cat_cols = [\"cut\", \"color\", \"clarity\"]     df[cat_cols] = df[cat_cols].astype(pd.CategoricalDtype())     print(f\"processed chunk of shape {df.shape}\")` \n```", "```py\n`processed chunk of shape (200, 7) processed chunk of shape (200, 7) processed chunk of shape (200, 7) processed chunk of shape (200, 7) processed chunk of shape (200, 7)` \n```", "```py\n`def startswith_c(column_name: str) -> bool:     return column_name.startswith(\"c\") pd.read_csv(     \"data/diamonds.csv\",     dtype_backend=\"numpy_nullable\",     usecols=startswith_c, )` \n```", "```py\n `carat   cut       color  clarity 0      0.23    Ideal     E      SI2 1      0.21    Premium   E      SI1 2      0.23    Good      E      VS1 3      0.29    Premium   I      VS2 4      0.31    Good      J      SI2 …      …       …         …      … 53935  0.72    Ideal     D      SI1 53936  0.72    Good      D      SI1 53937  0.7     Very Good D      SI1 53938  0.86    Premium   H      SI2 53939  0.75    Ideal     D      SI2 53940 rows × 4 columns` \n```", "```py\n`python -m pip install openpyxl` \n```", "```py\n`df = pd.DataFrame([     [\"Paul\", \"McCartney\", 1942],     [\"John\", \"Lennon\", 1940],     [\"Richard\", \"Starkey\", 1940],     [\"George\", \"Harrison\", 1943], ], columns=[\"first\", \"last\", \"birth\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `first     last       birth 0    Paul      McCartney  1942 1    John      Lennon     1940 2    Richard   Starkey    1940 3    George    Harrison   1943` \n```", "```py\n`import io buf = io.BytesIO() df.to_excel(buf)` \n```", "```py\n`buf.seek(0) pd.read_excel(buf, dtype_backend=\"numpy_nullable\")` \n```", "```py\n `Unnamed: 0   first   last       birth 0    0            Paul    McCartney  1942 1    1            John    Lennon     1940 2    2            Richard Starkey    1940 3    3            George  Harrison   1943` \n```", "```py\n`buf.seek(0) pd.read_excel(buf, dtype_backend=\"numpy_nullable\", index_col=0)` \n```", "```py\n `first    last       birth 0    Paul     McCartney  1942 1    John     Lennon     1940 2    Richard  Starkey    1940 3    George   Harrison   1943` \n```", "```py\n`buf = io.BytesIO() df.to_excel(buf, index=False) buf.seek(0) pd.read_excel(buf, dtype_backend=\"numpy_nullable\")` \n```", "```py\n `first     last       birth 0    Paul      McCartney  1942 1    John      Lennon     1940 2    Richard   Starkey    1940 3    George    Harrison   1943` \n```", "```py\n`buf.seek(0) dtypes = {     \"first\": pd.StringDtype(),     \"last\": pd.StringDtype(),     \"birth\": pd.Int16Dtype(), } df = pd.read_excel(buf, dtype=dtypes) df.dtypes` \n```", "```py\n`first    string[python] last     string[python] birth             Int16 dtype: object` \n```", "```py\n`pd.read_excel(     \"data/beatles.xlsx\",     dtype_backend=\"numpy_nullable\",     sheet_name=\"the_data\",     skiprows=4,     usecols=\"C:E\", )` \n```", "```py\n `first     last       birth 0    Paul      McCartney  1942 1    John      Lennon     1940 2    Richard   Starkey    1940 3    George    Harrison   1943` \n```", "```py\n`pd.read_excel(     \"data/beatles.xlsx\",     dtype_backend=\"numpy_nullable\",     sheet_name=\"the_data\",     skiprows=4,     usecols=[\"first\", \"last\", \"birth\"], )` \n```", "```py\n `first    last      birth 0    Paul     McCartney 1942 1    John     Lennon    1940 2    Richard  Starkey   1940 3    George   Harrison  1943` \n```", "```py\n`df = pd.read_excel(     \"data/hierarchical.xlsx\",     dtype_backend=\"numpy_nullable\",     index_col=[0, 1],     header=[0, 1], ) df` \n```", "```py\n `Year    2024            2025         Quarter Q1      Q2      Q1      Q2 Region  Sub-Region America East    1       2       4       8         West    16      32      64      128         South   256     512     1024    4096 Europe  West    8192    16384   32768   65536         East    131072  262144  524288  1048576` \n```", "```py\n`df.loc[(slice(None), \"East\"), (slice(None), \"Q2\")]` \n```", "```py\n `Year    2024    2025         Quarter Q2      Q2 Region  Sub-Region America East    2       8 Europe  East    262144  1048576` \n```", "```py\n`python -m pip install sqlalchemy` \n```", "```py\n`import sqlalchemy as sa engine = sa.create_engine(\"sqlite:///:memory:\")` \n```", "```py\n`df = pd.DataFrame([     [\"dog\", 4],     [\"cat\", 4], ], columns=[\"animal\", \"num_legs\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df.to_sql(\"table_name\", engine, index=False)` \n```", "```py\n`2` \n```", "```py\n`pd.read_sql(\"table_name\", engine, dtype_backend=\"numpy_nullable\")` \n```", "```py\n `animal    num_legs 0    dog       4 1    cat       4` \n```", "```py\n`pd.read_sql(     \"SELECT SUM(num_legs) AS total_legs FROM table_name\",     engine,     dtype_backend=\"numpy_nullable\" )` \n```", "```py\n `total_legs 0     8` \n```", "```py\n`df = pd.DataFrame([     [\"dog\", 4],     [\"cat\", 4],     [\"human\", 2], ], columns=[\"animal\", \"num_legs\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df.to_sql(\"table_name\", engine, index=False, if_exists=\"replace\")` \n```", "```py\n`3` \n```", "```py\n`new_data = pd.DataFrame([[\"centipede\", 100]], columns=[\"animal\", \"num_legs\"]) new_data.to_sql(\"table_name\", engine, index=False, if_exists=\"append\") pd.read_sql(\"table_name\", engine, dtype_backend=\"numpy_nullable\")` \n```", "```py\n `animal     num_legs 0    dog        4 1    cat        4 2    human      2 3    centipede  100` \n```", "```py\n`python -m pip install adbc-driver-sqlite` \n```", "```py\n`from adbc_driver_sqlite import dbapi df = pd.DataFrame([     [\"dog\", 4],     [\"cat\", 4],     [\"human\", 2], ], columns=[\"animal\", \"num_legs\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `animal   num_legs 0     dog      4 1     cat      4 2     human    2` \n```", "```py\n`with dbapi.connect(\"file::memory:\") as conn:     df.to_sql(\"table_name\", conn, index=False, if_exists=\"replace\")     df = pd.read_sql(         \"SELECT * FROM table_name\",         conn,         dtype_backend=\"numpy_nullable\",     ) df` \n```", "```py\n `animal    num_legs 0    dog       4 1    cat       4 2    human     2` \n```", "```py\n`import timeit import sqlalchemy as sa np.random.seed(42) df = pd.DataFrame(     np.random.randn(10_000, 10),     columns=list(\"abcdefghij\") ) with sa.create_engine(\"sqlite:///:memory:\").connect() as conn:     func = lambda: df.to_sql(\"test_table\", conn, if_exists=\"replace\")     print(timeit.timeit(func, number=100))` \n```", "```py\n`4.898935955003253` \n```", "```py\n`from adbc_driver_sqlite import dbapi with dbapi.connect(\"file::memory:\") as conn:     func = lambda: df.to_sql(\"test_table\", conn, if_exists=\"replace\")     print(timeit.timeit(func, number=100))` \n```", "```py\n`0.7935214300014195` \n```", "```py\n`import io buf = io.BytesIO() df = pd.DataFrame([     [\"Paul\", \"McCartney\", 1942],     [\"John\", \"Lennon\", 1940],     [\"Richard\", \"Starkey\", 1940],     [\"George\", \"Harrison\", 1943], ], columns=[\"first\", \"last\", \"birth\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `first    last       birth 0     Paul     McCartney  1942 1     John     Lennon     1940 2     Richard  Starkey    1940 3     George   Harrison   1943` \n```", "```py\n`df.to_parquet(buf, index=False)` \n```", "```py\n`buf.seek(0) pd.read_parquet(buf)` \n```", "```py\n `first    last       birth 0     Paul     McCartney  1942 1     John     Lennon     1940 2     Richard  Starkey    1940 3     George   Harrison   1943` \n```", "```py\n`df[\"birth\"] = df[\"birth\"].astype(pd.UInt16Dtype()) df.dtypes` \n```", "```py\n`first    string[python] last     string[python] birth            UInt16 dtype: object` \n```", "```py\n`buf = io.BytesIO() df.to_parquet(buf, index=False) buf.seek(0) pd.read_parquet(buf).dtypes` \n```", "```py\n`first    string[python] last     string[python] birth            UInt16 dtype: object` \n```", "```py\n`suboptimal_df = pd.DataFrame([     [0, \"foo\"],     [1, \"bar\"],     [2, \"baz\"], ], columns=[\"int_col\", \"str_col\"]) buf = io.BytesIO() suboptimal_df.to_parquet(buf, index=False) buf.seek(0) pd.read_parquet(buf, dtype_backend=\"numpy_nullable\").dtypes` \n```", "```py\n`int_col             Int64 str_col    string[python] dtype: object` \n```", "```py\n`Partitions  2022/    q1_sales.parquet    q2_sales.parquet  2023/    q1_sales.parquet    q2_sales.parquet` \n```", "```py\n`pd.read_parquet(     \"data/partitions/2022/q1_sales.parquet\", )` \n```", "```py\n `year   quarter   region   sales 0     2022   Q1        America  1 1     2022   Q1        Europe   2` \n```", "```py\n`pd.read_parquet(\"data/partitions/\")` \n```", "```py\n `year    quarter  region    sales 0    2022    Q1       America   1 1    2022    Q1       Europe    2 2    2022    Q2       America   4 3    2022    Q2       Europe    8 4    2023    Q1       America   16 5    2023    Q1       Europe    32 6    2023    Q2       America   64 7    2023    Q2       Europe    128` \n```", "```py\n`pd.read_parquet(     \"data/partitions/\",     filters=[(\"region\", \"==\", \"Europe\")], )` \n```", "```py\n `year    quarter   region   sales 0    2022    Q1        Europe   2 1    2022    Q2        Europe   8 2    2023    Q1        Europe   32 3    2023    Q2        Europe   128` \n```", "```py\n`import json beatles = {     \"first\": [\"Paul\", \"John\", \"Richard\", \"George\",],     \"last\": [\"McCartney\", \"Lennon\", \"Starkey\", \"Harrison\",],     \"birth\": [1942, 1940, 1940, 1943], } serialized = json.dumps(beatles) print(f\"serialized values are: {serialized}\") deserialized = json.loads(serialized) print(f\"deserialized values are: {deserialized}\")` \n```", "```py\n`serialized values are: {\"first\": [\"Paul\", \"John\", \"Richard\", \"George\"], \"last\": [\"McCartney\", \"Lennon\", \"Starkey\", \"Harrison\"], \"birth\": [1942, 1940, 1940, 1943]} deserialized values are: {'first': ['Paul', 'John', 'Richard', 'George'], 'last': ['McCartney', 'Lennon', 'Starkey', 'Harrison'], 'birth': [1942, 1940, 1940, 1943]}` \n```", "```py\n`import io data = io.StringIO(serialized) pd.read_json(data, dtype_backend=\"numpy_nullable\")` \n```", "```py\n `first    last       birth 0    Paul     McCartney  1942 1    John     Lennon     1940 2    Richard  Starkey    1940 3    George   Harrison   1943` \n```", "```py\n`df = pd.DataFrame(beatles) print(df.to_json())` \n```", "```py\n`{\"first\":{\"0\":\"Paul\",\"1\":\"John\",\"2\":\"Richard\",\"3\":\"George\"},\"last\":{\"0\":\"McCartney\",\"1\":\"Lennon\",\"2\":\"Starkey\",\"3\":\"Harrison\"},\"birth\":{\"0\":1942,\"1\":1940,\"2\":1940,\"3\":1943}}` \n```", "```py\n`df = pd.DataFrame(beatles, index=[\"row 0\", \"row 1\", \"row 2\", \"row 3\"]) df = df.convert_dtypes(dtype_backend=\"numpy_nullable\") df` \n```", "```py\n `first    last       birth row 0  Paul     McCartney  1942 row 1  John     Lennon     1940 row 2  Richard  Starkey    1940 row 3  George   Harrison   1943` \n```", "```py\n`serialized = df.to_json(orient=\"columns\") print(f'Length of orient=\"columns\": {len(serialized)}') serialized[:100]` \n```", "```py\n`Length of orient=\"columns\": 221 {\"first\":{\"row 0\":\"Paul\",\"row 1\":\"John\",\"row 2\":\"Richard\",\"row 3\":\"George\"},\"last\":{\"row 0\":\"McCartn` \n```", "```py\n`pd.read_json(     io.StringIO(serialized),     orient=\"columns\",     dtype_backend=\"numpy_nullable\" )` \n```", "```py\n `first    last       birth row 0  Paul     McCartney  1942 row 1  John     Lennon     1940 row 2  Richard  Starkey    1940 row 3  George   Harrison   1943` \n```", "```py\n`serialized = df.to_json(orient=\"records\") print(f'Length of orient=\"records\": {len(serialized)}') serialized[:100]` \n```", "```py\n`Length of orient=\"records\": 196 [{\"first\":\"Paul\",\"last\":\"McCartney\",\"birth\":1942},{\"first\":\"John\",\"last\":\"Lennon\",\"birth\":1940},{\"fi` \n```", "```py\n`pd.read_json(     io.StringIO(serialized),     orient=\"orient\",     dtype_backend=\"numpy_nullable\" )` \n```", "```py\n `first    last       birth 0     Paul     McCartney  1942 1     John     Lennon     1940 2     Richard  Starkey    1940 3     George   Harrison   1943` \n```", "```py\n`serialized = df.to_json(orient=\"split\") print(f'Length of orient=\"split\": {len(serialized)}') serialized[:100]` \n```", "```py\n`Length of orient=\"split\": 190 {\"columns\":[\"first\",\"last\",\"birth\"],\"index\":[\"row 0\",\"row 1\",\"row 2\",\"row 3\"],\"data\":[[\"Paul\",\"McCar` \n```", "```py\n`pd.read_json(     io.StringIO(serialized),     orient=\"split\",     dtype_backend=\"numpy_nullable\", )` \n```", "```py\n `first    last       birth row 0  Paul     McCartney  1942 row 1  John     Lennon     1940 row 2  Richard  Starkey    1940 row 3  George   Harrison   1943` \n```", "```py\n`serialized = df.to_json(orient=\"index\") print(f'Length of orient=\"index\": {len(serialized)}') serialized[:100]` \n```", "```py\n`Length of orient=\"index\": 228 {\"row 0\":{\"first\":\"Paul\",\"last\":\"McCartney\",\"birth\":1942},\"row 1\":{\"first\":\"John\",\"last\":\"Lennon\",\"b` \n```", "```py\n`pd.read_json(     io.StringIO(serialized),     orient=\"index\",     dtype_backend=\"numpy_nullable\", )` \n```", "```py\n `first    last       birth row 0  Paul     McCartney  1942 row 1  John     Lennon     1940 row 2  Richard  Starkey    1940 row 3  George   Harrison   1943` \n```", "```py\n`serialized = df.to_json(orient=\"values\") print(f'Length of orient=\"values\": {len(serialized)}') serialized[:100]` \n```", "```py\n`Length of orient=\"values\": 104 [[\"Paul\",\"McCartney\",1942],[\"John\",\"Lennon\",1940],[\"Richard\",\"Starkey\",1940],[\"George\",\"Harrison\",19` \n```", "```py\n`pd.read_json(     io.StringIO(serialized),     orient=\"values\",     dtype_backend=\"numpy_nullable\", )` \n```", "```py\n `0        1          2 0    Paul     McCartney  1942 1    John     Lennon     1940 2    Richard  Starkey    1940 3    George   Harrison   1943` \n```", "```py\n`serialized = df.to_json(orient=\"table\") print(f'Length of orient=\"table\": {len(serialized)}') serialized[:100]` \n```", "```py\n`Length of orient=\"table\": 524 {\"schema\":{\"fields\":[{\"name\":\"index\",\"type\":\"string\"},{\"name\":\"first\",\"type\":\"any\",\"extDtype\":\"strin` \n```", "```py\n`df[\"birth\"] = df[\"birth\"].astype(pd.UInt16Dtype()) serialized = df.to_json(orient=\"table\") pd.read_json(     io.StringIO(serialized),     orient=\"table\", ).dtypes` \n```", "```py\n`first    string[python] last     string[python] birth            UInt16 dtype: object` \n```", "```py\n`data = {     \"records\": [{         \"name\": \"human\",         \"characteristics\": {             \"num_leg\": 2,             \"num_eyes\": 2         }     }, {         \"name\": \"dog\",         \"characteristics\": {             \"num_leg\": 4,             \"num_eyes\": 2         }     }, {         \"name\": \"horseshoe crab\",         \"characteristics\": {             \"num_leg\": 10,             \"num_eyes\": 10         }     }],     \"type\": \"animal\",     \"pagination\": {         \"next\": \"23978sdlkusdf97234u2io\",         \"has_more\": 1     } }` \n```", "```py\n`pd.json_normalize(     data,     record_path=\"records\" ).convert_dtypes(dtype_backend=\"numpy_nullable\")` \n```", "```py\n `name            characteristics.num_leg  characteristics.num_eyes 0   human           2                        2 1   dog             4                        2 2   horseshoe crab  10                       10` \n```", "```py\n`pd.json_normalize(     data,     record_path=\"records\",     meta=\"type\" ).convert_dtypes(dtype_backend=\"numpy_nullable\")` \n```", "```py\n `name    characteristics.num_leg  characteristics.num_eyes  type 0   human   2                        2                         animal 1   dog     4                        2                         animal 2   horseshoe     crab    10                       10                        animal` \n```", "```py\n`python -m pip install lxml` \n```", "```py\n`url = \"https://en.wikipedia.org/wiki/The_Beatles_discography\" dfs = pd.read_html(url, dtype_backend=\"numpy_nullable\") len(dfs)` \n```", "```py\n`60` \n```", "```py\n`dfs[0]` \n```", "```py\n `The Beatles discography   The Beatles discography.1 0   The Beatles in 1965       The Beatles in 1965 1   Studio albums             12 (UK), 17 (US) 2   Live albums               5 3   Compilation albums        51 4   Video albums              22 5   Music videos              53 6   EPs                       36 7   Singles                   63 8   Mash-ups                  2 9   Box sets                  17` \n```", "```py\n`<table class=\"wikipedia plainrowheaders\" style=\"text-align:center;\">   <caption>List of studio albums, with selected chart positions and certification   </caption>   <tbody>     <tr>       <th rowspan=\"2\" scope=\"col\" style=\"width:20em;\">Title</th>       <th rowspan=\"2\" scope=\"col\" style=\"width:20em;\">Album details<sup id=\"cite_ref-8\" class=\"reference\"><a href=\"#cite_note-8\">[A]</a></sup></th>       ...     </tr>   </tbody>` \n```", "```py\n`url = \"https://en.wikipedia.org/wiki/The_Beatles_discography\" dfs = pd.read_html(     url,     match=r\"List of studio albums\",     dtype_backend=\"numpy_nullable\", ) print(f\"Number of tables returned was: {len(dfs)}\") dfs[0].filter(regex=r\"Title|UK|AUS|CAN\").head()` \n```", "```py\n `Title                  Peak chart positions                       Title       UK [8][9]   AUS [10]    CAN [11] 0          Please Please Me               1          —          — 1       With the Beatles[B]               1          —          — 2        A Hard Day's Night               1          1          — 3          Beatles for Sale               1          1          — 4                     Help!               1          1          —` \n```", "```py\n`url = \"https://en.wikipedia.org/wiki/The_Beatles_discography\" dfs = pd.read_html(     url,     match=\"List of studio albums\",     header=1,     dtype_backend=\"numpy_nullable\", ) dfs[0].filter(regex=r\"Title|UK|AUS|CAN\").head()` \n```", "```py\n `Title      UK [8][9]   AUS [10]   CAN [11] 0          Please Please Me              1         —           — 1       With the Beatles[B]              1         —           — 2        A Hard Day's Night              1         1           — 3          Beatles for Sale              1         1           — 4                     Help!              1         1           —` \n```", "```py\n`url = \"https://en.wikipedia.org/wiki/The_Beatles_discography\" dfs = pd.read_html(     url,     match=\"List of studio albums\",     header=1,     na_values=[\"—\"],     dtype_backend=\"numpy_nullable\", ) dfs[0].filter(regex=r\"Title|UK|AUS|CAN\").head()` \n```", "```py\n `Title                 UK [8][9]   AUS [10]   CAN [11] 0       Please Please Me              1       <NA>       <NA> 1       With the Beatles[B]           1       <NA>       <NA> 2       A Hard Day's Night            1          1       <NA> 3       Beatles for Sale              1          1       <NA> 4       Help!                         1          1       <NA>` \n```", "```py\n`from collections import namedtuple Member = namedtuple(\"Member\", [\"first\", \"last\", \"birth\"]) ser = pd.Series([     Member(\"Paul\", \"McCartney\", 1942),     Member(\"John\", \"Lennon\", 1940),     Member(\"Richard\", \"Starkey\", 1940),     Member(\"George\", \"Harrison\", 1943), ]) ser` \n```", "```py\n`0     (Paul, McCartney, 1942) 1        (John, Lennon, 1940) 2    (Richard, Starkey, 1940) 3    (George, Harrison, 1943) dtype: object` \n```", "```py\n`import io buf = io.BytesIO() ser.to_pickle(buf)` \n```", "```py\n`buf.seek(0) ser = pd.read_pickle(buf) ser` \n```", "```py\n`0     (Paul, McCartney, 1942) 1        (John, Lennon, 1940) 2    (Richard, Starkey, 1940) 3    (George, Harrison, 1943) dtype: object` \n```", "```py\n`ser.iloc[0]` \n```", "```py\n`Member(first='Paul', last='McCartney', birth=1942)` \n```"]