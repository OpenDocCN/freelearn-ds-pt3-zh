["```py\nconda install –c bioconda dendropy\n```", "```py\n    import dendropy\n    from dendropy.interop import genbank\n    def get_ebov_2014_sources():\n        #EBOV_2014\n        #yield 'EBOV_2014', genbank.GenBankDna(id_range=(233036, 233118), prefix='KM')\n        yield 'EBOV_2014', genbank.GenBankDna(id_range=(34549, 34563), prefix='KM0')\n    def get_other_ebov_sources():\n        #EBOV other\n        yield 'EBOV_1976', genbank.GenBankDna(ids=['AF272001', 'KC242801'])\n        yield 'EBOV_1995', genbank.GenBankDna(ids=['KC242796', 'KC242799'])\n        yield 'EBOV_2007', genbank.GenBankDna(id_range=(84, 90), prefix='KC2427')\n    def get_other_ebolavirus_sources():\n        #BDBV\n        yield 'BDBV', genbank.GenBankDna(id_range=(3, 6), prefix='KC54539')\n        yield 'BDBV', genbank.GenBankDna(ids=['FJ217161']) #RESTV\n        yield 'RESTV', genbank.GenBankDna(ids=['AB050936', 'JX477165', 'JX477166',  'FJ621583', 'FJ621584', 'FJ621585'])\n        #SUDV\n        yield 'SUDV', genbank.GenBankDna(ids=['KC242783', 'AY729654', 'EU338380', 'JN638998', 'FJ968794', 'KC589025', 'JN638998'])\n        #yield 'SUDV', genbank.GenBankDna(id_range=(89, 92), prefix='KC5453')\n        #TAFV\n        yield 'TAFV', genbank.GenBankDna(ids=['FJ217162'])\n    ```", "```py\n    other = open('other.fasta', 'w')\n    sampled = open('sample.fasta', 'w')\n    for species, recs in get_other_ebolavirus_sources():\n        tn = dendropy.TaxonNamespace()\n        char_mat = recs.generate_char_matrix(taxon_namespace=tn,\n            gb_to_taxon_fn=lambda gb: tn.require_taxon(label='%s_%s' % (species, gb.accession)))\n        char_mat.write_to_stream(other, 'fasta')\n        char_mat.write_to_stream(sampled, 'fasta')\n    other.close()\n    ebov_2014 = open('ebov_2014.fasta', 'w')\n    ebov = open('ebov.fasta', 'w')\n    for species, recs in get_ebov_2014_sources():\n        tn = dendropy.TaxonNamespace()\n        char_mat = recs.generate_char_matrix(taxon_namespace=tn,\n            gb_to_taxon_fn=lambda gb: tn.require_taxon(label='EBOV_2014_%s' % gb.accession))\n        char_mat.write_to_stream(ebov_2014, 'fasta')\n        char_mat.write_to_stream(sampled, 'fasta')\n        char_mat.write_to_stream(ebov, 'fasta')\n    ebov_2014.close()\n    ebov_2007 = open('ebov_2007.fasta', 'w')\n    for species, recs in get_other_ebov_sources():\n        tn = dendropy.TaxonNamespace()\n        char_mat = recs.generate_char_matrix(taxon_namespace=tn,\n            gb_to_taxon_fn=lambda gb: tn.require_taxon(label='%s_%s' % (species, gb.accession)))\n        char_mat.write_to_stream(ebov, 'fasta')\n        char_mat.write_to_stream(sampled, 'fasta')\n        if species == 'EBOV_2007':\n            char_mat.write_to_stream(ebov_2007, 'fasta')\n    ebov.close()\n    ebov_2007.close()\n    sampled.close()\n    ```", "```py\n    my_genes = ['NP', 'L', 'VP35', 'VP40']\n    def dump_genes(species, recs, g_dls, p_hdls):\n        for rec in recs:\n            for feature in rec.feature_table:\n                if feature.key == 'CDS':\n                    gene_name = None\n                    for qual in feature.qualifiers:\n                        if qual.name == 'gene':\n                            if qual.value in my_genes:\n                                gene_name = qual.value\n                        elif qual.name == 'translation':\n                            protein_translation = qual.value\n                    if gene_name is not None:\n                        locs = feature.location.split('.')\n                        start, end = int(locs[0]), int(locs[-1])\n                        g_hdls[gene_name].write('>%s_%s\\n' % (species, rec.accession))\n                        p_hdls[gene_name].write('>%s_%s\\n' % (species, rec.accession))\n                        g_hdls[gene_name].write('%s\\n' % rec.sequence_text[start - 1 : end])\n                        p_hdls[gene_name].write('%s\\n' % protein_translation)\n    g_hdls = {}\n    p_hdls = {}\n    for gene in my_genes:\n        g_hdls[gene] = open('%s.fasta' % gene, 'w')\n        p_hdls[gene] = open('%s_P.fasta' % gene, 'w')\n    for species, recs in get_other_ebolavirus_sources():\n        if species in ['RESTV', 'SUDV']:\n            dump_genes(species, recs, g_hdls, p_hdls)\n    for gene in my_genes:\n        g_hdls[gene].close()\n        p_hdls[gene].close()\n    ```", "```py\n    def describe_seqs(seqs):\n        print('Number of sequences: %d' % len(seqs.taxon_namespace))\n        print('First 10 taxon sets: %s' % ' '.join([taxon.label for taxon in seqs.taxon_namespace[:10]]))\n        lens = []\n        for tax, seq in seqs.items():\n            lens.append(len([x for x in seq.symbols_as_list() if x != '-']))\n        print('Genome length: min %d, mean %.1f, max %d' % (min(lens), sum(lens) / len(lens), max(lens)))\n    ```", "```py\n    ebov_seqs = dendropy.DnaCharacterMatrix.get_from_path('ebov.fasta', schema='fasta', data_type='dna')\n    print('EBOV')\n    describe_seqs(ebov_seqs)\n    del ebov_seqs\n    ```", "```py\n    print('ebolavirus sequences')\n    ebolav_seqs = dendropy.DnaCharacterMatrix.get_from_path('other.fasta', schema='fasta', data_type='dna')\n    describe_seqs(ebolav_seqs)\n    from collections import defaultdict\n    species = defaultdict(int)\n    for taxon in ebolav_seqs.taxon_namespace:\n        toks = taxon.label.split('_')\n        my_species = toks[0]\n        if my_species == 'EBOV':\n            ident = '%s (%s)' % (my_species, toks[1])\n        else:\n            ident = my_species\n        species[ident] += 1\n    for my_species, cnt in species.items():\n        print(\"%20s: %d\" % (my_species, cnt))\n    del ebolav_seqs\n    ```", "```py\n    gene_length = {}\n    my_genes = ['NP', 'L', 'VP35', 'VP40']\n    for name in my_genes:\n        gene_name = name.split('.')[0]\n        seqs =    \n    dendropy.DnaCharacterMatrix.get_from_path('%s.fasta' % name, schema='fasta', data_type='dna')\n        gene_length[gene_name] = []\n        for tax, seq in seqs.items():\n            gene_length[gene_name].append(len([x for x in  seq.symbols_as_list() if x != '-'])\n    for gene, lens in gene_length.items():\n        print ('%6s: %d' % (gene, sum(lens) / len(lens)))\n    ```", "```py\nNP: 2218\nL: 6636\nVP35: 990\nVP40: 988\n```", "```py\nconda install –c bioconda mafft trimal muscle=3.8\n```", "```py\n    from Bio.Align.Applications import MafftCommandline\n    mafft_cline = MafftCommandline(input='sample.fasta', ep=0.123, reorder=True, maxiterate=1000, localpair=True)\n    print(mafft_cline)\n    stdout, stderr = mafft_cline()\n    with open('align.fasta', 'w') as w:\n        w.write(stdout)\n    ```", "```py\n    os.system('trimal -automated1 -in align.fasta -out trim.fasta -fasta')\n    ```", "```py\n    from Bio.Align.Applications import MuscleCommandline\n    my_genes = ['NP', 'L', 'VP35', 'VP40']\n    for gene in my_genes:\n        muscle_cline = MuscleCommandline(input='%s_P.fasta' % gene)\n        print(muscle_cline)\n        stdout, stderr = muscle_cline()\n        with open('%s_P_align.fasta' % gene, 'w') as w:\n        w.write(stdout)\n    ```", "```py\n    from Bio import SeqIO\n    from Bio.Seq import Seq\n    from Bio.SeqRecord import SeqRecord\n    for gene in my_genes:\n        gene_seqs = {}\n        unal_gene = SeqIO.parse('%s.fasta' % gene, 'fasta')\n        for rec in unal_gene:\n            gene_seqs[rec.id] = rec.seq\n        al_prot = SeqIO.parse('%s_P_align.fasta' % gene, 'fasta')\n        al_genes = []\n        for protein in al_prot:\n            my_id = protein.id\n            seq = ''\n            pos = 0\n            for c in protein.seq:\n                if c == '-':\n                    seq += '---'\n                else:\n                    seq += str(gene_seqs[my_id][pos:pos + 3])\n                    pos += 3\n            al_genes.append(SeqRecord(Seq(seq), id=my_id))\n        SeqIO.write(al_genes, '%s_align.fasta' % gene, 'fasta')\n    ```", "```py\n    import os\n    from collections import OrderedDict\n    import dendropy\n    from dendropy.calculate import popgenstat\n    genes_species = OrderedDict()\n    my_species = ['RESTV', 'SUDV']\n    my_genes = ['NP', 'L', 'VP35', 'VP40']\n    for name in my_genes:\n        gene_name = name.split('.')[0]\n        char_mat = dendropy.DnaCharacterMatrix.get_from_path('%s_align.fasta' % name, 'fasta')\n        genes_species[gene_name] = {}\n\n        for species in my_species:\n            genes_species[gene_name][species] = dendropy.DnaCharacterMatrix()\n        for taxon, char_map in char_mat.items():\n            species = taxon.label.split('_')[0]\n            if species in my_species:\n                genes_species[gene_name][species].taxon_namespace.add_taxon(taxon)\n                genes_species[gene_name][species][taxon] = char_map\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    summary = np.ndarray(shape=(len(genes_species), 4 * len(my_species)))\n    stats = ['seg_sites', 'nuc_div', 'taj_d', 'wat_theta']\n    for row, (gene, species_data) in enumerate(genes_species.items()):\n        for col_base, species in enumerate(my_species):\n            summary[row, col_base * 4] = popgenstat.num_segregating_sites(species_data[species])\n            summary[row, col_base * 4 + 1] = popgenstat.nucleotide_diversity(species_data[species])\n            summary[row, col_base * 4 + 2] = popgenstat.tajimas_d(species_data[species])\n            summary[row, col_base * 4 + 3] = popgenstat.wattersons_theta(species_data[species])\n    columns = []\n    for species in my_species:\n        columns.extend(['%s (%s)' % (stat, species) for stat in stats])\n    df = pd.DataFrame(summary, index=genes_species.keys(), columns=columns)\n    df # vs print(df)\n    ```", "```py\n    def do_basic_popgen(seqs):\n        num_seg_sites = popgenstat.num_segregating_sites(seqs)\n        avg_pair = popgenstat.average_number_of_pairwise_differences(seqs)\n        nuc_div = popgenstat.nucleotide_diversity(seqs)\n        print('Segregating sites: %d, Avg pairwise diffs: %.2f, Nucleotide diversity %.6f' % (num_seg_sites, avg_pair, nuc_div))\n        print(\"Watterson's theta: %s\" % popgenstat.wattersons_theta(seqs))\n        print(\"Tajima's D: %s\" % popgenstat.tajimas_d(seqs))\n    ```", "```py\n    ebov_seqs = dendropy.DnaCharacterMatrix.get_from_path(\n        'trim.fasta', schema='fasta', data_type='dna')\n    sl_2014 = []\n    drc_2007 = []\n    ebov2007_set = dendropy.DnaCharacterMatrix()\n    ebov2014_set = dendropy.DnaCharacterMatrix()\n    for taxon, char_map in ebov_seqs.items():\n        print(taxon.label)\n        if taxon.label.startswith('EBOV_2014') and len(sl_2014) < 8:\n            sl_2014.append(char_map)\n            ebov2014_set.taxon_namespace.add_taxon(taxon)\n            ebov2014_set[taxon] = char_map\n        elif taxon.label.startswith('EBOV_2007'):\n            drc_2007.append(char_map)\n            ebov2007_set.taxon_namespace.add_taxon(taxon)\n            ebov2007_set[taxon] = char_map\n            #ebov2007_set.extend_map({taxon: char_map})\n    del ebov_seqs\n    print('2007 outbreak:')\n    print('Number of individuals: %s' % len(ebov2007_set.taxon_set))\n    do_basic_popgen(ebov2007_set)\n    print('\\n2014 outbreak:')\n    print('Number of individuals: %s' % len(ebov2014_set.taxon_set))\n    do_basic_popgen(ebov2014_set)\n    ```", "```py\n2007 outbreak:\nNumber of individuals: 7\nSegregating sites: 25, Avg pairwise diffs: 7.71, Nucleotide diversity 0.000412\nWatterson's theta: 10.204081632653063\nTajima's D: -1.383114157484101\n2014 outbreak:\nNumber of individuals: 8\nSegregating sites: 6, Avg pairwise diffs: 2.79, Nucleotide diversity 0.000149\nWatterson's theta: 2.31404958677686\nTajima's D: 0.9501208027581887\n```", "```py\n    pair_stats = popgenstat.PopulationPairSummaryStatistics(sl_2014, drc_2007)\n    print('Average number of pairwise differences irrespective of population: %.2f' % pair_stats.average_number_of_pairwise_differences)\n    print('Average number of pairwise differences between populations: %.2f' % pair_stats.average_number_of_pairwise_differences_between)\n    print('Average number of pairwise differences within populations: %.2f' % pair_stats.average_number_of_pairwise_differences_within)\n    print('Average number of net pairwise differences : %.2f' % pair_stats.average_number_of_pairwise_differences_net)\n    print('Number of segregating sites: %d' % pair_stats.num_segregating_sites)\n    print(\"Watterson's theta: %.2f\" % pair_stats.wattersons_theta)\n    print(\"Wakeley's Psi: %.3f\" % pair_stats.wakeleys_psi)\n    print(\"Tajima's D: %.2f\" % pair_stats.tajimas_d)\n    ```", "```py\nAverage number of pairwise differences irrespective of population: 284.46\nAverage number of pairwise differences between populations: 535.82\nAverage number of pairwise differences within populations: 10.50\nAverage number of net pairwise differences : 525.32\nNumber of segregating sites: 549\nWatterson's theta: 168.84\nWakeley's Psi: 0.308\nTajima's D: 3.05\n```", "```py\nconda install –c bioconda raxml\n```", "```py\n    import os\n    import shutil\n    import dendropy\n    from dendropy.interop import raxml\n    ebola_data = dendropy.DnaCharacterMatrix.get_from_path('trim.fasta', 'fasta')\n    rx = raxml.RaxmlRunner()\n    ebola_tree = rx.estimate_tree(ebola_data, ['-m', 'GTRGAMMA', '-N', '10'])\n    print('RAxML temporary directory %s:' % rx.working_dir_path)\n    del ebola_data\n    ```", "```py\n    ebola_tree.write_to_path('my_ebola.nex', 'nexus')\n    ```", "```py\n    import matplotlib.pyplot as plt\n    from Bio import Phylo\n    my_ebola_tree = Phylo.read('my_ebola.nex', 'nexus')\n    my_ebola_tree.name = 'Our Ebolavirus tree'\n    fig = plt.figure(figsize=(16, 18))\n    ax = fig.add_subplot(1, 1, 1)\n    Phylo.draw(my_ebola_tree, axes=ax)\n    ```", "```py\n    import random\n    import shutil\n    from Bio.Phylo.Applications import RaxmlCommandline\n    raxml_cline = RaxmlCommandline(sequences='trim.fasta', model='GTRGAMMA', name='biopython', num_replicates='10', parsimony_seed=random.randint(0, sys.maxsize), working_dir=os.getcwd() + os.sep + 'bp_rx')\n    print(raxml_cline)\n    try:\n        os.mkdir('bp_rx')\n    except OSError:\n        shutil.rmtree('bp_rx')\n        os.mkdir('bp_rx')\n    out, err = raxml_cline()\n    ```", "```py\n    from Bio import Phylo\n    biopython_tree = Phylo.read('bp_rx/RAxML_bestTree.biopython', 'newick')\n    ```", "```py\n    import dendropy\n    ebola_raxml = dendropy.Tree.get_from_path('my_ebola.nex', 'nexus')\n    ```", "```py\n    def compute_level(node, level=0):\n        for child in node.child_nodes():\n            compute_level(child, level + 1)\n        if node.taxon is not None:\n            print(\"%s: %d %d\" % (node.taxon, node.level(), level))\n    compute_level(ebola_raxml.seed_node)\n    ```", "```py\n    def compute_height(node):\n        children = node.child_nodes()\n        if len(children) == 0:\n            height = 0\n        else:\n        height = 1 + max(map(lambda x: compute_height(x), children))\n        desc = node.taxon or 'Internal'\n        print(\"%s: %d %d\" % (desc, height, node.level()))\n        return height\n    compute_height(ebola_raxml.seed_node)\n    ```", "```py\n    def compute_nofs(node):\n        children = node.child_nodes()\n        nofs = len(children)\n        map(lambda x: compute_nofs(x), children)\n        desc = node.taxon or 'Internal'\n        print(\"%s: %d %d\" % (desc, nofs, node.level()))\n    compute_nofs(ebola_raxml.seed_node)\n    ```", "```py\n    def print_nodes(node):\n        for child in node.child_nodes():\n            print_nodes(child)\n        if node.taxon is not None:\n            print('%s (%d)' % (node.taxon, node.level()))\n    print_nodes(ebola_raxml.seed_node)\n    ```", "```py\n    from collections import deque\n    def print_breadth(tree):\n        queue = deque()\n        queue.append(tree.seed_node)\n        while len(queue) > 0:\n            process_node = queue.popleft()\n            if process_node.taxon is not None:\n                print('%s (%d)' % (process_node.taxon, process_node.level()))\n            else:\n                for child in process_node.child_nodes():\n                    queue.append(child)\n    print_breadth(ebola_raxml)\n    ```", "```py\n    from copy import deepcopy\n    simple_ebola = deepcopy(ebola_raxml)\n    def simplify_tree(node):\n        prefs = set()\n        for leaf in node.leaf_nodes():\n            my_toks = leaf.taxon.label.split(' ')\n            if my_toks[0] == 'EBOV':\n                prefs.add('EBOV' + my_toks[1])\n            else:\n                prefs.add(my_toks[0])\n        if len(prefs) == 1:\n            print(prefs, len(node.leaf_nodes()))\n            node.taxon = dendropy.Taxon(label=list(prefs)[0])\n            node.set_child_nodes([])\n        else:\n            for child in node.child_nodes():\n                simplify_tree(child)\n    simplify_tree(simple_ebola.seed_node)\n    simple_ebola.ladderize()\n    simple_ebola.write_to_path('ebola_simple.nex', 'nexus')\n    ```", "```py\n    from copy import deepcopy\n    from Bio import Phylo\n    ebola_tree = Phylo.read('my_ebola.nex', 'nexus')\n    ebola_tree.name = 'Ebolavirus tree'\n    ebola_simple_tree = Phylo.read('ebola_simple.nex', 'nexus')\n    ebola_simple_tree.name = 'Ebolavirus simplified tree'\n    ```", "```py\n    Phylo.draw_ascii(ebola_simple_tree)\n    Phylo.draw_ascii(ebola_tree)\n    ```", "```py\n    import matplotlib.pyplot as plt\n    fig = plt.figure(figsize=(16, 22))\n    ax = fig.add_subplot(111)\n    Phylo.draw(ebola_simple_tree, branch_labels=lambda c: c.branch_length if c.branch_length > 0.02 else None, axes=ax)\n    ```", "```py\n    fig = plt.figure(figsize=(16, 22))\n    ax = fig.add_subplot(111)\n    from collections import OrderedDict\n    my_colors = OrderedDict({\n    'EBOV_2014': 'red',\n    'EBOV': 'magenta',\n    'BDBV': 'cyan',\n    'SUDV': 'blue',\n    'RESTV' : 'green',\n    'TAFV' : 'yellow'\n    })\n    def get_color(name):\n        for pref, color in my_colors.items():\n            if name.find(pref) > -1:\n                return color\n        return 'grey'\n    def color_tree(node, fun_color=get_color):\n        if node.is_terminal():\n            node.color = fun_color(node.name)\n        else:\n            my_children = set()\n            for child in node.clades:\n                color_tree(child, fun_color)\n                my_children.add(child.color.to_hex())\n            if len(my_children) == 1:\n                node.color = child.color\n            else:\n                node.color = 'grey'\n    ebola_color_tree = deepcopy(ebola_tree)\n    color_tree(ebola_color_tree.root)\n    Phylo.draw(ebola_color_tree, axes=ax, label_func=lambda x: x.name.split(' ')[0][1:] if x.name is not None else None)\n    ```"]