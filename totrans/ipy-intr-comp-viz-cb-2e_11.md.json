["```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            import skimage.exposure as skie\n            %matplotlib inline\n    ```", "```py\n    In [2]: img = plt.imread('data/pic1.jpg')[...,0]\n    ```", "```py\n    In [3]: def show(img):\n                # Display the image.\n                plt.subplot(121)\n                plt.imshow(img, cmap=plt.cm.gray)\n                plt.axis('off')\n                # Display the histogram.\n                plt.subplot(122)\n                plt.hist(img.ravel(), lw=0, bins=256)\n                plt.xlim(0, img.max())\n                plt.yticks([])\n                plt.show()\n    ```", "```py\n    In [4]: show(img)\n    ```", "```py\n    In [5]: show(skie.rescale_intensity(img,\n                 in_range=(100, 240), out_range=(0, 255)))\n    ```", "```py\n    In [6]: show(skie.equalize_adapthist(img))\n    ```", "```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            import skimage\n            import skimage.filter as skif\n            import skimage.data as skid\n            %matplotlib inline\n    ```", "```py\n    In [2]: def show(img):\n                plt.imshow(img, cmap=plt.cm.gray)\n                plt.axis('off')\n                plt.show()\n    ```", "```py\n    In [3]: img = skimage.img_as_float(skid.lena())[...,0]\n    In [4]: show(img)\n    ```", "```py\n    In [5]: show(skif.gaussian_filter(img, 5.))\n    ```", "```py\n    In [6]: sobimg = skif.sobel(img)\n            show(sobimg)\n    ```", "```py\n    In [7]: from IPython.html import widgets\n            @widgets.interact(x=(0.01, .4, .005))\n            def edge(x):\n                show(sobimg<x)\n    ```", "```py\n    In [8]: img = skimage.img_as_float(skid.lena())\n            # We take a portion of the image to show the\n            # details.\n            img = img[200:-100, 200:-150]\n            # We add Gaussian noise.\n            img = np.clip(img + 0.3*np.random.rand(*img.shape),\n                          0, 1)\n    In [9]: show(img)\n    ```", "```py\n    In [10]: show(skimage.restoration.denoise_tv_bregman(img,\n                                                         5.))\n    ```", "```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            from skimage.data import coins\n            from skimage.filter import threshold_otsu\n            from skimage.segmentation import clear_border\n            from skimage.morphology import closing, square\n            from skimage.measure import regionprops, label\n            from skimage.color import lab2rgb\n            %matplotlib inline\n    ```", "```py\n    In [2]: def show(img, cmap=None):\n                cmap = cmap or plt.cm.gray\n                plt.imshow(img, cmap=cmap)\n                plt.axis('off')\n                plt.show()\n    ```", "```py\n    In [3]: img = coins()\n    In [4]: show(img)\n    ```", "```py\n    In [5]: threshold_otsu(img)\n    Out[5]: 107\n    In [6]: show(img>107)\n    ```", "```py\n    In [7]: from IPython.html import widgets\n            @widgets.interact(t=(10, 240))\n            def threshold(t):\n                show(img>t)\n    ```", "```py\n    In [8]: img_bin = clear_border(closing(img>120, square(5)))\n            show(img_bin)\n    ```", "```py\n    In [9]: labels = label(img_bin)\n            show(labels, cmap=plt.cm.rainbow)\n    ```", "```py\n    In [10]: regions = regionprops(labels, \n                                   ['Area', 'BoundingBox'])\n             boxes = np.array([label['BoundingBox']\n                               for label in regions \n                                   if label['Area'] > 100])\n             print(\"There are {0:d} coins.\".format(len(boxes)))\n    There are 24 coins.\n    ```", "```py\n    In [11]: plt.imshow(img, cmap=plt.cm.gray)\n             plt.axis('off')\n             xs = boxes[:,[1,3]].mean(axis=1)\n             ys = boxes[:,[0,2]].mean(axis=1)\n             for i, box in enumerate(boxes):\n                 plt.text(xs[i]-5, ys[i]+5, str(i))\n    ```", "```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            import skimage\n            import skimage.feature as sf\n            %matplotlib inline\n    ```", "```py\n    In [2]: def show(img, cmap=None):\n                cmap = cmap or plt.cm.gray\n                plt.imshow(img, cmap=cmap)\n                plt.axis('off')\n    ```", "```py\n    In [3]: img = plt.imread('data/pic2.jpg')\n    In [4]: show(img)\n    ```", "```py\n    In [5]: corners = sf.corner_harris(img[:,:,0])\n    In [6]: show(corners)\n    ```", "```py\n    In [7]: peaks = sf.corner_peaks(corners)\n    In [8]: show(img)\n            plt.plot(peaks[:,1], peaks[:,0], 'or', ms=4)\n    ```", "```py\n    In [9]: ymin, xmin = peaks.min(axis=0)\n            ymax, xmax = peaks.max(axis=0)\n            w, h = xmax-xmin, ymax-ymin\n    In [10]: k = .25\n             xmin -= k*w\n             xmax += k*w\n             ymin -= k*h\n             ymax += k*h\n    In [11]: show(img[ymin:ymax,xmin:xmax])\n    ```", "```py\n    In [1]: import numpy as np\n            import cv2\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: img = cv2.imread('data/pic3.jpg')\n    ```", "```py\n    In [3]: gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    ```", "```py\n    In [4]: face_cascade = cv2.CascadeClassifier(\n                  'data/haarcascade_frontalface_default.xml')\n    ```", "```py\n    In [5]: for x,y,w,h in \\\n                     face_cascade.detectMultiScale(gray, 1.3):\n                cv2.rectangle(gray, (x,y), (x+w,y+h),\n                              (255,0,0), 2)\n            plt.imshow(gray, cmap=plt.cm.gray)\n            plt.axis('off')\n    ```", "```py\n    In [1]: import urllib\n            from io import BytesIO\n            import numpy as np\n            import scipy.signal as sg\n            import pydub\n            import matplotlib.pyplot as plt\n            from IPython.display import Audio, display\n            %matplotlib inline\n    ```", "```py\n    In [2]: def speak(sentence):\n                url = (\"http://translate.google.com/\"\n                        \"translate_tts?tl=en&q=\") + \n                            urllib.parse.quote_plus(sentence)\n                req = urllib.request.Request(url,\n                                 headers={'User-Agent': ''}) \n                mp3 = urllib.request.urlopen(req).read()\n                # We convert the mp3 bytes to wav.\n                audio = pydub.AudioSegment.from_mp3(\n                                                BytesIO(mp3))\n                wave = audio.export('_', format='wav')\n                wave.seek(0)\n                wave = wave.read()\n                # We get the raw data by removing the 24 \n                # first bytes of the header.\n                x = np.frombuffer(wave, np.int16)[24:] / 2.**15\n    ```", "```py\n    In [3]: def play(x, fr, autoplay=False):\n                display(Audio(x, rate=fr, autoplay=autoplay))\n    ```", "```py\n    In [4]: x, fr = speak(\"Hello world\")\n            play(x, fr)\n            t = np.linspace(0., len(x)/fr, len(x))\n            plt.plot(t, x, lw=1)\n    ```", "```py\n    In [5]: b, a = sg.butter(4, 500./(fr/2.), 'low')\n            x_fil = sg.filtfilt(b, a, x)\n    In [6]: play(x_fil, fr)\n            plt.plot(t, x, lw=1)\n            plt.plot(t, x_fil, lw=1)\n    ```", "```py\n    In [7]: b, a = sg.butter(4, 1000./(fr/2.), 'high')\n            x_fil = sg.filtfilt(b, a, x)\n    In [8]: play(x_fil, fr)\n            plt.plot(t, x, lw=1)\n            plt.plot(t, x_fil, lw=1)\n    ```", "```py\n    In [9]: from IPython.html import widgets\n            @widgets.interact(t=(100., 5000., 100.))\n            def highpass(t):\n                b, a = sg.butter(4, t/(fr/2.), 'high')\n                x_fil = sg.filtfilt(b, a, x)\n                play(x_fil, fr, autoplay=True)\n    ```", "```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n            from IPython.display import (Audio, display,\n                                         clear_output)\n            from IPython.html import widgets\n            from functools import partial\n            %matplotlib inline\n    ```", "```py\n    In [2]: rate = 16000.\n            duration = 0.5\n            t = np.linspace(0., duration, rate * duration)\n    ```", "```py\n    In [3]: def synth(f):\n                x = np.sin(f * 2\\. * np.pi * t)\n                display(Audio(x, rate=rate, autoplay=True))\n    ```", "```py\n    In [4]: synth(440)\n    ```", "```py\n    In [5]: notes = zip(('C,C#,D,D#,E,F,F#,G,G#,'\n                         'A,A#,B,C').split(','),\n                         440\\. * 2 ** (np.arange(3, 17) / 12.))\n    ```", "```py\n    In [6]: container = widgets.ContainerWidget()\n            buttons = []\n            for note, f in notes:\n                button = widgets.ButtonWidget(description=note)\n                def on_button_clicked(f, b):\n                    clear_output()\n                    synth(f)\n                button.on_click(partial(on_button_clicked, f))\n                button.set_css({...})\n                buttons.append(button)\n            container.children = buttons\n            display(container)\n            container.remove_class('vbox')\n            container.add_class('hbox')\n    ```"]