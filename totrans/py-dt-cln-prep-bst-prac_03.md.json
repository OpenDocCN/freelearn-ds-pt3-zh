["```py\npip install pandas\npip install ydata-profiling\npip install ipywidgets\n```", "```py\n    import pandas as pd\n    import ydata_profiling as pp\n    ```", "```py\n    iris_data = pd.read_csv('https: //raw. githubusercontent .com/mwaskom/ seaborn-data/master/ iris.csv')\n    ```", "```py\n    profile = pp.ProfileReport(iris_data)\n    ```", "```py\n    profile.to_file(\"data_profile_report.html\")\n    ```", "```py\n    profile.to_notebook_iframe()\n    ```", "```py\n    profile.to_file(output_path+\"/pandas_profiler.json\")\n    ```", "```py\n    from ydata_profiling import ProfileReport\n    sample_df = iris_data.sample(n=1000)  # Adjust the sample size as per your needs\n    report = ProfileReport(sample_df)\n    ```", "```py\n    subset_df = iris_data [['sepal_length', 'sepal_width']]  # Select columns to profile\n    report = ProfileReport(subset_df)\n    ```", "```py\n    report = ProfileReport(df, minimal=True)  # Generate a minimal report\n    ```", "```py\n    import multiprocessing\n    with multiprocessing.Pool() as pool:\n        report = pool.map(ProfileReport, [df1, df2, df3])  # Profiling multiple DataFrames in parallel\n    ```", "```py\n    chunk_size = 10000\n    chunks = [df[i:i + chunk_size] for i in range(0, len(df), chunk_size)]\n    reports = [ProfileReport(chunk) for chunk in chunks]\n    combined_report = ProfileReport(pd.concat(reports))\n    ```", "```py\npip install great-expectations==0.18.16\n```", "```py\n    mkdir great_expectations\n    ```", "```py\n    great_expectations in your project directory where we’ll store all the Expectations we are going to build. The second command will navigate you inside the great_expectations folder we just created.\n    ```", "```py\n    mkdir code\n    mkdir data\n    ```", "```py\n    great_expectations.yml configuration file, the Expectations and data directories, and other project-specific files. The initialization step is a one-time setup that allows you to define and manage your data Expectations, create validation checkpoints, and generate documentation using Great Expectations. It helps you establish a project-specific configuration and directory structure that enables you to organize your Expectations and maintain consistency across your data pipelines. Once you have initialized the project, you can define Expectations, validate data, and generate reports based on those Expectations using Great Expectations.The preceding code will display the following output:\n    ```", "```py\nimport numpy as np\nimport pandas as pd\n# Load the 'iris' dataset from seaborn library\niris_data = pd.read_csv('https ://raw.githubusercontent .com/mwaskom /seaborn-data /master/iris. csv')\niris_data.to_csv('../data/iris_data.csv', index=False)\nprint(\"File written! :)\")\n```", "```py\npython 1.data_set_up.py\n```", "```py\ngreat_expectations datasource new\n```", "```py\ngreat_expectations suite new\n```", "```py\ngreat_expectations suite edit expect_iris\n```", "```py\npython 2.mock_test_dataset.py\n```", "```py\nimport numpy as np\nimport pandas as pd\n```", "```py\niris_data = pd.read_csv('https: //raw.githubusercontent.com/ mwaskom/seaborn-data /master/iris. csv')\n```", "```py\niris_data['sepal_length'] = 60\n```", "```py\niris_data.rename(columns={'petal_width': 'petal_w'}, inplace=True)\n```", "```py\niris_data.to_csv('../data/iris_data_test.csv', index=False)\nprint(\"File written! :)\")\n```", "```py\ngreat_expectations checkpoint new expect_iris_ckpnt\n```", "```py\nmy_checkpoint_name = \"expect_iris_ckpnt\" # This was populated from your CLI command.\nyaml_config = f\"\"\"\nname: {my_checkpoint_name}\nconfig_version: 1.0\nclass_name: SimpleCheckpoint\nrun_name_template: \"%Y%m%d-%H%M%S-my-run-name-template\"\nvalidations:\n    - batch_request:\n        datasource_name: iris_data.csv\n        data_connector_name: default_inferred_data_connector_name\n        data_asset_name: iris_data_test.csv\n        data_connector_query:\n          index: -1\n    expectation_suite_name: expect_iris\n\"\"\"\nprint(yaml_config)\n```", "```py\ncontext.run_checkpoint(checkpoint_name=my_checkpoint_name)\ncontext.open_data_docs()\n```", "```py\nimport pandas as pd\nfrom ydata_profiling import ProfileReport\n# Load the 'iris' dataset from seaborn library\niris_data = pd.read_csv('https: //raw.githubusercontent. com/mwaskom/seaborn-data /master/iris. csv')\n# run Pandas Profiling\nprofile = ProfileReport(iris_data, title=\"Pandas Profiling Report\", explorative=True)\n# obtain an Expectation Suite from the profiling\nsuite = profile.to_expectation_suite(suite_name=\"my_pandas_profiling_suite\")\n```"]