["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nlandtemps = pd.read_csv(\"data/landtemps2023avgs.csv\")\ncovidtotals = pd.read_csv(\"data/covidtotals.csv\", parse_dates=[\"lastdate\"])\ncovidtotals.set_index(\"iso_code\", inplace=True) \n```", "```py\nlandtemps[['station','country','latabs',\n...   'elevation','avgtemp']].\\\n...   sample(10, random_state=1) \n```", "```py\n station        country  \\\n11924         WOLF_POINT_29_ENE  United States  \n10671             LITTLE_GRASSY  United States  \n10278  FLOWERY_TRAIL_WASHINGTON  United States  \n8436                ROCKSPRINGS  United States  \n1715               PETERBOROUGH         Canada  \n5650          TRACY_PUMPING_PLT  United States  \n335              NEPTUNE_ISLAND      Australia  \n372                     EUDUNDA      Australia  \n2987                  KOZHIKODE          India  \n7588                      TRYON  United States  \n       latabs  elevation  avgtemp \n11924      48        636        6 \n10671      37      1,859       10 \n10278      48        792        8 \n8436       30        726       20 \n1715       44        191        8 \n5650       38         19       18 \n335        35         32       16 \n372        34        415       16 \n2987       11          5       30 \n7588       35        366       16 \n```", "```py\nlandtemps.describe() \n```", "```py\n latabs  elevation  avgtemp\ncount  12,137     12,137   12,137\nmean       40        598       12\nstd        13        775        8\nmin         0       -350      -57\n25%        35         78        6\n50%        41        271       11\n75%        47        824       17\nmax        90      9,999       34 \n```", "```py\nlandtemps.avgtemp.skew() \n```", "```py\n-0.3856060165979757 \n```", "```py\nlandtemps.avgtemp.kurtosis() \n```", "```py\n2.7939884544586033 \n```", "```py\nplt.hist(landtemps.avgtemp)\nplt.axvline(landtemps.avgtemp.mean(), color='red', linestyle='dashed', linewidth=1)\nplt.title(\"Histogram of Average Temperatures (Celsius)\")\nplt.xlabel(\"Average Temperature\")\nplt.ylabel(\"Frequency\")\nplt.show() \n```", "```py\nsm.qqplot(landtemps[['avgtemp']].sort_values(['avgtemp']), line='s')\nplt.title(\"QQ Plot of Average Temperatures\")\nplt.show() \n```", "```py\ncovidtotals.total_cases_pm.skew() \n```", "```py\n0.8349032460009967 \n```", "```py\ncovidtotals.total_cases_pm.kurtosis() \n```", "```py\n-0.4280595203351645 \n```", "```py\nshowregions = ['Oceania / Aus','East Asia','Southern Africa',\n...   'Western Europe']\ndef getcases(regiondesc):\n...   return covidtotals.loc[covidtotals.\\\n...     region==regiondesc,\n...     'total_cases_pm']\n...\nplt.hist([getcases(k) for k in showregions],\\\n...   color=['blue','mediumslateblue','plum','mediumvioletred'],\\\n...   label=showregions,\\\n...   stacked=True)\nplt.title(\"Stacked Histogram of Cases Per Million for Selected Regions\")\nplt.xlabel(\"Cases Per Million\")\nplt.ylabel(\"Frequency\")\nplt.legend()\nplt.show() \n```", "```py\nfig, axes = plt.subplots(2, 2)\nfig.suptitle(\"Histograms of COVID-19 Cases Per Million by Selected Regions\")\naxes = axes.ravel()\nfor j, ax in enumerate(axes):\n...   ax.hist(covidtotals.loc[covidtotals.region==showregions[j]].\\\n...     total_cases_pm, bins=7)\n...   ax.set_title(showregions[j], fontsize=10)\n...   for tick in ax.get_xticklabels():\n...     tick.set_rotation(45)\n...\nplt.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show() \n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nnls97 = pd.read_csv(\"data/nls97f.csv\", low_memory=False)\nnls97.set_index(\"personid\", inplace=True)\ncovidtotals = pd.read_csv(\"data/covidtotals.csv\", parse_dates=[\"lastdate\"])\ncovidtotals.set_index(\"iso_code\", inplace=True) \n```", "```py\nnls97.satverbal.describe() \n```", "```py\ncount\t1,406\nmean\t500\nstd\t112\nmin\t14\n25%\t430\n50%\t500\n75%\t570\nmax\t800\nName: satverbal, dtype: float64 \n```", "```py\nplt.boxplot(nls97.satverbal.dropna(), labels=['SAT Verbal'])\nplt.annotate('outlier threshold', xy=(1.05,780), xytext=(1.15,780), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\nplt.annotate('3rd quartile', xy=(1.08,570), xytext=(1.15,570), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\nplt.annotate('median', xy=(1.08,500), xytext=(1.15,500), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\nplt.annotate('1st quartile', xy=(1.08,430), xytext=(1.15,430), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\nplt.annotate('outlier threshold', xy=(1.05,220), xytext=(1.15,220), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\nplt.title(\"Boxplot of SAT Verbal Score\")\nplt.show() \n```", "```py\n    weeksworked = nls97.loc[:, ['highestdegree',\n      'weeksworked20','weeksworked21']]\n    weeksworked.describe() \n    ```", "```py\n     weeksworked20  weeksworked21\n    count          6,971          6,627\n    mean              38             36\n    std               21             18\n    min                0              0\n    25%               21             35\n    50%               52             43\n    75%               52             50\n    max               52             52 \n    ```", "```py\n    plt.boxplot([weeksworked.weeksworked20.dropna(),\n      weeksworked.weeksworked21.dropna()],\n      labels=['Weeks Worked 2020','Weeks Worked 2021'])\n    plt.title(\"Boxplots of Weeks Worked\")\n    plt.tight_layout()\n    plt.show() \n    ```", "```py\ntotvars = ['total_cases','total_deaths',\n...   'total_cases_pm','total_deaths_pm']\ntotvarslabels = ['cases','deaths',\n...   'cases per million','deaths per million']\ncovidtotalsonly = covidtotals[totvars]\ncovidtotalsonly.describe() \n```", "```py\n total_cases  total_deaths  total_cases_pm  total_deaths_pm\ncount          231           231             231              231\nmean     3,351,599        30,214         206,178            1,262\nstd     11,483,212       104,779         203,858            1,315\nmin              4             0             354                0\n25%         25,672           178          21,822              141\n50%        191,496         1,937         133,946              827\n75%      1,294,286        14,150         345,690            1,998\nmax    103,436,829     1,127,152         763,475            6,508 \n```", "```py\n    fig, ax = plt.subplots()\n    plt.title(\"Boxplots of COVID-19 Cases and Deaths Per Million\")\n    ax.boxplot([covidtotalsonly.total_cases_pm,covidtotalsonly.total_deaths_pm],\\\n    ...   labels=['cases per million','deaths per million'])\n    plt.tight_layout()\n    plt.show() \n    ```", "```py\nfig, axes = plt.subplots(2, 2)\nfig.suptitle(\"Boxplots of COVID-19 Cases and Deaths in Thousands\")\naxes = axes.ravel()\nfor j, ax in enumerate(axes):\n  ax.boxplot(covidtotalsonly.iloc[:, j]/1000, labels=[totvarslabels[j]])\nplt.tight_layout()\nfig.subplots_adjust(top=0.9)\nplt.show() \n```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    nls97 = pd.read_csv(\"data/nls97f.csv\", low_memory=False)\n    nls97.set_index(\"personid\", inplace=True)\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\", \n                               parse_dates=[\"lastdate\"])\n    covidtotals.set_index(\"iso_code\", inplace=True) \n    ```", "```py\ndef gettots(x):\n...   out = {}\n...   out['min'] = x.min()\n...   out['qr1'] = x.quantile(0.25)\n...   out['med'] = x.median()\n...   out['qr3'] = x.quantile(0.75)\n...   out['max'] = x.max()\n...   out['count'] = x.count()\n...   return pd.Series(out)\n...\nnls97.groupby(['highestdegree'])['weeksworked21'].\\\n  apply(gettots).unstack() \n```", "```py\n min  qr1  med  qr3  max  count\nhighestdegree                                 \n0\\. None            0    0   39   49   52    487\n1\\. GED             0    7   42   50   52    853\n2\\. High School     0   27   42   50   52  2,529\n3\\. Associates      0   38   43   49   52    614\n4\\. Bachelors       0   40   43   50   52  1,344\n5\\. Masters         0   41   45   52   52    614\n6\\. PhD             0   41   44   49   52     59\n7\\. Professional    0   41   45   51   52    105 \n```", "```py\nmyplt = \\\n  sns.boxplot(x='highestdegree',y='weeksworked21',\n  data=nls97,\n  order=sorted(nls97.highestdegree.dropna().unique()))\nmyplt.set_title(\"Boxplots of Weeks Worked by Highest Degree\")\nmyplt.set_xlabel('Highest Degree Attained')\nmyplt.set_ylabel('Weeks Worked 2021')\nmyplt.set_xticklabels(myplt.get_xticklabels(), rotation=60, horizontalalignment='right')\nplt.tight_layout()\nplt.show() \n```", "```py\ncovidtotals.groupby(['region'])['total_cases_pm'].\\\n  apply(gettots).unstack() \n```", "```py\n min     qr1     med     qr3     max  count\nregion                                                       \nCaribbean   2,979 128,448 237,966 390,758 626,793  26\nCentral Af    434   2,888   4,232   9,948  29,614  11\nCentral Am  2,319  38,585  70,070 206,306 237,539   7\nCentral As  1,787   7,146  45,454  79,795 162,356   6\nEast Africa   660   2,018   4,062  71,435 507,765  15\nEast Asia   8,295  26,930  69,661 285,173 763,475  15\nEast. Eu  104,252 166,930 223,685 459,646 760,161  21\nNorth Afr   4,649   6,058  34,141  74,463  93,343   5\nNorth Am   60,412 108,218 214,958 374,862 582,158   4\nOceania/Aus 4,620  75,769 259,196 356,829 508,709  24\nSouth Am   19,529 101,490 133,367 259,942 505,919  14\nSouth As    5,630  11,959  31,772  80,128 473,167   9\nSouth. Af   4,370  15,832  40,011  67,775 401,037  10\nWest Af       363   1,407   2,961   4,783 108,695  16\nWest Asia     354  78,447 123,483 192,995 512,388  16\nWest. Eu   32,178 289,756 465,940 587,523 750,727  32 \n```", "```py\nsns.boxplot(x='total_cases_pm', y='region', data=covidtotals)\nsns.swarmplot(y=\"region\", x=\"total_cases_pm\", data=covidtotals, size=2, color=\".3\", linewidth=0)\nplt.title(\"Boxplots of Total Cases Per Million by Region\")\nplt.xlabel(\"Cases Per Million\")\nplt.ylabel(\"Region\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show() \n```", "```py\n    highvalue = covidtotals.total_cases_pm.quantile(0.9)\n    highvalue \n    ```", "```py\n    512388.401 \n    ```", "```py\n    covidtotals.loc[covidtotals.total_cases_pm>=highvalue,\\\n      ['location','total_cases_pm']] \n    ```", "```py\n     location  total_cases_pm\n    iso_code                                          \n    AND                         Andorra       601,367.7\n    AUT                         Austria       680,262.6\n    BRN                          Brunei       763,475.4\n    CYP                          Cyprus       760,161.5\n    DNK                         Denmark       583,624.9\n    FRO                  Faeroe Islands       652,484.1\n    FRA                          France       603,427.6\n    GIB                       Gibraltar       628,882.7\n    GRC                          Greece       540,380.1\n    GLP                      Guadeloupe       513,528.3\n    GGY                        Guernsey       557,817.1\n    ISL                         Iceland       562,822.0\n    ISR                          Israel       512,388.4\n    JEY                          Jersey       599,218.4\n    LVA                          Latvia       528,300.3\n    LIE                   Liechtenstein       548,113.3\n    LUX                      Luxembourg       603,439.5\n    MTQ                      Martinique       626,793.1\n    PRT                        Portugal       549,320.5\n    SPM       Saint Pierre and Miquelon       582,158.0\n    SMR                      San Marino       750,727.2\n    SGP                       Singapore       531,183.8\n    SVN                        Slovenia       639,407.7\n    KOR                     South Korea       667,207.1 \n    ```", "```py\n    sns.boxplot(x='total_cases_pm', y='region', data=covidtotals.loc[covidtotals.total_cases_pm<highvalue])\n    sns.swarmplot(y=\"region\", x=\"total_cases_pm\", data=covidtotals.loc[covidtotals.total_cases_pm<highvalue], size=3, color=\".3\", linewidth=0)\n    plt.title(\"Total Cases Without Extreme Values\")\n    plt.xlabel(\"Cases Per Million\")\n    plt.ylabel(\"Region\")\n    plt.tight_layout()\n    plt.show() \n    ```", "```py\nnls97.groupby(['highestdegree'])['weeksworked21'].apply(gettots).unstack() \n```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    nls97 = pd.read_csv(\"data/nls97f.csv\", low_memory=False)\n    nls97.set_index(\"personid\", inplace=True) \n    ```", "```py\n    sns.violinplot(y=nls97.satverbal, color=\"wheat\", orient=\"v\")\n    plt.title(\"Violin Plot of SAT Verbal Score\")\n    plt.ylabel(\"SAT Verbal\")\n    plt.text(0.08, 780, 'outlier threshold', horizontalalignment='center', size='x-small')\n    plt.text(0.065, nls97.satverbal.quantile(0.75), '3rd quartile', horizontalalignment='center', size='x-small')\n    plt.text(0.05, nls97.satverbal.median(), 'Median', horizontalalignment='center', size='x-small')\n    plt.text(0.065, nls97.satverbal.quantile(0.25), '1st quartile', horizontalalignment='center', size='x-small')\n    plt.text(0.08, 210, 'outlier threshold', horizontalalignment='center', size='x-small')\n    plt.text(-0.4, 500, 'frequency', horizontalalignment='center', size='x-small')\n    plt.show() \n    ```", "```py\n    nls97.loc[:, ['weeksworked20','weeksworked21']].describe() \n    ```", "```py\n     weeksworked20  weeksworked21\n    count          6,971          6,627\n    mean              38             36\n    std               21             18\n    min                0              0\n    25%               21             35\n    50%               52             43\n    75%               52             50\n    max               52             52 \n    ```", "```py\nmyplt = sns.violinplot(data=nls97.loc[:, ['weeksworked20','weeksworked21']])\nmyplt.set_title(\"Violin Plots of Weeks Worked\")\nmyplt.set_xticklabels([\"Weeks Worked 2020\",\"Weeks Worked 2021\"])\nplt.show() \n```", "```py\nnls97[\"maritalstatuscollapsed\"] = \\\n  nls97.maritalstatus.replace(['Married',\n   'Never-married','Divorced','Separated',\n   'Widowed'],\\\n  ['Married','Never Married','Not Married',\n   'Not Married','Not Married'])\nsns.violinplot(x=\"gender\", y=\"wageincome20\", hue=\"maritalstatuscollapsed\",\n  data=nls97, scale=\"count\")\nplt.title(\"Violin Plots of Wage Income by Gender and Marital Status\")\nplt.xlabel('Gender')\nplt.ylabel('Wage Income 2020')\nplt.legend(title=\"\", loc=\"upper center\", framealpha=0, fontsize=8)\nplt.tight_layout()\nplt.show() \n```", "```py\n    nls97 = nls97.sort_values(['highestdegree'])\n    myplt = sns.violinplot(x='highestdegree',y='weeksworked21', data=nls97)\n    myplt.set_xticklabels(myplt.get_xticklabels(), rotation=60, horizontalalignment='right')\n    myplt.set_title(\"Violin Plots of Weeks Worked by Highest Degree\")\n    myplt.set_xlabel('Highest Degree Attained')\n    myplt.set_ylabel('Weeks Worked 2021')\n    plt.tight_layout()\n    plt.show() \n    ```", "```py\nplt.legend(title=\"\", loc=\"upper center\", framealpha=0, fontsize=8) \n```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    landtemps = pd.read_csv(\"data/landtemps2023avgs.csv\") \n    ```", "```py\n    plt.scatter(x=\"latabs\", y=\"avgtemp\", data=landtemps)\n    plt.xlabel(\"Latitude (N or S)\")\n    plt.ylabel(\"Average Temperature (Celsius)\")\n    plt.yticks(np.arange(-60, 40, step=20))\n    plt.title(\"Latitude and Average Temperature in 2023\")\n    plt.show() \n    ```", "```py\nlow, high = landtemps.loc[landtemps.elevation<=1000], landtemps.loc[landtemps.elevation>1000]\nplt.scatter(x=\"latabs\", y=\"avgtemp\", c=\"blue\", data=low)\nplt.scatter(x=\"latabs\", y=\"avgtemp\", c=\"red\", data=high)\nplt.legend(('low elevation', 'high elevation'))\nplt.xlabel(\"Latitude (N or S)\")\nplt.ylabel(\"Average Temperature (Celsius)\")\nplt.title(\"Latitude and Average Temperature in 2023\")\nplt.show() \n```", "```py\nfig = plt.figure()\nplt.suptitle(\"Latitude, Temperature, and Elevation in 2023\")\nax = plt.axes(projection='3d')\nax.set_xlabel(\"Elevation\")\nax.set_ylabel(\"Latitude\")\nax.set_zlabel(\"Avg Temp\")\nax.scatter3D(low.elevation, low.latabs, low.avgtemp, label=\"low elevation\", c=\"blue\")\nax.scatter3D(high.elevation, high.latabs, high.avgtemp, label=\"high elevation\", c=\"red\")\nax.legend()\nplt.show() \n```", "```py\nsns.regplot(x=\"latabs\", y=\"avgtemp\", color=\"blue\", data=landtemps)\nplt.title(\"Latitude and Average Temperature in 2023\")\nplt.xlabel(\"Latitude (N or S)\")\nplt.ylabel(\"Average Temperature\")\nplt.show() \n```", "```py\nlandtemps['elevation'] = np.where(landtemps.elevation<=1000,'low','high')\nsns.lmplot(x=\"latabs\", y=\"avgtemp\", hue=\"elevation\", palette=dict(low=\"blue\", high=\"red\"),  facet_kws=dict(legend_out=False), data=landtemps)\nplt.xlabel(\"Latitude (N or S)\")\nplt.ylabel(\"Average Temperature\")\nplt.yticks(np.arange(-60, 40, step=20))\nplt.title(\"Latitude and Average Temperature in 2023\")\nplt.show() \n```", "```py\n    high.loc[(high.latabs>38) & \\\n    ...   (high.avgtemp>=18),\n    ...   ['station','country','latabs',\n    ...   'elevation','avgtemp']] \n    ```", "```py\n     station   country  latabs  elevation  avgtemp\n    82     YEREVAN   Armenia      40      1,113       19\n    3968  LAJES_AB  Portugal      39      1,016       19 \n    ```", "```py\n    low.loc[(low.latabs>47) & \\\n    ...   (low.avgtemp>=14),\n    ...   ['station','country','latabs',\n    ...   'elevation','avgtemp']] \n    ```", "```py\n     station        country  latabs  elevation  avgtemp\n    1026    COURTENAY_PUNTLEDGE         Canada      50         40       16\n    1055    HOWE_SOUNDPAM_ROCKS         Canada      49          5       14\n    1318  FORESTBURG_PLANT_SITE         Canada      52        663       18\n    2573        POINTE_DU_TALUT         France      47         43       14\n    2574      NANTES_ATLANTIQUE         France      47         27       14\n    4449           USTORDYNSKIJ         Russia      53        526       17\n    6810   WALKER_AH_GWAH_CHING  United States      47        430       20\n    7050     MEDICINE_LAKE_3_SE  United States      48        592       16\n    8736                 QUINCY  United States      47        392       14\n    9914       WINDIGO_MICHIGAN  United States      48        213       16 \n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import matplotlib.dates as mdates\n    from matplotlib.dates import DateFormatter\n    coviddaily = pd.read_csv(\"data/coviddaily.csv\", parse_dates=[\"casedate\"]) \n    ```", "```py\n    coviddaily.sample(2, random_state=1).T \n    ```", "```py\n     628             26980\n    iso_code                    AND             PRT\n    casedate             2020-03-15      2022-12-04\n    location                Andorra        Portugal\n    continent                Europe          Europe\n    new_cases                     1           3,963\n    new_deaths                    0              69\n    population                79843        10270857\n    pop_density                 164             112\n    median_age                  NaN              46\n    gdp_per_capita              NaN          27,937\n    hosp_beds                   NaN               3\n    vac_per_hund                NaN             NaN\n    aged_65_older               NaN              22\n    life_expectancy              84              82\n    hum_dev_ind                   1               1\n    region           Western Europe  Western Europe \n    ```", "```py\ncoviddailytotals = \\\n  coviddaily.loc[coviddaily.casedate.\\\n    between('2023-07-01','2024-03-03')].\\\n  groupby(['casedate'])[['new_cases','new_deaths']].\\\n  sum().\\\n  reset_index() \n```", "```py\ncoviddailytotals.sample(7, random_state=1)\n     casedate  new_cases  new_deaths\n27 2024-01-07    181,487       1,353\n3  2023-07-23    254,984         596\n22 2023-12-03    282,319       1,535\n18 2023-11-05    158,346       1,162\n23 2023-12-10    333,155       1,658\n17 2023-10-29    144,325         905\n21 2023-11-26    238,282       1,287 \n```", "```py\nfig = plt.figure()\nplt.suptitle(\"New COVID-19 Cases and Deaths By Day Worldwide 2023-2024\")\nax1 = plt.subplot(2,1,1)\nax1.plot(coviddailytotals.casedate, coviddailytotals.new_cases)\nax1.xaxis.set_major_formatter(DateFormatter(\"%b\"))\nax1.set_xlabel(\"New Cases\")\nax2 = plt.subplot(2,1,2)\nax2.plot(coviddailytotals.casedate, coviddailytotals.new_deaths)\nax2.xaxis.set_major_formatter(DateFormatter(\"%b\"))\nax2.set_xlabel(\"New Deaths\")\nplt.tight_layout()\nfig.subplots_adjust(top=0.88)\nplt.show() \n```", "```py\n    regiontotals = \\\n      coviddaily.loc[coviddaily.casedate.\\\n        between('2023-07-01','2024-03-03')].\\\n      groupby(['casedate','region'])\\\n        [['new_cases','new_deaths']].\\\n      sum().\\\n      reset_index()\n    regiontotals.sample(7, random_state=1) \n    ```", "```py\n     casedate         region  new_cases  new_deaths\n    110 2023-08-13      West Asia      2,313          25\n    147 2023-09-03   Central Asia        600           7\n    494 2024-02-04  Oceania / Aus     12,594          38\n    325 2023-11-19      East Asia     20,088          15\n    189 2023-09-17    West Africa         85           0\n    218 2023-10-01  South America      4,203          54\n    469 2024-01-21  Oceania / Aus     17,503         129 \n    ```", "```py\nshowregions = ['East Asia','Southern Africa',\n...   'North America','Western Europe']\nfor j in range(len(showregions)):\n...   rt = regiontotals.loc[regiontotals.\\\n...     region==showregions[j],\n...     ['casedate','new_cases']]\n...   plt.plot(rt.casedate, rt.new_cases,\n...     label=showregions[j])\nplt.title(\"New COVID-19 Cases By Day and Region in 2023-2024\")\nplt.gca().get_xaxis().set_major_formatter(DateFormatter(\"%b\"))\nplt.ylabel(\"New Cases\")\nplt.legend()\nplt.show() \n```", "```py\nsa = \\\n  coviddaily.loc[(coviddaily.casedate.\\\n    between('2023-01-01','2023-10-31')) & \\\n    (coviddaily.region=='South America'),\n    ['casedate','new_cases']].\\\n  groupby(['casedate'])\\\n    [['new_cases']].\\\n  sum().\\\n  reset_index().\\\n  rename(columns={'new_cases':'sacases'})\nbr = coviddaily.loc[(coviddaily.\\\n  location=='Brazil') & \\\n  (coviddaily.casedate. \\\n  between('2023-01-01','2023-10-31')),\n  ['casedate','new_cases']].\\\n  rename(columns={'new_cases':'brcases'})\nsa = pd.merge(sa, br, left_on=['casedate'], right_on=['casedate'], how=\"left\")\nsa.fillna({\"sacases\": 0},\n  inplace=True)\nsa['sacasesnobr'] = sa.sacases-sa.brcases\nfig = plt.figure()\nax = plt.subplot()\nax.stackplot(sa.casedate, sa.sacases, sa.sacasesnobr, labels=['Brazil','Other South America'])\nax.xaxis.set_major_formatter(DateFormatter(\"%m-%d\"))\nplt.title(\"New COVID-19 Cases in South America in 2023\")\nplt.tight_layout()\nplt.legend(loc=\"upper left\")\nplt.show() \n```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\", parse_dates=[\"lastdate\"]) \n    ```", "```py\ncorr = covidtotals.corr(numeric_only=True)\ncorr[['total_cases','total_deaths',\n  'total_cases_pm','total_deaths_pm']] \n```", "```py\n total_cases  total_deaths  \\\ntotal_cases             1.00          0.76  \ntotal_deaths            0.76          1.00  \ntotal_cases_pm          0.10          0.01  \ntotal_deaths_pm         0.15          0.27  \npopulation              0.70          0.47  \npop_density            -0.03         -0.04  \nmedian_age              0.29          0.19  \ngdp_per_capita          0.19          0.13  \nhosp_beds               0.21          0.05  \nvac_per_hund            0.02         -0.07  \naged_65_older           0.29          0.19  \nlife_expectancy         0.19          0.11  \nhum_dev_ind             0.26          0.21  \n                 total_cases_pm  total_deaths_pm \ntotal_cases                0.10             0.15 \ntotal_deaths               0.01             0.27 \ntotal_cases_pm             1.00             0.44 \ntotal_deaths_pm            0.44             1.00 \npopulation                -0.13            -0.07 \npop_density                0.19             0.02 \nmedian_age                 0.74             0.69 \ngdp_per_capita             0.66             0.29 \nhosp_beds                  0.48             0.39 \nvac_per_hund               0.24            -0.07 \naged_65_older              0.72             0.68 \nlife_expectancy            0.69             0.49 \nhum_dev_ind                0.76             0.60 \n```", "```py\nfig, axes = plt.subplots(1,2, sharey=True)\nsns.regplot(x=\"median_age\", y=\"total_cases_pm\", data=covidtotals, ax=axes[0])\nsns.regplot(x=\"gdp_per_capita\", y=\"total_cases_pm\", data=covidtotals, ax=axes[1])\naxes[0].set_xlabel(\"Median Age\")\naxes[0].set_ylabel(\"Cases Per Million\")\naxes[1].set_xlabel(\"GDP Per Capita\")\naxes[1].set_ylabel(\"\")\nplt.suptitle(\"Scatter Plots of Age and GDP with Cases Per Million\")\nplt.tight_layout()\nfig.subplots_adjust(top=0.92)\nplt.show() \n```", "```py\n    sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, cmap=\"coolwarm\")\n    plt.title('Heat Map of Correlation Matrix')\n    plt.tight_layout()\n    plt.show() \n    ```"]