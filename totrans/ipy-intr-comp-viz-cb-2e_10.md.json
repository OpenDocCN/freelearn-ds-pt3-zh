["```py\n    In [1]: import datetime\n            import numpy as np\n            import scipy as sp\n            import scipy.fftpack\n            import pandas as pd\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: df0 = pd.read_csv('data/weather.csv', \n                              na_values=(-9999), \n                              parse_dates=['DATE'])\n    In [3]: df = df0[df0['DATE']>='19940101']\n    In [4]: df.head()\n    Out[4]:  STATION                DATE  PRCP  TMAX  TMIN\n    365  FR013055001 1994-01-01 00:00:00     0   104    72\n    366  FR013055001 1994-01-02 00:00:00     4   128    49\n    ```", "```py\n    In [5]: df_avg = df.dropna().groupby('DATE').mean()\n    In [6]: df_avg.head()\n    Out[6]:\n          DATE        PRCP        TMAX       TMIN\n    1994-01-01  178.666667  127.388889  70.333333\n    1994-01-02  122.000000  152.421053  81.736842\n    ```", "```py\n    In [7]: date = df_avg.index.to_datetime()\n            temp = (df_avg['TMAX'] + df_avg['TMIN']) / 20.\n            N = len(temp)\n    ```", "```py\n    In [8]: plt.plot_date(date, temp, '-', lw=.5)\n            plt.ylim(-10, 40)\n            plt.xlabel('Date')\n            plt.ylabel('Mean temperature')\n    ```", "```py\n    In [9]: temp_fft = sp.fftpack.fft(temp)\n    ```", "```py\n    In [10]: temp_psd = np.abs(temp_fft) ** 2\n    ```", "```py\n    In [11]: fftfreq = sp.fftpack.fftfreq(len(temp_psd), \n                                          1./365)\n    ```", "```py\n    In [12]: i = fftfreq>0\n    ```", "```py\n    In [13]: plt.plot(fftfreq[i], 10*np.log10(temp_psd[i]))\n             plt.xlim(0, 5)\n             plt.xlabel('Frequency (1/year)')\n             plt.ylabel('PSD (dB)')\n    ```", "```py\n    In [14]: temp_fft_bis = temp_fft.copy()\n             temp_fft_bis[np.abs(fftfreq) > 1.1] = 0\n    ```", "```py\n    In [15]: temp_slow = np.real(sp.fftpack.ifft(temp_fft_bis))\n    In [16]: plt.plot_date(date, temp, '-', lw=.5)\n             plt.plot_date(date, temp_slow, '-')\n             plt.xlim(datetime.date(1994, 1, 1),\n                      datetime.date(2000, 1, 1))\n             plt.ylim(-10, 40)\n             plt.xlabel('Date')\n             plt.ylabel('Mean temperature')\n    ```", "```py\n    In [1]: import numpy as np\n            import scipy as sp\n            import scipy.signal as sg\n            import pandas as pd\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: nasdaq_df = pd.read_csv('data/nasdaq.csv')\n    In [3]: nasdaq_df.head()\n    Out[3]:  Date     Open     High      Low    Close\n    0  2013-12-31  4161.51  4177.73  4160.77  4176.59 \n    1  2013-12-30  4153.58  4158.73  4142.18  4154.20 \n    ```", "```py\n    In [4]: date = pd.to_datetime(nasdaq_df['Date'])\n            nasdaq = nasdaq_df['Close']\n    ```", "```py\n    In [5]: plt.plot_date(date, nasdaq, '-')\n    ```", "```py\n    In [6]: # We get a triangular window with 60 samples.\n            h = sg.get_window('triang', 60)\n            # We convolve the signal with this window.\n            fil = sg.convolve(nasdaq, h/h.sum())\n    In [7]: # We plot the original signal...\n            plt.plot_date(date, nasdaq, '-', lw=1)\n            # ... and the filtered signal.\n            plt.plot_date(date, fil[:len(nasdaq)-1], '-')\n    ```", "```py\n    In [8]: plt.plot_date(date, nasdaq, '-', lw=1)\n            # We create a 4-th order Butterworth low-pass\n            # filter.\n            b, a = sg.butter(4, 2./365)\n            # We apply this filter to the signal.\n            plt.plot_date(date, sg.filtfilt(b, a, nasdaq), \n                          '-')\n    ```", "```py\n    In [9]: plt.plot_date(date, nasdaq, '-', lw=1)\n            b, a = sg.butter(4, 2*5./365, btype='high')\n            plt.plot_date(date, sg.filtfilt(b, a, nasdaq),\n                          '-', lw=.5)\n    ```", "```py\n    In [1]: import os\n            import numpy as np\n            import pandas as pd\n            import matplotlib.pyplot as plt\n            %matplotlib inline\n    ```", "```py\n    In [2]: files = [file for file in os.listdir('data/') \n                     if file.startswith('yob')]\n    In [3]: years = np.array(sorted([int(file[3:7]) \n                                     for file in files]))\n    In [4]: data = {year: \n                    pd.read_csv(\n                     'data/yob{y:d}.txt'.format(y=year),\n                      index_col=0, header=None, \n                      names=['First name', 'Gender', 'Number']) \n                                             for year in years}\n    In [5]: data[2012].head()\n    Out[5]:    Gender  Number\n    First name               \n    Sophia          F   22158\n    Emma            F   20791\n    Isabella        F   18931\n    Olivia          F   17147\n    Ava             F   15418\n    ```", "```py\n    In [6]: def get_value(name, gender, year):\n                \"\"\"Return the number of babies born a given \n                year, with a given gender and a given name.\"\"\"\n                try:\n                    return data[year] \\\n                           [data[year]['Gender'] == gender] \\\n                           ['Number'][name]\n                except KeyError:\n                    return 0\n    In [7]: def get_evolution(name, gender):\n                \"\"\"Return the evolution of a baby name over the\n                years.\"\"\"\n                return np.array([get_value(name, gender, year) \n                                 for year in years])\n    ```", "```py\n    In [8]: def autocorr(x):\n                result = np.correlate(x, x, mode='full')\n                return result[result.size/2:]\n    ```", "```py\n    In [9]: def autocorr_name(name, gender):\n                x = get_evolution(name, gender)\n                z = autocorr(x)\n                # Evolution of the name.\n                plt.subplot(121)\n                plt.plot(years, x, '-o', label=name)\n                plt.title(\"Baby names\")\n                # Autocorrelation.\n                plt.subplot(122)\n                plt.plot(z / float(z.max()), '-', label=name)\n                plt.legend()\n                plt.title(\"Autocorrelation\")\n    ```", "```py\n    In [10]: autocorr_name('Olivia', 'F')\n             autocorr_name('Maria', 'F')\n    ```"]