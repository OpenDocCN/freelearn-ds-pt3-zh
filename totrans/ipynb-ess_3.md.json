["```py\ndef make_logistic(r, a, b, c):\n def f_logistic(t):\n return a / (b + c * exp(-r * t))\n return f_logistic\n\n```", "```py\nr = 0.15\na = 20.0\nc = 15.0\nb1, b2, b3 = 2.0, 3.0, 4.0\nlogistic1 = make_logistic(r, a, b1, c)\nlogistic2 = make_logistic(r, a, b2, c)\nlogistic3 = make_logistic(r, a, b3, c)\n\n```", "```py\ntmax = 40\ntvalues = linspace(0, tmax, 300)\nplot(tvalues, logistic1(tvalues)) \nplot(tvalues, logistic2(tvalues)) \nplot(tvalues, logistic3(tvalues))\n\n```", "```py\ntvalues = linspace(0, tmax, 300)\n\n```", "```py\nplot(x,y)\n\n```", "```py\nx[0], y[0]\nx[1], y[1]\nx[2], y[2]\nâ€¦\n\n```", "```py\n[<matplotlib.lines.Line2D at 0x7b57c50>]\n\n```", "```py\n_dummy_ = plot(tvalues, logistic3(tvalues))\n\n```", "```py\ntmax = 40\ntvalues = linspace(0, tmax, 300)\nplot(tvalues, logistic1(tvalues), \n tvalues, logistic2(tvalues), \n tvalues, logistic3(tvalues))\n\n```", "```py\n[<matplotlib.lines.Line2D at 0x9bb6cc0>,\n <matplotlib.lines.Line2D at 0x9bb6ef0>,\n <matplotlib.lines.Line2D at 0x9bb9518>]\n\n```", "```py\nplot(tvalues, logistic1(tvalues), \n linewidth=1.5, color='DarkGreen', linestyle='-') \nplot(tvalues, logistic2(tvalues), \n linewidth=2.0, color='#8B0000', linestyle=':') \nplot(tvalues, logistic3(tvalues), \n linewidth=3.5, color=(0.0, 0.0, 0.5), linestyle='--')\naxis([0, tmax, 0, 11.])\nNone\n\n```", "```py\naxis([0, tmax, 0, 11.])\n\n```", "```py\nplot(tvalues, logistic1(tvalues), \n linewidth=1.5, color='DarkGreen', linestyle='-',\n marker='o', markevery=50, markerfacecolor='GreenYellow',\n markersize=10.0) \nplot(tvalues, logistic2(tvalues), \n linewidth=2.0, color='#8B0000', linestyle=':',\n marker='s', markevery=50, markerfacecolor='Salmon',\n markersize=10.0) \nplot(tvalues, logistic3(tvalues), \n linewidth=2.0, color=(0.0, 0.0, 0.5), linestyle='--',\n marker = '*', markevery=50, markerfacecolor='SkyBlue',\n markersize=12.0)\naxis([0, tmax, 0, 11.])\nNone\n\n```", "```py\ntitle('Logistic growth: a={:5.2f}, c={:5.2f}, r={:5.2f}'.format(a, c, r))\nxlabel('$t$')\nylabel('$N(t)=a/(b+ce^{-rt})$')\n\n```", "```py\ntitle('Logistic growth: a={:5.2f}, b={:5.2f}, r={:5.2f}'.format(a, c, r)) \n\n```", "```py\nxlabel('$t$')\nylabel('$N(t)=a/(b+ce^{-rt})$')\n\n```", "```py\nlegend(['b={:5.2f}'.format(b1),\n 'b={:5.2f}'.format(b2),\n 'b={:5.2f}'.format(b3)])\n\n```", "```py\nlegend(['b={:5.2f}'.format(b1),\n 'b={:5.2f}'.format(b2),\n 'b={:5.2f}'.format(b3)], loc='upper left')\n\n```", "```py\nlegend(['b={:5.2f}'.format(b1),\n 'b={:5.2f}'.format(b2),\n 'b={:5.2f}'.format(b3)],  bbox_to_anchor=(0.9,0.35))\n\n```", "```py\nf = lambda x:  (x**3 - 6*x**2 + 9*x + 3) / (1 + 0.25*x**2)\nxvalues = linspace(0, 5, 200)\n\n```", "```py\nlambda <arguments> : <return expression>\n\n```", "```py\nplot(xvalues, f(xvalues), lw=2, color='FireBrick')\naxis([0, 5, -1, 8])\ngrid()\nxlabel('$x$')\nylabel('$f(x)$')\ntitle('Extreme values of a function')\nNone # Prevent text output\n\n```", "```py\nx_min = 3.213\nf_min = f(x_min)\nx_max = 0.698\nf_max = f(x_max)\np_min = array([x_min, f_min])\np_max = array([x_max, f_max])\nprint p_min\nprint p_max\n\n```", "```py\narrow_props = dict(facecolor='DimGray', width=3, shrink=0.05, \n headwidth=7)\ndelta = array([0.1, 0.1])\noffset = array([1.0, .85])\nannotate('Maximum', xy=p_max+delta, xytext=p_max+offset,\n arrowprops=arrow_props, verticalalignment='bottom',\n horizontalalignment='left', fontsize=13)\nannotate('Minimum', xy=p_min-delta, xytext=p_min-offset,\n arrowprops=arrow_props, verticalalignment='top',\n horizontalalignment='right', fontsize=13)\n\n```", "```py\nbbox_props = dict(boxstyle='round', lw=2, fc='Beige')\ntext(2, 6, 'Maximum and minimum points\\nhave horizontal tangents', \n bbox=bbox_props, fontsize=12, verticalalignment='top')\n\n```", "```py\nplot([x_min-0.75, x_min+0.75], [f_min, f_min],\n color='RoyalBlue', lw=3)\nplot([x_max-0.75, x_max+0.75], [f_max, f_max],\n color='RoyalBlue', lw=3)\n\n```", "```py\nfrom mpl_toolkits.mplot3d import axes3d\n\n```", "```py\ndef dist(x, y):\n return sqrt(x**2 + y**2) \ndef fsurface(x, y):\n d = sqrt(x**2 + y**2)\n c = 5.0\n r = 7.5\n return c - (d**4 - r * d**2)\n\nxybound = 2.5\nfig = figure(figsize=(8,8))\nax = subplot(1, 1, 1, projection='3d')\nX = linspace(-xybound, xybound, 25)\nY = linspace(-xybound, xybound, 25)\nX, Y = meshgrid(X, Y)\nZ = fsurface(X,Y)\nax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\n antialiased=True, linewidth=0.2)\nax.set_xlabel(r'$x$')\nax.set_ylabel(r'$y$')\nax.set_zlabel(r'$f(x,y)$')\nNone #Prevent text output\n\n```", "```py\nfig = figure(figsize=(8,8))\nax = subplot(1, 1, 1, projection='3d')\n```", "```py\nxybound = 2.5\nx = linspace(-xybound, xybound, 25)\ny = linspace(-xybound, xybound, 25)\nX, Y = meshgrid(x, y)\n\n```", "```py\nxx = [1,2,3]\nyy = [4,5,6]\nXX, YY = meshgrid(xx, yy)\nprint XX\nprint YY\n\n```", "```py\n    [[1 2 3]\n     [1 2 3]\n     [1 2 3]]\n    ```", "```py\n    [[4 4 4]\n     [5 5 5]\n     [6 6 6]]\n    ```", "```py\nZ = fsurface(X,Y)\nax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\n antialiased=True, linewidth=0.2)\nax.set_xlabel(r'$x$')\nax.set_ylabel(r'$y$')\nax.set_zlabel(r'$f(x,y)$')\n\n```", "```py\nfor key, value in cm.__dict__.items():\n if isinstance(value, matplotlib.colors.Colormap):\n print key\n\n```", "```py\nfig = figure(figsize(20,8))\nax1 = subplot(1, 2, 1, projection='3d')\nX = linspace(-xybound, xybound, 100)\nY = linspace(-xybound, xybound, 100)\nX, Y = np.meshgrid(X, Y)\nZ = fsurface(X,Y)\nax1.plot_surface(X, Y, Z, rstride=5, cstride=5, cmap=cm.coolwarm,\n antialiased=True, linewidth=0.2)\nax1.set_xlabel(r'$x$')\nax1.set_ylabel(r'$y$')\nax1.set_zlabel(r'$f(x,y)$')\nax1.set_title('A surface plot', fontsize=18)\nax2 = subplot(1, 2, 2)\nax2.set_aspect('equal')\nlevels = arange(5, 20, 2.5)\ncs = ax2.contour(X, Y, Z,\n levels,\n cmap=cm.Reds,\n linewidths=1.5)\ncs.clabel(levels[1::2], fontsize=12)\nax2.set_title('Contour Plot', fontsize=18)\n\n```", "```py\nax1 = subplot(1, 2, 1, projection='3d')\nax2 = subplot(1, 2, 2)\n\n```", "```py\nsubplot(nrows, ncols, axis_position, **kwargs)\n\n```", "```py\nfig = figure(figsize=(5,6))\nnrows = 3\nncols = 2\nfor i in range(nrows*ncols):\n ax = subplot(nrows, ncols, i+1, axisbg='Bisque')\n axis([0,10,0,5])\n text(1, 2.2, 'subplot({},{},{})'.format(nrows, ncols, i+1),\n fontsize=14, color='Brown')\n\n```", "```py\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as patches\nimport matplotlib.lines as lines\nfrom scipy.integrate import ode\nfrom IPython.display import display, clear_output\nimport time\n\n```", "```py\ndef draw_pendulum(ax, theta, length=5, radius=1):\n v = length * np.array([np.sin(theta), -np.cos(theta)])\n ax.axhline(0.0, color='Brown', lw=5, zorder=0)\n rod = lines.Line2D([0.0, v[0]], [0.0, v[1]], \n lw=4, color='DarkGray', zorder=1)\n bob = patches.Circle(v, radius, \n fc='DodgerBlue', ec='DarkSlateGray', \n lw=1.5, zorder=3)\n peg = patches.Circle([0.0, 0.0], 0.3, \n fc='black', zorder=2)\n ax.add_patch(bob)\n ax.add_patch(peg)\n ax.add_line(rod)\n return ax\n\n```", "```py\nfig = plt.figure(figsize=(5,5))\nax = fig.add_subplot(1, 1, 1)\nax.set_aspect('equal')\nax.set_xlim(-10,10)\nax.set_ylim(-20,0.5)\ndraw_pendulum(ax, np.pi / 10, length=15, radius=0.5)\nax.set_xticks([])\nax.set_yticks([])\n\n```", "```py\ndef pendulum_eq(t, x, c=1, f=lambda t:0.0):\n theta, omega = x\n return np.array([omega,\n -np.sin(theta) - c * omega + f(t)], \n dtype=np.float64)\nsolver = ode(pendulum_eq)\nsolver.set_integrator('lsoda')\nc = 0.3\nf = lambda t: 2.0 * np.sin(3 * t)\nsolver.set_f_params(c, f)\n\n```", "```py\ntmax = 20.0\ndt = 0.2\n\nfig = plt.figure(1,figsize=(5,5))\nax = plt.subplot(1,1,1)\nax.set_aspect('equal')\nax.set_xlim(-10,10)\nax.set_ylim(-20,0.5)\nxtext = -9\nytext = -2\ndytext = -1.0\n\nic = np.array([0.0, 0.3])\nsolver.set_initial_value(ic, 0.0)\nwhile True:\n clear_output(wait=True)\n time.sleep(1./20)\n t = solver.t\n if t > tmax:\n break\n theta, omega = solver.integrate(t + dt)\n if not solver.successful():\n print 'Solver interrupted'\n break\n ax.clear()\n ax.set_xticks([])\n ax.set_yticks([])\n ax.text(xtext, ytext, r'$t={:5.2f}$'.format(t))\n ax.text(xtext, ytext + dytext, \n r'$\\theta={:5.2f}$'.format(theta))\n ax.text(xtext, ytext + 2 * dytext, \n r'$\\dot{{\\theta}}={:5.2f}$'.format(omega))\n draw_pendulum(ax, theta=theta, length=15, radius=0.5)\n display(fig)\n plt.close()\n\n```", "```py\nwhile True:\n clear_output(wait=True)\n time.sleep(1./20)\n t = solver.t\n if t > tmax:\n break\n\n ... Code to determine the position of the pendulum...\n\n ... Code to draw pendulum ...\n\n display(fig)\n plt.close()\n\n```", "```py\n t = solver.t\n if t > tmax:\n break\n\n```"]