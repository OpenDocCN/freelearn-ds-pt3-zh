["```py\nmkdir pretty_trees\n```", "```py\ncp trees_app/trees.csv pretty_trees\n```", "```py\ntouch pretty_trees.py\n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW')\ntrees_df = pd.read_csv('trees.csv')\ncol1, col2, col3 = st.beta_columns((1,1,1))\nwith col1:\n     st.write('First column')\nwith col2:\n     st.write('Second column')\nwith col3:\n     st.write('Third column')\n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW')\ntrees_df = pd.read_csv('trees.csv')\ncol1, col2, col3 = st.beta_columns((1,1,1))\ncol1.write('First column')\ncol2.write('Second column')\ncol3.write('Third column')\n```", "```py\n#option 1\ncol1, col2, col3 = st.beta_columns((1,1,1))\n#option 2\ncol1, col2, col3 = st.beta_columns((10,10,10))\n#option 3\ncol1, col2, col3 = st.beta_columns(3)\n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW')\ntrees_df = pd.read_csv('trees.csv')\nfirst_width = st.number_input('First Width', min_value=1, value=1)\nsecond_width = st.number_input('Second Width', min_value=1, value=1)\nthird_width = st.number_input('Third Width', min_value=1, value=1)\ncol1, col2, col3 = st.beta_columns(\n      (first_width,second_width,third_width))\nwith col1:\n     st.write('First column')\nwith col2:\n     st.write('Second column')\nwith col3:\n     st.write('Third column')\n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW')\ntrees_df = pd.read_csv('trees.csv')\ndf_dbh_grouped = pd.DataFrame(trees_df.groupby(['dbh']).count()['tree_id'])\ndf_dbh_grouped.columns = ['tree_count']\nst.line_chart(df_dbh_grouped)\nst.bar_chart(df_dbh_grouped)\nst.area_chart(df_dbh_grouped)\n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW')\ntrees_df = pd.read_csv('trees.csv')\ndf_dbh_grouped = pd.DataFrame(trees_df.groupby(['dbh']).count()['tree_id'])\ndf_dbh_grouped.columns = ['tree_count']\ncol1, col2, col3 = st.beta_columns(3)\nwith col1:\n     st.line_chart(df_dbh_grouped)\nwith col2:\n     st.bar_chart(df_dbh_grouped)\nwith col3:\n     st.area_chart(df_dbh_grouped)\n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.set_page_config(layout='wide')\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW')\ntrees_df = pd.read_csv('trees.csv')\ndf_dbh_grouped = pd.DataFrame(trees_df.groupby(['dbh']).count()['tree_id'])\ndf_dbh_grouped.columns = ['tree_count']\ncol1, col2, col3 = st.beta_columns(3)\nwith col1:\n     st.line_chart(df_dbh_grouped)\nwith col2:\n     st.bar_chart(df_dbh_grouped)\nwith col3:\n     st.area_chart(df_dbh_grouped)\n```", "```py\nimport streamlit as st\nimport pandas as pd\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW. The '\n         'histogram below is filtered by tree owner.')\ntrees_df = pd.read_csv('trees.csv')\nowners = st.sidebar.multiselect(\n     'Tree Owner Filter', trees_df['caretaker'].unique())\nif owners:\n     trees_df = trees_df[trees_df['caretaker'].isin(owners)] \ndf_dbh_grouped = pd.DataFrame(trees_df.groupby(['dbh']).count()['tree_id'])\ndf_dbh_grouped.columns = ['tree_count']\nst.line_chart(df_dbh_grouped)\n```", "```py\nimport streamlit as st\nimport pandas as pd\ntrees_df = pd.read_csv('trees.csv')\nowners = st.sidebar.multiselect(\n     'Tree Owner Filter', trees_df['caretaker'].unique())\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW. The '\n         'histogram below is filtered by tree owner.')\nst.write('The current analysis is of trees owned by {}'.format(owners))\nif owners:\n     trees_df = trees_df[trees_df['caretaker'].isin(owners)] \ndf_dbh_grouped = pd.DataFrame(trees_df.groupby(['dbh']).count()['tree_id'])\ndf_dbh_grouped.columns = ['tree_count']\nst.line_chart(df_dbh_grouped)\ntrees_df = trees_df.dropna(subset=['longitude', 'latitude'])\ntrees_df = trees_df.sample(n = 1000, replace=True)\nst.map(trees_df)\n```", "```py\nimport streamlit as st\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW. The '\n         'histogram below is filtered by tree owner.')\ntrees_df = pd.read_csv('trees.csv')\ntrees_df['age'] = (pd.to_datetime('today') -\n                   pd.to_datetime(trees_df['date'])).dt.days\nowners = st.sidebar.multiselect(\n     'Tree Owner Filter', trees_df['caretaker'].unique())\nif owners:\n     trees_df = trees_df[trees_df['caretaker'].isin(owners)] \ndf_dbh_grouped = pd.DataFrame(trees_df.groupby(['dbh']).count()['tree_id'])\ndf_dbh_grouped.columns = ['tree_count']\n```", "```py\n#define multiple columns, add two graphs\ncol1, col2 = st.beta_columns(2)\nwith col1:\n     st.write('Trees by Width')\n     fig_1, ax_1 = plt.subplots()\n     ax_1 = sns.histplot(trees_df['dbh'])\n     plt.xlabel('Tree Width')\n     st.pyplot(fig_1)\nwith col2:\n     st.write('Trees by Age')\n     fig_2, ax_2 = plt.subplots()\n     ax_2 = sns.histplot(trees_df['age'])\n     plt.xlabel('Age (Days)')\n     st.pyplot(fig_2)\nst.write('Trees by Location')\ntrees_df = trees_df.dropna(subset=['longitude', 'latitude'])\ntrees_df = trees_df.sample(n = 1000, replace=True)\nst.map(trees_df)\n```", "```py\nimport streamlit as st\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt\nst.title('SF Trees')\nst.write('This app analyses trees in San Francisco using'\n         ' a dataset kindly provided by SF DPW. The '\n         'histogram below is filtered by tree owner.')\n#load trees dataset, add age column in days\ntrees_df = pd.read_csv('trees.csv')\ntrees_df['age'] = (pd.to_datetime('today') -\n                   pd.to_datetime(trees_df['date'])).dt.days\n#add tree owner filter to sidebar, then filter, get color \nowners = st.sidebar.multiselect(\n     'Tree Owner Filter', trees_df['caretaker'].unique())\ngraph_color = st.sidebar.color_picker('Graph Colors')\nif owners:\n     trees_df = trees_df[trees_df['caretaker'].isin(owners)] \n#group by dbh for leftmost graph\ndf_dbh_grouped = pd.DataFrame(trees_df.groupby(['dbh']).count()['tree_id'])\ndf_dbh_grouped.columns = ['tree_count']\n```", "```py\n#define multiple columns, add two graphs\ncol1, col2 = st.beta_columns(2)\nwith col1:\n     st.write('Trees by Width')\n     fig_1, ax_1 = plt.subplots()\n     ax_1 = sns.histplot(trees_df['dbh'], \n          color=graph_color)\n     plt.xlabel('Tree Width')\n     st.pyplot(fig_1)\nwith col2:\n     st.write('Trees by Age')\n     fig_2, ax_2 = plt.subplots()\n     ax_2 = sns.histplot(trees_df['age'],\n          color=graph_color)\n     plt.xlabel('Age (Days)')\n     st.pyplot(fig_2)\nst.write('Trees by Location')\ntrees_df = trees_df.dropna(subset=['longitude', 'latitude'])\ntrees_df = trees_df.sample(n = 1000, replace=True)\nst.map(trees_df)\n```", "```py\n[theme]\n# Primary accent color for interactive elements.\nprimaryColor = \"#de8ba1\"\n# Background color for the main content area.\nbackgroundColor = \"#f4f1ea\"\n# Background color used for the sidebar and most interactive widgets.\nsecondaryBackgroundColor = \"#9fe4cc\"\n# Color used for almost all text.\ntextColor = \"#262730\"\n```"]