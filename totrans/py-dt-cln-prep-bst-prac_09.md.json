["```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.preprocessing import MinMaxScaler\n    ```", "```py\n    np.random.seed(42)\n    num_samples = 100\n    ```", "```py\n        square_footage = np.random.uniform(500, 5000, num_samples)\n        ```", "```py\n        distance_to_school = np.random.uniform(0.1, 5, num_samples)\n        ```", "```py\n        commute_distance = np.random.exponential(5, num_samples)\n        ```", "```py\n        traffic_density = np.random.exponential(2, num_samples)\n        ```", "```py\n    data = pd.DataFrame({\n            'Square_Footage': square_footage,\n            'Distance_to_School': distance_to_school,\n            'Commute_Distance': commute_distance,\n            'Traffic_Density': traffic_density\n    })\n    ```", "```py\n    plt.figure(figsize=(12, 8))\n    ```", "```py\n    print(\"Original Dataset Statistics:\")\n    print(data.describe())\n    ```", "```py\n    scaler = MinMaxScaler()\n    data_scaled = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)\n    ```", "```py\n    print(\"\\nDataset Statistics After Scaling:\")\n    print(data_scaled.describe())\n    ```", "```py\n    plt.figure(figsize=(12, 8))\n    ```", "```py\n    data_zscore = (data - data.mean()) / data.std()\n    ```", "```py\n    print(\"\\nDataset Statistics after Z-score Scaling:\")\n    print(data_zscore.describe())\n    ```", "```py\n    data_zscore.hist(figsize=(12, 10), bins=20, color='green', alpha=0.7)\n    plt.suptitle('Data Distributions after Z-score Scaling')\n    plt.show()\n    ```", "```py\nrobust_scaler = RobustScaler()\ndata_scaled = robust_scaler.fit_transform(data)\n```"]