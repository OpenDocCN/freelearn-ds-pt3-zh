["```py\n%pip install mlflow\n```", "```py\nimport mlflow\nimport mlflow.spark\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.regression import LinearRegression\nfrom pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n```", "```py\nmlflow.set_tracking_uri(\"databricks\")\nretail_features = spark.read.table(\"retail_features\")\nretail_df = retail_features.selectExpr(\"cust_age as label\", \"selected_features as features\")\ntrain_df, test_df = retail_df.randomSplit([0.9, 0.1])\n```", "```py\nevaluator = RegressionEvaluator(labelCol=\"label\", \n                                metricName=\"rmse\")\nmlflow.set_tracking_uri(\"databricks\")\nmlflow.set_experiment(\"/Users/snudurupati@outlook.com/linregexp\")\nexperiment = mlflow.get_experiment_by_name(\"/Users/snudurupati@outlook.com/linregexp\")\n```", "```py\nlr = LinearRegression(maxIter=10)\nparamGrid = (ParamGridBuilder()\n    .addGrid(lr.regParam, [0.1, 0.01]) \n    .addGrid(lr.fitIntercept, [False, True])\n    .addGrid(lr.elasticNetParam, [0.0, 0.5, 1.0])\n    .build())\ncsv = CrossValidator(estimator=lr,\n                          estimatorParamMaps=param_grid,\n                          evaluator=RegressionEvaluator(),\n                          numFolds=2)\n```", "```py\nwith mlflow.start_run() as run_id:\n  lr_model = csv.fit(train_df)\n  test_metric = evaluator.evaluate(lr_model.transform(test_df))\n  mlflow.log_metric(evaluator.getMetricName(), \n                    test_metric) \n  mlflow.spark.log_model(spark_model=lr_model.bestModel, \n                         artifact_path='best-model') \n```", "```py\nimport mlflow\nfrom mlflow.tracking.client import MlflowClient\nclient = MlflowClient()\nmodel_name = \"linear-regression-model\"\nartifact_path = \"best_model\"\nmodel_uri = \"runs:/{run_id}/{artifact_path}\".format (run_id=run_id, artifact_path=artifact_path)\nregistered_model = mlflow.register_model(model_uri=model_uri, name=model_name, )\nclient.update_model_version(\n  name=registered_model.name,\n  version=registered_model.version,\n  description=\"This predicts the age of a customer using transaction history.\"\n)\nclient.transition_model_version_stage(\n  name=registered_model.name,\n  version=registered_model.version,\n  stage='Staging',\n)\nmodel_version = client.get_model_version(\n  name=registered_model.name,\n  version=registered_model.version,\n)\nmodel_uri = \"models:/{model_name}/staging\".format(model_name=model_name)\nspark_model = mlflow.spark.load_model(model_uri)\n```", "```py\nmodel_uri = \"runs:/{run_id}/{artifact_path}\".format(run_id=active_run.info.run_id, artifact_path=\"best-model\")\nspark_udf = mlflow.pyfunc.spark_udf(spark, model_uri)\npredictions_df = retail_df.withColumn(\"predictions\", spark_udf(struct(\"features\")))\npredictions_df.write.format(\"delta\").save(\"/tmp/retail_predictions\")\n```", "```py\nmlflow models serve -m \"models:/ linear-regression-model/Production\"\n```"]