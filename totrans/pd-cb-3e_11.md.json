["```py\n`arr = np.arange(1, 10).reshape(3, -1) df = pd.DataFrame(arr) df` \n```", "```py\n `0    1    2 0    1    2    3 1    4    5    6 2    7    8    9` \n```", "```py\n`df.to_numpy()` \n```", "```py\n`array([[1, 2, 3],       [4, 5, 6],       [7, 8, 9]])` \n```", "```py\n`np.log(df)` \n```", "```py\n `0           1           2 0    0.000000    0.693147    1.098612 1    1.386294    1.609438    1.791759 2    1.945910    2.079442    2.197225` \n```", "```py\n`tbl = pa.Table.from_pandas(df) tbl` \n```", "```py\n`pyarrow.Table 0: int64 1: int64 2: int64 ---- 0: [[1,4,7]] 1: [[2,5,8]] 2: [[3,6,9]]` \n```", "```py\n`tbl.to_pandas()` \n```", "```py\n `0    1    2 0    1    2    3 1    4    5    6 2    7    8    9` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     usecols=[         \"id\",         \"engId\",         \"make\",         \"model\",         \"cylinders\",         \"city08\",         \"highway08\",         \"year\",         \"trany\",     ] ) df.head()` \n```", "```py\n `city08   cylinders   engId   …   model               trany           year 0   19       4           9011    …   Spider Veloce 2000  Manual 5-spd    1985 1   9        12          22020   …   Testarossa          Manual 5-spd    1985 2   23       4           2100    …   Charger             Manual 5-spd    1985 3   10       8           2850    …   B150/B250 Wagon 2WD Automatic 3-spd 1985 4   17       4           66031   …   Legacy AWD Turbo    Manual 5-spd    1993 5 rows × 9 columns` \n```", "```py\n`from ydata_profiling import ProfileReport profile = ProfileReport(df, title=\"Vehicles Profile Report\")` \n```", "```py\n`profile.to_widgets()` \n```", "```py\n`profile.to_file(\"vehicles_profile.html\")` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     dtype={         \"rangeA\": pd.StringDtype(),         \"mfrCode\": pd.StringDtype(),         \"c240Dscr\": pd.StringDtype(),         \"c240bDscr\": pd.StringDtype()     } ) df.head()` \n```", "```py\n `barrels08  barrelsA08  charge120  …  phevCity  phevHwy  phevComb 0  14.167143  0.0         0.0        …  0         0        0 1  27.046364  0.0         0.0        …  0         0        0 2  11.018889  0.0         0.0        …  0         0        0 3  27.046364  0.0         0.0        …  0         0        0 4  15.658421  0.0         0.0        …  0         0        0 5 rows × 84 columns` \n```", "```py\n`import great_expectations as gx context = gx.get_context()` \n```", "```py\n`datasource = context.data_sources.add_pandas(name=\"pandas_datasource\") data_asset = datasource.add_dataframe_asset(name=\"vehicles\")` \n```", "```py\n`batch_definition_name = \"dataframe_definition\" batch_definition = data_asset.add_batch_definition_whole_dataframe(     batch_definition_name ) batch = batch_definition.get_batch(batch_parameters={     \"dataframe\": df })` \n```", "```py\n`city_exp = gx.expectations.ExpectColumnValuesToNotBeNull(     column=\"city08\" ) result = batch.validate(city_exp) print(result)` \n```", "```py\n`{   \"success\": true,   \"expectation_config\": {     \"type\": \"expect_column_values_to_not_be_null\",     \"kwargs\": {       \"batch_id\": \"pandas_datasource-vehicles\",       \"column\": \"city08\"     },     \"meta\": {}   },   \"result\": {     \"element_count\": 48130,     \"unexpected_count\": 0,     \"unexpected_percent\": 0.0,     \"partial_unexpected_list\": [],     \"partial_unexpected_counts\": [],     \"partial_unexpected_index_list\": []   },   \"meta\": {},   \"exception_info\": {     \"raised_exception\": false,     \"exception_traceback\": null,     \"exception_message\": null   } }` \n```", "```py\n`cylinders_exp = gx.expectations.ExpectColumnValuesToNotBeNull(     column=\"cylinders\" ) result = batch.validate(cylinders_exp) print(result)` \n```", "```py\n`{   \"success\": false,   \"expectation_config\": {     \"type\": \"expect_column_values_to_not_be_null\",     \"kwargs\": {       \"batch_id\": \"pandas_datasource-vehicles\",       \"column\": \"cylinders\"     },     \"meta\": {}   },   \"result\": {     \"element_count\": 48130,     \"unexpected_count\": 965,     \"unexpected_percent\": 2.0049864949096197,     \"partial_unexpected_list\": [       null,       null,       ...       null,       null     ],     \"partial_unexpected_counts\": [       {         \"value\": null,         \"count\": 20       }     ],     \"partial_unexpected_index_list\": [       7138,       7139,       8143,       ...       23022,       23023,       23024     ]   },   \"meta\": {},   \"exception_info\": {     \"raised_exception\": false,     \"exception_traceback\": null,     \"exception_message\": null   } }` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     dtype={         \"rangeA\": pd.StringDtype(),         \"mfrCode\": pd.StringDtype(),         \"c240Dscr\": pd.StringDtype(),         \"c240bDscr\": pd.StringDtype()     } ) df.head()` \n```", "```py\n `barrels08  barrelsA08  charge120  …  phevCity  phevHwy  phevComb 0  14.167143  0.0         0.0        …  0         0        0 1  27.046364  0.0         0.0        …  0         0        0 2  11.018889  0.0         0.0        …  0         0        0 3  27.046364  0.0         0.0        …  0         0        0 4  15.658421  0.0         0.0        …  0         0        0 5 rows × 84 columns` \n```", "```py\n`df.plot(     kind=\"scatter\",     x=\"city08\",     y=\"highway08\",     backend=\"plotly\",     hover_data={\"make\": True, \"model\": True, \"year\": True}, )` \n```", "```py\n`import pygwalker as pyg pyg.walk(df)` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     dtype={         \"rangeA\": pd.StringDtype(),         \"mfrCode\": pd.StringDtype(),         \"c240Dscr\": pd.StringDtype(),         \"c240bDscr\": pd.StringDtype()     } ) df.head()` \n```", "```py\n `barrels08  barrelsA08  charge120  …  phevCity  phevHwy  phevComb 0  14.167143  0.0         0.0        …  0         0        0 1  27.046364  0.0         0.0        …  0         0        0 2  11.018889  0.0         0.0        …  0         0        0 3  27.046364  0.0         0.0        …  0         0        0 4  15.658421  0.0         0.0        …  0         0        0 5 rows × 84 columns` \n```", "```py\n`num_df = df.select_dtypes(include=[\"number\"]) num_df = num_df.drop(columns=[\"cylinders\", \"displ\"])` \n```", "```py\n`from sklearn.model_selection import train_test_split target_col = \"comb08\" X = num_df.drop(columns=[target_col]) y = num_df[target_col] X_train, X_test, y_train, y_test = train_test_split(X, y)` \n```", "```py\n`from sklearn import linear_model   regr = linear_model.LinearRegression() regr.fit(X_train, y_train) y_pred = regr.predict(X_test)` \n```", "```py\n`from sklearn.metrics import mean_squared_error mean_squared_error(y_test, y_pred)` \n```", "```py\n`0.11414180317382835` \n```", "```py\n`brands = {\"Dodge\", \"Toyota\", \"Volvo\", \"BMW\", \"Buick\", \"Audi\", \"Volkswagen\", \"Subaru\"} df2 = df[df[\"make\"].isin(brands)] df2 = df2.drop(columns=[\"cylinders\", \"displ\"])` \n```", "```py\n`X = df2.select_dtypes(include=[\"number\"]) y = df2[\"make\"].astype(pd.CategoricalDtype())` \n```", "```py\n`X_train, X_test, y_train, y_test = train_test_split(X, y.cat.codes)` \n```", "```py\n`from xgboost import XGBClassifier bst = XGBClassifier() bst.fit(X_train, y_train) preds = bst.predict(X_test)` \n```", "```py\n`accuracy = (preds == y_test).sum() / len(y_test) print(f\"Model prediction accuracy is: {accuracy:.2%}\")` \n```", "```py\n`Model prediction accuracy is: 97.07%` \n```", "```py\n`df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     dtype={         \"rangeA\": pd.StringDtype(),         \"mfrCode\": pd.StringDtype(),         \"c240Dscr\": pd.StringDtype(),         \"c240bDscr\": pd.StringDtype()     } ) df.head()` \n```", "```py\n `barrels08  barrelsA08  charge120  …  phevCity  phevHwy  phevComb 0  14.167143  0.0         0.0        …  0         0        0 1  27.046364  0.0         0.0        …  0         0        0 2  11.018889  0.0         0.0        …  0         0        0 3  27.046364  0.0         0.0        …  0         0        0 4  15.658421  0.0         0.0        …  0         0        0 5 rows × 84 columns` \n```", "```py\n`import duckdb duckdb.sql(\"CREATE TABLE vehicles AS SELECT * FROM df\")` \n```", "```py\n`duckdb.sql(\"SELECT COUNT(*) FROM vehicles WHERE make = 'Honda'\")` \n```", "```py\n`┌──────────────┐ │ count_star() │ │    int64     │ ├──────────────┤ │         1197 │ └──────────────┘` \n```", "```py\n`duckdb.sql(     \"SELECT make, model, year, id, city08 FROM vehicles where make = 'Honda' LIMIT 5\" ).df()` \n```", "```py\n `make    model          year   id      city08 0   Honda   Accord Wagon   1993   10145   18 1   Honda   Accord Wagon   1993   10146   20 2   Honda   Civic Del Sol  1994   10631   25 3   Honda   Civic Del Sol  1994   10632   30 4   Honda   Civic Del Sol  1994   10633   23` \n```", "```py\n`df.groupby(\"column\").agg(result=\"sum\")` \npd.DataFrame.groupby). Behind the scenes, pandas dictates how the pd.DataFrame is stored (in memory using pandas’ own representation) and even dictates how the summation should be performed against that in-memory representation.\n```", "```py\n`df.group_by(\"column\").agg(result=df.sum())` \n```", "```py\n`import ibis df = pd.read_csv(     \"data/vehicles.csv.zip\",     dtype_backend=\"numpy_nullable\",     usecols=[\"id\", \"year\", \"make\", \"model\", \"city08\"], ) t = ibis.memtable(df)` \n```", "```py\n`t.filter(t.make == \"Honda\").select(\"make\", \"model\", \"year\", \"city08\")` \n```", "```py\n`r0 := InMemoryTable   data:     PandasDataFrameProxy:              city08     id        make                model  year       0          19      1  Alfa Romeo   Spider Veloce 2000  1985       1           9     10     Ferrari           Testarossa  1985       2          23    100       Dodge              Charger  1985       3          10   1000       Dodge  B150/B250 Wagon 2WD  1985       4          17  10000      Subaru     Legacy AWD Turbo  1993       ...       ...    ...         ...                  ...   ...       48125      19   9995      Subaru               Legacy  1993       48126      20   9996      Subaru               Legacy  1993       48127      18   9997      Subaru           Legacy AWD  1993       48128      18   9998      Subaru           Legacy AWD  1993       48129      16   9999      Subaru     Legacy AWD Turbo  1993         [48130 rows x 5 columns]  r1 := Filter[r0]   r0.make == 'Honda'  Project[r1]   make:   r1.make   model:  r1.model   year:   r1.year   city08: r1.city08` \n```", "```py\n`t.filter(t.make == \"Honda\").select(\"make\", \"model\", \"year\", \"city08\").to_pandas().head()` \n```", "```py\n `make    model          year   city08 0    Honda   Accord Wagon   1993   18 1    Honda   Accord Wagon   1993   20 2    Honda   Civic Del Sol  1994   25 3    Honda   Civic Del Sol  1994   30 4    Honda   Civic Del Sol  1994   23` \n```", "```py\n`t.filter(t.make == \"Honda\").select(\"make\", \"model\", \"year\", \"city08\").to_pyarrow()` \n```", "```py\n`pyarrow.Table make: string model: string year: int64 city08: int64 ---- make: [[\"Honda\",\"Honda\",\"Honda\",\"Honda\",\"Honda\",...,\"Honda\",\"Honda\",\"Honda\",\"Honda\",\"Honda\"]] model: [[\"Accord Wagon\",\"Accord Wagon\",\"Civic Del Sol\",\"Civic Del Sol\",\"Civic Del Sol\",...,\"Prelude\",\"Prelude\",\"Prelude\",\"Accord\",\"Accord\"]] year: [[1993,1993,1994,1994,1994,...,1993,1993,1993,1993,1993]] city08: [[18,20,25,30,23,...,21,19,19,19,21]]` \n```", "```py\n`import dask.dataframe as dd ddf = dd.from_pandas(df, npartitions=10)` \n```", "```py\n``/home/willayd/clones/Pandas-Cookbook-Third-Edition/lib/python3.9/site-packages/dask/dataframe/__init__.py:42: FutureWarning: Dask dataframe query planning is disabled because dask-expr is not installed. You can install it with `pip install dask[dataframe]` or `conda install dask`. This will raise in a future version.  warnings.warn(msg, FutureWarning)`` \n```", "```py\n`ddf.size.compute()` \n```", "```py\n`3991932` \n```", "```py\n`ddf.compute().head()` \n```", "```py\n `city08    id      make          model                 year 0    19        1       Alfa Romeo    Spider Veloce 2000    1985 1    9         10      Ferrari       Testarossa            1985 2    23        100     Dodge         Charger               1985 3    10        1000    Dodge         B150/B250 Wagon 2WD   1985 4    17        10000   Subaru        Legacy AWD Turbo      1993` \n```", "```py\n`import polars as pl pl_df = pl.from_pandas(df) pl_df.head()` \n```", "```py\n`shape: (5, 84) barrels08  barrelsA08  charge120  charge240  ...  phevCity  phevHwy  phevComb f64        f64         f64        f64        ...  i64       i64      i64 14.167143  0.0         0.0        0.0        ...    0         0        0 27.046364  0.0         0.0        0.0        ...    0         0        0 11.018889  0.0         0.0        0.0        ...    0         0        0 27.046364  0.0         0.0        0.0        ...    0         0        0 15.658421  0.0         0.0        0.0        ...    0         0        0` \n```", "```py\n`lz_df = pl.LazyFrame(df)` \n```", "```py\n`lz_df.filter(     pl.col(\"make\") == \"Honda\" ).select([\"make\", \"model\", \"year\", \"city08\"]).collect().head()` \n```", "```py\n`shape: (5, 4) make    model   year    city08 str     str     i64     i64 \"Honda\" \"Accord Wagon\"  1993    18 \"Honda\" \"Accord Wagon\"  1993    20 \"Honda\" \"Civic Del Sol\" 1994    25 \"Honda\" \"Civic Del Sol\" 1994    30 \"Honda\" \"Civic Del Sol\" 1994    23` \n```", "```py\n`lz_df.filter(     pl.col(\"make\") == \"Honda\" ).select([\"make\", \"model\", \"year\", \"city08\"]).collect().to_pandas().head()` \n```", "```py\n `make   model          year  city08 0     Honda  Accord Wagon   1993  18 1     Honda  Accord Wagon   1993  20 2     Honda  Civic Del Sol  1994  25 3     Honda  Civic Del Sol  1994  30 4     Honda  Civic Del Sol  1994  23` \n```", "```py\n`import cudf.pandas cudf.pandas.install() import pandas as pd` \n```"]