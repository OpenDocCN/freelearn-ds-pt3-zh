["```py\n    import requests\n    server = 'http://www.uniprot.org/uniprot'\n    def do_request(server, ID='', **kwargs):\n        params = ''\n        req = requests.get('%s/%s%s' % (server, ID, params), params=kwargs)\n        if not req.ok:\n            req.raise_for_status()\n        return req\n    ```", "```py\n    req = do_request(server, query='gene:p53 AND reviewed:yes', format='tab',\n     columns='id,entry name,length,organism,organism-id,database(PDB),database(HGNC)',\n     limit='50')\n    ```", "```py\n    import pandas as pd\n    import io\n    uniprot_list = pd.read_table(io.StringIO(req.text))\n    uniprot_list.rename(columns={'Organism ID': 'ID'}, inplace=True)\n    print(uniprot_list)\n    ```", "```py\n    from Bio import ExPASy, SwissProt\n    p53_human = uniprot_list[\n        (uniprot_list.ID == 9606) &\n        (uniprot_list['Entry name'].str.contains('P53'))]['Entry'].iloc[0] \n    handle = ExPASy.get_sprot_raw(p53_human)\n    sp_rec = SwissProt.read(handle)\n    ```", "```py\n    print(sp_rec.entry_name, sp_rec.sequence_length, sp_rec.gene_name)\n    print(sp_rec.description)\n    print(sp_rec.organism, sp_rec.seqinfo)\n    print(sp_rec.sequence)\n    print(sp_rec.comments)\n    print(sp_rec.keywords)\n    ```", "```py\nP53_HUMAN 393 Name=TP53; Synonyms=P53;\n RecName: Full=Cellular tumor antigen p53; AltName: Full=Antigen NY-CO-13; AltName: Full=Phosphoprotein p53; AltName: Full=Tumor suppressor p53;\n Homo sapiens (Human). (393, 43653, 'AD5C149FD8106131')\n MEEPQSDPSVEPPLSQETFSDLWKLLPENNVLSPLPSQAMDDLMLSPDDIEQWFTED PGPDEAPRMPEAAPPVAPAPAAPTPAAPAPAPSWPLSSSVPSQKTYQGSYGFRLGF LHSGTAKSVTCTYSPALNKMFCQLAKTCPVQLWVDSTPPPGTRVRAMAIYKQSQHM TEVVRRCPHHERCSDSDGLAPPQHLIRVEGNLRVEYLDDRNTFRHSVVVPYEPPEVG SDCTTIHYNYMCNSSCMGGMNRRPILTIITLEDSSGNLLGRNSFEVRVCACPGRDRR TEEENLRKKGEPHHELPPGSTKRALPNNTSSSPQPKKKPLDGEYFTLQIRGRERFEM FRELNEALELKDAQAGKEPGGSRAHSSHLKSKKGQSTSRHKKLMFKTEGPDSD\n```", "```py\n    from collections import defaultdict\n    done_features = set()\n    print(len(sp_rec.features))\n    for feature in sp_rec.features:\n        if feature[0] in done_features:\n            continue\n        else:\n            done_features.add(feature[0])\n            print(feature)\n    print(len(sp_rec.cross_references))\n    per_source = defaultdict(list)\n    for xref in sp_rec.cross_references:\n        source = xref[0]\n        per_source[source].append(xref[1:])\n    print(per_source.keys())\n    done_GOs = set()\n    print(len(per_source['GO']))\n    for annot in per_source['GO']:\n        if annot[1][0] in done_GOs:\n            continue\n        else:\n            done_GOs.add(annot[1][0])\n            print(annot)\n    ```", "```py\nTotal features: 1509\ntype: CHAIN\nlocation: [0:393]\nid: PRO_0000185703\nqualifiers:\n    Key: note, Value: Cellular tumor antigen p53\ntype: DNA_BIND\nlocation: [101:292]\nqualifiers:\ntype: REGION\nlocation: [0:320]\nqualifiers:\n    Key: evidence, Value: ECO:0000269|PubMed:25732823\n    Key: note, Value: Interaction with CCAR2\n[...]\nCross references:  923\ndict_keys(['EMBL', 'CCDS', 'PIR', 'RefSeq', 'PDB', 'PDBsum', 'BMRB', 'SMR', 'BioGRID', 'ComplexPortal', 'CORUM', 'DIP', 'ELM', 'IntAct', 'MINT', 'STRING', 'BindingDB', 'ChEMBL', 'DrugBank', 'MoonDB', 'TCDB', 'GlyGen', 'iPTMnet', 'MetOSite', 'PhosphoSitePlus', 'BioMuta', 'DMDM', 'SWISS-2DPAGE', 'CPTAC', 'EPD', 'jPOST', 'MassIVE', 'MaxQB', 'PaxDb', 'PeptideAtlas', 'PRIDE', 'ProteomicsDB', 'ABCD', 'Antibodypedia', 'CPTC', 'DNASU', 'Ensembl', 'GeneID', 'KEGG', 'MANE-Select', 'UCSC', 'CTD', 'DisGeNET', 'GeneCards', 'GeneReviews', 'HGNC', 'HPA', 'MalaCards', 'MIM', 'neXtProt', 'OpenTargets', 'Orphanet', 'PharmGKB', 'VEuPathDB', 'eggNOG', 'GeneTree', 'InParanoid', 'OMA', 'OrthoDB', 'PhylomeDB', 'TreeFam', 'PathwayCommons', 'Reactome', 'SABIO-RK', 'SignaLink', 'SIGNOR', 'BioGRID-ORCS', 'ChiTaRS', 'EvolutionaryTrace', 'GeneWiki', 'GenomeRNAi', 'Pharos', 'PRO', 'Proteomes', 'RNAct', 'Bgee', 'ExpressionAtlas', 'Genevisible', 'GO', 'CDD', 'DisProt', 'Gene3D', 'IDEAL', 'InterPro', 'PANTHER', 'Pfam', 'PRINTS', 'SUPFAM', 'PROSITE'])\nAnnotation SOURCES: 173\n('GO:0005813', 'C:centrosome', 'IDA:UniProtKB')\n('GO:0036310', 'F:ATP-dependent DNA/DNA annealing activity', 'IDA:UniProtKB')\n('GO:0006914', 'P:autophagy', 'IMP:CAFA')\n```", "```py\n    from Bio import PDB\n    repository = PDB.PDBList()\n    repository.retrieve_pdb_file('1TUP', pdir='.', file_format='pdb')\n    repository.retrieve_pdb_file('1OLG', pdir='.', file_format='pdb')\n    repository.retrieve_pdb_file('1YCQ', pdir='.', file_format='pdb')\n    ```", "```py\n    parser = PDB.PDBParser()\n    p53_1tup = parser.get_structure('P 53 - DNA Binding', 'pdb1tup.ent')\n    p53_1olg = parser.get_structure('P 53 - Tetramerization', 'pdb1olg.ent')\n    p53_1ycq = parser.get_structure('P 53 - Transactivation', 'pdb1ycq.ent')\n    ```", "```py\n    def print_pdb_headers(headers, indent=0):\n       ind_text = ' ' * indent\n       for header, content in headers.items():\n           if type(content) == dict:\n              print('\\n%s%20s:' % (ind_text, header))\n              print_pdb_headers(content, indent + 4)\n              print()\n           elif type(content) == list:\n              print('%s%20s:' % (ind_text, header))\n              for elem in content:\n                  print('%s%21s %s' % (ind_text, '->', elem))\n          else:\n              print('%s%20s: %s' % (ind_text, header, content))\n    print_pdb_headers(p53_1tup.header)\n    ```", "```py\n                name: tumor suppressor p53 complexed with dna\n                head: antitumor protein/dna\n              idcode: 1TUP\n     deposition_date: 1995-07-11\n        release_date: 1995-07-11\n    structure_method: x-ray diffraction\n          resolution: 2.2\n structure_reference:\n-> n.p.pavletich,k.a.chambers,c.o.pabo the dna-binding domain of p53 contains the four conserved regions and the major mutation hot spots genes dev. v. 7 2556 1993 issn 0890-9369 \n              author: Y.Cho,S.Gorina,P.D.Jeffrey,N.P.Pavletich\n            compound:\n                       2:\nmisc: \nmolecule: dna (5'-d(*ap*tp*ap*ap*tp*tp*gp*gp*gp*cp*ap*ap*gp*tp*cp*tp*a p*gp*gp*ap*a)-3') \n                       chain: f\n                  engineered: yes\nhas_missing_residues: True\n    missing_residues:\n                   -> {'model': None, 'res_name': 'ARG', 'chain': 'A', 'ssseq': 290, 'insertion': None}\nkeywords: antigen p53, antitumor protein/dna complex\n             journal: AUTH   Y.CHO,S.GORINA,P.D.JEFFREY,N.P.PAVLETICHTITL   CRYSTAL STRUCTURE OF A P53 TUMOR SUPPRESSOR-DNATITL 2 COMPLEX: UNDERSTANDING TUMORIGENIC MUTATIONS.REF    SCIENCE57\n```", "```py\n    print(p53_1tup.header['compound'])\n    print(p53_1olg.header['compound'])\n    print(p53_1ycq.header['compound'])\n    ```", "```py\n    def describe_model(name, pdb):\n    print()\n    for model in pdb:\n        for chain in model:\n            print('%s - Chain: %s. Number of residues: %d. Number of atoms: %d.' %\n                  (name, chain.id, len(chain), len(list(chain.get_atoms()))))\n    describe_model('1TUP', p53_1tup)\n    describe_model('1OLG', p53_1olg)\n    describe_model('1YCQ', p53_1ycq)\n    ```", "```py\n1TUP - Chain: E. Number of residues: 43\\. Number of atoms: 442.\n1TUP - Chain: F. Number of residues: 35\\. Number of atoms: 449.\n1TUP - Chain: A. Number of residues: 395\\. Number of atoms: 1734.\n1TUP - Chain: B. Number of residues: 265\\. Number of atoms: 1593.\n1TUP - Chain: C. Number of residues: 276\\. Number of atoms: 1610.\n\n1OLG - Chain: A. Number of residues: 42\\. Number of atoms: 698.\n1OLG - Chain: B. Number of residues: 42\\. Number of atoms: 698.\n1OLG - Chain: C. Number of residues: 42\\. Number of atoms: 698.\n1OLG - Chain: D. Number of residues: 42\\. Number of atoms: 698.\n\n1YCQ - Chain: A. Number of residues: 123\\. Number of atoms: 741.\n1YCQ - Chain: B. Number of residues: 16\\. Number of atoms: 100.\n```", "```py\n    for residue in p53_1tup.get_residues():\n        if residue.id[0] in [' ', 'W']:\n            continue\n    print(residue.id)\n    ```", "```py\n    res = next(p53_1tup[0]['A'].get_residues())\n    print(res)\n    for atom in res:\n        print(atom, atom.serial_number, atom.element)\n    p53_1tup[0]['A'][94]['CA']\n    ```", "```py\n<Residue SER het=  resseq=94 icode= >\n <Atom N> 858 N\n <Atom CA> 859 C\n <Atom C> 860 C\n <Atom O> 861 O\n <Atom CB> 862 C\n <Atom OG> 863 O\n <Atom CA>\n```", "```py\n    from Bio.SeqIO import PdbIO, FastaIO\n    def get_fasta(pdb_file, fasta_file, transfer_ids=None):\n        fasta_writer = FastaIO.FastaWriter(fasta_file)\n        fasta_writer.write_header()\n        for rec in PdbIO.PdbSeqresIterator(pdb_file):\n            if len(rec.seq) == 0:\n                continue\n            if transfer_ids is not None and rec.id not in transfer_ids:\n                continue\n            print(rec.id, rec.seq, len(rec.seq))\n            fasta_writer.write_record(rec)\n\n    get_fasta(open('pdb1tup.ent'), open('1tup.fasta', 'w'), transfer_ids=['1TUP:B'])\n    get_fasta(open('pdb1olg.ent'), open('1olg.fasta', 'w'), transfer_ids=['1OLG:B'])\n    get_fasta(open('pdb1ycq.ent'), open('1ycq.fasta', 'w'), transfer_ids=['1YCQ:B'])\n    ```", "```py\n    from Bio import PDB\n    repository = PDB.PDBList()\n    parser = PDB.PDBParser()\n    repository.retrieve_pdb_file('1TUP', pdir='.', file_format='pdb') p53_1tup = parser.get_structure('P 53', 'pdb1tup.ent')\n    ```", "```py\n    from collections import defaultdict\n    atom_cnt = defaultdict(int)\n    atom_chain = defaultdict(int)\n    atom_res_types = defaultdict(int)\n    for atom in p53_1tup.get_atoms():\n        my_residue = atom.parent\n        my_chain = my_residue.parent\n        atom_chain[my_chain.id] += 1\n        if my_residue.resname != 'HOH':\n            atom_cnt[atom.element] += 1\n        atom_res_types[my_residue.resname] += 1\n    print(dict(atom_res_types))\n    print(dict(atom_chain))\n    print(dict(atom_cnt))\n    ```", "```py\n{' DT': 257, ' DC': 152, ' DA': 270, ' DG': 176, 'HOH': 384, 'SER': 323, 'VAL': 315, 'PRO': 294, 'GLN': 189, 'LYS': 135, 'THR': 294, 'TYR': 288, 'GLY': 156, 'PHE': 165, 'ARG': 561, 'LEU': 336, 'HIS': 210, 'ALA': 105, 'CYS': 180, 'ASN': 216, 'MET': 144, 'TRP': 42, 'ASP': 192, 'ILE': 144, 'GLU': 297, ' ZN': 3}\n {'E': 442, 'F': 449, 'A': 1734, 'B': 1593, 'C': 1610}\n {'O': 1114, 'C': 3238, 'N': 1001, 'P': 40, 'S': 48, 'ZN': 3}\n```", "```py\n    res_types = defaultdict(int)\n    res_per_chain = defaultdict(int)\n    for residue in p53_1tup.get_residues():\n    res_types[residue.resname] += 1\n    res_per_chain[residue.parent.id] +=1\n    print(dict(res_types))\n    print(dict(res_per_chain))\n    ```", "```py\n{' DT': 13, ' DC': 8, ' DA': 13, ' DG': 8, 'HOH': 384, 'SER': 54, 'VAL': 45, 'PRO': 42, 'GLN': 21, 'LYS': 15, 'THR': 42, 'TYR': 24, 'GLY': 39, 'PHE': 15, 'ARG': 51, 'LEU': 42, 'HIS': 21, 'ALA': 21, 'CYS': 30, 'ASN': 27, 'MET': 18, 'TRP': 3, 'ASP': 24, 'ILE': 18, 'GLU': 33, ' ZN': 3}\n {'E': 43, 'F': 35, 'A': 395, 'B': 265, 'C': 276}\n```", "```py\n    import sys\n    def get_bounds(my_atoms):\n        my_min = [sys.maxsize] * 3\n        my_max = [-sys.maxsize] * 3\n        for atom in my_atoms:\n            for i, coord in enumerate(atom.coord):\n                if coord < my_min[i]:\n                    my_min[i] = coord\n                if coord > my_max[i]:\n                    my_max[i] = coord\n        return my_min, my_max\n    chain_bounds = {}\n    for chain in p53_1tup.get_chains():\n        print(chain.id, get_bounds(chain.get_atoms()))\n        chain_bounds[chain.id] = get_bounds(chain.get_atoms())\n    print(get_bounds(p53_1tup.get_atoms()))\n    ```", "```py\n    import matplotlib.pyplot as plt\n    from mpl_toolkits.mplot3d import Axes3D\n    fig = plt.figure(figsize=(16, 9))\n    ax3d = fig.add_subplot(111, projection='3d')\n    ax_xy = fig.add_subplot(331)\n    ax_xy.set_title('X/Y')\n    ax_xz = fig.add_subplot(334)\n    ax_xz.set_title('X/Z')\n    ax_zy = fig.add_subplot(337)\n    ax_zy.set_title('Z/Y')\n    color = {'A': 'r', 'B': 'g', 'C': 'b', 'E': '0.5', 'F': '0.75'}\n    zx, zy, zz = [], [], []\n    for chain in p53_1tup.get_chains():\n        xs, ys, zs = [], [], []\n        for residue in chain.get_residues():\n            ref_atom = next(residue.get_iterator())\n            x, y, z = ref_atom.coord\n            if ref_atom.element == 'ZN':\n                zx.append(x)\n                zy.append(y)\n                zz.append(z)\n                continue\n            xs.append(x)\n            ys.append(y)\n            zs.append(z)\n        ax3d.scatter(xs, ys, zs, color=color[chain.id])\n        ax_xy.scatter(xs, ys, marker='.', color=color[chain.id])\n        ax_xz.scatter(xs, zs, marker='.', color=color[chain.id])\n        ax_zy.scatter(zs, ys, marker='.', color=color[chain.id])\n    ax3d.set_xlabel('X')\n    ax3d.set_ylabel('Y')\n    ax3d.set_zlabel('Z')\n    ax3d.scatter(zx, zy, zz, color='k', marker='v', s=300)\n    ax_xy.scatter(zx, zy, color='k', marker='v', s=80)\n    ax_xz.scatter(zx, zz, color='k', marker='v', s=80)\n    ax_zy.scatter(zz, zy, color='k', marker='v', s=80)\n    for ax in [ax_xy, ax_xz, ax_zy]:\n        ax.get_yaxis().set_visible(False)\n        ax.get_xaxis().set_visible(False)\n    ```", "```py\n    from Bio import PDB\n    repository = PDB.PDBList()\n    parser = PDB.PDBParser()\n    repository.retrieve_pdb_file('1TUP', pdir='.', file_format='pdb')\n    p53_1tup = parser.get_structure('P 53', 'pdb1tup.ent')\n    ```", "```py\n    zns = []for atom in p53_1tup.get_atoms():\n    if atom.element == 'ZN':\n    zns.append(atom)\n    for zn in zns:\n        print(zn, zn.coord)\n    ```", "```py\n    import math\n    def get_closest_atoms(pdb_struct, ref_atom, distance):\n        atoms = {}\n        rx, ry, rz = ref_atom.coord\n        for atom in pdb_struct.get_atoms():\n            if atom == ref_atom:\n                continue\n            x, y, z = atom.coord\n            my_dist = math.sqrt((x - rx)**2 + (y - ry)**2 + (z - rz)**2)\n            if my_dist < distance:\n                atoms[atom] = my_dist\n        return atoms\n    ```", "```py\n    for zn in zns:\n        print()\n        print(zn.coord)\n        atoms = get_closest_atoms(p53_1tup, zn, 4)\n        for atom, distance in atoms.items():\n            print(atom.element, distance, atom.coord)\n    ```", "```py\n[58.108 23.242 57.424]\n C 3.4080117696286854 [57.77  21.214 60.142]\n S 2.3262243799594877 [57.065 21.452 58.482]\n C 3.4566537492335123 [58.886 20.867 55.036]\n C 3.064120559761192 [58.047 22.038 54.607]\n N 1.9918273537290707 [57.755 23.073 55.471]\n C 2.9243719601324525 [56.993 23.943 54.813]\n C 3.857729198122736 [61.148 25.061 55.897]\n C 3.62725094648044 [61.61  24.087 57.001]\n S 2.2789209624943494 [60.317 23.318 57.979]\n C 3.087214470667822 [57.205 25.099 59.719]\n S 2.2253158446520818 [56.914 25.054 57.917]\n```", "```py\n    for distance in [1, 2, 4, 8, 16, 32, 64, 128]:\n        my_atoms = []\n        for zn in zns:\n            atoms = get_closest_atoms(p53_1tup, zn, distance)\n            my_atoms.append(len(atoms))\n        print(distance, my_atoms)\n    ```", "```py\n1 [0, 0, 0]\n2 [1, 0, 0]\n4 [11, 11, 12]\n8 [109, 113, 106]\n16 [523, 721, 487]\n32 [2381, 3493, 2053]\n64 [5800, 5827, 5501]\n128 [5827, 5827, 5827]\n```", "```py\n    import timeit\n    nexecs = 10\n    print(timeit.timeit('get_closest_atoms(p53_1tup, zns[0], 4.0)',\n          'from __main__ import get_closest_atoms, p53_1tup, zns',\n          number=nexecs) / nexecs * 1000)\n    ```", "```py\n    def get_closest_alternative(pdb_struct, ref_atom, distance):\n        atoms = {}\n        rx, ry, rz = ref_atom.coord\n        for atom in pdb_struct.get_atoms():\n            if atom == ref_atom:\n                continue\n            x, y, z = atom.coord\n            if abs(x - rx) > distance or abs(y - ry) > distance or abs(z - rz) > distance:\n                continue\n            my_dist = math.sqrt((x - rx)**2 + (y - ry)**2 + (z - rz)**2)\n            if my_dist < distance:\n                atoms[atom] = my_dist\n        return atoms\n    ```", "```py\n    print(timeit.timeit('get_closest_alternative(p53_1tup, zns[0], 4.0)',\n          'from __main__ import get_closest_alternative, p53_1tup, zns',\n          number=nexecs) / nexecs * 1000)\n    ```", "```py\n    print('Standard')\n    for distance in [1, 4, 16, 64, 128]:\n        print(timeit.timeit('get_closest_atoms(p53_1tup, zns[0], distance)',\n              'from __main__ import get_closest_atoms, p53_1tup, zns, distance',\n              number=nexecs) / nexecs * 1000)\n    print('Optimized')\n    for distance in [1, 4, 16, 64, 128]:\n        print(timeit.timeit('get_closest_alternative(p53_1tup, zns[0], distance)',\n              'from __main__ import get_closest_alternative, p53_1tup, zns, distance',\n              number=nexecs) / nexecs * 1000)\n    ```", "```py\nStandard\n 85.08649739999328\n 86.50681579999855\n 86.79630599999655\n 96.95437099999253\n 96.21982420001132\n Optimized\n 30.253444099980698\n 32.69531210000878\n 52.965772600009586\n 142.53310030001103\n 141.26269519999823\n```", "```py\n    from Bio import PDB\n    repository = PDB.PDBList()\n    parser = PDB.PDBParser()\n    repository.retrieve_pdb_file('1TUP', pdir='.', file_format='pdb')\n    p53_1tup = parser.get_structure('P 53', 'pdb1tup.ent')\n    ```", "```py\n    my_residues = set()\n    for residue in p53_1tup.get_residues():\n        my_residues.add(residue.id[0])\n    print(my_residues)\n    ```", "```py\n    def get_mass(atoms, accept_fun=lambda atom: atom.parent.id[0] != 'W'):\n        return sum([atom.mass for atom in atoms if accept_fun(atom)])\n    chain_names = [chain.id for chain in p53_1tup.get_chains()]\n    my_mass = np.ndarray((len(chain_names), 3))\n    for i, chain in enumerate(p53_1tup.get_chains()):\n        my_mass[i, 0] = get_mass(chain.get_atoms())\n        my_mass[i, 1] = get_mass(chain.get_atoms(),\n            accept_fun=lambda atom: atom.parent.id[0] not in [' ', 'W'])\n        my_mass[i, 2] = get_mass(chain.get_atoms(),\n            accept_fun=lambda atom: atom.parent.id[0] == 'W')\n    masses = pd.DataFrame(my_mass, index=chain_names, columns=['No Water','Zincs', 'Water'])\n    print(masses)\n    ```", "```py\n    def get_center(atoms,\n        weight_fun=lambda atom: 1 if atom.parent.id[0] != 'W' else 0):\n        xsum = ysum = zsum = 0.0\n        acum = 0.0\n        for atom in atoms:\n            x, y, z = atom.coord\n            weight = weight_fun(atom)\n            acum += weight\n            xsum += weight * x\n            ysum += weight * y\n            zsum += weight * z\n        return xsum / acum, ysum / acum, zsum / acum\n    print(get_center(p53_1tup.get_atoms()))\n    print(get_center(p53_1tup.get_atoms(),\n        weight_fun=lambda atom: atom.mass if atom.parent.id[0] != 'W' else 0))\n    ```", "```py\n    my_center = np.ndarray((len(chain_names), 6))\n    for i, chain in enumerate(p53_1tup.get_chains()):\n        x, y, z = get_center(chain.get_atoms())\n        my_center[i, 0] = x\n        my_center[i, 1] = y\n        my_center[i, 2] = z\n        x, y, z = get_center(chain.get_atoms(),\n            weight_fun=lambda atom: atom.mass if atom.parent.id[0] != 'W' else 0)\n        my_center[i, 3] = x\n        my_center[i, 4] = y\n        my_center[i, 5] = z\n    weights = pd.DataFrame(my_center, index=chain_names,\n        columns=['X', 'Y', 'Z', 'X (Mass)', 'Y (Mass)', 'Z (Mass)'])\n    print(weights)\n    ```", "```py\n    import pymol\n    from pymol import cmd\n    #pymol.pymol_argv = ['pymol', '-qc'] # Quiet / no GUI\n    pymol.finish_launching()\n    cmd.fetch('1TUP', async=False)\n    cmd.disable('all')\n    cmd.enable('1TUP')\n    cmd.hide('all')\n    cmd.show('sphere', 'name zn')\n    ```", "```py\n    cmd.show('surface', 'chain A+B+C')\n    cmd.show('cartoon', 'chain E+F')\n    cmd.scene('S0', action='store', view=0, frame=0, animate=-1)\n    cmd.show('cartoon')\n    cmd.hide('surface')\n    cmd.scene('S1', action='store', view=0, frame=0, animate=-1)\n    cmd.hide('cartoon', 'chain A+B+C')\n    cmd.show('mesh', 'chain A')\n    cmd.show('sticks', 'chain A+B+C')\n    cmd.scene('S2', action='store', view=0, frame=0, animate=-1)\n    ```", "```py\n    cmd.set('ray_trace_frames', 0)\n    cmd.mset(1, 500)\n    ```", "```py\n    cmd.frame(0)\n    cmd.scene('S0')\n    cmd.mview()\n    cmd.frame(60)\n    cmd.set_view((-0.175534308,   -0.331560850,   -0.926960170,\n                 0.541812420,     0.753615797,   -0.372158051,\n                 0.821965039,    -0.567564785,    0.047358301,\n                 0.000000000,     0.000000000, -249.619018555,\n                 58.625568390,   15.602619171,   77.781631470,\n                 196.801528931, 302.436492920,  -20.000000000))\n    cmd.mview()\n    cmd.frame(90)\n    cmd.set_view((-0.175534308,   -0.331560850,   -0.926960170,\n                  0.541812420,    0.753615797,   -0.372158051,\n                  0.821965039,   -0.567564785,    0.047358301,\n                  -0.000067875,    0.000017881, -249.615447998,\n                  54.029174805,   26.956727982,   77.124832153,\n                 196.801528931,  302.436492920,  -20.000000000))\n    cmd.mview()\n    cmd.frame(150)\n    cmd.set_view((-0.175534308,   -0.331560850,   -0.926960170,\n                  0.541812420,    0.753615797,   -0.372158051,\n                  0.821965039,   -0.567564785,    0.047358301,\n                  -0.000067875,    0.000017881,  -55.406421661,\n                  54.029174805,   26.956727982,   77.124832153,\n                  2.592475891,  108.227416992,  -20.000000000))\n    cmd.mview()\n    ```", "```py\n    cmd.frame(200)\n    cmd.scene('S1')\n    cmd.mview()\n    ```", "```py\n    cmd.frame(350)\n    cmd.scene('S1')\n    cmd.set_view((0.395763457,   -0.173441306,    0.901825786,\n                  0.915456235,    0.152441502,   -0.372427106,\n                 -0.072881661,    0.972972929,    0.219108686,\n                  0.000070953,    0.000013039,  -37.689743042,\n                 57.748500824,   14.325904846,   77.241867065,\n                 -15.123448372,   90.511535645,  -20.000000000))\n    cmd.mview()\n    cmd.frame(351)\n    cmd.scene('S2')\n    cmd.mview()\n    ```", "```py\n    cmd.frame(500)\n    cmd.scene('S2')\n    cmd.mview()\n    cmd.mplay()\n    cmd.mpng('p53_1tup')\n    cmd.quit()\n    ```", "```py\nffmpeg -r 15 -f image2 -start_number 1 -i \"p53_1tup%04d.png\" example.mp4\n```", "```py\n    from Bio import PDB\n    parser = PDB.MMCIFParser()\n    p53_1tup = parser.get_structure('P53', '1tup.cif')\n    ```", "```py\n    def describe_model(name, pdb):\n        print()\n        for model in p53_1tup:\n            for chain in model:\n                print('%s - Chain: %s. Number of residues: %d. Number of atoms: %d.' %\n                      (name, chain.id, len(chain), len(list(chain.get_atoms()))))\n    describe_model('1TUP', p53_1tup)\n    ```", "```py\n1TUP - Chain: E. Number of residues: 43\\. Number of atoms: 442.\n1TUP - Chain: F. Number of residues: 35\\. Number of atoms: 449.\n1TUP - Chain: A. Number of residues: 395\\. Number of atoms: 1734.\n1TUP - Chain: B. Number of residues: 265\\. Number of atoms: 1593.\n1TUP - Chain: C. Number of residues: 276\\. Number of atoms: 1610.\n```", "```py\n    mmcif_dict = PDB.MMCIF2Dict.MMCIF2Dict('1tup.cif')\n    for k, v in mmcif_dict.items():\n        print(k, v)\n        print()\n    ```"]