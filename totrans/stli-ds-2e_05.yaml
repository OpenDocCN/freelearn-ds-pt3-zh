- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Streamlit with Streamlit Community Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have focused on Streamlit app development, from creating
    complex visualizations to deploying and creating **Machine Learning** (**ML**)
    models. In this chapter, we will learn how to deploy these applications so that
    they can be shared with anyone with internet access. This is a crucial part of
    Streamlit apps as, without the ability to deploy a Streamlit app, friction still
    exists for users or consumers of your work. If we believe that Streamlit removes
    the friction between creating data science analysis/products/models and sharing
    them with others, then we must also believe that the ability to widely share apps
    is just as crucial as the ease of development.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main ways to deploy Streamlit apps: through a product created
    by Streamlit called *Streamlit Community Cloud*, through a cloud provider such
    as *Amazon Web Services* or *Heroku*, or through *Hugging Face* via *Hugging Face
    Spaces*. Deploying on AWS and Heroku is paid, but *Streamlit Community Cloud*
    and *Hugging Face Spaces* are free! The easiest and preferred method for most
    Streamlit users is *Streamlit Community Cloud*, so we will cover that directly
    here, and will cover Heroku and Hugging Face Spaces later in this book, in *Chapter
    8*, *Deploying Streamlit Apps with Hugging Face and Heroku*, and *Chapter 11*,
    *The Data Project – Prototyping Projects in Streamlit*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Streamlit Community Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick primer on GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying with Streamlit Community Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires access to Streamlit Community Cloud, which you can get
    access to by signing up for an account for free at [https://share.streamlit.io/signup](https://share.streamlit.io/signup).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also requires a free GitHub account, which can be attained at [https://www.github.com](https://www.github.com).
    A full primer on GitHub, along with detailed setup instructions, can be found
    in the section *A quick primer on GitHub* later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in the following GitHub repository:
    [https://github.com/tylerjrichards/Streamlit-for-Data-Science](https://github.com/tylerjrichards/Streamlit-for-Data-Science).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Streamlit Community Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Streamlit Community Cloud is Streamlit’s answer to a fast deployment process
    and is certainly my first recommendation to deploy your Streamlit applications.
    When I discovered Streamlit in the summer of 2020, I remember deploying an app
    locally and loving the library, but then quickly being disappointed in having
    to use AWS to deploy my app. Then, the Streamlit team reached out to me and asked
    if I wanted to try out a product they were working on, which is now called Streamlit
    Community Cloud. I thought that there was no way that it was all that simple.
    We only need to push our code to a GitHub repository and point Streamlit to the
    said repository, and it takes care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: There are times when we care about “the rest,” such as when we want to configure
    the amount of storage space or memory available, but often, letting Streamlit
    Community Cloud handle deployment, resourcing, and sharing makes our development
    significantly easier.
  prefs: []
  type: TYPE_NORMAL
- en: The goal here is to take the Palmer Penguins ML app that we have already created
    and deploy it using Streamlit Community Cloud. Before we get started, Streamlit
    Community Cloud runs using GitHub. If you are already familiar with Git and GitHub,
    feel free to skip this section, make a GitHub repository with our `penguins_ml`
    folder, and head over to the section titled *Deploying with Streamlit Community
    Cloud*.
  prefs: []
  type: TYPE_NORMAL
- en: A quick primer on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitHub and the language Git are collaboration tools for software engineers
    and data scientists that provide a framework for version control. We do not need
    to know everything about how they work to use Streamlit Community Cloud, but we
    need to be able to create our own repositories (which act like shared folders)
    and update them as we update our applications. There are two options for dealing
    with Git and GitHub: via the command line and via a product called GitHub Desktop.'
  prefs: []
  type: TYPE_NORMAL
- en: Primarily in this book, so far, we have stayed on the command line, and this
    tutorial will stay there. However, if you would like to use GitHub Desktop instead,
    head over to [https://desktop.github.com](https://desktop.github.com) and follow
    along with the instructions provided there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, use the following steps to get started with Git and GitHub on the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: First, go to [https://www.github.com](https://www.github.com) and make a free
    account there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we need to download the Git language onto our own computer and connect
    to our GitHub account with Git. We can do this on a Mac using `brew` in our terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are also going to want to set a global username and email in Git (if we
    haven’t already), which is recommended by GitHub. The following code sets these
    globally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have our GitHub account, and we also have Git installed locally,
    we need to create our first repository! We already have our folder with the files
    that we need inside it, called `penguin_ml`, so we should make sure that is the
    working directory that we are working in (if you aren’t sure, the `pwd` command
    will return our working directory). We are going to work with the final version
    of the `penguins_streamlit.py` app, which is shown with brief explanations for
    some context in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This first section imports our libraries, sets up the titles for our app, and
    loads the model that we created using the `penguins_ml.py` file. This section
    will fail if we do not have the `random_forest_penguin.pickle` and `output_penguin.pickle`
    files. You can either go to *Chapter 4*, *Machine Learning and AI with Streamlit*,
    to create these files or head over to [https://github.com/tylerjrichards/Streamlit-for-Data-Science/tree/main/penguin_ml](https://github.com/tylerjrichards/Streamlit-for-Data-Science/tree/main/penguin_ml)
    to find them directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This next section grabs all the user input we need for our prediction, from
    the island the researcher is on to the sex of the penguin, as well as the penguin’s
    bill and flipper measurements, which prepares us for the prediction of penguin
    species in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, this final section creates multiple histograms to explain the predictions
    made by the model. In particular, these plots show the bill length/bill depth/flipper
    length separated by the species’ hue. We use these three variables because our
    feature importance graph told us that those were the best predictors of species
    in *Chapter 4*, *Machine Learning and AI with Streamlit*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we are in the correct folder with the right files, we will use the
    following code to initialize our first repository and to add and then commit all
    our files to the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our next step is to connect the Git repository from our local device to our
    GitHub account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to set up a new repository by going back to the GitHub website
    and clicking the **New repository** button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Setting up a new repository ](img/B18444_05_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Setting up a new repository'
  prefs: []
  type: TYPE_NORMAL
- en: We can then fill out our repository name (`penguin_ml`), and click **Create
    repository**. In my case, I already have a repository with this name, hence the
    GitHub error telling me so, but your example should work cleanly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Repo creation  ](img/B18444_05_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: Repo creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a new repository on GitHub, and also have a repository locally,
    we need to connect the two. The following code connects the two repositories and
    pushes our code to the GitHub repo; GitHub also suggests how to connect two repositories
    after you click **Create repository**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should now see our `penguin_ml` files in our GitHub repo! If and when we
    have new code to push to our repository, we can follow the general format of using
    `git` `add`to add the file changes, `git``commit``–m``"commit message"`, and then
    finally, `git``push` to push the changes to our repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now move on to the deployment process on the Streamlit side.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying with Streamlit Community Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that all of our necessary files are in the GitHub repository, we have almost
    all that we need to deploy our application. You can use the following list of
    steps to deploy our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we deploy to Streamlit Community Cloud, Streamlit uses its own servers
    to host the app. Because of this, we need to explicitly tell Streamlit which Python
    libraries are required for our app to run. The following code installs a very
    helpful library called `pipreqs` and creates a `requirements.txt` file in the
    format we need for Streamlit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we look at our `requirements.txt` file, we can see that `pipreqs` looked
    through all of our Python files, checked what we imported and used, and created
    a file that Streamlit can use to install the exact same versions of our libraries
    to prevent errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18444_05_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Requirements.txt'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a new file, so we need to also add it to our GitHub repository. The
    following code adds `requirements.txt` to our repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, our last step is to sign up for Streamlit Community Cloud ([share.streamlit.io](http://share.streamlit.io))
    and, once logged in, proceed to click on the **New App** button. After that, we
    can point Streamlit Community Cloud directly to the Python file that hosts our
    app’s code, which in our case is called `penguins_streamlit.py`. You should also
    change the username from my personal GitHub username (**tylerjrichards**) to your
    own:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18444_05_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Deploying from GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the app is built, we have a fully deployed Streamlit app. Whenever we
    make changes to the GitHub repository, we will see such changes reflected in the
    app. For example, the following code makes a change to the title of our app (for
    brevity, we will only show enough code to illustrate the change):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to push the change, we need to update our GitHub repository. We will do
    that by using the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we go back to our app, it will have its own unique URL. If you ever cannot
    find your Streamlit apps, you can always find them at [share.streamlit.io](http://share.streamlit.io).
    Now the top of our app should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Our deployed Streamlit app ](img/B18444_05_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Our deployed Streamlit app'
  prefs: []
  type: TYPE_NORMAL
- en: It may take a couple of minutes for the app to reload!
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a fully deployed Streamlit app! We can share this link with friends
    and colleagues or on social media sites such as Twitter/X (if you make an interesting
    Streamlit app with the help of this book, please tweet it at me `@tylerjrichards`;
    I would love to see it!). Now, let’s learn how to debug our Streamlit apps. The
    app for this chapter can be found at [https://penguins.streamlit.app/](https://penguins.streamlit.app/)
    if you want to compare! Creating and deploying Streamlit apps, and creating and
    deploying software in general, always has some roadblocks or errors. Our next
    section is focused on learning how to debug our development and deployment of
    apps!
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Streamlit Community Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit Community Cloud also gives us access to the logs of our apps themselves,
    which will show up on our terminal if we deploy our apps locally. At the bottom
    right, whenever we view our own applications, there is a **Manage Application**
    button, which allows us to access our logs. From this menu of options, we can
    reboot, delete, or download logs from our app, along with viewing our other available
    apps and logging out from Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit Secrets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating and deploying Streamlit apps, you may want to use some information
    that is not viewable by the user of your app, such as a password or API key. However,
    the default in Streamlit Community Cloud is to use public GitHub repositories
    with entirely public code, data, and models. But if, say, you want to use a private
    API key, as many APIs (for example, Twitter’s scraping API, or the Google Maps
    API) require, want to programmatically access data stored in a password-protected
    database, or even want to password-protect your Streamlit app, you need a way
    to expose a bit of data to Streamlit that is private. Streamlit’s answer to this
    is Streamlit Secrets, which lets us set hidden and private “secrets” in each app.
    Let’s start by creating a password to protect our Streamlit applications, specifically,
    our existing Penguin app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start out, we can edit the top of our app to require a user to enter a password
    before the rest of the application loads. We can use the `st.stop()` function
    to stop the app from running if the password is incorrect by using the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will result in the next screenshot, and the rest will only load if
    the user inputs the `streamlit_password` string in the text input box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Password checker ](img/B18444_05_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: Password checker'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Streamlit Secret, we just need to head over to the Streamlit Community
    Cloud main page at [https://share.streamlit.io/](https://share.streamlit.io/)
    and click the **Edit secrets** option, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Secrets ](img/B18444_05_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Secrets'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we click on the **Edit secrets** button, we can add new Streamlit Secrets
    to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Our first Streamlit Secret ](img/B18444_05_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Our first Streamlit Secret'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our last step is to read Streamlit Secrets from our deployed app, which we
    can do by calling `st.secrets` and the variable we created in Secrets. The following
    code replaces our hardcoded password with the Streamlit Secret:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will create the following Streamlit app, password-protected with
    the Streamlit Secret that we set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Deployed password ](img/B18444_05_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: Deployed password'
  prefs: []
  type: TYPE_NORMAL
- en: When we push this code to our GitHub repository and reboot our Streamlit app,
    we will then have a password-protected Streamlit app deployed on Streamlit Community
    Cloud! We can use this same method for private API keys, or any other use case
    where we need to hide data from the user of the app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve learned how to get started with Git and GitHub on the
    command line, how to debug apps on Streamlit Community Cloud, how to use Streamlit
    Secrets to use private data on public apps, and how to deploy our apps quickly
    using Streamlit Community Cloud. This completes part one of this book! Congratulations
    on making it to this point. The next section will use all of part one as a building
    block for more advanced topics, such as more complicated formatting and beautification
    of our Streamlit apps and using valuable open-source community-built add-ons called
    Streamlit Components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover beautifying Streamlit apps through themes,
    columns, and many more features.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/sl](https://packt.link/sl)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code13440134443835796.png)'
  prefs: []
  type: TYPE_IMG
