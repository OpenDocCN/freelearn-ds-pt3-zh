- en: ArcGIS API for Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the ArcGIS API for Python?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ArcGIS API for Python is a Python package designed to work with web GIS.
    It allows you to work directly with data hosted on ArcGIS Online or ArcGIS Enterprise.
    Previously you have been using ArcPy, which is excellent for desktop work, but
    has limited capabilities when working with hosted data. The ArcGIS API for Python
    provides tool to do many of the same functions that ArcPy does such as create
    maps, geocode, manage data, and geoprocessing but within your ArcGIS Online or
    ArcGIS Enterprise account. In addition to this you can manage your organizations
    web GIS data by managing users, groups, and items. It is important to note that
    while all of the examples you will work through are within ArcGIS Pro Notebooks,
    you don’t have to work through ArcGIS Pro. You could install a stand-alone environment
    with **conda** and access everything through a Jupyter Notebook environment. This
    book will not cover that as it is focused on working with Python within ArcGIS
    Pro.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ArcGIS API for Python is like ArcPy in that it is a Python package. It
    contains classes, modules, and functions. But it is not just a Python package:
    it is also an **application programming interface (API).** An API is code that
    allows different applications and software to talk to each other. It interacts
    primarily with the ArcGIS REST API. This means that you can use the module to
    make requests of data hosted on ArcGIS Online or ArcGIS Enterprise. This data
    is either in your own organization or is publicly available. It is a **pythonic**
    API in that it is designed to Python standards and best practices. As a pythonic
    API it allows for python programmers to easily use ArcGIS, and ArcGIS users familiar
    with Python to automate web GIS tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: The API is organized into different modules for your use. Each module has different
    functions and types to assist in your GIS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`arcgis.gis` – this module is the one you will use the most. It allows for
    entry to the GIS and provides the functionality to create, read, update and delete
    GIS users, groups or content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.features` – this module works with feature data, feature layers, collections
    of feature layers, and feature sets. It contains spatial analysis functions for
    working with feature data. All feature data is data with a set of geometric representations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.raster` – this module works with raster data. It is contains classes
    and functions for working with raster and imagery data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.realtime` – this module works with real-time data feeds. It is for
    use with streaming data to perform continuous analysis. It allows for Python scripts
    that can subscribe to data that is streamed, broadcast updates, or alerts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.network` – this module is for completing network analysis. It is for
    use on network layers and can be used to find best routes, closest facility, cost
    matrix, and service areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.schematics` – this module is for working with schematics. Schematics
    are simplified networks. It is for explaining the structure and way schematics
    work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.geoanalytics` – this module is for creating distributed analysis of
    large datasets, feature and tabular. The tools are designed to work with big data
    as well with feature layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.geocoding` – this module is for geocoding and reverse geocoding. It
    creates points of addresses with the output visualized on a map, or used as input
    data for spatial analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.geometry` – this module is for working with geometry types. It has
    functions that use geometry types as input and output, and for converting geometries
    to different representations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.geoprocessing` – this module is for creating methods to create and
    share geoprocessing tools. Users can create their own geoprocessing tools to share
    and this module provides tools that can assist with that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.geoenrichment` – this module is for providing data about an area or
    location. Users can get information about people and places in an area or within
    a distance. It can assist by easily providing demographic data for models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcpy.env` – this module is for having a shared environment to be used by
    the different modules. It stores the currently active GIS and the environment
    settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.mapping` – this module is for providing visualization capabilities
    for GIS data. It includes WebMap and WebScene to enable 2D and 3D visualization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.widgets` – this module is for providing visualization of GIS data.
    It includes the Jupyter Notebook MapView widget to assist with display of maps
    and layers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arcgis.apps` – this module is for providing the ability to manage the web
    based applications available in ArcGIS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter the focus will be mostly on the `arcgis.gis` module to manage
    the data in your organization, the `arcgis.features` module to work with that
    data, and the `arcgis.mapping` module to visualize the data.
  prefs: []
  type: TYPE_NORMAL
- en: What does it do? And why use it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ArcGIS API for Python allows you to access your data in ArcGIS Online without
    having to be in ArcGIS Online. You can manage your ArcGIS Online or ArcGIS Enterprise
    organization, its users, and its data from either a Jupyter Notebook or an ArcGIS
    Pro Notebook. By having the ability to do this in a Notebook and not through ArcGIS
    Online web interface you can use the full functionality of Python to iterate over
    data to run the same process multiple times, and schedule tasks to be run. The
    ArcGIS API for Python complements ArcPy as it allows you to automate your organization’s
    web GIS processes. *Just like using ArcPy to automate a process in ArcGIS Pro
    you would use the ArcGIS API for Python when you need to automate a process on
    your ArcGIS Online or ArcGIS Enterprise organization*
  prefs: []
  type: TYPE_NORMAL
- en: How to use it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ArcGIS API for Python comes with the install of ArcGIS Pro. If you are using
    ArcGIS Pro 2.5.x or later the conda package should have the arcgis package pre-installed.
    The default conda environment arcgispro-py3, which you have seen in the ArcPy
    chapter, includes the ArcGIS for Python API. If you need to upgrade your package
    you can do it through either the **Python Package Manager** or the **Python Command
    Prompt.** *If you only have the default Python environment installed and have
    not created a new one or cloned it you cannot update it.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file80.png)Default Python Package Install'
  prefs: []
  type: TYPE_NORMAL
- en: Python Package Manager upgrade process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open ArcGIS Pro with a blank Project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Project** Tab
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Python** menu
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the **Manage Environment**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the package you want to update (You cannot update the default install
    this way)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Update Packages**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the `arcgis` release from the list of packages with updates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Command Prompt upgrade process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the ArcGIS folder in the start menu click on Python Command Prompt
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Activate the environment to be upgraded
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Type in `conda upgrade -c esri arcgis`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/file81.png)Python Package Manager with Cloned Environment to Upgrade'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have checked that you have an updated version of the `arcgis` package
    installed you can test to see if it is installed properly.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Project>Open>Computer>Open another Project** and navigate to where you
    downloaded Chapter5.aprx and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click on Chapter5 folder and select New>Notebook. Rename the Notebook
    `TestArcGISAPI`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In cell 1 type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run the cell. You should see the following result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file82.png)Map created in ArcGIS Pro Notebook'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at each line of code to understand what it did:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from arcgis.gis import GIS` this imports GIS from the `arcgis.gis` module'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gis = GIS()` this connects you to ArcGIS Online as an anonymous user.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`map1 = gis.map(“Oakland, California”)` this is creating a map centered on
    Oakland, California'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`map1` this is printing the map to the output so you can see the map you created.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to the ArcGIS Online or ArcGIS Enterprise
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are different ways to connect to ArcGIS Online or ArcGIS Enterprise through
    constructing a GIS object. The GIS object takes three parameters, all of them
    optional.
  prefs: []
  type: TYPE_NORMAL
- en: url – this is the url for your organizations ArcGIS Online or ArcGIS Enterprise.
    If none is given it is ArcGIS Online ([www.arcgis.com](https://www.arcgis.com))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: username – this is your username, if left blank you will be logged in as anonymous
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: password – this is your password, if left blank and a username is specified
    you will be prompted to input your password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file83.png)Logging into ArcGIS Online with a username but no password'
  prefs: []
  type: TYPE_NORMAL
- en: Using this set up you can share your Notebook but not your login credentials.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anonymous Users
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In the previous example to test your ArcGIS API for Python install you connected
    to ArcGIS Online as an anonymous user. That gives you the ability to query and
    view publically available data. *But it does not allow you to create or modify
    content or perform analysis.*
  prefs: []
  type: TYPE_NORMAL
- en: Built-In Users
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: ArcGIS Online and ArcGIS Enterprise come with built-in identity store. This
    is done by writing the following code in the cell
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That will connect your Notebook into the ArcGIS Online account with credentials
    you are currently using to log into ArcGIS.
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS Pro Connection
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Connecting through ArcGIS Pro using the pro authentication scheme. This is
    done by writing the following code in the cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will connect your Notebook to your ArcGIS Online portal using the **credentials**
    used to sign into ArcGIS Pro. This is similar to a built-in user. The difference
    is that the pro authentication scheme only works when ArcGIS Pro is installed
    locally and is running concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: Summary of Connection Options
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| Anonymous User | `gis = GIS()` | Allows only access to query and view publically
    available data |'
  prefs: []
  type: TYPE_TB
- en: '| Built-In User | `gis = GIS(‘home’)` | Connects to ArcGIS Online with account
    you are currently logged in with, and allows full access to that data based on
    your user assignment. |'
  prefs: []
  type: TYPE_TB
- en: '| ArcGIS Pro | `gis = GIS(‘pro’)` | Connects to active portal when logged into
    the ArcGIS Pro app. This only works within ArcGIS Pro with a local install of
    ArcGIS Pro |'
  prefs: []
  type: TYPE_TB
- en: '| Credentials | `gis = GIS({url}, username = ‘example’)` | Connects to a url,
    or `arcgis.com` if left blank, using a specific username. Leaving the password
    parameter blank will protect your credentials when sharing as you are prompted
    to enter it when the cell is run |'
  prefs: []
  type: TYPE_TB
- en: Most of the time you will be connecting either using the `gis = GIS(‘home’)`
    or `gis = GIS(‘pro’)`. Through this book you will be using connecting to either
    anonymously or to your organization by using `gis = GIS(‘home’)`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the gis module to Manage your GIS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the `gis` module you can access and manage your folders, your content,
    your group, and your users. If you have any repetitive tasks and workflows you
    can automate them as scripts. In this section you are going to see how search
    for data, publish items, organize data into folders, access and manage groups,
    access and manage users, download data, delete data, and download attachments.
  prefs: []
  type: TYPE_NORMAL
- en: Search for data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the content property of your GIS to use the `search()` method. This
    allows you to search through your GIS and find data. The `search()` method will
    return a list of items based on the arguments given. The `search()` method has
    several arguments that it can take. Most of the time you will be using the query,
    and type of item arguments. The query has multiple types of queries it can take.
    In this section you will look at how to query based off an items title or owner.
  prefs: []
  type: TYPE_NORMAL
- en: In previous samples you were connecting to your GIS in your ArcGIS Online account.
    For the search example you will be connecting anonymously to understand how to
    search for data. You are going to search for publically available feature layers
    of Oakland.
  prefs: []
  type: TYPE_NORMAL
- en: Search for Public Data as an Anonymous User
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Go to **Project>Open>Computer>Open another Project** and navigate to where you
    downloaded Chapter5.aprx and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click on Chapter5 folder and select **New>Notebook**. Rename the Notebook
    to `SearchForDataSample`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are going to create your GIS using an anonymous log in, and you are going
    to import a display module that will make viewing the data returned easier. Type
    in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next cell you will search for feature layers associated with Oakland
    limited to just 5 items, and display the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The two for loops will return the data details to you in two different ways.
    The first is just printing out the results and the second is using the display
    module to show more details. Click the **Run** button to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file84.png)Results of Search for Oakland data'
  prefs: []
  type: TYPE_NORMAL
- en: The results are just the first five feature layers returned associated with
    Oakland. There are many more arguments that could be used to find different data.
    You can apply any or all of the following arguments
  prefs: []
  type: TYPE_NORMAL
- en: '`query` – this can be used to query for title or owner and can use wildcards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_type` – this can be used to query any type of item that can be on an
    ArcGIS Online portal*. It can find shapefiles, feature layers, feature collections,
    csvs, tables, maps, web scenes and more. It also can take wildcards.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_field` – this can be used to sort the data on a field such as the title,
    owner or number of views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_order` – this can be used with the sort field to sort ascending or descending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outside_org` – this can be used when logged into your organization to search
    for data outside of it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are going to test some of the arguments to see how you can get different
    results from the `search()` method.
  prefs: []
  type: TYPE_NORMAL
- en: First you will take the last search and modify to find feature layers or collections
    that have Oakland in the title, and sort them by the number of views.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are now searching for data with Oakland in the title. You do not have to
    use the wild card in the title as this will search for the word Oakland. It is
    searching for just the word Oakland though so anything like OaklandCounty will
    not be returned. You are using a wildcard for the `item_type` to return all types
    that begin with Feature. This will return feature layers and feature collections.
    You are also sorting this by the number of views descending to get the most viewed
    items, and retuning only 5 items. In the same Notebook type in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run. The output should look something like this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file85.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of search query for Oakland with different search arguments
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also search for data by the owner of the data. Your query argument is
    structured like this `query=”owner:username”` This will only return data that
    the owner has made publically available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are taking the owner of two of the datasets from the previous cell and searching
    for all the feature data types they own. Since you don’t know how many there are
    and don’t want to print all that data you just print out the length of the search
    results list returned. In the same Notebook in the next cell type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run and see the results
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file86.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of search for owner query
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you know there are 10 feature layers or feature collections in the
    next cell you can type the following.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to see the layers display.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file87.png)Display of layers from the owner query'
  prefs: []
  type: TYPE_NORMAL
- en: You can click on the layer name in the Output cell and a browser will open showing
    you the overview page for the item you clicked on.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Searching for data when connected to your organization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this section you have seen how to use the `search()` operation to search
    for public data as an anonymous user and how to search for data within your organization.
    As you have seen there are different ways to connect to your organization, depending
    on how you are using the ArcGIS API for Python, and if you are using ArcGIS Online
    or ArcGIS Enterprise. Because you will be connected to your organization in these
    samples there will be limited figures showing the out cells as those will depend
    on what data you have in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: To search for data in your organization you are going to continue to use the
    `SearchForDataSample` Notebook from the above samples.
  prefs: []
  type: TYPE_NORMAL
- en: In the next cell you are going to create another connection ArcGIS Online using
    the account you are logged into in ArcGIS Pro by typing in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a GIS under gis2 that you can use to access and manage content
    and users in your ArcGIS Online. If you are using an ArcGIS Enterprise you need
    to type the following
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run the cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can see properties of the user you are signed in under by typing the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run the cell. The results will be a data dictionary
    containing all the information about the user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file88.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: User details
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All of which can be further accessed and assigned to variables if needed. To
    access the first name you just need to type in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file89.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Extract a user’s name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Searching through your content is the same as when logged in anonymously. The
    only difference is you are searching through data within your organization. In
    the next cell type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run the cell. It will display all of the feature
    layers in your organization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To search for just the items owned by you write the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run the cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The only argument in the `search()` that is required is the query. Because wildcards
    can be used you can search for everything by just writing query=”*”. But be careful,
    if you have a lot of layers the search could be slow.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: When connected to your organization you can still search for publically available
    data by setting the `outside_org` argument to `True` You can find the same Oakland
    datasets in `gis2` by writing the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run the cell. The results should be the same as
    when connected anonymously.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file90.png)Results from searching outside your organization'
  prefs: []
  type: TYPE_NORMAL
- en: In this section you have seen how to search for data both anonymously and when
    connected to your organization. Now that you can find data you will see how to
    add data to your organization and how to organize that data.
  prefs: []
  type: TYPE_NORMAL
- en: Publish Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Much of the data you publish to ArcGIS Online or ArcGIS Enterprise is done within
    ArcGIS Pro. This is useful and convenient when you are publishing single maps
    or feature layers. It is less convenient if you are going to publish a csv with
    latitude and longitude fields as you would need to display the coordinates in
    ArcGIS Pro before publishing it. Using the ArcGIS API for Python you can take
    a csv and add it to your organization and publish it with a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding data from a csv.
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To add data to your GIS you are going to use the `add()` method. Like the `search()`
    method the `add()` method is part of the `content()` property of the GIS object.
    To use the add method you will need to create a data dictionary of the properties
    of the item to be created. The properties are the same ones that you would need
    to fill in to add items from ArcGIS Pro: title, description, tags. You can add
    an optional thumbnail as well using the `add()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: First open up the csv AlamedaCountyFarmersMarket.csv to see what you will be
    adding. It is a basic csv with a market name, days, hours, location, city, latitude,
    and longitude. Right now it only has the famers markets for Oakland and Berkeley
    and not all of Alameda County. Later you will append the rest of the data to the
    feature layer you are creating from this csv data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file91.png)Farmers Market CSV'
  prefs: []
  type: TYPE_NORMAL
- en: Right click on `Chapter3` folder and select **New>Notebook**. Rename the Notebook
    to `AddPublishData`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first cell type in your import statements and create your GIS. You are
    going to create the GIS logged in to your ArcGIS Online account that you are logged
    into ArcGIS Pro with. Type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **+** button to add a cell. In this cell you are going to create a
    variable for the `csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*If your csv is saved to a different location make sure you are using its location.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **+** button to add a cell. In this cell you are going to create the
    data dictionary of the `csv` properties. You will fill in the properties for the
    title, description, and tags as the keys with their properties as the values.
    Type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you were going to add a thumbnail you would do it in this cell by defining
    a variable with the location of the thumbnail.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`thumbnail = r”PATH\TO\THUMBNAIL.png”`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Click the **+** button to add a cell. In this cell you are going create a variable
    to hold the `csv` item being added. You use the add function from the content
    module. The arguments passed are the properties dictionary and the path for the
    `csv`. Type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **+** button to add a cell. In this cell you will publish the csv
    item you just added by calling the publish method. Type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By setting the publish method to a variable that variable contains the feature
    layer. You can call that variable to display the feature layers properties.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Click the **+** button to add a cell. In this cell you are going to create a
    quick map to visualize your data to verify the feature layer was created. Type
    the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Cell>Run** All to run all the cells. The output map should look like
    below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file92.png)Map Widget showing Farmers Market Feature Layer.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and Publishing Summary and Tips
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You have seen how to publish a csv that has latitude and longitude columns for
    point data. This process could be turned into an iterative process using a loop
    to publish multiple csvs. All you would need to write is a properties data dictionary
    for each csv. But your data is not always going to be a csv of point locations
    with latitude and longitude. Below are some tips for publishing other types of
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '*When publishing a csv with latitude and longitude fields make sure they are
    named latitude and longitude*. The module is looking for those field names. If
    they are not found it will not locate the points correctly. You can specify the
    field names to use with the optional `publish_paramaters` dictionary in the `publish()`
    method. To do that you would need to create the following dictionary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `locationType` value to use is coordinates, and then the `latituedFieldName`
    and `longitudeFieldName` are the field names for each in your csv.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Csvs without latitude and longitude but with address can be geocoded.* To
    geocode data from a csv you would again use the `publish_paramaters` dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `locationType` field is set to address. The `addressTemplate` field is then
    set to the fields that have the different address components. In this example
    there is a field with the street address, a field with the city, a field with
    the state, and a field with the zip. The set-up of this will depend on how you
    have your data in your csv.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Shapefile and file geodatabses can be added and published using this same
    method but they must be zipped*. If you have a large amount of shapefiles or file
    geodatabases that are unzipped you could automate the process of zipping them
    up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and publishing data using the ArcGIS API for Python can be very useful
    for quickly adding data to your organizations ArcGIS Online or ArcGIS Enterprise
    account. You have seen how to add and publish a csv. You have seen that the csvs
    can be geocoded on publishing using the ArcGIS Online geocoder. In the next section
    you will see how to organize the data into folders, create groups, and manage
    access to groups.
  prefs: []
  type: TYPE_NORMAL
- en: Organize data, manage groups, and users
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Organizing your data within your ArcGIS Online or ArcGIS Enterprise is important.
    You want to be able to find your data. In addition to folders to hold your data
    in you also can create groups to share specific data with. In large organizations
    this is important as not everyone needs to have access to the same data. In this
    section you will see how to create folders and move data into them, create groups
    and manage access to them, and create and manage users.
  prefs: []
  type: TYPE_NORMAL
- en: Organize data into folder
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One of the first things to do after adding data or publishing it should be finding
    a folder to place it in. It is good practice to use folders to organize your data.
    It not only helps you find data but also other members of your organization. You
    can add folders and move data over using the ArcGIS API for Python. In the sample
    below you will create a new folder and move the farmer’s market data from above.
  prefs: []
  type: TYPE_NORMAL
- en: Right click on `Chapter3` folder and select **New>Notebook**. Rename the Notebook
    to `CreateFolderMoveData`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first cell type in your import statements and create your GIS. You are
    going to create the GIS logged in to your ArcGIS Online account that you are logged
    into ArcGIS Pro with
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **+** button to add a cell. In this cell you will create a new folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **+** button to add a cell. In this cell you search for that you need
    to move over
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that the `search()` method returns a list of items. To confirm what
    you have in your list you will run a for loop to iterate through the list and
    display the data. Type into the same cell as above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Cell>Run All** to run all your cells to this point. Your Notebook should
    similar to this now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/file93.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Output of creating folder and finding data to move.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **+** button to add a cell. In this cell you will move the feature
    layer and csv into the new folder. You will do that by looping though the search
    results and using `move()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run this cell. You should see an output like below
    confirming that your data has been moved. If you go to your ArcGIS Online you
    will see that you now have a new folder and both datasets are there.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file94.png)Output of moving data to a new folder'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a folder and moving data into that folder is a process that ArcGIS
    API for Python can be used to help you organize data. In the sample you were able
    to find all the data sets by their name and move them to a newly created folder.
    Being able to search your GIS for data and move it to folders using the ArcGIS
    API for Python is a valuable tool that will save you time.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to move data back to the root directory it is just the following
    code `item.move(“\”)`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Access and Manage Groups
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Groups are spaces where you share data with other users. It is how you can create
    a collaborative GIS by allowing other users access to your data and maps. Using
    the ArcGIS API for Python you can create and manage groups in a programmatic way
    to save you time while fostering better collaboration within and outside of your
    team. In this section you will see how to search for groups, find the properties
    of a groups, create new groups, and manage the group by sharing data to it, and
    adding and removing users from the group by using the ArcGIS API for Python.
  prefs: []
  type: TYPE_NORMAL
- en: Search for Groups
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Searching for groups is very similar to searching for data. You can search for
    groups that are open to all when logged in anonymously or search for groups within
    your organization when logged into your organization. You are going to first search
    for groups anonymously and then access the properties of that group you created.
    Then you will search for groups within your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Right click on `Chapter3` folder and select **New>Notebook**. Rename the Notebook
    to `SearchForGroups`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the first cell type in your import statements and create your GIS. You are
    going to create the GIS anonymously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next cell you will create your search and then display the results. Just
    like with the feature layers you are going to limit your data search to the first
    5 records. You will also be using the display module to better show the group
    information. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run. You should have results that look like the
    figure below
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file95.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of group search for Oakland groups.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Just like with items you can search for groups by owner instead of title. You
    will use one of the group owners from the search results. Type in the following
    code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run. You should have results that look like the
    figure below
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file96.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of search for group search by owner.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Just like with searching for items the group search returns a list. To look
    further at a group’s properties you need to select it using the list index. You
    are going to select the first group from the first search to look at its properties.
    Type in the following code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run. You should have results that look like the
    figure below
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file97.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of selecting a group from the group list
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you can see some the properties of the group. You are going to print out
    the values using `.format()` to add some context to the values being printed out
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run. You should have results that look like the
    figure below
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file98.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results from Group Properties
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are more properties that you can access for a group. A full list of them
    is here, [https://developers.arcgis.com/rest/users-groups-and-items/group-search.htm](https://developers.arcgis.com/rest/users-groups-and-items/group-search.htm)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To search for groups within your organization you need to be logged into your
    GIS. Create a new GIS in this workbook by typing the following in the next cell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next cell you will run a search for all groups in your organization that
    you have access to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run. You should see at most 5 groups. If you are
    not a member of 5 groups you will only see those that you are a member of. If
    you want to see all the groups you are a member of you would remove the `max_groups=5`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating a Group
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now that you have seen how to search for groups in your organization you need
    to create one. You can create groups to share data publically or with just members
    of the group. You are going to walk through how to create a group for sharing
    data publically. You will also see the arguments needed to create private groups
    and how to change the setting.
  prefs: []
  type: TYPE_NORMAL
- en: Right click on `Chapter3` folder and select **New>Notebook**. Rename the Notebook
    to `CreateGroupMoveData`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are going to log into your organizations GIS through the user you are currently
    logged into ArcGIS Pro with by typing in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next cell you will create a group by using the create method of the groups
    module. The create method takes 5 arguments explained in the table below. Type
    in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Run** button to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should get no out message, but you have created a new public group. To check
    this you can go to your ArcGIS Online account and look in Groups. You can also
    type in `farmerMarketGroup` and click the **Run** button to see the group. It
    should look something like below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file99.png)Newly created group.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the group you used 5 arguments: title, tags, description, access,
    `is_invitation_only`. Those are the minimum arguments you should use when setting
    up a new group as they give the group a title, tags, description and set basic
    access. The table below has those arguments along with the values they can be.'
  prefs: []
  type: TYPE_NORMAL
- en: '| `title` | String between single or double quotes that will be the title of
    your group |'
  prefs: []
  type: TYPE_TB
- en: '| `tags` | String between single or double quotes with a comma separating all
    the tags. When returned it is a list |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | String between single or double quotes that will be the description
    of your group |'
  prefs: []
  type: TYPE_TB
- en: '| `access` | String between single or double quotes that sets the access. The
    access values can be: org, private, public. Org is a group that everyone in your
    organization can see. Private is a private group that only invited users can see.
    Public is a public group available to everyone. |'
  prefs: []
  type: TYPE_TB
- en: '| `is_invitation_only` | String between single or double quotes that is a boolean
    value. When set to True users can only gain access if invited. When set to False
    users can request access or be invited. |'
  prefs: []
  type: TYPE_TB
- en: You can verify any of the settings by typing the variable for the group a dot
    and the value. To verify the access of the group you just created you would type
    the following in the next cell
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: And click **Run** to run.
  prefs: []
  type: TYPE_NORMAL
- en: You should see the following output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/file100.png)Verifying a groups access.'
  prefs: []
  type: TYPE_NORMAL
- en: To change any of the values of a group you can do that by using the update function.
    The update function takes all the same arguments used to create the group. To
    update the access type in the following
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: And click **Run** to run.
  prefs: []
  type: TYPE_NORMAL
- en: You have now created a new group and seen how to change the values of that group.
    The next step is sharing **data** with a group.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing content to a Group
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: An empty group is not very useful. The point of creating a group is to share
    data either publically or with other users. In this section you will see how to
    share data with a group.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to need to access the feature layer containing the Alameda County
    Farmers Markets. In the next cell of the same Notebook from above you will use
    the `search()` method to get the Farmers Markets in Alameda County feature layer.
    The search method returns a list but you know you only have one item with that
    title so you can add a [0] at the end of the search method to return just the
    first value from the list to your variable. Type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should see the display for the Alameda County Farmers
    Market Feature Layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you can check the access of the feature layer by typing in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should see it return `‘private’`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have a feature layer you can share it with your group. To share
    with the group you are going to use the `share()` method, and you are going to
    use two arguments to set the organization sharing level when sharing it with the
    group. The org argument can be set to True or False, when set to True it shares
    the item with your entire organization, when false it share it just with the group.
    The group argument takes the id from the group. Since you have a variable holding
    the group you just have to access its id by using the id method. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should see the result below
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file101.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of sharing an item to a group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can check the sharing level of any of your items by calling the `shared_with`
    method on it. To see that type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should see the result below
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file102.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of shared_with
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The result is a dictionary with values for everyone, org, and groups that the
    item is now shared with.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have shared some data with the group you need to add or invite
    users to join your group.
  prefs: []
  type: TYPE_NORMAL
- en: Adding, Inviting, and Removing Users from a Group
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Adding, inviting and removing users from a group all use similar code. They
    all apply a method to the group. The method takes a list of strings of usernames
    as its argument. The table below displays the syntax using our farmers market
    group from the example.
  prefs: []
  type: TYPE_NORMAL
- en: '| `add_users` | `farmerMarketGroup.add_users([“user1”,”user2”, . . .])` |'
  prefs: []
  type: TYPE_TB
- en: '| `invite_users` | `farmerMarketGroup.invite_users([“user1”,”user2”, . . .])`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `remove_users` | `farmerMarketGroup.remove_users([“user1”,”user2”, . . .])`
    |'
  prefs: []
  type: TYPE_TB
- en: When any of the above code is run the output is a dictionary with a list of
    users that were added, invited, or removed along with the details. *The group
    owner cannot be removed from the group.*
  prefs: []
  type: TYPE_NORMAL
- en: Which user can belong to group is dependent on your organization type. In some
    cases organizations do not allow users from outside your organization or public
    users to be part of a group.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now you have created a group, shared data with it and added or invited new users
    to that group. Next you will see how to manage users
  prefs: []
  type: TYPE_NORMAL
- en: Manage Users
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Managing users in your organization through the ArcGIS API for Python can be
    a time saver as you can have Notebooks created that can be run to quickly create
    new users, access user data, reassign user content and delete users. The first
    step is understanding the User class to see what information you can see about
    users.
  prefs: []
  type: TYPE_NORMAL
- en: User Properties
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In order to learn more about the properties of users you are going to look at
    yourself and explore the different user properties.
  prefs: []
  type: TYPE_NORMAL
- en: Right click on `Chapter3` folder and select **New>Notebook**. Rename the Notebook
    to `UserProperties`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are going to log into your organizations GIS through the user you are currently
    logged into ArcGIS Pro with by typing in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next cell you are going to view your own account by using the me property.
    Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should see the following returned with your user information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file103.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: User information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can identify many different aspects of a user’s profile. Things like a user’s
    first and last name, email address, when they last accessed their account, what
    groups they are a member of, and how much storage they are using, You are going
    to extract and write out all of this information. You will need to import the
    time module to convert the time returned to month/date/year. The groups property
    returns a data dictionary. In order to access the name you create an empty list,
    and iterate through the data dictionary accessing the title of each, and append
    it to the group, then use the join function to write the contents of the group
    to string. In the next cell type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should see the following returned with your user information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file104.png)User Information returned'
  prefs: []
  type: TYPE_NORMAL
- en: Another useful item to be returned would be credits available. For this you
    need to have credit budgeting turned on. In a future section you will look more
    at managing credits as an administrator and you can add that code to your above
    code to find the credits available.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Search For Users
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can search for users just like you would with items or groups. You can set
    a query to look for a user by username or find users by an email address. You
    will set up a Notebook with samples of both that you can use to further search
    for users within your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Right click on `Chapter5` folder and select **New>Notebook**. Rename the Notebook
    to `SearchForUsers`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are going to log into your organizations GIS through the user you are currently
    logged into ArcGIS Pro with by typing in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: First you will search for users by username. You will be writing in your username
    below in the code where it says {`userNameSearch`}. The search for users works
    just like all the previous searches in that it returns a list of values. Since
    you are searching for a specific username you should have a list of one. To be
    sure you will run a test to print out the length of the list. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file105.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Result of username search
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To access the user returned you need to use the list index to extract the first
    user. Then display those results. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file106.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Results of selecting a single user
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also search by email using the wildcard *. This allows you to search
    for all email addresses from the same email provider. The code is the same as
    for searching by username except for the query. In this sample you will put in
    your own email provider in the `{@email.com}`. You are again going to find the
    length of the list returned to you before extracting a user. Type in the following
    in the next cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Depending on how many people in your organization have that email host you may
    have a large number. You could iterate through them using a for loop and print
    out the user information from the last Notebook. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. It will print out the user information for each user in
    that search, separated by a `-----------`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file107.png)User search information.'
  prefs: []
  type: TYPE_NORMAL
- en: You have seen how to search for users within your organization, and print out
    user information. In the next section you will see some of the admin privileges
    that can be applied to users.
  prefs: []
  type: TYPE_NORMAL
- en: Administering Your GIS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this section you will explore what you can do if you are the administrator
    and have admin privileges. With admin privileges you can add and remove users,
    manage user licenses, and manage ArcGIS Online credits. In this section you will
    see how to do each of those.
  prefs: []
  type: TYPE_NORMAL
- en: You must have admin privileges to do any of the following. To add users you
    must have credentials available for the new user
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creating and Deleting users
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To create new users in AcGIS Online you will be using the `create()` method.
    The `create()` method takes the following arguments: `username`, `password`, `firstname`,
    `lastname`, `email`, `description`, `role`, `user_type`, and `provider`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| `username` | String value of the username |'
  prefs: []
  type: TYPE_TB
- en: '| `password` | String value of the password, this can be changed by user at
    any time when they log in |'
  prefs: []
  type: TYPE_TB
- en: '| `firstname` | String value of the user’s first name |'
  prefs: []
  type: TYPE_TB
- en: '| `lastname` | String value of the user’s last name |'
  prefs: []
  type: TYPE_TB
- en: '| `email` | String value of the user’s email address |'
  prefs: []
  type: TYPE_TB
- en: '| `description` | String value of the description of the user |'
  prefs: []
  type: TYPE_TB
- en: '| `role` | String value of the role for the user in the organization.ArcGIS
    Online has the three options`org_admin` is for admins with the organization that
    have admin privleges`org_publisher` is for publishers in the organization that
    can publish web layers and service layers`org_user` is for users in the organization
    that can create groups and content and use the organizations data |'
  prefs: []
  type: TYPE_TB
- en: '| `user_type` | String value for the user type in the organization`viewer_UT`
    is for users that need to view data shared with them. They can’t create or edit
    data`fieldworkerUT` is for users that need to view and edit data and is for users
    that interact mostly through field apps.`editor_UT` is for users that need to
    view and edit data shared with them. They can’t create or share data`creator_UT`
    is for users that need to create and share content, such as web maps and apps.`GISProfessionalBasicUT`
    is for users with all the capabilities of a creator and access to ArcGIS Pro Basic`GISProfessionalStdUT`
    is for users with all the capabilities of a creator and access to ArcGIS Pro Standard`GISProfessionalAdvUT`
    is for users with all the capabilities of a creator and access to ArcGIS Pro Advanced
    |'
  prefs: []
  type: TYPE_TB
- en: '| `provider` | String value for the provider`arcgis` for ArcGIS Onlineenterprise
    for ArcGIS Enterprise |'
  prefs: []
  type: TYPE_TB
- en: With this table you can create your new user.
  prefs: []
  type: TYPE_NORMAL
- en: Right click on `Chapter5` folder and select **New>Notebook**. Rename the Notebook
    to `AdminsteringYourOrg`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are going to log into your organizations GIS through the user you are currently
    logged into ArcGIS Pro with by typing in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are going to create a sample new user. You will assign them a username,
    password, first name, last name, email, description, role, user type, and provider.
    Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. If it runs you should get no result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To view the user type in `newUser` in the next cell and click **Run** to run
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it comes time to delete a user you first want to make sure you don’t lose
    any data. As an admin you can reassign a user’s data to a different user. The
    first step is to find all of that user’s data. Recall from earlier you can search
    for content based on the owner’s username. In the next cell type the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To reassign all the items to a new user you loop through the list of items calling
    the `reassign_to` method. The reassign_`to` method takes a `target_owner` and
    `target_folder` argument. If the name of the `target_folder` is not assigned it
    will put the items in the root folder. You can now reassign all the data from
    newUser to yourself by typing in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should get no output
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you can delete the user as all of their data has been reassigned. In the
    next cell type in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should get no output
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can reassign all of a user’s items when you delete the user. But you are
    only able to reassign it to the root folder. To do that you would write `newUser.delete(reassign_to
    ={userNameToAssignTo}”`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You have seen how to create a user and the different attributes you can assign
    a user when you create them. You have also seen how to reassign a user’s data
    and delete that user. Next you will see how to assign licenses and monitor credits
    for your users
  prefs: []
  type: TYPE_NORMAL
- en: Assign Licenses and Credits
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can manage both user licenses and credits through Notebooks. Users can be
    assigned a license and have that license revoked. You can view the available credits
    in your organization, and you can manage those credits through credit budgeting.
    You are first going to see how to check the apps in your organization and then
    view the licenses in your organization and see how to assign them.
  prefs: []
  type: TYPE_NORMAL
- en: Continue working in the `AdminsteringYourOrg` Notebook by finding all the apps
    licensed in your organization. You will create variable to hold the list of apps
    and then a loop to print out the apps each on a single line. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You will see the apps your organization has licensed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next cell you will use the get method to get the license to your ArcGIS
    Pro app so you can see what individual license you have. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should get no output
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have the Pro app license you can see what extensions you have licensed
    and if any are assigned. You are using the report object to get a table showing
    you what licenses you have, how many are assigned and how many are remaining.
    Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. You should see a table similar to below, just with the
    licenses in your organization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file108.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: ArcGIS Pro Licenses in your organization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you know what licenses you have available you can assign one. You use
    the assign method with the username and the extension as the entitlements argument.
    Assign yourself a spatial analyst license.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. If assigned your result should be **True**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can check on what extension a user has assigned. You use the `user_entitlement`
    method passing in the user name as the argument. Check on what extensions you
    have assigned to you by typing in the following, putting in your user name between
    the quotes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. The results are a dictionary with the username, last login,
    connected, and list of entitlements as the key/value pairs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/file109.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Extensions assigned to a user
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To revoke a license you use the revoke method on the license object. The arguments
    are the same as assign, a username and the extensions to be revoked. You can use
    the * wildcard to revoke all licenses. Revoke all the licenses assigned to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. If assigned your result should be **True**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To verify you have no license use the `user_entitlement` method again
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. The results are an empty dictionary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can use the credits property to view the amount of credits available in
    your organization. Type in the following
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. The results will be the number of credits in your organization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can manage the credits available to each user by using credit budgeting.
    Turn on credit budgeting by using the enable method on the credits property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. Your result should be **True**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you can allocate credits to a user by using the allocate method. The allocate
    method takes the username and number of credits as its arguments. Allocate 10
    credits to yourself
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. Your result should be **True**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also remove credits from a user by using the deallocate method. The
    deallocate method removes all the credits from a user. If you want to remove all
    the credits you would type in the following `gis.admin.credits.deallocate(username='{username}')`
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: When credit budgeting is enabled you can check the available credits for each
    user as they get an assigned credits and available credits property. Check the
    credits you have available
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run** to run. The results will be the number of credits available to
    you. *If you are using single user account you cannot assign credits to yourself
    as you have access to all the credits*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this section you have seen how to search for content inside and outside of
    your organization. You can now create new folders for organizing your content.
    You can create groups and set different sharing levels of your groups for sharing
    content by inviting users to your group. Using the admin settings you can create
    new users with different roles and types. You can search for existing users and
    pull up information about their roles and data owned, groups they are members
    of, and storage used. You can manage licenses for users and budget credits. In
    all you have the tools and Notebooks to manage your content and users of your
    organization.
  prefs: []
  type: TYPE_NORMAL
