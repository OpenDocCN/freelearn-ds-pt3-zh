- en: Chapter 2. The Notebook Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The IPython notebook has an extensive user interface that makes it appropriate
    for the creation of richly formatted documents. In this chapter, we will thoroughly
    explore the notebook's capabilities. We will also consider the pitfalls and best
    practices of using the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Notebook editing and navigation, which includes cell types; adding, deleting,
    and moving cells; loading and saving notebooks; and keyboard shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IPython magics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with the operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running scripts, loading data, and saving data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding images, video, and other media with IPython's rich display system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing and navigating a notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we open a notebook (by either clicking on its name in the dashboard or
    creating a new notebook), we see the following in the browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing and navigating a notebook](img/8341OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, from the top to the bottom, we see the following
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Title** bar (area marked **1**) that contains the name of the notebook
    (in the preceding example, we can see **Chapter 2**) and information about the
    notebook version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Menu** bar (area marked **2**) looks like a regular application menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Toolbar** (area marked **3**) is used for quick access to the most frequently
    used functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the area marked **4**, an empty computation cell is shown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Starting with IPython Version 2.0, the notebook has two modes of operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Edit**: In this mode, a single cell comes into focus and we can enter text,
    execute code, and perform tasks related to that single cell. The Edit mode is
    activated by clicking on a cell or pressing the *Enter* key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command**: In this mode, we perform tasks related to the whole notebook structure,
    such as moving, copying, cutting, and pasting cells. A series of keyboard shortcuts
    are available to make these operations more efficient. The Command mode is activated
    by clicking anywhere on the notebook, outside any cell, or by pressing the *Esc*
    key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we open a notebook, it''s in the Command mode. Let''s enter into the Edit
    mode in our new notebook. For this, either click on the empty cell or hit *Enter*.
    The notebook''s appearance will change slightly, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing and navigating a notebook](img/8341OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the thick border around the selected cell and the small pencil icon on
    the top-right corner of the notebook menu. These indicate that the notebook is
    in the Edit mode.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming subsections, we will explore each of the notebook modes in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Getting help and interrupting computations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The notebook is a complex tool that integrates several different technologies.
    It is unlikely that new (or even experienced) users will be able to memorize all
    the commands and shortcuts. The **Help** menu in the notebook has links to relevant
    documentation that should be consulted as often as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Newcomers may want to visit the Notebook Interface Tour, which is available
    at [http://nbviewer.ipython.org/github/ipython/ipython/blob/2.x/examples/Notebook/User%20Interface.ipynb](http://nbviewer.ipython.org/github/ipython/ipython/blob/2.x/examples/Notebook/User%20Interface.ipynb),
    to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also easy to get help on any object (including functions and methods).
    For example, to access help on the `sum()` function, run the following line of
    code in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Appending `??` to an object's name will provide more detailed information. Incidentally,
    just running `?` by itself in a cell displays information about IPython features.
  prefs: []
  type: TYPE_NORMAL
- en: The other important thing to know right from the start is how to interrupt a
    computation. This can be done through the **Kernel** menu, where the kernel process
    running the notebook code can be interrupted and restarted. The kernel can also
    be interrupted by clicking on the **Stop** button on the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: The Edit mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Edit mode is used to enter text in cells and to execute code. Let''s type
    some code in the fresh notebook we created. As usual, we want to import `NumPy`
    and `matplotlib` to the current namespace, so we enter the following magic command
    in the first cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Press *Shift* + *Enter* or click on the Play button on the toolbar to execute
    the code. Notice that either of the options causes a new cell to be added under
    the current cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to have something concrete to work with, let''s suppose we want to compute
    the interest accumulated in an investment. Type the following code in three successive
    cells:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In cell 1, enter the following command lines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In cell 2, enter the following command lines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In cell 3, enter the following command lines**:**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run cell 1 and cell 2 in the usual way by pressing *Shift* + *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run cell 3 by pressing *Ctrl* + *Enter* instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that cell 3 continues to be selected after being executed. Keep pressing
    *Ctrl* + *Enter* while having cell 3 selected. The plot will be updated each time
    to display the return on the investment for a different 5-year period.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: In cell 1, we defined a function that computes the return on investment for
    given principal, interest rate, and number of years.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In cell 2, we set actual values for the principal and interest, and then initialized
    variables to define the period for which we want to do the computation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cell 3 computed the amount returned for a period of 5 years and plotted the
    results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, the variables `tstart` and `tend` were updated. The command lines are
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The effect is that, the next time the cell gets updated, time advances to the
    next 5-year period. So, by repeatedly pressing *Ctrl* + *Enter*, we can quickly
    see how the investment grows in successive 5-year periods.
  prefs: []
  type: TYPE_NORMAL
- en: There is a third way to run commands in a cell. Select cell 2 again by clicking
    on it. Then, press *Alt* + *Enter* in Windows or *Option* + *Enter* on a Mac.
    This will run cell 2 and insert a new cell under it. Leave the new cell alone
    for a while. We don't really need that cell, and we will learn how to delete it
    in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, there are three ways to run the contents of a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: Pressing *Shift* + *Enter* or the Play button on the toolbar. This will run
    the cell and select the next cell (create a new cell if at the end of the notebook).
    This is the most usual way to execute a cell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressing *Ctrl* + *Enter*. This will run the cell and keep the same cell selected.
    It's useful when we want to repeatedly execute the same cell. For example, if
    we want to make modifications to the existing code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressing *Alt* + *Enter*. This will run the cell and insert a new cell immediately
    below it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another useful feature of the Edit mode is **tab completion**. Select an empty
    cell and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then, press the *Tab* key. A list of suggested completions appears. Using the
    arrow keys of the keyboard or the mouse, we can select `amount_values` and then
    press *Enter* to accept the completion.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very important feature of IPython is easy access to help information. Click
    on an empty cell and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, press *Shift* + *Tab*. A tooltip containing information about the `linspace`
    function will appear. More information can be obtained by clicking on the **+**
    symbol at the top-right of the tooltip window. By clicking on the **^** symbol,
    the information is displayed in an information area at the bottom of the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Tab* and *Shift* + *Tab* features are the most useful ones of the notebook;
    be sure to use them often!
  prefs: []
  type: TYPE_NORMAL
- en: The Command mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The number of shortcuts available in the Command mode is substantially larger
    than those available in the Edit mode. Fortunately, it is not necessary to memorize
    all of them at once, since most actions in the Command mode are also available
    in the menu. In this section, we will only describe some common features of the
    Command mode. The following table lists some of the useful shortcuts for editing
    cells; the other shortcuts will be described later:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Shortcut | Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *Enter* | Activates the Edit mode |'
  prefs: []
  type: TYPE_TB
- en: '| *Esc* | Activates the Command mode |'
  prefs: []
  type: TYPE_TB
- en: '| *H* | Displays the list of keyboard shortcuts |'
  prefs: []
  type: TYPE_TB
- en: '| *S* or *Ctrl* + *S* | Saves the notebook |'
  prefs: []
  type: TYPE_TB
- en: '| *A* | Inserts a cell above |'
  prefs: []
  type: TYPE_TB
- en: '| *B* | Inserts a cell below |'
  prefs: []
  type: TYPE_TB
- en: '| *D* (press twice) | Deletes the cell |'
  prefs: []
  type: TYPE_TB
- en: '| *Z* | Undoes the last delete |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *K* | Moves the cell up |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *J* | Moves the cell down |'
  prefs: []
  type: TYPE_TB
- en: '| *X* | Cuts the content of the cell |'
  prefs: []
  type: TYPE_TB
- en: '| *C* | Copies the content of the cell |'
  prefs: []
  type: TYPE_TB
- en: '| *V* | Pastes the content of the cell below the current cell |'
  prefs: []
  type: TYPE_TB
- en: '| *Shift* + *V* | Pastes the content of the cell above the current cell |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most common (and frustrating) mistakes when using the notebook is
    to type something in the wrong mode. Remember to use *Esc* to switch to the Command
    mode and *Enter* to switch to the Edit mode. Also, remember that clicking on a
    cell automatically places it in the Edit mode, so it will be necessary to press
    *Esc* to go to the Command mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and try some of the editing shortcuts in the sample notebook. Here
    is one example that you can try:'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Esc* to go to the Command mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the arrow keys to move to the empty cell we created between cell 2 and cell
    3 in the previous subsection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *D* twice. This will cause the cell to be deleted. To get the cell back,
    press *Z*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that some of the shortcuts do not conform to the usual shortcuts in other
    software. For example, the shortcuts for cutting, copying, and pasting cells are
    not preceded by the *Ctrl* key.
  prefs: []
  type: TYPE_NORMAL
- en: Cell types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have used the notebook cells only to enter code. We can, however,
    use cells to enter the explanatory text and give structure to the notebook. The
    notebook uses the **Markdown** language to allow easy insertion of rich text in
    a cell. Markdown was created by John Gruber for plain text editing of HTML. See
    the project page at [http://daringfireball.net/projects/markdown/basics](http://daringfireball.net/projects/markdown/basics)
    for the basics of the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how it works in the notebook. If you created any other cells to experiment
    with the keyboard shortcuts in the previous section, delete them now so that the
    notebook only has the `%pylab inline` cell and the three cells where the interest
    computation is done.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `%pylab inline` cell and insert a cell right below it. You can
    either use the menu, or go to the Command mode (using the *Esc* key) and use the
    shortcut key *B*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now want to convert the new cell type to Markdown. There are three ways
    to do that. Start by clicking on the cell to select it, and then perform one of
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the notebook menu item **Cell**, select **Cell Type**, and then click
    on **Markdown** as shown in the following screenshot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Markdown** from the drop-down box on the notebook's toolbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to the Command mode by pressing *Esc* and then press *M*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Cell types](img/8341OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that once the cell is converted to Markdown, it is automatically in
    the Edit mode. Now, enter the following in the new Markdown cell (be careful to
    leave an extra blank line where indicated):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After the text is entered, press *Shift* + *Enter* to execute the cell. Instead
    of using the IPython interpreter to evaluate the cell, the notebook runs it through
    the Markdown interpreter and the cell is rendered using HTML, producing the output
    displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cell types](img/8341OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, we use the following Markdown features:'
  prefs: []
  type: TYPE_NORMAL
- en: Text is entered normally and a new paragraph is indicated by letting an extra
    blank line within the text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Italics are indicated by enclosing the text between asterisks, as in `*compound
    interest*`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formulae enclosed in double dollar (`$$`) signs, as in `$$R = Pe^{rt}$$`, are
    displayed centered in the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An unordered list is indicated by lines starting with a dash (`-`). It is important
    to leave blank lines before and after the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single dollar (`$`) sign causes the formula to be typeset inline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hyperlinks are specified in the following format: `[corresponding Wikipedia
    entry]( http://en.wikipedia.org/wiki/Compound_interest)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a Markdown cell, mathematical formulae can be entered in **LaTeX**, which
    is an extensive language for technical typesetting that is beyond the scope of
    this book. Fortunately, we don't need to use the full-fledged formatting capabilities
    of LaTeX, but only the formula-editing features. A good quick introduction to
    LaTeX can be found at [http://en.wikibooks.org/wiki/LaTeX/Mathematics](http://en.wikibooks.org/wiki/LaTeX/Mathematics).
    Learning a bit of LaTeX is very useful, since it is also used in other Python
    libraries. For instance, `matplotlib` allows LaTeX to be used in plot titles and
    axis labels. In the notebook, LaTeX is rendered by MathJax, a LaTeX interpreter
    implemented in JavaScript by Davide Cervone. Visit [http://www.mathjax.org/](http://www.mathjax.org/)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To edit the contents of a Markdown cell once it has been displayed, simply double-click
    on the cell. After the edits are done, run the cell using *Shift* + *Enter* to
    render it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add structure to the notebook, we can add headings of different sizes. Let''s
    add a global heading to our notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new cell at the very top of the notebook and change its type to **Heading
    1**. Recall that there are three alternatives to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By navigating to **Cell** | **Cell Type**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the **Cell Type** dropdown on the toolbar
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the keyboard shortcut *1* in the Command mode
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter a title for the notebook and run the cell using *Shift* + *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The notebook supports six heading sizes, from **Heading 1** (the largest) to
    **Heading 6** (the smallest).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Markdown language also allows the insertion of headings, using the hash
    (`#`) symbol. Even though this saves typing, we recommend the use of the Heading
    1 to Heading 6 cells. Having the headings in separate cells keeps the structure
    of the notebook when it is saved. This structure is used by the `nbconvert` utility.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes the types of cells we considered so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Cell type | Command mode shortcuts | Use |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Code | *Y* | This allows you to edit and write new code to the IPython interpreter.
    The Default language is Python. |'
  prefs: []
  type: TYPE_TB
- en: '| Markdown | *M* | This allows you to write an explanatory text. |'
  prefs: []
  type: TYPE_TB
- en: '| Heading 1 to Heading 6 | Keys *1* to *6* | This allows you to structure the
    document |'
  prefs: []
  type: TYPE_TB
- en: '| Raw NBConvert | *R* | The content of this cell remains unmodified when the
    notebook is converted to a different format |'
  prefs: []
  type: TYPE_TB
- en: IPython magics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Magics are special instructions to the IPython interpreter that perform specialized
    actions. There are two types of magics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Line-oriented**: This type of magics start with a single percent (`%`) sign'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cell-oriented**: This type of magics start with double percent (`%%`) signs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are already familiar with one of the magic command, that is, `%pylab inline`.
    This particular magic does two of the following things: it imports `NumPy` and
    `matplotlib`, and sets up the notebook for inline plots. To see one of the other
    options, change the cell to `%pylab`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run this cell and then run the cell that produces the plot again. Instead of
    drawing the graph inline, IPython will now open a new window with the plot as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IPython magics](img/8341OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This window is interactive and you can resize the graph, move it, and save it
    to a file from here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful magic is `%timeit`, which records the time it takes to run a
    line of Python code. Run the following code in a new cell in the notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To obtain a better estimate, the command is run 10,000 times and the runtime
    is averaged. This is done three times and the best result is reported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `%timeit` magic is also available in the Edit mode. To demonstrate this,
    run the following command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next cell, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code computes a list with the returns for 100,000 different values
    of the interest rate, but uses plain Python code only. The reported time for this
    code is displayed in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now rewrite the same computation using `NumPy` arrays. Run the following
    command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next cell, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the runtime is displayed in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When comparing the two outputs, we can see the speed gain obtained using `NumPy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all magics that are available, run the following command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have the list of all magics, you can inquire about a particular one
    by running a cell with the magic name appended by a question mark: `%pylab?`.'
  prefs: []
  type: TYPE_NORMAL
- en: This will display the information about the `%pylab` magic in a separate window
    at the bottom of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting feature is the capability to run code that is written in
    other languages. Just to illustrate the possibilities, we''ll see how to accelerate
    the code using Cython, because Cython compiles Python code into C. Let''s write
    a function that computes approximations of areas bounded by a sine curve. Here
    is how we could define the function in pure Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We will approximate the area by taking the average of the left and right endpoint
    rules (which is equivalent to the Trapezoidal rule). The code is admittedly inefficient
    and unpythonic. Notice in particular that we use the Python library version of
    the `sin()` function, instead of the `NumPy` implementation. The `NumPy` implementation,
    in this case, actually yields a slower code due to the repeated conversions between
    lists and arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a simple test, execute the following command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output after running the preceding cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output makes sense, since the actual value of the area is 2\. Let''s now
    time the execution using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now implement the same function in Cython. Since the Cython magic is
    in an extension module, we need to load that module first. We will load the extension
    module using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will define the Cython function. We will not discuss the syntax in
    detail, but notice that it is pretty similar to Python (the main difference in
    this example is that we must declare the variables to specify their C type):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the preceding function using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After running the preceding function, we get the same output as earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now time the function using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The runtime is displayed in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that the Cython code runs in about 30 percent of the total time taken
    by the Python code. It is important to emphasize that this is not the recommended
    way to speed up this code. A simpler solution would be to use `NumPy` to vectorize
    the computation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The time after running the preceding code is displayed in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: There is a lesson here; when we try to speed up the code, the first thing to
    try is to always write it using `NumPy` arrays, taking the advantage of vectorized
    functions. If further speedups are needed, we can use specialized libraries such
    as **Numba** and **NumbaPro** (which will be discussed later in this book) to
    accelerate the code. In fact, these libraries provide a simpler approach to compile
    the code into C than using Cython directly.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the operating system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any code with some degree of complexity will interact with the computer's operating
    system when files must be opened and closed, scripts must be run, or online data
    must be accessed. Plain Python already has a lot of tools to access these facilities,
    and IPython and the notebook add another level of functionality and convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the notebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The notebook is autosaved in periodic intervals. The default interval is 2
    minutes, but this can be changed in the configuration files or using the `%autosave`
    magic. For example, to change the autosave interval to 5 minutes, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the time is entered in seconds. To disable the autosave feature,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We can also save the notebook using the **File** menu or by clicking on the
    disk icon on the toolbar. This creates a **checkpoint**. Checkpoints are stored
    in a hidden folder and can be restored from the **File** menu. Notice that only
    the latest checkpoint is made available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notebooks are saved as plain text files with the `.ipynb` extension, using
    JSON. JSON is a format widely used for information exchange in web applications,
    and is documented in [http://www.json.org/](http://www.json.org/). This makes
    it easy to exchange notebooks with other people: simply give them the `.ipynb`
    file, and it can then be copied to the appropriate working directory. The next
    time the notebook server is opened in that directory, the new notebook will be
    available (or the directory list can be refreshed from the dashboard). Also, since
    JSON is in a plain text format, it can be easily versioned.'
  prefs: []
  type: TYPE_NORMAL
- en: Converting the notebook to other formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notebooks can be converted to other formats using the `nbconvert` utility. This
    is a command-line utility. So, to use it, open a terminal window in the directory
    that contains your notebook files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows users can press *Shift* and right-click on the name of the directory
    that contains the notebook files and then select **Open command window here**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a shell window and enter the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You must, of course, replace `Chapter 2.ipynb` with the name of the file that
    contains your notebook. The file name must be enclosed by quotes.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command will convert the notebook to a static HTML page that can
    be directly placed in a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An alternative way to publish notebooks on the Web is to use the site [http://nbviewer.ipython.org/](http://nbviewer.ipython.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to create a slideshow with `nbconvert` using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: However, to get a decent presentation, we must first specify its structure in
    the notebook. To do so, go to the notebook and select **Slide show** on the **Cell**
    toolbar drop-down list. Then, determine for each cell if it should be a slide,
    a sub-slide, or a fragment.
  prefs: []
  type: TYPE_NORMAL
- en: To view the slide show, you need to install the `reveal.js` file in the same
    directory as the web page containing the presentation. You can download this file
    from [https://github.com/hakimel/reveal.js](https://github.com/hakimel/reveal.js).
    If necessary, rename the directory that contains all the files to `reveal.js`.
    We are then ready to open the HTML file that contains the presentation.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to convert notebooks to LaTeX and PDF. However, this requires
    the installation of packages not included in Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: Running shell commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can run any shell command from the notebook by starting a cell with an exclamation
    (`!`) mark. For example, to obtain a directory listing in Windows, run the following
    command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The equivalent command in Linux or OS X is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You can enter command lines of any complexity in the cell. For example, the
    following line would compile the famous "Hello, world!" program every student
    of C has to try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Of course, this will not run correctly in your computer unless you have the
    C compiler, `cc`, installed and the `hello.c` file with the proper code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of using shell commands directly, a lot of the same functionality is
    provided by magic commands. For example, a directory listing (in any operating
    system) is obtained by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows a list of some of the most commonly used magics to
    interact with the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Magic | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `%cd` | Changes the directory |'
  prefs: []
  type: TYPE_TB
- en: '| `%pwd` | Prints the current directory |'
  prefs: []
  type: TYPE_TB
- en: '| `%ls` | Lists the current directory contents |'
  prefs: []
  type: TYPE_TB
- en: '| `%mkdir` | Creates a new directory |'
  prefs: []
  type: TYPE_TB
- en: '| `%rmdir` | Removes a directory |'
  prefs: []
  type: TYPE_TB
- en: '| `%echo` | Prints a string |'
  prefs: []
  type: TYPE_TB
- en: '| `%alias` | Creates an alias |'
  prefs: []
  type: TYPE_TB
- en: 'The `%echo` magic is frequently used to print values of environment variables.
    For example, to print the contents of the `PATH` environment variable in Windows,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In Linux or OS X, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `%alias` magic creates an alias for frequently used commands. For example,
    to define a macro that displays the `PATH` value in Windows, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In Linux or OS X, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'After the preceding command is defined, we can run the following command to
    display the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'To make entering commands even easier, a feature called **automagic** allows
    line-oriented magics to be entered without the `%` symbol (as shown in the preceding
    command). For example, to create a directory, we can simply enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If we change our mind, we can remove the directory using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The automagic feature is controlled by the `%automagic` magic. For example,
    use the following command to turn automagic off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Running scripts, loading data, and saving data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with projects of some complexity, it is common to have the need
    to run scripts written by others. It is also always necessary to load data and
    save results. In this section, we will describe the facilities that IPython provides
    for these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Running Python scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following Python script generates a plot of a solution of the Lorenz equations,
    a famous example in the theory of chaos. If you are typing the code, do not type
    it in a cell in the notebook. Instead, use a text editor and save the file with
    the name `lorenz.py` in the same directory that contains the notebook file. The
    code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go to the notebook and run a cell using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run the script and produce a plot of the solution, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Python scripts](img/8341OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `%run` magic executes the script in the notebook's namespace so that all
    global variables, functions, and classes defined in the script are made available
    in the current notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to use the `%load` magic for the same purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The difference is that `%load` does not immediately run the script, but places
    its code in a cell. It can then be run from the cell it was inserted in. A slightly
    annoying behavior of the `%load` magic is that it inserts a new cell with the
    script code even if there already is one from a previous use of `%load`. The notebook
    has no way of knowing if the user wants to overwrite the code in the existing
    cell, so this is the safest behavior. However, unwanted code must be deleted manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `%load` magic also allows code to be loaded directly from the web by providing
    a URL as input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: This will load the code for a box plot example from the matplotlib site to a
    cell. To display the image, the script must be run in the cell.
  prefs: []
  type: TYPE_NORMAL
- en: Running scripts in other languages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also run scripts written in other languages directly in the notebook.
    The following table contains some of the supported languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Cell magic | Language |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `%%HTML` or `%%html` | HTML |'
  prefs: []
  type: TYPE_TB
- en: '| `%%SVG` or `%%svg` | **Scaled Vector Graphics Language** (**SVGL**) |'
  prefs: []
  type: TYPE_TB
- en: '| `%%bash` | The Bash scripting language, which is available in Unix-like systems
    such as Ubuntu and Mac OS X |'
  prefs: []
  type: TYPE_TB
- en: '| `%%cmd` | MS Windows command-line language |'
  prefs: []
  type: TYPE_TB
- en: '| `%%javascript` | JavaScript |'
  prefs: []
  type: TYPE_TB
- en: '| `%%latex` | LaTeX, the scientific-oriented document preparation language
    |'
  prefs: []
  type: TYPE_TB
- en: '| `%%perl` | The PERL scripting language |'
  prefs: []
  type: TYPE_TB
- en: '| `%%powershell` | The MS Windows PowerShell language |'
  prefs: []
  type: TYPE_TB
- en: '| `%%python2` or `%%python3` | Run a script written in a version of Python
    different than the one the notebook is running |'
  prefs: []
  type: TYPE_TB
- en: '| `%%ruby` | The Ruby scripting language |'
  prefs: []
  type: TYPE_TB
- en: 'Now, let''s see some examples of scripts in some of these languages. Run the
    following code in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This displays a graphic composition with basic shapes, described using SVG.
    SVG is an HTML standard, so this code will run in modern browsers that support
    the standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the use of JavaScript, let''s first define (in a computation
    cell) an HTML element that can be easily accessed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Run this cell. The message "Hello, world!" in the size `h1` is displayed. Then
    enter the following commands in another cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: When the second cell is run, the color of the text of the "Hello, world!" message
    changes from black to blue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The notebook can actually run any scripting language that is installed in your
    system. This is done using the `%%script` cell magic. As an example, let''s run
    some code in the **Julia** scripting language. Julia is a new language for technical
    computing and can be downloaded from [http://julialang.org/](http://julialang.org/).
    The following example assumes that Julia is installed and can be accessed with
    the `julia` command (this requires that the executable for the language interpreter
    is in the operating system''s path). Enter the following code in a cell and run
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code defines a function (written in `julia`) that computes the
    factorial of an integer, and then prints the factorial of 10\. The following output
    is produced:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The first line is a message from the `julia` interpreter and the second is the
    factorial of 10.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and saving data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The manner in which data is loaded or saved is dependent on both the nature
    of the data and the format expected by the application that is using the data.
    Since it's impossible to account for all combinations of data structure and application,
    we will only cover the most basic methods of loading and saving data using `NumPy`
    in this section. The recommended way to load and save structured data in Python
    is to use specialized libraries that have been optimized for each particular data
    type. When working with tabular data, for example, we can use **pandas**, as described
    in [Chapter 4](ch04.html "Chapter 4. Handling Data with pandas"), *Handling Data
    with pandas*.
  prefs: []
  type: TYPE_NORMAL
- en: 'A single array can be saved with a call to the `save()` function of `NumPy`.
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This code generates an array of random values with five rows and 10 columns,
    prints it, and then saves it to a file named `random_array.npy`. The `.npy` format
    is specific for `NumPy` arrays. Let''s now delete the variable containing the
    array using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Running a cell with the preceding commands will produce an error, since we
    request the variable `A` to be displayed after it has been deleted. To restore
    the array, run the following command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to save several arrays to a single compressed file, as
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how keyword arguments are given to specify names for the saved arrays
    in disk. The arrays are now saved to a file in the `.npz` format. The data can
    be recovered from disk using the `load()` function, which can read files in both
    formats used by `NumPy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file passed to `load()` is of the `.npz` type, the returned value is
    an object of the `NpzFile` type. This object does not read the data immediately.
    Reading is delayed to the point where the data is required. To figure out which
    arrays are stored in the file, execute the following command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In our example, the preceding command produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'To assign the arrays to variables, use the Python dictionary access notation
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces the plot of half of a parabola:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading and saving data](img/8341OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The rich display system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an exciting development, recent versions of IPython include the capability
    to display images, video, sound, and other media directly in the notebook. The
    classes that support the display system are in the `IPython.display` module. In
    this section, we will discuss some of the supported formats.
  prefs: []
  type: TYPE_NORMAL
- en: Images and YouTube videos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Images can be loaded either from the local filesystem or from the web. To display
    the image contained in the `character.png` file, for example, run the following
    command in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to store the image in a variable to be displayed at a later
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The `character.png` file can be downloaded from the web page of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the image, we can use either `img` or `display(img)`. The following
    image is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images and YouTube videos](img/8341OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To load an image from the Web, simply give its URL as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command line loads the image of a flower:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images and YouTube videos](img/8341OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, images are embedded in the notebook so that they can be viewed
    offline. To insert a link to the image, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The image will be displayed as shown in the preceding example, but this time
    only a link to the image is inserted in the notebook. This results in a smaller
    size for the notebook file, but there is a caveat! If the image is changed online,
    the change will be reflected in the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also very easy to embed video directly from YouTube. The following code
    displays a beautiful animation of the Mandelbrot set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To finish this section, we present an extended example using IPython''s capability
    to display HTML. The goal of the example is to build and display an HTML table
    of mathematical curves. We start by generating the plots and saving them to disk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The cell starts with the `%matplotlib` magic with no arguments, since we don''t
    want the graphics to be inserted online (they will still be generated in an external
    viewer). We then define the `fcts` list holding the curves we want to plot. Each
    curve is specified by a tuple with two elements: the name of a function and the
    actual object representing the function. Then, the plots are generated in a loop.
    The Python code here is somewhat more complex than what we have seen so far, and
    the `matplotlib` functions used will be explained in detail in the next chapter.
    For now, just notice the call at the end of the cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command saves the figure file to the disk, using the `.png` format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we generate the HTML to create the table and store it in the `html_string`
    variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The HTML code is generated one piece at a time. We start by adding the `<table>`
    element in the first line of the cell. Then, in the loop, we generate one row
    of the table per iteration. To make the code more readable, we add only one HTML
    element in each line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then print the HTML we generated to check if it is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'This seems to be correct, so we are ready to render the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is correct, the following table of curves will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML](img/8341OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the end of the example, don''t forget to run the following command to restore
    the inline graphics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The IPython HTML display object is extremely powerful, as shown in the preceding
    example. HTML5-rich media, such as sound and video, can also be embedded; although,
    the support for all formats currently varies from browser to browser.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through a comprehensive tour of the IPython Notebook
    Interface. We covered features that are used daily when working with the notebook,
    such as navigation, magics, interacting with the operating system, running scripts,
    and loading and saving data. We finished with a discussion of how to display richly
    formatted data in the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use the `matplotlib` library to produce
    presentation-quality scientific graphs and data displays, with an emphasis on
    interactive graphs.
  prefs: []
  type: TYPE_NORMAL
