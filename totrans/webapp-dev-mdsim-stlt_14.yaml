- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customizing Pages, Personalizing Themes, and Implementing Multi-Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Streamlit recently added many advanced features to make customizing our apps
    easier and more accurate. Now, it’s possible to configure our pages so that we
    can hide the *burger menu* or the footer, for example. It’s possible to change
    many standard links and deeply personalize themes, colors, and styles. Finally,
    it’s possible to deal with multi-pages natively, naming and configuring folders
    in a very specific way.
  prefs: []
  type: TYPE_NORMAL
- en: All these new features are a very powerful way to deeply customize our web applications,
    making their look and behavior exactly the way we imagined during the design stage
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding new features related to deep customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating deeply customized pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding theming and `.``toml` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the multi-pages feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be using the following libraries, packages, and tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/e54d7b3d8840a3971ab8241acf6a1a6212e51f77/Chapter14](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/e54d7b3d8840a3971ab8241acf6a1a6212e51f77/Chapter14)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding new features related to deep customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, no new packages are needed – all we need is Streamlit. Let’s
    start by creating a new empty Python file; as usual, you can call it `app.py`.
    Then, open the IDE. We can start coding by just importing `streamlit` and adding
    a title both in the sidebar and in the main part of the web application, as shown
    in *Figure 14**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1: The starting code](img/B21147_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: The starting code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launching the application opens the browser on localhost at port `8501` and,
    as usual, we get something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2: The starting web app](img/B21147_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: The starting web app'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is very simple: we get the same title in the sidebar and the main part
    of the web app. Taking a closer look, we can find some very interesting elements
    that can be customized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3: App title and icon, footer, and menu](img/B21147_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.3: App title and icon, footer, and menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 14**.3*, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In red, we can see the *title* and *icon* of our web application. At the moment,
    these are the default ones: Streamlit’s icon and our Python filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In green, we can see the so-called *footer*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In yellow, we can see the *three points menu*. In previous versions of Streamlit,
    this was the so-called *hamburger menu*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s start from the *three points menu* and click on it. We’ll get the following
    pop-up menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4: The “three points” menu](img/B21147_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.4: The “three points” menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this pop-up menu, there are several voices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rerun**, to rerun the web app after a change in the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Print**, to print the screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Record a screencast**, to record our web app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clear cache**, to clear the cache with just one click'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other two voices, **About** and **Settings**, are very interesting because
    they can be customized, helping us in personalizing the look and feel of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open **Settings**. We’ll get the following new window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5: Settings](img/B21147_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.5: Settings'
  prefs: []
  type: TYPE_NORMAL
- en: From this menu, we can automatically update the app when the underlying code
    is updated. We can also choose to run it in wide or normal mode and set the theme;
    this can be **Light**, **Dark**, or the same as our system’s settings (**Use**
    **system setting**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The customization level is even deeper. In fact, by clicking on **Edit active
    theme**, we’ll see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.6: The\uFEFF Edit active theme\uFEFF window](img/B21147_14_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: The Edit active theme window'
  prefs: []
  type: TYPE_NORMAL
- en: From this window, we can customize the **Primary color**, **Text color**, **Background
    color**, and **Secondary background color** value. Moreover, we can select the
    font from a list, and we can copy the configuration to the clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: As indicated in the note below the font selection, if we want to make these
    choices permanent, we must edit a file named `config.toml` in the `.streamlit`
    directory; it’s a hidden folder. We’ll take care of this file later, in the *Understanding
    theming and .toml* *files* section.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to see how we can customize our pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating deeply customized pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let’s move back to the code, taking care of the title and icon marked
    in red in *Figure 14**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.7: The \uFEFFset_page_config\uFEFF method](img/B21147_14_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.7: The set_page_config method'
  prefs: []
  type: TYPE_NORMAL
- en: On *line 3*, immediately after `import streamlit as st`, we set the page configuration
    using the `st.set_page_config` method. In this way, we can customize the page
    title and icon (an emoji or even a PNG or an ICO file is supported), set the layout
    of the content in the main section (it can be wide or centered), and decide whether
    the sidebar is expanded or collapsed at start time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result, with the configuration reported in *Figure 14**.7*, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8: A customized page](img/B21147_14_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.8: A customized page'
  prefs: []
  type: TYPE_NORMAL
- en: It is up to you to try different settings while using all the available parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `set_page_config` method, we can do even more. In fact, by adding
    the few lines of code shown in *Figure 14**.9*, we can modify the *three points
    menu* and the **About** section:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.9: Full customization with \uFEFFset_page_config\uFEFF](img/B21147_14_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.9: Full customization with set_page_config'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a breakdown of what we did in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: On *lines 9* and *10*, we added two voices to the *three points menu* called
    **Get Help** and **Report a bug**. They direct the users to the Streamlit website
    and GitHub, respectively. You can insert any kind of URL you wish here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On *line 11*, we added a note that will be shown in the **About** option of
    the menu; this note supports the standard Markdown syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 14**.10* shows the new *three points menu* and the customized **About**
    section side by side:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.10: The customized \uFEFFthree points\uFEFF menu and \uFEFFAbout\uFEFF\
    \ section](img/B21147_14_10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.10: The customized three points menu and About section'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, referring to the *footer* shown in *Figure 14**.3*, let’s learn how to
    remove it with a very short instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11: Instruction to remove the footer](img/B21147_14_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.11: Instruction to remove the footer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what we are doing in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: On *line 19*, we added very simple html code to set the footer’s visibility
    to *hidden*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On *line 25*, as usual, using `st.markdown` with `unsafe_allow_html`, we used
    that `html` code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is quite interesting that just by adding another line of code before the
    `footer` row, we can easily remove the *three point menu* as well. The final code
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12: The instruction to remove the footer and main menu](img/B21147_14_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.12: The instruction to remove the footer and main menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'The web application looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13: The web app without a footer and main menu](img/B21147_14_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.13: The web app without a footer and main menu'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to customize our pages by leveraging the `set_page_config`
    instruction. Moreover, we learned how to remove the `footer` row and the *three
    points menu* from our Streamlit pages. In the next section, we’ll learn how to
    work on *themes*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding theming and .toml files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this chapter, in the *Understanding new features related
    to deep customization* section, we learned how to change the theme of our web
    apps directly from the browser. Streamlit has supported natively custom theming
    since version 0.79.0, which means that we can customize our theme directly from
    the backend without working in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve already seen that there is a hidden directory named `.streamlit` and that
    inside this directory, there is a file named `config.toml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to customize the theme, first of all, we must open this `config.toml`
    file, then add the following instructions to it:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.14: Theme configuration with the\uFEFF config.toml\uFEFF file](img/B21147_14_14.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.14: Theme configuration with the config.toml file'
  prefs: []
  type: TYPE_NORMAL
- en: The configuration in *Figure 14**.14* is the classical light theme. If you want
    to have a completely different effect, you can use your preferred color codes
    and choose a font between Sans-serif, Serif, or Monospace. To get a quick indication
    of color codes, try to look for *HTML Color Codes* on the internet or check a
    website such as [https://html-color.codes/](https://html-color.codes/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say we adopt the following HTML color codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15: A completely different theme configuration](img/B21147_14_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.15: A completely different theme configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will get a rather strong result, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.16: A rather strong theme with a Monospace font](img/B21147_14_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.16: A rather strong theme with a Monospace font'
  prefs: []
  type: TYPE_NORMAL
- en: Very simple! Customizing the theme is just a matter of using HTML color codes
    and a TOML file. Now, let’s learn what *multi-pages* are.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the multi-pages feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multi-pages in Streamlit are a way to organize your app into multiple pages,
    each with its own content. This can be useful for large apps with a lot of functionalities,
    or for apps that need to be divided into different sections for different users.
  prefs: []
  type: TYPE_NORMAL
- en: To create a multi-page app in Streamlit, you simply need to create a new folder
    called `pages` in the same folder as your main app file. Then, create new Python
    files inside the `pages` folder, each of which will represent a different page
    in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created your pages, you can start adding content to them. You
    can use any Streamlit widgets and functions that you want, just like you would
    in a regular Streamlit app.
  prefs: []
  type: TYPE_NORMAL
- en: When you run your app, Streamlit will automatically detect the pages in the
    `pages` folder and add them to a navigation bar in the sidebar. Users can then
    click on the different pages to navigate between them.
  prefs: []
  type: TYPE_NORMAL
- en: According to the preceding explanation, everything sounds easy; as we are going
    to see, it really is.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multi-pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s build a simple multi-pages web application. As usual, we’ll start by
    building the skeleton of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll create a new file. We will call it `app.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open the `app.py` file in Sublime Text and import `streamlit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, create a `main` function that displays just the title, as shown in *Figure
    14**.17*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 14.17: The basic skeleton for our “multi-page\uFEFF” web app](img/B21147_14_17.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.17: The basic skeleton for our “multi-page” web app'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can imagine, the preceding code produces a rather simple web app in
    the browser. This is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.18: The starting point](img/B21147_14_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.18: The starting point'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the theme is still the one we configured in the *Understanding
    theming and .toml* *files* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create a directory named `pages`. This directory must be at the
    same level as our main file – that is, it must be in the same folder as the `app.py`
    file. We can write the following instruction in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can move inside this `pages` directory and then create a new file named
    `page1.py`. To do so, we must write the following instruction in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The structure of our folders is shown in *Figure 14**.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.19: The structure of our folders and files](img/B21147_14_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.19: The structure of our folders and files'
  prefs: []
  type: TYPE_NORMAL
- en: There is a `root` directory containing the `app.py` file and a directory named
    `pages`. There is also a file named `page1.py` inside the `pages` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we check our browser, we’ll see that Streamlit automatically recognized
    the presence of two pages – one named `app` and another named `page1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21147_14_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.20: Two pages in the sidebar'
  prefs: []
  type: TYPE_NORMAL
- en: The names of the two pages in the sidebar are the same as the names of the Python
    files in our directories, just without `.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon clicking on `page1`, we get an empty page because the `page1.py` file
    is still empty. Let’s move back to Sublime Text and add some code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21147_14_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.21: Some simple code to add to the page1.py file'
  prefs: []
  type: TYPE_NORMAL
- en: 'The new code is very simple – it just prints **Page1** on the screen. This
    is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.22: The result after clicking on \uFEFFpage1\uFEFF](img/B21147_14_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.22: The result after clicking on page1'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can continue in the same way by creating a new file named `page2.py` inside
    the `pages` directory. In the terminal, we can simply write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, moving to Sublime Text, we can edit the `page2.py` file in the same way
    we did with `page1.py`, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.23: Some simple code to add to the \uFEFFpage2.py\uFEFF file](img/B21147_14_23.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.23: Some simple code to add to the page2.py file'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result in the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.24: A new page in our\uFEFF multi-page\uFEFF web application](img/B21147_14_24.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.24: A new page in our multi-page web application'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, we have a new page in the list in the sidebar. After clicking
    **page2**, a new page can be visualized in the main part of the web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create another file inside the `pages` directory, this time naming it
    `new_feature.py`. We’ll add the same code we used for `page1.py` and `page2.py`
    to it. This is the result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.25: The pages in the sidebar are in alphabetical order](img/B21147_14_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.25: The pages in the sidebar are in alphabetical order'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the pages in the sidebar are ordered alphabetically. If we want
    to change the order of the pages, we must change their names in a specific way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the terminal, write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we renamed the old `page1.py` to `01_page1.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can rename the old `page2.py` to `02_page2.py` and the old `new_feature.py`
    to `03_new_feature.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we check our browser now, we’ll see that the page order is different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.26: The pages in the sidebar now follow a customized order](img/B21147_14_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.26: The pages in the sidebar now follow a customized order'
  prefs: []
  type: TYPE_NORMAL
- en: The order of the pages in the sidebar now follows the changes we applied to
    the files since we placed 01, 02, and 03 at the beginning of their names.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Streamlit is very smart since it doesn’t put the numeration at
    the beginning of the page names, only their real names.
  prefs: []
  type: TYPE_NORMAL
- en: If we check the address bar of the browser shown in *Figure 14**.26*, we’ll
    see that the *new feature* page URL is `localhost:8501/new_feature`. So, Streamlit
    uses the page names to change the URL accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Passing a variable from one page to another
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multi-pages is something very powerful since it is possible to pass variables
    from one page to another. Let’s learn how to leverage this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make a little change to our `app.py` file – that is, to the main page
    – as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.27: A new variable in the “app.py” file](img/B21147_14_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.27: A new variable in the “app.py” file'
  prefs: []
  type: TYPE_NORMAL
- en: 'On *line 3*, we created a text variable named `my_variable` that is printed
    on the screen on *line 8*. This is the result in the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.28: The new variable shown on the\uFEFF app\uFEFF page](img/B21147_14_28.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.28: The new variable shown on the app page'
  prefs: []
  type: TYPE_NORMAL
- en: On the main page – that is, the `my_variable` that was created in the `app.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in Sublime Text, we will change the `01_page1.py` code, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.29: Code changes in the “01_page1.py” file](img/B21147_14_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.29: Code changes in the “01_page1.py” file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what we are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: On *line 4*, we imported `my_variable` from the `app` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note that according to the specific syntax, we do not need to write `from
    app.py` but simply `from app` – that is, excluding the `.py` from the filename.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, on *line 7*, we printed the imported variable on the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the result in the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.30: The new variable shown on the \uFEFFpage1\uFEFF page](img/B21147_14_30.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.30: The new variable shown on the page1 page'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is very interesting: here, we are showing the content of a variable
    that has been created on another page on **page1**!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also modify the `02_page2.py` file in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.31: A new variable in the \uFEFF02_page2.py\uFEFF file](img/B21147_14_31.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.31: A new variable in the 02_page2.py file'
  prefs: []
  type: TYPE_NORMAL
- en: 'On *line 3*, we introduce a new variable that is printed on *line 6*. This
    is the result in the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.32: The new variable shown on the \uFEFFpage2\uFEFF page](img/B21147_14_32.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.32: The new variable shown on the page2 page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try to print the variable we created on `page2` on `page1`. To achieve
    this result, this time, for the `01_page1.py` file, we must use slightly different
    code, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.33: The new code for the “01_page1.py” file](img/B21147_14_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.33: The new code for the “01_page1.py” file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what we did:'
  prefs: []
  type: TYPE_NORMAL
- en: On *line 5*, we imported `my_variable_page2` from the `02_page2.py` file. However,
    since this file is inside the `pages` folder, we had to write `from` `pages.02_page2
    import...`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On *line 9*, we printed the `my_variable_page2` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we move to the browser, we’ll get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.34: A script execution error](img/B21147_14_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.34: A script execution error'
  prefs: []
  type: TYPE_NORMAL
- en: As the error explains, we are facing an *invalid decimal literal*. This means
    that when we tried to import `from pages.02_page2…`, as shown in *Figure 14**.33*,
    Streamlit couldn’t manage `02` at the beginning of the filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, we must rename the file in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Accordingly, we must change the code in the `01_page1.py` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 14.35: The final code changes to the\uFEFF 01_page1.py\uFEFF file](img/B21147_14_35.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.35: The final code changes to the 01_page1.py file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are correctly importing from `pages.page2`. Checking our browser, we’ll
    see that everything works fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.36: page1 showing variables from other pages](img/B21147_14_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.36: page1 showing variables from other pages'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.py`) and a variable from `page2.app`, which means that variables are correctly
    exchanged among different pages.'
  prefs: []
  type: TYPE_NORMAL
- en: This is proof that to exchange variables among files, we don’t have to put numbers
    in the filenames.
  prefs: []
  type: TYPE_NORMAL
- en: Our main task is to implement web applications that completely satisfy specific
    needs, such as disease detection, as we did with the *Covid-19 Detection Tool*
    app; however, making these applications very beautiful and easy to use is also
    very important. Deep customization is how we can make our application very attractive
    and simple to use.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on advanced customization techniques in Streamlit.
    We delved into the new features that enable deep customization, allowing for more
    personalized and complex web pages. This chapter guided you through the process
    of creating highly customized pages, emphasizing the ability to tailor the user
    interface and functionality to specific requirements.
  prefs: []
  type: TYPE_NORMAL
- en: A significant portion of this chapter was dedicated to understanding theming
    and the use of TOML files. This involves exploring how themes can be manipulated
    to change the look and feel of a Streamlit app, making it more appealing and brand-aligned.
    The use of TOML files was explained in detail, demonstrating how they can be used
    to define and manage these themes efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, this chapter explored Streamlit’s multi-pages feature. We learned how
    to structure a Streamlit application into multiple pages, thereby enhancing its
    organization and user navigation. We offered practical examples and best practices
    for implementing multi-page applications, ensuring you can effectively organize
    complex Streamlit projects into more manageable and user-friendly formats. This
    comprehensive chapter has empowered you to elevate your Streamlit applications
    to new levels of customization and sophistication.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll learn how to enhance our web applications with Streamlit’s
    forms, Session State, and customizable subdomain features.
  prefs: []
  type: TYPE_NORMAL
