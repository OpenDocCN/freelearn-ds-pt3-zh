- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting to Know Streamlit – A Brief Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Streamlit is a Python library that allows developers to quickly create interactive
    web applications with plottings, widgets, themes, and more. It provides an intuitive
    and easy-to-use interface that makes it simple to create custom web apps with
    minimal coding effort. It offers a range of built-in widgets and components, such
    as sliders, dropdowns, and text inputs, that can be used to create interactive
    visualizations and dashboards. The library also supports real-time data updates
    and even integrates with popular data science tools, such as pandas, Matplotlib,
    and TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to other Python libraries for creating web apps, such as Flask and
    Django, Streamlit focuses on providing an intuitive interface for creating interactive
    visualizations and dashboards in a very simple and fast way. Flask and Django
    are more general-purpose web frameworks that can be used for a wider range of
    web applications, but they require more coding effort to set up and customize.
    Streamlit is designed to be used primarily for prototyping and creating small
    to medium-sized web apps and makes it possible to speed up the development process,
    enabling programmers to share their results with others in a user-friendly and
    engaging way.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will first understand the changing scenario in computing
    methods and cover some key benefits of web applications. Next, we will understand
    the importance of a Python web framework. After that, we will focus on understanding
    when to use a local approach and when to work on the cloud. Then, we will learn
    about some very interesting capabilities of Streamlit. Finally, we will emphasize
    the importance of turning ideas into prototypes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The changing scenario in computing methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of a full Python web framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local versus the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python libraries for web applications (Flask and Django)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of Streamlit’s capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of turning an idea into a prototype – the changing scenario in
    computing methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computing has advanced dramatically over the past few decades. Earlier systems
    relied on programs that were installed and run on individual personal computers.
    Users would purchase software licenses, install the programs themselves, and then
    access those applications from their desktops. If you wanted to use an application
    on another computer, you had to install it there as well.
  prefs: []
  type: TYPE_NORMAL
- en: This model dominated computing for many years but was limited and static. It
    lacked interconnectivity and did not facilitate true collaboration or data sharing
    across machines. Users were confined to the specific software they installed locally
    and had to manage separate copies of files and settings on each computer they
    used.
  prefs: []
  type: TYPE_NORMAL
- en: The rise of networks, improved connectivity, and the early internet started
    to change this. New possibilities emerged for distributed software, real-time
    collaboration, and synchronized information across devices. Users no longer had
    to install and manage many duplicate software installations. Applications could
    be accessed from anywhere with an internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Web-based services fueled this transition and accelerated the move to more cloud-centric
    and mobile-friendly computing. Apps began to launch directly in web browsers instead
    of requiring installation. Data and files could be stored in central cloud platforms
    instead of locally, and new devices such as smartphones, tablets, and laptops
    made the cloud and web even more compelling.
  prefs: []
  type: TYPE_NORMAL
- en: People now live their digital lives in the cloud through web-based services,
    mobile apps, and cloud platforms. Everything from business software, media, productivity
    tools, educational resources, and more now have predominantly cloud-based and
    web-centered counterparts. The cloud provides ubiquitous access across any connected
    device, constant integration and interoperability between services, automatic
    updates, scalable resources, collaboration features, mobile optimization, and
    cost benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Local software is still used in some contexts but is increasingly viewed as
    limited or outdated. The transition to the cloud and web computing has been rapid
    and enormously impactful. It has reshaped how we work, learn, play, communicate,
    consume media, and more. And this transformation will likely only accelerate as
    enhanced AI technologies, IoT devices, VR/AR systems, and other innovations integrate
    more deeply into web-based services and cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: We have come far from the software installations of yesterday, but the potential
    is hugely promising. Cloud computing is reimagining technology to fit our modern
    highly connected and increasingly mobile lifestyles. And this new era of ubiquitous,
    web-first computing is here to stay.
  prefs: []
  type: TYPE_NORMAL
- en: But considering that we are dealing with web applications in this book, what
    exactly is a web app?
  prefs: []
  type: TYPE_NORMAL
- en: A web application is a software application that runs within a **web browser**.
  prefs: []
  type: TYPE_NORMAL
- en: It is accessed via a network and delivers an interactive user experience through
    a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of a web application is to provide access to software capabilities
    and data over a network using standard web technologies. They allow users to access
    features and content from any internet-connected device with a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Web applications are useful when you want to provide access to software and
    data for a large number of users, potentially within an organization or to external
    customers and partners. They provide a convenient, consistent interface that works
    across devices and locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the key benefits of web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accessibility**: Available anywhere with an internet connection and web browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistency**: The same interface and features are available on any device.
    The look and feel translate across platforms (desktop, mobile, tablet, and more).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Centralized management**: It’s easy to update web applications for all users
    simultaneously. New features and enhancements automatically propagate to all users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration**: Can integrate with other web services, databases, APIs, and
    more using standard web technologies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: Can scale to support a large number of simultaneous users
    with minimal additional overhead. Additional computing resources can be allocated
    as needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost-effective**: Often, it’s more affordable and economical to develop and
    deploy web applications versus standalone software applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, use web applications when you need to provide an application and
    its data to a large number of users over a network, with the benefits of accessibility,
    consistency, integration, and scalability that web applications offer. They are
    a very effective and popular type of software solution.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the benefits of web applications, we can move on to the next
    section, where we will understand the importance of a full Python-based framework.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of a full Python web framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building and publishing web applications on the cloud today relies on several
    key frameworks, languages, and techniques. Some of the most important are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web frameworks**: Frameworks such as React, Angular, and Node.js make developing
    web apps easier and more efficient. They handle key tasks such as routing, state
    management, building components, and handling events. Developers can focus on
    writing code for their specific applications instead of building infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server-side languages**: Languages such as PHP, Ruby on Rails, Python, Java,
    and C# are used on the server side to handle requests, access databases, build
    APIs, and generate dynamic web content. Node.js, which uses JavaScript, has also
    become very popular for server-side development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript**: JavaScript is the primary language of the frontend web. It
    is used to build client-side interfaces, animate and create interactive content,
    handle user input, request data via HTTP requests, and more. Modern JavaScript
    frameworks have also enabled the rise of single-page applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version control**: Tools such as Git help developers collaborate and keep
    a project’s code and file history synchronized. They enable useful features such
    as branching, merging, committing, pushing to remote repositories, and rolling
    back changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment**: There are several options for deploying web applications, including
    server management services such as AWS EC2, managed services such as Firebase,
    **virtual private servers** (**VPS**), and bare-metal servers. Continuous integration
    and deployment help get new features and code live as quickly and seamlessly as
    possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containerization**: Docker containers package web applications and all their
    dependencies into isolated, portable, lightweight environments. They help keep
    development, staging, and production environments consistent and optimized. Containers
    simplify deploying and scaling web apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application programming interfaces** (**APIs**): These allow web applications
    to integrate with external services and pass data back and forth seamlessly. APIs
    power features such as user authentication, payment handling, location services,
    social networking, and much more without requiring multiple web apps to share
    code bases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we can see, there are many tools and techniques we can use to build, deploy,
    scale, and integrate web applications professionally and efficiently today. When
    combined effectively, they enable fast, robust development cycles, optimized performance,
    and seamless connectivity between services. Moreover, as technologies continue
    to evolve, these best practices and stacks will adapt to meet new demands.
  prefs: []
  type: TYPE_NORMAL
- en: This great variety of frameworks, languages, and techniques is a strong weapon
    in our hands that can make it possible to develop more or less any idea we could
    have. However, this requires continuous learning and huge know-how of too many
    different topics.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, it would be great if a unique framework fully available in
    **Python**, a simplistic programming language, could help us develop our web applications
    quickly, making their deployment simple and smooth. The answer to this problem
    is **Streamlit**.
  prefs: []
  type: TYPE_NORMAL
- en: So, in a few words, Streamlit is something that makes it much easier for us
    to develop, implement, and deploy our ideas and turn them into wonderful web apps.
    But should the product be made available on our local machines or in the cloud?
  prefs: []
  type: TYPE_NORMAL
- en: Local versus the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some key differences to keep in mind when developing software applications
    versus cloud-based web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**: Traditional software needs to be installed on local machines
    or servers. This includes copying files, setting permissions, possibly configuring
    settings, and other setup steps. Web apps hosted on cloud platforms such as AWS,
    GCP, and Azure are deployed and managed by the cloud provider. No local installation
    is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Updates**: Software updates typically require manual installation on all
    machines where the application is installed. Web apps hosted on the cloud are
    automatically updated when developers push new code deployments. Users always
    get the latest version without any manual work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: Servers hosting traditional software applications would require
    manual configuration to scale resources up or down as needed. Cloud infrastructure
    is infinitely scalable on demand through API calls or automatic scaling policies.
    More or less CPU, memory, disk space, and more can be allocated programmatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability**: Uptime depends on local infrastructure for traditional software.
    Downtime can occur due to issues with individual servers, networking equipment,
    database servers, and more. Web apps benefit from the high availability of scalable
    cloud infrastructure. Regions, availability zones, and replication help minimize
    outages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobility**: Traditional software is accessed through dedicated desktop or
    mobile applications. Web apps are accessible through any modern browser on any
    internet-connected device. This includes laptops, phones, tablets, TVs, watches,
    and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration**: Multiple developers can work together simultaneously, editing
    code and deploying updates to web apps hosted on version control repositories
    and cloud hosting services. Edits to code bases are easily synced through source
    version control systems such as Git. Concurrent editing exposes opportunities
    for conflicts in traditional development workflows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Costs**: Significant upfront costs are typically associated with purchasing
    and maintaining hardware and software licenses for traditional infrastructure.
    Cloud computing is based on a pay-per-use model with costs that can be reduced
    by scaling down or turning off unused resources. No large capital expenses are
    required. Resources can be scaled on-demand as needs evolve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, developing web applications on cloud platforms differs from building
    traditional software installations in key ways. Web apps are often easier to deploy,
    update, scale, and make highly available and mobile, involve more concurrent collaboration,
    and have lower upfront costs and more adjustable pricing models.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, cloud platforms have a lot of advantages and should be our first
    choice. Now, let’s delve a little bit deeper and look at the differences and specific
    features of the most popular Python libraries for web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Python libraries for web applications (Flask and Django)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s an overview of some popular Python libraries for building web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flask**: A lightweight and flexible web framework. It’s great for building
    small to mid-sized apps. Some of its main features are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a minimal and intuitive core that can be easily extended. This makes
    it suitable for anyone looking to create web applications.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports extensions and integrates with many Python libraries. This allows
    you to easily expand its functionality.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It has built-in support for routing, templates, file uploading, and more, which
    means it’s quite easy to build APIs and render HTML templates.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s suited for both small and large-scale projects. Many big companies such
    as Airbnb and Pinterest use Flask.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s look at some situations when we should use Flask:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Building a small to mid-sized website or web app
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we need more flexibility and control than what a microframework provides
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The need to support extensions and integrations with other libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we’re familiar with Python and want a framework that’s easy to get started
    with
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Django**: A high-level Python web framework that encourages rapid development
    and clean design. It’s suited for large projects and applications. Some of its
    main features are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has an **object-relational mapper** (**ORM**) that supports multiple databases.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a permission system and built-in support for users, groups, permissions,
    and more.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It scales well and is used by huge companies such as Instagram, Netflix, Spotify,
    and others.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a lot of add-on libraries and integrations available.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It enforces a certain structure and best practices. This can be good for newcomers
    but can also be restrictive.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s look at some situations when we should use Django:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For building a large and complex website or web application
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we need a structured and scalable framework
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we require advanced features such as authentication, permissions, administrators,
    and more out of the box
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we want a framework that scales well and can support a lot of traffic and
    load
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When we prefer a rigid structure and enforceable best practices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, choose Flask for small to mid-sized web apps and Django for large,
    complex web applications with advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to write web applications with beautiful and useful dashboards
    easily, choose Streamlit. This, among all the tools and solutions we’ve described
    so far, is an important Python web application framework for several key reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Convenience and ease of use**: Streamlit simplifies building web apps in
    Python dramatically. It handles complex tasks such as setting up servers, routing,
    templating, databases, and more under the hood so that developers can focus on
    their application logic. This makes the development process faster and more accessible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrated Python support**: Streamlit allows you to build entire web applications
    using only Python code. No additional templates, routing setup, or database configuration
    is required. Developers can utilize all of Python’s libraries and features, and
    there is no need to learn additional languages or frameworks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rapid prototyping**: Streamlit’s convenient and lightweight nature makes
    it ideal for quickly building prototypes, dashboards, demos, and minimum viable
    products. New ideas can be converted into shareable web applications very quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusable components**: Streamlit has a library of pre-built reusable frontend
    and backend components such as dropdowns, file uploaders, search bars, pagination,
    and more. These help speed up development and ensure a consistent user experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud deployment**: Streamlit web apps can be deployed on major cloud providers,
    including AWS, GCP, Azure, and Docker. This provides scalable infrastructure,
    global reach, and the flexibility to adapt resource usage as an application grows.
    Deployment is simplified through seamless integration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive dashboards**: Streamlit specializes in interactive applications
    and dashboards. It is used by data scientists and analysts to create insightful
    exploratory data analysis tools and reports. Users can filter, sort, pivot, search,
    select features, and examine data from multiple angles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community and support**: Streamlit has an active community and team behind
    it that supports usage questions, contributes to documentation, accepts pull requests,
    and addresses security issues promptly. The project is also backed by major tech
    companies and researchers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, Streamlit provides an easy-to-use, integrated, and scalable framework
    for building and deploying full web applications in Python. It allows you to convert
    ideas into apps faster, enables shortcutting low-level setup, facilitates prototyping
    and experimentation, enables interactive visualizations and dashboards, and supports
    customization and contribution from an open community. Overall, Streamlit makes
    web development in Python more accessible, productive, and impactful.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve covered the main Python web application libraries and their specificities.
    Since we’ll be focusing on Streamlit in this book, let’s see what it’s capable
    of.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Streamlit’s capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some useful examples of Streamlit’s capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interactive data exploration**: Streamlit is great for building dashboards
    that allow users to explore datasets interactively. Users can filter, sort, pivot,
    search, select features, and analyze data from multiple perspectives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prototyping minimum viable products** (**MVPs**): Streamlit’s ease of use
    makes it perfect for building quick prototypes and MVPs. New ideas can be converted
    into shareable web apps in no time without any complex setup. This “code-first”
    approach speeds up iteration and feedback.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model deployment**: Streamlit apps can expose trained **machine learning**
    (**ML**) models as web services. This allows other apps, scripts, or users to
    interact with and make predictions from the models. Apps become deployable, productive
    ML applications and platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embeddings**: Streamlit code and widgets can be embedded into Jupyter notebooks,
    JupyterLab, and the Jupyter Notebook interface. This close integration with the
    data science ecosystem streamlines the process of building apps from notebooks
    and vice versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaborative editing**: Streamlit streams edits in real time, enabling the
    co-editing of code bases seamlessly. Multiple developers can work together simultaneously
    on one Streamlit app, with changes appearing instantly. Conflicts are avoided,
    and productive collaboration is possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated testing**: Streamlit includes tools for writing automated tests
    in the form of test suites, individual test functions, fixtures, stubs, mocks,
    and more. Test coverage reports ensure new features do not break existing functionality.
    Continuous integration workflows run tests on each commit, leading to stable,
    high-quality code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User interfaces** (**UIs**) **as code**: The Streamlit syntax is based on
    Python, treating UIs as code. This “UI as code” approach provides many benefits
    over graphical tools, including version control, reproducibility, collaboration,
    and integration with the rest of an application’s code base. Streamlit UIs are
    flexible, programmatic, and build-time optimized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reproducible research**: Streamlit’s apps are executed line by line, building
    up a complete, interactive, and shareable environment. All inputs, code, outputs,
    and widget values are recorded, allowing anyone to reproduce analysis and results.
    Apps can be packaged and archived, then re-opened and resumed later. Streamlit
    facilitates transparent and reproducible data science.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automating experiments**: Streamlit’s support for modular functions, classes,
    loops, conditionals, and more allows you to automate experiment workflows. Infrastructure
    can be scaled up and down programmatically, different models and hyperparameters
    can be tested systematically, and A/B testing of features and UX elements becomes
    possible. Automation reduces manual effort and leads to discovering the combinations
    that work best faster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit is incredibly versatile and can help us create more or less any kind
    of application we have in mind in quite a short time and with an affordable effort.
    Considering this enormous point of strength, let’s understand why turning our
    ideas into working prototypes in a short time can be the most useful weapon in
    our hands.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of turning an idea into a prototype
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The faster an idea can be turned into a tangible prototype, the greater the
    opportunities and advantages. There are several key benefits to building rough
    prototypes as quickly as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Get customer feedback early**: By creating prototypes that embody an idea,
    even in a basic form, you can get real user feedback much sooner. Customers can
    experience the idea, comment on what they like and don’t like, and suggest important
    changes to make the final product more useful and appealing. Incorporating feedback
    early avoids wasting time and resources developing features or designs that don’t
    resonate with customers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discover flaws and issues early**: Early prototypes highlight any problems
    with how an idea might work in practice. Issues that are hard to identify conceptually
    become immediately obvious when developing a prototype. These issues can then
    be addressed, and alternative approaches can be explored before a massive amount
    of time has been invested. It’s far easier to change course with a prototype than
    with a nearly finished product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gauge viability and enthusiasm**: By demonstrating prototypes for others,
    including team members, managers, mentors, and investors, you can get a sense
    of how compelling and exciting they seem. Enthusiasm and validation at early stages
    provide confidence that an idea has real potential and traction. A lack of enthusiasm
    shows that an idea may not be as promising as what people first thought.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Iterate and improve rapidly**: Prototyping, by its nature, enables an iterative
    approach. You build, get feedback, make changes, build again, and continue refining.
    Each iteration improves the prototype, making it more attractive and useful. What
    starts as a basic mockup can quickly evolve into an engaging product concept through
    ongoing feedback and development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning ideas into prototypes as rapidly and as frequently as possible leads
    to better products, happier customers, higher enthusiasm within teams and partners,
    and a greater likelihood of building something that ultimately succeeds in the
    market. Early and iterative prototyping opens up opportunities and advantages
    at every stage of development and product design. With quick prototypes, you can
    pivot, improve, and innovate your way to success.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced Streamlit from a theoretical point of view and
    looked at several reasons that make this framework an incredible tool for creating
    web applications and prototypes quickly and easily. Turning an idea into a prototype
    – or even better, into a working web application – quickly, easily, and painlessly
    is a terrific weapon in our hands. The power of such a library can only be fully
    expressed by using it, so let’s not wait any longer and start setting up our coding
    environment!
  prefs: []
  type: TYPE_NORMAL
- en: 'To start coding, we still need some things: a good operating system with a
    Python installation, an **integrated development environment** (**IDE**), virtual
    environments, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to ensure that everything we need will be
    available and fully functioning. Don’t worry – this installation will act as the
    foundation for all our future developments!
  prefs: []
  type: TYPE_NORMAL
