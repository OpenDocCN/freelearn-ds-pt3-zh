["```py\nimport plotly.graph_objects as go\nimport plotly.express as px\nfig = go.Figure()\n[f for f in dir(fig) if 'scatter' in f]\n['add_scatter',\n 'add_scatter3d',\n 'add_scattercarpet',\n 'add_scattergeo',\n 'add_scattergl',\n 'add_scattermapbox',\n 'add_scatterpolar',\n 'add_scatterpolargl',\n 'add_scatterternary']\n[f for f in dir(px) if 'scatter' in f]\n['scatter',\n 'scatter_3d',\n 'scatter_geo',\n 'scatter_mapbox',\n 'scatter_matrix',\n 'scatter_polar',\n 'scatter_ternary']\n```", "```py\n    import pandas as pd\n    import plotly.graph_objects as go\n    poverty = pd.read_csv('data/poverty.csv')\n    ```", "```py\n    perc_pov_cols =\\\n    poverty.filter(regex='Poverty gap').columns\n    perc_pov_cols\n    Index(['Poverty gap at $1.90 a day (2011 PPP) (%)',\n           'Poverty gap at $3.20 a day (2011 PPP) (% of population)',\n           'Poverty gap at $5.50 a day (2011 PPP) (% of population)'],   \n          dtype='object')\n    ```", "```py\n    perc_pov_19 = perc_pov_cols[0]\n    perc_pov_32 = perc_pov_cols[1]\n    perc_pov_55 = perc_pov_cols[2]\n    ```", "```py\n    series[series['Indicator Name']==\\\n    perc_pov_19]['Short definition'][25]\n    'Poverty gap at $1.90 a day (2011 PPP) is the mean shortfall in income or consumption from the poverty line $1.90 a day (counting the nonpoor as having zero shortfall), expressed as a percentage of the poverty line. This measure reflects the depth of poverty as well as its incidence. As a result of revisions in PPP exchange rates, poverty rates for individual countries cannot be compared with poverty rates reported in earlier editions.'\n    ```", "```py\n    country = 'China'\n    df =\\\n    poverty[poverty['Country Name']==country][['year', perc_pov_19]].dropna()\n    ```", "```py\n    fig = go.Figure()\n    fig.add_scatter(x=df['year'],\n                    y=df[perc_pov_19],\n                    text=df[perc_pov_19],\n                    mode=mode)\n    fig.show()\n    ```", "```py\n    countries = ['Argentina', 'Mexico', 'Brazil']\n    ```", "```py\n    df = (poverty\n          [poverty['Country Name'].isin(countries)]\n          [['year','Country Name', perc_pov_19]]\n          .dropna())\n    ```", "```py\n    fig = go.Figure()\n    ```", "```py\n    for country in countries:\n        df_country = df[df['Country Name']==country]\n    ```", "```py\n        fig.add_scatter(x=df_country['year'],\n                        y=df_country[perc_pov_19],\n                        name=country,\n                        mode='markers+lines')\n    ```", "```py\n    fig.layout.yaxis.title = perc_pov_19\n    fig.show()\n    ```", "```py\npx.scatter(df, x='year', y=perc_pov_19, color='Country Name')\n```", "```py\n    fig = px.scatter(df,\n                     x='year',\n                     y=perc_pov_19,\n                     color='Country Name')\n    ```", "```py\n    fig_lines = px.line(df,\n                        x='year',\n                        y=perc_pov_19,\n                        color='Country Name')\n    ```", "```py\n    for trace in fig_lines.data:\n        trace.showlegend = False\n        fig.add_trace(trace)\n    fig.show()\n    ```", "```py\n    indicator = perc_pov_19\n    year = 1991\n    ```", "```py\n    df =\\\n    poverty[poverty['year'].eq(year) & poverty['is_country']].dropna(subset=[indicator]).sort_values(indicator)\n    ```", "```py\n    px.scatter(df,\n               x=indicator,\n               y='Country Name',\n               color='Population, total')\n    ```", "```py\ny = [-2, -1, 0, 1, 2, 3, 4, 5, 6]\npx.scatter(x=range(1, len(y)+1),\n           y=y,\n           color=y,\n           color_continuous_scale='RdBu')\n```", "```py\ncolor_discrete_map={'High income': 'darkred',\n                    'Upper middle income': 'steelblue',\n                    'Lower middle income': 'orange',\n                    'Low income': 'darkblue'}\n```", "```py\ndf =\\\npoverty[poverty['year'].eq(2010) & poverty['is_country']].sort_values('Population, total')\n```", "```py\npx.scatter(df,\n           y=perc_pov_19,\n           x='Population, total',\n           title=' - '.join([perc_pov_19, '2010']),\n           height=500)\n```", "```py\napp = JupyterDash(__name__)\napp.layout = html.Div([\n    dcc.Slider()\n])\napp.run_server(mode='inline')\n```", "```py\ndcc.Slider(min=0,\n           max=10,\n           step=1,\n           dots=True,\n           included=False)\n```", "```py\ndcc.Slider(id='perc_pov_indicator_slider',\n           min=0,\n           max=2,\n           step=1,\n           value=0,\n           included=False)\n```", "```py\npx.colors.sequential.Cividis\n['#00224e',\n '#123570',\n '#3b496c',\n '#575d6d',\n '#707173',\n '#8a8678',\n '#a59c74',\n '#c3b369',\n '#e1cc55',\n '#fee838']\n```", "```py\ncividis0 = px.colors.sequential.Cividis[0]\n```", "```py\nmarks={0: {'label': '$1.9', 'style': {'color': cividis0, 'fontWeight': 'bold'}}, \n       1: {'label': '$3.2', 'style': {'color': cividis0, 'fontWeight': 'bold'}},\n       2: {'label': '$5.5', 'style': {'color': cividis0, 'fontWeight': 'bold'}}}\n```", "```py\n {'label': <label>, 'style': {<attribute_1>: <value_1>, <attribute_2>: <value_2>}\n```", "```py\nperc_pov_df =\\\npoverty[poverty['is_country']].dropna(subset=perc_pov_cols)\nperc_pov_years = sorted(set(perc_pov_df['year']))\n```", "```py\ndcc.Slider(id='perc_pov_year_slider',\n           min=perc_pov_years[0],\n           max=perc_pov_years[-1],\n           step=1,\n           included=False,\n           value=2018,\n           marks={year: {'label': str(year),\n                         'style': {'color': cividis0}}\n                  for year in perc_pov_years[::5]})\n```", "```py\ndcc.Graph(id='perc_pov_scatter_chart')\n```", "```py\n    @app.callback(Output('perc_pov_scatter_chart', 'figure'),\n                  Input('perc_pov_year_slider', 'value'),\n                  Input('perc_pov_indicator_slider', 'value'))\n    ```", "```py\n    def plot_perc_pov_chart(year, indicator):\n        indicator = perc_pov_cols[indicator]\n        df = (perc_pov_df\n              [perc_pov_df['year'].eq(year)]\n              .dropna(subset=[indicator])\n              .sort_values(indicator))\n        if df.empty:\n            raise PreventUpdate\n    ```", "```py\n    fig = px.scatter(df,\n                     x=indicator,\n                     y='Country Name',\n                     color='Population, total',\n                     size=[30]*len(df),\n                     size_max=15,\n                     hover_name='Country Name',\n                     height=250 +(20*len(df)),\n                     color_continuous_scale='cividis',\n                     title=indicator + '<b>: ' + f'{year}' +'</b>')\n    fig.layout.paper_bgcolor = '#E5ECF6'\n    fig.layout.xaxis.ticksuffix = '%'\n    return fig\n    ```"]