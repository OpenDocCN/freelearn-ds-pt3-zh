["```py\n>h_lst<- list(23,'donkey',5.6,1+4i,TRUE) \n>h_lst \n[[1]] \n[1] 23 \n\n[[2]] \n[1] \"donkey\" \n\n[[3]] \n[1] 5.6 \n\n[[4]] \n[1] 1+4i \n\n[[5]] \n[1] TRUE \n\n>typeof(h_lst) \n[1] \"list\" \n```", "```py\nIn [8]: h_list=[23, 'donkey', 5.6,1+4j, True] \nIn [9]: import pandas as pd \n        h_ser=pd.Series(h_list) \nIn [10]: h_ser \nOut[10]: 0        23 \n         1    donkey \n         2       5.6 \n         3    (1+4j) \n         4      True \ndtype: object \n```", "```py\n    In [11]: type(h_ser)\n    Out[11]: pandas.core.series.Series\n```", "```py\n>stocks_table<- data.frame(Symbol=c('GOOG','AMZN','FB','AAPL', \n                                      'TWTR','NFLX','LINKD'),  \n                            Price=c(518.7,307.82,74.9,109.7,37.1, \n                                           334.48,219.9), \nMarketCap=c(352.8,142.29,216.98,643.55,23.54,20.15,27.31)) \n\n>stocks_table \nSymbol  PriceMarketCap \n1   GOOG 518.70    352.80 \n2   AMZN 307.82    142.29 \n3     FB  74.90    216.98 \n4   AAPL 109.70    643.55 \n5   TWTR  37.10     23.54 \n6   NFLX 334.48     20.15 \n7  LINKD 219.90     27.31 \n```", "```py\nIn [29]: stocks_df=pd.DataFrame({'Symbol':['GOOG','AMZN','FB','AAPL',  \n                                           'TWTR','NFLX','LNKD'], \n                                 'Price':[518.7,307.82,74.9,109.7,37.1, \n         334.48,219.9], \n'MarketCap($B)' : [352.8,142.29,216.98,643.55, \n                                                    23.54,20.15,27.31] \n                                 }) \nstocks_df=stocks_df.reindex_axis(sorted(stocks_df.columns,reverse=True),axis=1) \nstocks_df \nOut[29]: \nSymbol  PriceMarketCap($B) \n0       GOOG    518.70  352.80 \n1       AMZN    307.82  142.29 \n2       FB      74.90   216.98 \n3       AAPL    109.70  643.55 \n4       TWTR    37.10   23.54 \n5       NFLX    334.48  20.15 \n6       LNKD219.90  27.31 \n```", "```py\n>r_mat<- matrix(2:13,4,3) \n>r_mat \n     [,1] [,2] [,3] \n[1,]    2    6   10 \n[2,]    3    7   11 \n[3,]    4    8   12 \n[4,]    5    9   13 \n```", "```py\n>r_mat[1,] \n[1]  2  6 10 \n```", "```py\n>r_mat[,2] \n[1] 6 7 8 9 \n```", "```py\nIn [60]: a=np.array(range(2,6)) \n         b=np.array(range(6,10)) \n         c=np.array(range(10,14)) \nIn [66]: np_ar=np.column_stack([a,b,c]) \nnp_ar \nOut[66]: array([[ 2,  6, 10], \n[ 3,  7, 11], \n[ 4,  8, 12], \n[ 5,  9, 13]]) \n```", "```py\n    In [79]: np_ar[0,]\n    Out[79]: array([ 2,  6, 10])\n\n```", "```py\n    In [81]: np_ar[:,1]\n    Out[81]: array([6, 7, 8, 9])\n```", "```py\n    In [80]: np_ar.T[1,]\n    Out[80]: array([6, 7, 8, 9])\n```", "```py\n>cal_lst<- list(weekdays=1:8, mth='jan') \n>cal_lst \n$weekdays \n[1] 1 2 3 4 5 6 7 8 \n\n$mth \n[1] \"jan\" \n\n>cal_lst[1] \n$weekdays \n[1] 1 2 3 4 5 6 7 8 \n\n>cal_lst[[1]] \n[1] 1 2 3 4 5 6 7 8 \n\n>cal_lst[2] \n$mth \n[1] \"jan\" \n```", "```py\nIn [92]: cal_df= pd.Series({'weekdays':range(1,8), 'mth':'jan'}) \nIn [93]: cal_df \nOut[93]: mthjan \nweekdays    [1, 2, 3, 4, 5, 6, 7] \ndtype: object \n\nIn [97]: cal_df[0] \nOut[97]: 'jan' \n\nIn [95]: cal_df[1] \nOut[95]: [1, 2, 3, 4, 5, 6, 7] \n\nIn [96]: cal_df[[1]] \nOut[96]: weekdays    [1, 2, 3, 4, 5, 6, 7] \ndtype: object \n```", "```py\n>typeof(cal_lst[2]) \n[1] \"list\" \n>typeof(cal_lst[[2]]) \n[1] \"character\" \n```", "```py\nIn [99]: type(cal_df[0]) \nOut[99]: str \n\nIn [101]: type(cal_df[[0]]) \nOut[101]: pandas.core.series.Series \n```", "```py\n    >cal_lst$mth\n    [1] \"jan\"\n    > cal_lst$'mth'\n    [1] \"jan\"\n```", "```py\n    In [111]: cal_df['mth']\n    Out[111]: 'jan'\n```", "```py\n    >cal_lst[[1]][[4]]\n    [1] 4\n\n    >cal_lst[[c(1,4)]]\n    [1] 4 \n```", "```py\n    In [132]: cal_df[1][3]\n    Out[132]: 4\n```", "```py\n    >stocks_table[c('Symbol','Price')]\n    Symbol  Price\n    1   GOOG 518.70\n    2   AMZN 307.82\n    3     FB  74.90\n    4   AAPL 109.70\n    5   TWTR  37.10\n    6   NFLX 334.48\n    7  LINKD 219.90\n\n    >stocks_table[,c('Symbol','Price')]\n    Symbol  Price\n    1   GOOG 518.70\n    2   AMZN 307.82\n    3     FB  74.90\n    4   AAPL 109.70\n    5   TWTR  37.10\n    6   NFLX 334.48\n    7  LINKD 219.90\n```", "```py\n    In [140]: stocks_df[['Symbol','Price']]\n    Out[140]:Symbol Price\n    0        GOOG   518.70\n    1        AMZN   307.82\n    2        FB     74.90\n    3        AAPL   109.70\n    4        TWTR   37.10\n    5        NFLX   334.48\n    6        LNKD   219.90\n\n    In [145]: stocks_df.loc[:,['Symbol','Price']]\n    Out[145]: Symbol  Price\n    0         GOOG    518.70\n    1         AMZN    307.82\n    2         FB      74.90\n    3         AAPL    109.70\n    4         TWTR    37.10\n    5         NFLX    334.48\n    6         LNKD    219.90\n```", "```py\n    >norm_df<- data.frame(x=rnorm(7,0,1), y=rnorm(7,0,1))\n    >norm_df$x - norm_df$y\n    [1] -1.3870730  2.4681458 -4.6991395  0.2978311 -0.8492245  1.5851009 -1.4620324\n```", "```py\n    >with(norm_df,x-y)\n    [1] -1.3870730  2.4681458 -4.6991395  0.2978311 -0.8492245  1.5851009 -1.4620324\n```", "```py\n    In [10]: import pandas as pd\n             import numpy as np\n    df = pd.DataFrame({'x': np.random.normal(0,1,size=7), 'y': np.random.normal(0,1,size=7)})\n\n    In [11]: df.x-df.y\n    Out[11]: 0   -0.107313\n             1    0.617513\n             2   -1.517827\n             3    0.565804\n             4   -1.630534\n             5    0.101900\n             6    0.775186\n    dtype: float64\n\n    In [12]: df.eval('x-y')\n    Out[12]: 0   -0.107313\n             1    0.617513\n             2   -1.517827\n             3    0.565804\n             4   -1.630534\n             5    0.101900\n             6    0.775186\n    dtype: float64\n```", "```py\n    > goal_stats=read.csv('champ_league_stats_semifinalists.csv')\n    >goal_stats\n                  Club                 Player Goals GamesPlayed\n    1  Atletico Madrid            Diego Costa     8           9\n    2  Atletico Madrid             ArdaTuran     4           9\n    3  Atletico Madrid            RaúlGarcía     4          12\n    4  Atletico Madrid           AdriánLópez     2           9\n    5  Atletico Madrid            Diego Godín     2          10\n    6      Real Madrid      Cristiano Ronaldo    17          11\n    7      Real Madrid            Gareth Bale     6          12\n    8      Real Madrid          Karim Benzema     5          11\n    9      Real Madrid                   Isco     3          12\n    10     Real Madrid         Ángel Di María     3          11\n    11   Bayern Munich          Thomas Müller     5          12\n    12   Bayern Munich           ArjenRobben     4          10\n    13   Bayern Munich            Mario Götze     3          11\n    14   Bayern Munich Bastian Schweinsteiger     3           8\n    15   Bayern Munich        Mario Mandzukić     3          10\n    16         Chelsea        Fernando Torres     4           9\n    17         Chelsea               Demba Ba     3           6\n    18         Chelsea           Samuel Eto'o     3           9\n    19         Chelsea            Eden Hazard     2           9\n    20         Chelsea                Ramires     2          10\n```", "```py\n    >goal_stats$GoalsPerGame<- goal_stats$Goals/goal_stats$GamesPlayed\n    >goal_stats\n                  Club   Player         Goals GamesPlayedGoalsPerGame\n    1  Atletico Madrid  Diego Costa     8           9    0.8888889\n    2  Atletico Madrid  ArdaTuran      4           9    0.4444444\n    3  Atletico Madrid  RaúlGarcía     4          12    0.3333333\n    4  Atletico Madrid  AdriánLópez    2           9    0.2222222\n    5  Atletico Madrid  Diego Godín     2          10    0.2000000\n    6  Real Madrid  Cristiano Ronaldo  17          11    1.5454545\n    7  Real Madrid  Gareth Bale         6          12    0.5000000\n    8  Real Madrid    Karim Benzema     5          11    0.4545455\n    9  Real Madrid       Isco           3          12    0.2500000\n    10 Real Madrid  Ángel Di María     3          11    0.2727273\n    11 Bayern Munich Thomas Müller     5          12    0.4166667\n    12 Bayern Munich  ArjenRobben     4          10    0.4000000\n    13 Bayern Munich  MarioGötze      3          11    0.2727273\n    14 Bayern Munich Bastian Schweinsteiger 3      8    0.3750000\n    15 Bayern Munich  MarioMandzukić  3          10    0.3000000\n    16 Chelsea       Fernando Torres   4           9    0.4444444\n    17 Chelsea           Demba Ba      3           6    0.5000000\n    18 Chelsea           Samuel Eto'o  3           9    0.3333333\n    19 Chelsea            Eden Hazard  2           9    0.2222222\n    20 Chelsea                Ramires  2          10    0.2000000\n\n```", "```py\n    >aggregate(x=goal_stats[,c('GoalsPerGame')], by=list(goal_stats$Club),FUN=max)\n              Group.1         x\n    1 Atletico Madrid 0.8888889\n    2   Bayern Munich 0.4166667\n    3         Chelsea 0.5000000\n    4     Real Madrid 1.5454545\n\n```", "```py\n    >tapply(goal_stats$GoalsPerGame,goal_stats$Club,max)\n    Atletico Madrid   Bayern Munich         Chelsea     Real Madrid \n          0.8888889       0.4166667       0.5000000       1.5454545\n\n```", "```py\n    In [6]: import pandas as pd\n    importnumpy as np\n    In [7]: goal_stats_df=pd.read_csv('champ_league_stats_semifinalists.csv')\n\n    In [27]: goal_stats_df['GoalsPerGame']=     goal_stats_df['Goals']/goal_stats_df['GamesPlayed']\n\n    In [27]: goal_stats_df['GoalsPerGame']= goal_stats_df['Goals']/goal_stats_df['GamesPlayed']\n\n    In [28]: goal_stats_df\n    Out[28]: Club           Player      Goals GamesPlayedGoalsPerGame\n    0       Atletico Madrid Diego Costa   8       9        0.888889\n    1       Atletico Madrid ArdaTuran    4       9         0.444444\n    2       Atletico Madrid RaúlGarcía   4       12        0.333333\n    3       Atletico Madrid AdriánLópez  2       9         0.222222\n    4       Atletico Madrid Diego Godín   2       10        0.200000\n    5       Real Madrid  Cristiano Ronaldo 17      11        1.545455\n    6       Real Madrid     Gareth Bale   6       12        0.500000\n    7       Real Madrid     Karim Benzema 5       11        0.454545\n    8       Real Madrid     Isco          3       12        0.250000\n    9       Real Madrid     Ángel Di María 3      11        0.272727\n    10      Bayern Munich   Thomas Müller  5       12        0.416667\n    11      Bayern Munich   ArjenRobben   4       10        0.400000\n    12      Bayern Munich   Mario Götze    3       11        0.272727\n    13      Bayern Munich  BastianSchweinsteiger 3   8     0.375000\n    14      Bayern Munich  MarioMandzukić  3       10        0.300000\n    15      Chelsea        Fernando Torres  4       9         0.444444\n    16      Chelsea        Demba Ba         3       6         0.500000\n    17      Chelsea        Samuel Eto'o     3       9         0.333333\n    18      Chelsea        Eden Hazard      2       9         0.222222\n    19      Chelsea        Ramires          2       10        0.200000\n\n    In [30]: grouped = goal_stats_df.groupby('Club')\n\n    In [17]: grouped['GoalsPerGame'].aggregate(np.max)\n    Out[17]: Club\n             Atletico Madrid    0.888889\n             Bayern Munich      0.416667\n             Chelsea            0.500000\n             Real Madrid        1.545455\n             Name: GoalsPerGame, dtype: float64\n\n    In [22]: grouped['GoalsPerGame'].apply(np.max)\n\n    Out[22]: Club\n             Atletico Madrid    0.888889\n             Bayern Munich      0.416667\n             Chelsea            0.500000\n             Real Madrid        1.545455\n             Name: GoalsPerGame, dtype: float64\n\n```", "```py\n    >stock_symbols=stocks_table$Symbol\n    >stock_symbols\n    [1] GOOG  AMZN  FB  AAPL  TWTR  NFLX  LINKD\n    Levels: AAPL AMZN FB GOOG LINKD NFLX TWTR\n\n    >stock_symbols %in% c('GOOG','NFLX')\n    [1]  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE\n\n```", "```py\n    In [11]: stock_symbols=stocks_df.Symbol\n    stock_symbols\n    Out[11]: 0    GOOG\n             1    AMZN\n             2      FB\n             3    AAPL\n             4    TWTR\n             5    NFLX\n             6    LNKD\n             Name: Symbol, dtype: object\n    In [10]: stock_symbols.isin(['GOOG','NFLX'])\n    Out[10]: 0     True\n             1    False\n             2    False\n             3    False\n             4    False\n             5     True\n             6    False\n             Name: Symbol, dtype: bool\n\n```", "```py\n    >goal_stats[goal_stats$GoalsPerGame>=0.5,]\n       Club            Player        Goals GamesPlayedGoalsPerGame\n    1  Atletico Madrid Diego Costa     8           9    0.8888889\n    6  Real Madrid Cristiano Ronaldo  17          11    1.5454545\n    7  Real Madrid       Gareth Bale   6          12    0.5000000\n    17 Chelsea          Demba Ba     3           6    0.5000000\n\n```", "```py\n    >subset(goal_stats,GoalsPerGame>=0.5)\n       Club            Player      Goals GamesPlayedGoalsPerGame\n    1  Atletico Madrid Diego Costa    8           9    0.8888889\n    6  Real Madrid Cristiano Ronaldo 17          11    1.5454545\n    7  Real Madrid     Gareth Bale    6          12    0.5000000\n    17 Chelsea          Demba Ba     3           6    0.5000000\n\n```", "```py\n    In [33]: goal_stats_df[goal_stats_df['GoalsPerGame']>=0.5]\n    Out[33]:     Club        Player            Goals GamesPlayedGoalsPerGame\n    0    Atletico Madrid Diego Costa     8     9          0.888889\n    5    Real Madrid   Cristiano Ronaldo 17    11         1.545455\n    6    Real Madrid     Gareth Bale     6     12         0.500000\n    16   Chelsea         Demba Ba        3     6           0.500000\n\n```", "```py\n    In [36]:  goal_stats_df.query('GoalsPerGame>= 0.5')\n    Out[36]:\n    Club              Player   Goals GamesPlayedGoalsPerGame\n    0    Atletico Madrid Diego Costa   8     9            0.888889\n    5    Real Madrid  Cristiano Ronaldo 17    11           1.545455\n    6    Real Madrid     Gareth Bale    6     12           0.500000\n    16   Chelsea         Demba Ba       3     6            0.500000\n\n```", "```py\n    >install.packages('nycflights13')\n    ...\n\n    >library('nycflights13')\n    >dim(flights)\n    [1] 336776     16\n\n    >head(flights,3)\n    year month day dep_timedep_delayarr_timearr_delay carrier tailnum flight\n    1 2013     1   1      517         2      830        11      UA  N14228   1545\n    2 2013     1   1      533         4      850        20      UA  N24211   1714\n    3 2013     1   1      542         2      923        33      AA  N619AA   1141\n    origindestair_time distance hour minute\n    1    EWR  IAH      227     1400    5     17\n    2    LGA  IAH      227     1416    5     33\n    3    JFK  MIA      160     1089    5     42\n\n    > flights.data=na.omit(flights[,c('year','month','dep_delay','arr_delay','distance')])\n    >flights.sample<- flights.data[sample(1:nrow(flights.data),100,replace=FALSE),]\n\n    >head(flights.sample,5)\n    year month dep_delayarr_delay distance\n    155501 2013     3         2         5      184\n    2410   2013     1         0         4      762\n    64158  2013    11        -7       -27      509\n    221447 2013     5        -5       -12      184\n    281887 2013     8        -1       -10      937\n\n```", "```py\n    >ddply(flights.sample,.(year,month),summarize, mean_dep_delay=round(mean(dep_delay),2), s_dep_delay=round(sd(dep_delay),2))\n    year month mean_dep_delaysd_dep_delay\n    1  2013     1          -0.20         2.28\n    2  2013     2          23.85        61.63\n    3  2013     3          10.00        34.72\n    4  2013     4           0.88        12.56\n    5  2013     5           8.56        32.42\n    6  2013     6          58.14       145.78\n    7  2013     7          25.29        58.88\n    8  2013     8          25.86        59.38\n    9  2013     9          -0.38        10.25\n    10 2013    10           9.31        15.27\n    11 2013    11          -1.09         7.73\n    12 2013    12           0.00         8.58\n\n```", "```py\n    >write.csv(flights.sample,file='nycflights13_sample.csv', quote=FALSE,row.names=FALSE)\n\n```", "```py\n    In [40]: flights_sample=pd.read_csv('nycflights13_sample.csv')\n\n    In [41]: flights_sample.head()\n    Out[41]: year   month   dep_delayarr_delay       distance\n    0        2013   3       2       5       184\n    1        2013   1       0       4       762\n    2        2013   11      -7      -27     509\n    3        2013   5       -5      -12     184\n    4        2013   8       -1      -10     937\n\n```", "```py\n    In [44]: pd.set_option('precision',3)\n    In [45]: grouped = flights_sample_df.groupby(['year','month'])\n\n    In [48]: grouped['dep_delay'].agg([np.mean, np.std])\n\n    Out[48]:        mean    std\n    year    month \n    2013    1       -0.20   2.28\n            2       23.85   61.63\n            3       10.00   34.72\n            4       0.88    12.56\n            5       8.56    32.42\n            6       58.14   145.78\n            7       25.29   58.88\n            8       25.86   59.38\n            9       -0.38   10.25\n            10      9.31    15.27\n            11      -1.09   7.73\n            12      0.00    8.58\n\n```", "```py\n    >sample4=head(flights.sample,4)[c('year','month','dep_delay','arr_delay')]\n    > sample4\n    year month dep_delayarr_delay\n    155501 2013     3         2         5\n    2410   2013     1         0         4\n    64158  2013    11        -7       -27\n    221447 2013     5        -5       -12\n\n    >melt(sample4,id=c('year','month'))\n    year month  variable value\n    1 2013     3 dep_delay     2\n    2 2013     1 dep_delay     0\n    3 2013    11 dep_delay    -7\n    4 2013     5 dep_delay    -5\n    5 2013     3 arr_delay     5\n    6 2013     1 arr_delay     4\n    7 2013    11 arr_delay   -27\n    8 2013     5 arr_delay   -12\n    >  \n```", "```py\n    In [55]: sample_4_df=flights_sample_df[['year','month','dep_delay', \\\n    'arr_delay']].head(4)\n    In [56]: sample_4_df\n    Out[56]: year   month dep_delayarr_delay\n    0        2013   3       2       5\n    1        2013   1       0       4\n    2        2013   11      -7      -27\n    3        2013   5       -5      -12\n\n    In [59]: pd.melt(sample_4_df,id_vars=['year','month'])\n    Out[59]: year   month   variable        value\n    0        2013   3       dep_delay       2\n    1        2013   1       dep_delay       0\n    2        2013   11      dep_delay       -7\n    3        2013   5       dep_delay       -5\n    4        2013   3       arr_delay       5\n    5        2013   1       arr_delay       4\n    6        2013   11      arr_delay       -27\n    7        2013   5       arr_delay       -12  \n```", "```py\n    clinical.trial<- data.frame(patient = 1:1000,\n    age = rnorm(1000, mean = 50, sd = 5),\n    year.enroll = sample(paste(\"19\", 80:99, sep = \"\"),\n                                 1000, replace = TRUE))\n\n    >clinical.trial<- data.frame(patient = 1:1000,\n    +                              age = rnorm(1000, mean = 50, sd = 5),\n    +                              year.enroll = sample(paste(\"19\", 80:99, sep = \"\"),\n    +                              1000, replace = TRUE))\n    >summary(clinical.trial)\n    patient            age         year.enroll\n    Min.   :   1.0   Min.   :31.14   1995   : 61 \n    1st Qu.: 250.8   1st Qu.:46.77   1989   : 60 \n    Median : 500.5   Median :50.14   1985   : 57 \n    Mean   : 500.5   Mean   :50.14   1988   : 57 \n    3rd Qu.: 750.2   3rd Qu.:53.50   1990   : 56 \n    Max.   :1000.0   Max.   :70.15   1991   : 55 \n    (Other):654 \n    >ctcut<- cut(clinical.trial$age, breaks = 5)> table(ctcut)\n    ctcut\n    (31.1,38.9] (38.9,46.7] (46.7,54.6] (54.6,62.4] (62.4,70.2]\n             15         232         558         186           9\n\n```", "```py\n    In [79]: pd.set_option('precision',4)\n    clinical_trial=pd.DataFrame({'patient':range(1,1001), \n                                          'age' : np.random.normal(50,5,size=1000),\n                     'year_enroll': [str(x) for x in np.random.choice(range(1980,2000),size=1000,replace=True)]})\n\n    In [80]: clinical_trial.describe()\n    Out[80]:        age       patient\n    count   1000.000  1000.000\n    mean    50.089    500.500\n    std     4.909     288.819\n    min     29.944    1.000\n            25%     46.572    250.750\n            50%     50.314    500.500\n            75%     53.320    750.250\n    max     63.458    1000.000\n\n    In [81]: clinical_trial.describe(include=['O'])\n    Out[81]:        year_enroll\n    count   1000\n    unique  20\n    top     1992\n    freq    62\n\n    In [82]: clinical_trial.year_enroll.value_counts()[:6]\n    Out[82]: 1992    62\n             1985    61\n             1986    59\n             1994    59\n             1983    58\n             1991    58\n    dtype: int64\n    In [83]: ctcut=pd.cut(clinical_trial['age'], 5)\n    In [84]: ctcut.head()\n    Out[84]: 0    (43.349, 50.052]\n             1    (50.052, 56.755]\n             2    (50.052, 56.755]\n             3    (43.349, 50.052]\n             4    (50.052, 56.755]\n             Name: age, dtype: category\n             Categories (5, object): [(29.91, 36.646] < (36.646, 43.349] < (43.349, 50.052] < (50.052, 56.755] < (56.755, 63.458]]\n\n    In [85]: ctcut.value_counts().sort_index()\n    Out[85]: (29.91, 36.646]       3\n                  (36.646, 43.349]     82\n           (43.349, 50.052]    396\n           (50.052, 56.755]    434\n          (56.755, 63.458]     85\n    dtype: int64\n\n```", "```py\nselect state_name,active_status,services_due from DallasData LIMIT 5;\n```", "```py\nDallasData[['state_name','active_status','services_due']].head(5)\n```", "```py\n    select * from DallasData where active_status ==1 LIMIT 5;\n\n```", "```py\n    DallasData[DallasData['active_status']==1].head(5);\n```", "```py\nselect * from DallasData where active_status ==1 AND services_completed <9 LIMIT 5;\n```", "```py\nDallasData[(DallasData['active_status']==1) & (DallasData['services_completed'] <9)].head(5)\n```", "```py\nselect customerID,zip,soldBy from DallasData where active_status ==1 LIMIT 5;\n```", "```py\nDallasData[DallasData['active_status']==1][['customerID','zip','soldBy']].head(5)\n```", "```py\nselect active_status, count(*) as number from DallasData group by active_status;\n```", "```py\nDallasData.groupby('active_status').size();\n```", "```py\nselect active_status, sum(services_complted), mean(age_median) from DallasData group by active_status;\n```", "```py\nDallasData.groupby('active_status').agg({'services_completed':np.sum,'age_median':np.mean})\n```", "```py\nselect active_status, sum(services_complted), mean(days_old) from DallasData group by active_status,zip;\n```", "```py\n DallasData.groupby(['active_status','zip']).agg({'services_completed':np.sum,'days_old':np.mean}).head(5)\n```", "```py\nupdate DallasData set age_median=45 where age_median>35\n```", "```py\n    DallasData[DallasData['age_median']>35]=45 \n```", "```py\ndelete DallasData where days_old<500\n```", "```py\n    DallasData1 = DallasData[DallasData['days_old']>500]\n```", "```py\n    DallasData1[DallasData1['days_old']<400]\n```", "```py\ndf1 = pd.DataFrame({'key': ['IN', 'SA', 'SL', 'NZ'],'Result':['W','L','L','W']})\n\ndf2 = pd.DataFrame({'key': ['IN', 'SA', 'SA', 'WI'],'Score':[200,325,178,391]})\n```", "```py\nSELECT * FROM df1 INNER JOIN df2 ON df1.key = df2.key;\n```", "```py\n    pd.merge(df1,df2,on='key') \n```", "```py\nSELECT * FROM df1 LEFT JOIN df2 ON df1.key = df2.key;\n```", "```py\n    pd.merge(df1,df2,on='key',how='left') \n```", "```py\nSELECT * FROM df1 RIGHT JOIN df2 ON df1.key = df2.key;\n```", "```py\n    pd.merge(df1,df2,on='key',how='right')\n```"]