["```py\n    In [7]: ibmData=pd.read_csv('ibm-common-stock-closing-prices-1959_1960.csv')\n      ibmData.head()\n    Out[7]:   TradeDate  closingPrice\n    0   1959-06-29   445\n    1   1959-06-30   448\n    2   1959-07-01   450\n    3   1959-07-02   447\n    4   1959-07-06   451\n    5 rows 2 columns\n```", "```py\n    In [16]: type(ibmData['TradeDate'])\n    Out[16]: pandas.core.series.Series\n    In [12]: type(ibmData['TradeDate'][0])\n    Out[12]: str\n```", "```py\n    In [17]: ibmData['TradeDate']=pd.to_datetime(ibmData['TradeDate'])\n            type(ibmData['TradeDate'][0])\n    Out[17]: pandas.tslib.Timestamp  \n```", "```py\nIn [113]: #Convert DataFrame to TimeSeries\n              #Resampling creates NaN rows for weekend dates, \n             hence use dropna\n             ibmTS=ibmData.set_index('TradeDate').resample('D'                      ['closingPrice'].dropna()\n        ibmTS\n    Out[113]: TradeDate\n             1959-06-29    445\n             1959-06-30    448\n             1959-07-01    450\n             1959-07-02    447\n      1959-07-06    451\n      ...\n      Name: closingPrice, Length: 255    \n```", "```py\nimport pandas as pd \nimport os os.chdir(' ') \nts1=pd.read_csv('datatraining.txt') \nts2=pd.read_csv('datatest.txt') \nts3=pd.read_csv('datatest2.txt') \nts=pd.concat([ts1,ts2,ts3] \n```", "```py\nts['datetime'] = pd.to_datetime(ts['date'])\nts = ts.set_index('datetime')\nts.drop(['date'], axis=1, inplace=True)\n```", "```py\nts['2015-02-05']\n```", "```py\n   ts[ts.index.hour==4]\n```", "```py\n     ts['2015-02-05':'2015-02-06']\n```", "```py\n    ts.plot(y=\"Humidity\",style='.',figsize=(15,1))\n    ts.plot(y=\"CO2\",style='.',figsize=(15,1))\n```", "```py\nts[[\"Humidity\"]].resample(\"1h\").median().plot(figsize=(15,1)) \n```", "```py\n    ts[[\"Humidity\"]].resample(\"1d\").median().plot(figsize=(15,1))\n\n```", "```py\n    ts[[\"Humidity\"]].rolling(60).median().plot(figsize=(15,1))  \n```", "```py\n    ts[[\"Humidity\"]].rolling(60*24).median().plot(figsize=(15,1))  \n```", "```py\nts['Year']=ts.index.year\nts['Month']=ts.index.month\nts['Day']=ts.index.day\nts['Hour']=ts.index.hour\nts['Minute']=ts.index.minute\nts['Second']=ts.index.second\n```", "```py\n    In [371]: xmasDay=pd.datetime(2014,12,25)\n              xmasDay\n    Out[371]: datetime.datetime(2014, 12, 25, 0, 0)\n\n    In [373]: boxingDay=xmasDay+pd.DateOffset(days=1)\n              boxingDay\n    Out[373]: Timestamp('2014-12-26 00:00:00', tz=None)\n\n    In [390}: today=pd.datetime.now()\n              today\n    Out[390]: datetime.datetime(2014, 5, 31, 13, 7, 36, 440060)  \n```", "```py\n    In [392]: today+pd.DateOffset(weeks=1)\n    Out[392]: Timestamp('2014-06-07 13:07:36.440060', tz=None)  \n```", "```py\n    In [394]: today+2*pd.DateOffset(years=2, months=6)\n    Out[394]: Timestamp('2019-05-30 13:07:36.440060', tz=None) \n```", "```py\n    In [18]: lastDay=pd.datetime(2013,12,31)\n    In [24]: from pandas.tseries.offsets import QuarterBegin\n            dtoffset=QuarterBegin()\n            lastDay+dtoffset\n    Out[24]: Timestamp('2014-03-01 00:00:00', tz=None)\n\n    In [25]: dtoffset.rollforward(lastDay)\n    Out[25]: Timestamp('2014-03-01 00:00:00', tz=None)\n\n```", "```py\n    In [40]: weekDelta=datetime.timedelta(weeks=1)\n             weekDelta\n    Out[40]: datetime.timedelta(7)\n\n    In [39]: today=pd.datetime.now()\n             today\n    Out[39]: datetime.datetime (2014, 6, 2, 3, 56, 0, 600309)\n\n    In [41]: today+weekDelta\n    Out[41]: datetime.datetime (2014, 6, 9, 3, 56,0, 600309)  \n```", "```py\n    In [117]: ibmTS.shift(3)\n    Out[117]: TradeDate\n        1959-06-29    NaN\n        1959-06-30    NaN\n        1959-07-01    NaN\n        1959-07-02    445\n        1959-07-06    448\n        1959-07-07    450\n        1959-07-08    447\n        ...  \n```", "```py\n    In [119]: ibmTS.shift(3, freq=pd.datetools.bday)\n    Out[119]: TradeDate\n        1959-07-02    445\n        1959-07-03    448\n        1959-07-06    450\n        1959-07-07    447\n        1959-07-09    451\n\n```", "```py\n    In [131]: # Frequency conversion using asfreq\n              ibmTS.asfreq('BM')\n    Out[131]: 1959-06-30    448\n        1959-07-31    428\n        1959-08-31    425\n        1959-09-30    411\n        1959-10-30    411\n        1959-11-30    428\n        1959-12-31    439\n        1960-01-29    418\n        1960-02-29    419\n        1960-03-31    445\n        1960-04-29    453\n        1960-05-31    504\n        1960-06-30    522\n        Freq: BM, Name: closingPrice, dtype: float64\n\n```", "```py\n    In [132]: ibmTS.asfreq('H')\n    Out[132]: 1959-06-29 00:00:00    445\n        1959-06-29 01:00:00    NaN\n        1959-06-29 02:00:00    NaN\n        1959-06-29 03:00:00    NaN\n        ...\n        1960-06-29 23:00:00    NaN\n        1960-06-30 00:00:00    522\n        Freq: H, Name: closingPrice, Length: 8809\n\n```", "```py\n    In [140]: ibmTS.asfreq('H', method='ffill') Out[140]: 1959-06-29 00:00:00 445 1959-06-29 01:00:00 445 1959-06-29 02:00:00 445 1959-06-29 03:00:00 445 ... 1960-06-29 23:00:00 522 1960-06-30 00:00:00 522 Freq: H, Name: closingPrice, Length: 8809\n```", "```py\n    In [150]: googTickData=pd.read_csv('./GOOG_tickdata_20140527.csv')\n    In [151]: googTickData.head()\n    Out[151]: Timestamp  close    high     low       open   volume\n       0    1401197402  555.008 556.41  554.35 556.38   81100\n       1    1401197460  556.250 556.30  555.25 555.25   18500\n       2    1401197526  556.730 556.75  556.05 556.39   9900\n       3    1401197582  557.480 557.67  556.73 556.73   14700\n       4    1401197642  558.155 558.66  557.48  557.59   15700\n    5 rows 6 columns\n```", "```py\n    In [201]: googTickData['tstamp']=pd.to_datetime(googTickData['Timestamp'],unit='s',utc=True)\n\n    In [209]: googTickData.head()\n    Out[209]:\n       Timestamp   close   high   low    open  volume tstamp\n    0  14011974020 555.008 556.41 554.35 556.38 81100 2014-05-27 13:30:02\n    1   1401197460 556.250 556.30 555.25 555.25 18500 2014-05-27 13:31:00\n    2   1401197526 556.730 556.75 556.05 556.39  9900 2014-05-27 13:32:06\n    3   1401197582 557.480 557.67 556.73 556.73 14700 2014-05-27 13:33:02\n    4   1401197642 558.155 558.66 557.48 557.59 15700 2014-05-27 13:34:02\n    5 rows 7 columns  \n```", "```py\n    In [210]: googTickTS=googTickData.set_index('tstamp')\n              googTickTS=googTickTS.drop('Timestamp',axis=1)\n              googTickTS.head()\n    Out[210]:                      close  high  low  open  volume\n            tstamp\n            2014-05-27 13:30:02    555.008  556.41  554.35  556.38   811000\n      2014-05-27 13:31:00    556.250  556.30  555.25  555.25   18500\n      2014-05-27 13:32:06    556.730  556.75  556.05  556.39   9900\n      2014-05-27 13:33:02    557.480  557.67  556.73  556.73   14700\n      2014-05-27 13:34:02    558.155  558.66  557.48  557.59   15700\n      5 rows 5 columns\n```", "```py\n    In [211]: googTickTS.index=googTickTS.index.tz_localize('UTC').tz_convert('US/Eastern')\n\n    In [212]: googTickTS.head()\n    Out[212]:                        close    high    low    open    volume\n    tstamp\n    2014-05-27 09:30:02-04:00      555.008  556.41  554.35  556.38  81100\n    2014-05-27 09:31:00-04:00      556.250  556.30  555.25  555.25  18500\n    2014-05-27 09:32:06-04:00      556.730  556.75  556.05  556.39   9900\n    2014-05-27 09:33:02-04:00      557.480  557.67  556.73  556.73  14700\n    2014-05-27 09:34:02-04:00      558.155  558.66  557.48  557.59  15700\n    5 rows 5 columns\n\n    In [213]: googTickTS.tail()\n    Out[213]:\n             close     high    low   open   volume\n    tstamp\n    2014-05-27 15:56:00-04:00      565.4300  565.48 565.30 565.385  14300\n    2014-05-27 15:57:00-04:00      565.3050  565.46 565.20 565.400  14700\n    2014-05-27 15:58:00-04:00      565.1101  565.31 565.10 565.310  23200\n    2014-05-27 15:59:00-04:00      565.9400  566.00 565.08 565.230  55600\n    2014-05-27 16:00:00-04:00      565.9500  565.95 565.95 565.950 126000\n    5 rows 5 columns\n\n    In [214]: len(googTickTS)\n    Out[214]: 390  \n```", "```py\n    In [216]: googTickTS.resample('5Min').head(6)\n    Out[216]:                 close      high   low    open       volume\n    tstamp\n    2014-05-27 09:30:00-04:00 556.72460 557.15800 555.97200 556.46800 27980\n    2014-05-27 09:35:00-04:00 556.93648 557.64800 556.85100 557.34200  24620\n    2014-05-27 09:40:00-04:00 556.48600 556.79994 556.27700 556.60678   8620\n    2014-05-27 09:45:00-04:00 557.05300 557.27600 556.73800 556.96600   9720\n    2014-05-27 09:50:00-04:00  556.66200  556.93596  556.46400  556.80326  14560\n    2014-05-27 09:55:00-04:00  555.96580  556.35400  555.85800  556.23600  12400\n    6 rows 5 columns\n```", "```py\n    In [245]: googTickTS.resample('10Min', how=np.min).head(4)\n    Out[245]:         close   high      low  open  volume\n    tstamp\n    2014-05-27 09:30:00-04:00   555.008  556.3000  554.35  555.25   9900\n    2014-05-27 09:40:00-04:00   556.190  556.5600  556.13  556.35   3500\n    2014-05-27 09:50:00-04:00   554.770  555.5500  554.77  555.55   3400\n    2014-05-27 10:00:00-04:00   554.580  554.9847  554.45  554.58   1800  \n```", "```py\n   In [254]: pd.set_option('display.precision',5)  googTickTS.resample('5Min', closed='right').tail(3) Out[254]: close high low open volume tstamp 2014-05-27 15:45:00-04:00 564.3167 564.3733 564.1075 564.1700 12816.6667 2014-05-27 15:50:00-04:00 565.1128 565.1725 565.0090 565.0650 13325.0000 2014-05-27 15:55:00-04:00 565.5158 565.6033 565.3083 565.4158 40933.3333 3 rows 5 columns \n```", "```py\n    In [263]: googTickTS[:3].resample('30s', fill_method='ffill')\n    Out[263]:                   close    high     low    open  volume\n    tstamp\n    2014-05-27 09:30:00-04:00   555.008  556.41  554.35  556.38   81100\n    2014-05-27 09:30:30-04:00   555.008  556.41  554.35  556.38   81100\n    2014-05-27 09:31:00-04:00   556.250  556.30  555.25  555.25   18500\n    2014-05-27 09:31:30-04:00   556.250  556.30  555.25  555.25   18500\n    2014-05-27 09:32:00-04:00   556.730  556.75  556.05  556.39   9900\n    5 rows 5 columns\n\n    In [264]: googTickTS[:3].resample('30s', fill_method='bfill')\n    Out[264]:\n                               close     high    low  open  volume\n    tstamp\n    2014-05-27 09:30:00-04:00  555.008   556.41  554.35  556.38   81100\n    2014-05-27 09:30:30-04:00  556.250   556.30  555.25  555.25   18500\n    2014-05-27 09:31:00-04:00  556.250   556.30  555.25  555.25   18500\n    2014-05-27 09:31:30-04:00  556.730   556.75  556.05  556.39   9900\n    2014-05-27 09:32:00-04:00  556.730   556.75  556.05  556.39   9900\n    5 rows 5 columns  \n```", "```py\n    In [267]: googTickTS.resample('7T30S').head(5)\n    Out[267]:\n                               close     high   low   open    volume  \n    tstamp\n    2014-05-27 09:30:00-04:00 556.8266 557.4362 556.3144 556.8800 28075.0\n    2014-05-27 09:37:30-04:00 556.5889 556.9342 556.4264 556.7206 11642.9\n    2014-05-27 09:45:00-04:00 556.9921 557.2185 556.7171 556.9871  9800.0\n    2014-05-27 09:52:30-04:00 556.1824 556.5375 556.0350 556.3896 14350.0\n    2014-05-27 10:00:00-04:00 555.2111 555.4368 554.8288 554.9675 12512.5\n    5 rows x 5 columns\n```", "```py\n    # Period representing May 2014\n    In [287]: pd.Period('2014', freq='A-MAY')\n    Out[287]: Period('2014', 'A-MAY')\n\n    # Period representing specific day - June 11, 2014\n    In [292]: pd.Period('06/11/2014')\n    Out[292]: Period('2014-06-11', 'D')\n\n    # Period representing 11AM, Nov 11, 1918 \n    In [298]: pd.Period('11/11/1918 11:00',freq='H')\n    Out[298]: Period('1918-11-11 11:00', 'H')\n```", "```py\n    In [299]: pd.Period('06/30/2014')+4\n    Out[299]: Period('2014-07-04', 'D')\n\n    In [303]: pd.Period('11/11/1918 11:00',freq='H') - 48\n    Out[303]: Period('1918-11-09 11:00', 'H')  \n```", "```py\n    In [304]: pd.Period('2014-04', freq='M')-pd.Period('2013-02', freq='M')\n    Out[304]: 14\n\n```", "```py\n    In [305]: perRng=pd.period_range('02/01/2014','02/06/2014',freq='D')\n              perRng\n    Out[305]: <class 'pandas.tseries.period.PeriodIndex'>\n              freq: D\n              [2014-02-01, ..., 2014-02-06]\n              length: 6\n\n    In [306]: type(perRng[:2])\n    Out[306]: pandas.tseries.period.PeriodIndex\n\n    In [307]: perRng[:2]\n    Out[307]: <class 'pandas.tseries.period.PeriodIndex'>\n              freq: D\n             [2014-02-01, 2014-02-02]\n\n```", "```py\n    In [312]: JulyPeriod=pd.PeriodIndex(['07/01/2014','07/31/2014'], freq='D')\n        JulyPeriod\n    Out[312]: <class 'pandas.tseries.period.PeriodIndex'>\n        freq: D\n        [2014-07-01, 2014-07-31]\n```", "```py\n    In [339]: worldCupFinal=pd.to_datetime('07/13/2014', \n                                           errors='raise')\n             worldCupFinal\n       Out[339]: Timestamp('2014-07-13 00:00:00')\n\n    In [340]: worldCupFinal.to_period('D')\n       Out[340]: Period('2014-07-13', 'D')\n\n    In [342]: worldCupKickoff=pd.Period('06/12/2014','D')\n             worldCupKickoff\n    Out[342]: Period('2014-06-12', 'D')\n    In [345]: worldCupKickoff.to_timestamp()\n    Out[345]: Timestamp('2014-06-12 00:00:00', tz=None)\n\n    In [346]: worldCupDays=pd.date_range('06/12/2014',periods=32,   \n                                          freq='D')\n             worldCupDays\n    Out[346]: <class 'pandas.tseries.index.DatetimeIndex'>\n        [2014-06-12, ..., 2014-07-13]\n        Length: 32, Freq: D, Timezone: None\n\n    In [347]: worldCupDays.to_period()\n    Out[347]: <class 'pandas.tseries.period.PeriodIndex'>\n        freq: D\n        [2014-06-12, ..., 2014-07-13]\n        length: 32\n\n```", "```py\nts_df = pd.DataFrame({\"ts_col\": [\"2013-01-01\", \"2015-02-10\", \"2016-10-24\"], \"value\": [5, 6, 9]})\nts_df\n```", "```py\nts_df.dtypes\n```", "```py\n                    ts_df[\"ts_col\"] = pd.to_datetime(ts_df[\"ts_col\"], format = \"%Y-%m-%d\")\n    ts_df.dtypes\n```", "```py\nimport datetime as dt\nts_df[\"ts_col\"] = ts_df[\"ts_col\"].apply(lambda x:\ndt.datetime.strptime(x,'%Y-%m-%d'))\n```", "```py\nts_df[\"ts_col\"] = ts_df[\"ts_col\"].dt.strftime(\"%d/%m/%Y\")\nts_df  \n```", "```py\nts_df[\"ts_col\"] = ts_df[\"ts_col\"].astype(\"datetime64[ns]\")\nts_df[\"ts_col\"] = ts_df[\"ts_col\"].astype(\"object\")  \n```", "```py\n ts_complete_df = pd.read_csv(\"sensor_df.csv\")\n```", "```py\nts_complete_df.groupby(\"ID\").size().describe()\n```", "```py\ntruncate_df = pd.DataFrame()\nmin_len = ts_complete_df.groupby(\"ID\").size().min()\nfor i in range(1,315):\ndf = ts_complete_df[ts_complete_df[\"ID\"] == i].iloc[0:min_len, :]\ntruncate_df = truncate_df.append(df)  \n```", "```py\ntruncate_df.groupby(\"ID\").size().describe()  \n```", "```py\n ts = pd.read_csv(\"D:datatest.txt\").iloc[:,0:2].set_index(\"date\") ts\n```", "```py\n    feat_ext = pd.concat([ts.rolling(5).mean(), ts.rolling(5).std(), (ts - ts.shift(-5))/ts], axis=1).iloc[5:,:]\n    feat_ext.columns = ['5_day_mean', '5_day_std', '5_day_gradient']\n    feat_ext.head(5)\n```", "```py\nIn [1]: import matplotlib.pyplot as plt \n```", "```py\n    In [51]: import numpy as np\n    In [52]: X = np.linspace(-np.pi, np.pi, 256,endpoint=True)\n\n    In [54]: f,g = np.cos(X)+np.sin(X), np.sin(X)-np.cos(X)\n    In [61]: f_ser=pd.Series(f)\n             g_ser=pd.Series(g)\n\n    In [31]: plotDF=pd.concat([f_ser,g_ser],axis=1)\n             plotDF.index=X\n             plotDF.columns=['sin(x)+cos(x)','sin(x)-cos(x)']\n             plotDF.head()\n    Out[31]:  sin(x)+cos(x)  sin(x)-cos(x)\n    -3.141593  -1.000000   1.000000\n    -3.116953  -1.024334   0.975059\n    -3.092313  -1.048046   0.949526\n    -3.067673  -1.071122   0.923417\n    -3.043033  -1.093547   0.896747\n    5 rows × 2 columns\n```", "```py\n    In [94]: plotDF.plot()\n             plt.show()\n\n    We can apply a title to the plot as follows:\n    In [95]: plotDF.columns=['f(x)','g(x)']\n             plotDF.plot(title='Plot of f(x)=sin(x)+cos(x), \\n         g(x)=sinx(x)-cos(x)')\n             plt.show()\n```", "```py\nIn [96]: plotDF.plot(subplots=True, figsize=(6,6))\n           plt.show()\n```", "```py\n    axes = plot_ts.plot(figsize=(20,10), title='Timeseries Plot', subplots=True, layout=(plot_ts.shape[1],1), xticks = plot_ts.index)\n    # Get current axis from plot\n    ax = plt.gca()\n    import matplotlib.dates as mdates\n    # Set frequency of xticks\n    ax.xaxis.set_major_locator(mdates.DayLocator(interval = 1))\n    # Format dates in xticks \n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n    plt.show()\n```"]