- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Environment Setup and Package Management for Building an AI-Powered
    Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *Chapters 8* through *12*, we will be building a new web app together: a
    tool that can detect the presence of COVID-19 from an image. To do so, we will
    leverage a pre-trained model (we are not delving into AI and model training but
    just using a pre-trained convolutional neural network) and in this way, we will
    learn how to integrate our AI models into our web applications by building up
    an entire set of services around them!'
  prefs: []
  type: TYPE_NORMAL
- en: 'In very few words, a pre-trained model is an AI model that has been trained
    previously by someone else in order to make predictions – for example, classifications
    or regressions. To train the model, a dataset of cases related to the problem
    under scrutiny is typically needed. So, in the case of COVID-19 detection, a binary
    classification model (binary means only two possible solutions: COVID or no COVID)
    has been trained in the past and is now ready to be used in our web application.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers in a deeper way what we already saw in [*Chapter 4*](B21147_04.xhtml#_idTextAnchor045).
    The chapter is designed to help you better understand how to develop a web application
    from scratch, adding more features that require higher skills. So, once again,
    we will set up a virtual environment, install and manage packages, create an app
    skeleton, and add a menu and decorations to the app. In this part, we will build
    a new web app together to acquire much more high-level skills.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring our environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and importing packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the app skeleton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the menu and adding decorations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use the following libraries, packages, and tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipenv`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code in the chapter can be accessed through the following GitHub link: [https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/d5860f2916d79752d4b03c615da68f5bbdb4ed63/Chapter08](https://github.com/PacktPublishing/Web-App-Development-Made-Simple-with-Streamlit/tree/d5860f2916d79752d4b03c615da68f5bbdb4ed63/Chapter08)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring our environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Actually, we already created a virtual environment at the beginning of the
    previous project, in [*Chapter 4*](B21147_04.xhtml#_idTextAnchor045), so we should
    be quite skilled at this task. Let’s start by creating an empty directory, which
    can be simply named `covid`. So, let’s write in our terminal the following instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can move inside the new directory just by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s now time to create our virtual environment. We know that this operation
    is very easy since we can use `pipenv`, as we already did in [*Chapter 4*](B21147_04.xhtml#_idTextAnchor045).
    So, once again, let’s write from our directory (it’s very important to be inside
    the `covid` directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The virtual environment will be created quite quickly, and we should be at
    a stage like the one in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: Virtual environment creation](img/B21147_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Virtual environment creation'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 8**.1*, a new directory named `covid` is created. Then,
    we enter this directory and, by writing `pipenv shell`, we create the virtual
    environment, assigning to it the name of the directory. The tool we are using
    to make the virtual environment (`pipenv`) provides a positive output (the text
    in green) and automatically opens the new virtual environment. In fact, at the
    beginning of the last line in the screenshot, the word `covid` between the parentheses
    indicates that we are inside the virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the environment is ready but still empty, since we are still
    missing all the libraries we are going to use in our code. Let’s see what packages
    we need.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and importing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are inside the `covid` directory and our virtual environment has
    been created, it’s time to install all the packages we are going to use in our
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need five different libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Streamlit`, our wonderful framework for web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy`, a library for advanced numeric calculations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tensorflow`, the package needed to manage neural networks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pillow`, a library for image management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opencv-python`, the computer vision package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s install everything by typing the following instructions one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This installation can take a little while. When it finishes, we should have
    something like this on our screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: Package installation](img/B21147_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Package installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now launch our editor, Sublime Text. You’ll see that in the `covid`
    directory, there are now the two *famous* files, `Pipfile` and `Pipfile.lock`,
    containing the configuration of our virtual environment with the installed libraries
    and the dependencies list:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.3: \uFEFFPipfile](img/B21147_08_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: Pipfile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create a new file and call it, as usual, `app.py`, so let’s write
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Everything is finally ready to start coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Obviously, we have to start by importing the libraries, and this is very easy,
    as we can see in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: Importing the libraries](img/B21147_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: Importing the libraries'
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the previous web application, we need to create a main function. Let’s
    do it by adding some `html` code just to give a title to our app, and since we
    already imported Streamlit, as usual, let’s add as the first instruction, after
    the `import streamlit as st` line, the code for the page configuration (we just
    set the title, an icon – you can use any picture you want – and the initial sidebar
    state). The full code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5: First app draft](img/B21147_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: First app draft'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, we’ve just imported the libraries and added very few lines of
    code, but the web app can be launched. Let’s do it by typing the following well-known
    instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following figure, the result we get upon opening the browser on localhost
    port `8501` can be seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6: First launch of the app](img/B21147_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: First launch of the app'
  prefs: []
  type: TYPE_NORMAL
- en: No errors! We can continue to build the app skeleton now.
  prefs: []
  type: TYPE_NORMAL
- en: Building the app skeleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we should be quite expert at building the application’s skeleton,
    since we did a very good job with the NLP web app developed previously. In fact,
    if you recall, we first defined and built up a simple skeleton containing just
    a menu with all the functions supposed to be present in the web application and
    only in a second moment, we implemented those functions one by one. Now we are
    going to adopt the same approach.
  prefs: []
  type: TYPE_NORMAL
- en: Before building up the skeleton for the *COVID* app, let us just add a couple
    of other decorations to our app – for example, some text just below the title
    and an image in the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code with the two new lines of code is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7: Text below the title and sidebar creation](img/B21147_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: Text below the title and sidebar creation'
  prefs: []
  type: TYPE_NORMAL
- en: As we already know, the code in the third line is responsible for the web application
    configuration, setting the page title (`Covid-19 Detection Tool`), page icon (`covid19.jpeg
    image`), and page layout (`centered`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The result produced on the web side is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8: Image in the sidebar and text below the title](img/B21147_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: Image in the sidebar and text below the title'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add to the sidebar a very important widget: `file_uploader`. The
    instruction we will use is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As we can see on the web-side, `image_file`. The first argument is just a label
    (the text `type`) contains a list with the types of files users are enabled to
    select.
  prefs: []
  type: TYPE_NORMAL
- en: Immediately after `file_uploader`, it’s a good idea to insert a check (an `if`
    clause) just to be sure that an image has been uploaded and, only in this case,
    to open it (leveraging the `Pillow` library we imported at the beginning).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have the image, and only when the image we uploaded can be opened,
    we can perform some other actions – for example, an `if` clause inside the previous
    one. So, finally, our code inside the main function will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9: How to manage the image](img/B21147_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.9: How to manage the image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Very easily, we can select an image and when we click on the **Image Preview**
    button, we can see it on the screen, in the sidebar, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10: Image upload and preview in the sidebar](img/B21147_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.10: Image upload and preview in the sidebar'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have a complete app skeleton and are able to upload and show
    an image in the sidebar. We are now ready to build up the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Building the menu and adding decorations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we can add a selectbox in the sidebar, which will be the menu of the web
    application, and guidelines for its development. This menu will have three voices
    – `if` clause, the inner one, because it makes sense only if a valid image has
    already been uploaded. For sure, after the selectbox, we can place the three options
    (three `if` clauses) that will contain the code for each one of the menu voices.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already built up a menu in the same way in the NLP web application;
    the code is very easy:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.11: The menu (choice) and its voice\uFEFF sections](img/B21147_08_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.11: The menu (choice) and its voice sections'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what we are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: At *line 38*, we create a list containing all the menu voices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, at *line 39*, we add a selectbox in the sidebar in order to visualize
    all the items contained in this list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After that, from *line 41* up to *line 48*, we double-check which one of menu’s
    voices has been selected and just print the information on the screen – for example,
    `st.subheader` (`pass`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The messages we print with the `st.subheader` or `pass` function (it’s just
    a function doing nothing) are simple placeholders and, in the next chapters, we
    are going to develop the code related to each one of them. Here’s how the app’s
    menu looks thus far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12: The menu in the browser](img/B21147_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.12: The menu in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a final decoration, before closing the chapter, we can add an **About the
    Author** button on the sidebar, showing in this way all the information about
    the author of the web application, the link to their website, their email, and
    so on. This is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13: About the Author button code](img/B21147_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.13: About the Author button code'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the effect in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14: About the Author details](img/B21147_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.14: About the Author details'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we created the menu for our new web application. Now, in the
    sidebar, there are several voices, and the user can clearly select what they want
    to do. This approach is very useful since it can be applied anytime we start working
    on a new app. On the left side, in the sidebar, we have a menu with the list of
    all the features available in the web application, and in the main part, we show
    the title and information and let the user insert data from their case.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we consolidated our knowledge about virtual environments and
    package installation. After that, as usual, we started from an empty file and
    developed the skeleton of our app.
  prefs: []
  type: TYPE_NORMAL
- en: First, we imported all the libraries and created a main function. We also created
    some nice decorations such as a title in html, a beautiful icon, and a very interesting
    image in the sidebar. We also discovered how to upload files by filtering their
    types and, once imported, we learned how to visualize those images thanks to the
    `Pillow` library.
  prefs: []
  type: TYPE_NORMAL
- en: Another important step was to build up the menu of our app with all its voices
    and, at the end, we created a button showing all the information about the author,
    with some linkable elements, such as their website and email address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from the next chapter, we will focus on developing the three voices
    of the menu, which,, at the moment, are just empty containers: **Image Enhance**,
    **Diagnosis**, and **Disclaimer** **and Info**.'
  prefs: []
  type: TYPE_NORMAL
