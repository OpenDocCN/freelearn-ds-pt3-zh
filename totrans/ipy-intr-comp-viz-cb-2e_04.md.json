["```py\n    In [1]: n = 100000\n    ```", "```py\n    In [2]: %timeit sum([1\\. / i**2 for i in range(1, n)])\n    10 loops, best of 3: 131 ms per loop\n    ```", "```py\n    In [3]: %%timeit s = 0.\n            for i in range(1, n):\n                s += 1\\. / i**2\n    10 loops, best of 3: 137 ms per loop\n    ```", "```py\n    In [4]: import numpy as np\n    In [5]: %timeit np.sum(1\\. / np.arange(1., n) ** 2)\n    1000 loops, best of 3: 1.71 ms per loop\n    ```", "```py\n    In [1]: import numpy as np\n            import matplotlib.pyplot as plt\n    In [2]: %matplotlib inline\n    ```", "```py\n    In [3]: def step(*shape):\n                # Create a random n-vector with +1 or -1\n                # values.\n                return 2 * (np.random.random_sample(shape) \n                            < .5) - 1\n    ```", "```py\n    In [4]: %%prun -s cumulative -q -l 10 -T prun0\n            n = 10000\n            iterations = 50\n            x = np.cumsum(step(iterations, n), axis=0)\n            bins = np.arange(-30, 30, 1)\n            y = np.vstack([np.histogram(x[i,:], bins)[0]\n                           for i in range(iterations)])\n    ```", "```py\n    In [5]: print(open('prun0', 'r').read())\n                 2960 function calls in 0.075 seconds\n    Ordered by: cumulative time\n    ncalls  cumtime  percall function\n        50    0.037    0.001 histogram\n         1    0.031    0.031 step\n        50    0.024    0.000 sort\n         1    0.019    0.019 rand\n         1    0.005    0.005 cumsum\n    ```", "```py\n       29510 function calls in 1.359 seconds\n       ncalls  cumtime  percall function\n          500    0.566    0.001 histogram\n            1    0.388    0.388 cumsum\n            1    0.383    0.383 step\n          500    0.339    0.001 sort\n            1    0.241    0.241 rand\n    ```", "```py\n    $ python -m cProfile -o profresults myscript.py\n\n    ```", "```py\n    import pstats\n    p = pstats.Stats('profresults')\n    p.strip_dirs().sort_stats(\"cumulative\").print_stats()\n    ```", "```py\n    In [1]: import numpy as np\n    In [2]: %load_ext line_profiler\n    ```", "```py\n    In [3]: %%writefile simulation.py\n            import numpy as np \n            def step(*shape):\n                # Create a random n-vector with +1 or -1 \n                # values.\n                return (2 * (np.random.random_sample(shape) \n                             < .5) - 1)\n            def simulate(iterations, n=10000): \n                s = step(iterations, n)\n                x = np.cumsum(s, axis=0)\n                bins = np.arange(-30, 30, 1)\n                y = np.vstack([np.histogram(x[i,:], bins)[0] \n                               for i in range(iterations)])\n                return y\n    ```", "```py\n    In [4]: import simulation\n    ```", "```py\n    In [5]: %lprun -T lprof0 -f simulation.simulate simulation.simulate(50)\n    ```", "```py\n    In [6]: print(open('lprof0', 'r').read())\n    File: simulation.py\n    Function: simulate at line 7\n    Total time: 0.114508 s\n    Line #   % Time  Line Contents\n         7           def simulate(iterations, n=10000):\n         8    36.3       s = step(iterations, n)\n         9     5.6       x = np.cumsum(s, axis=0)\n        10     0.1       bins = np.arange(-30, 30, 1)\n        11    58.1       y = np.vstack([np.histogram(...)])\n        12     0.0       return y\n    ```", "```py\n    Total time: 1.28704 s\n         7           def simulate(iterations, n=10000):\n         8    29.2       s = step(iterations, n)\n         9    30.9       x = np.cumsum(s, axis=0)\n        10     0.0       bins = np.arange(-30, 30, 1)\n        11    39.9       y = np.vstack([np.histogram(...)])\n        12     0.0       return y\n    ```", "```py\n    @profile\n    def thisfunctionneedstobeprofiled():\n        pass\n    ```", "```py\n    python -m kernprof -l -v myscript.py > lprof.txt\n\n    ```", "```py\n    In [9]: %load_ext memory_profiler\n    ```", "```py\n    In [10]: %mprun -T mprof0 -f simulation.simulate simulation.simulate(50)\n    ```", "```py\n    In [11]: print(open('mprof0', 'r').read())\n    Filename: simulation.py\n    Line #    Mem usage  Increment   Line Contents\n         7    39.672 MB  0.000 MB   def simulate(...):\n         8    41.977 MB  2.305 MB       s = step(iterations, n)\n         9    43.887 MB  1.910 MB       x = np.cumsum(...)\n        10    43.887 MB  0.000 MB       bins = np.arange(...)\n        11    43.887 MB  0.000 MB       y = np.vstack(...)\n        12    43.887 MB  0.000 MB       return y\n    ```", "```py\n    Line #    Mem usage Increment   Line Contents\n         7    40.078 MB  0.000 MB   def simulate(...):\n         8    59.191 MB 19.113 MB       s = step(iterations, n)\n         9    78.301 MB 19.109 MB       x = np.cumsum(...)\n        10    78.301 MB  0.000 MB       bins = np.arange(...)\n        11    78.301 MB  0.000 MB       y = np.vstack(...)\n        12    78.301 MB  0.000 MB       return y\n    ```", "```py\n    $ python -m memory_profiler myscript.py > mprof.txt\n\n    ```", "```py\nIn [14]: %memit np.random.randn(1000, 1000)\nmaximum of 1: 46.199219 MB per loop\n```", "```py\ndef id(x):\n    # This function returns the memory\n    # block address of an array.\n    return x.__array_interface__['data'][0]\n```", "```py\nIn [1]: id(a), id(a[1:])\nOut[1]: (71211328, 71211336)\n```", "```py\nIn [2]: def get_data_base(arr):\n            \"\"\"For a given Numpy array, finds the\n            base array that \"owns\" the actual data.\"\"\"\n            base = arr\n            while isinstance(base.base, np.ndarray):\n                base = base.base\n            return base\n\n        def arrays_share_data(x, y):\n            return get_data_base(x) is get_data_base(y)\n\nIn [3]: print(arrays_share_data(a,a.copy()),\n              arrays_share_data(a,a[1:]))\nFalse True\n```", "```py\n    In [3]: a = np.zeros(10); aid = id(a); aid\n    Out[3]: 65527008L\n    In [4]: b = a.copy(); id(b) == aid\n    Out[4]: False\n    ```", "```py\n    In [5]: a *= 2; id(a) == aid\n    Out[5]: True\n    In [6]: a = a*2; id(a) == aid\n    Out[6]: False\n    ```", "```py\n    In [7]: %%timeit a = np.zeros(10000000)\n            a *= 2\n    10 loops, best of 3: 23.9 ms per loop\n    In [8]: %%timeit a = np.zeros(10000000)\n            a = a*2\n    10 loops, best of 3: 77.9 ms per loop\n    ```", "```py\n    In [9]: a = np.zeros((10, 10)); aid = id(a)\n    In [10]: b = a.reshape((1, -1)); id(b) == aid\n    Out[10]: True\n    In [11]: c = a.T.reshape((1, -1)); id(c) == aid\n    Out[11]: False\n    ```", "```py\n    In [12]: d = a.flatten(); id(d) == aid\n    Out[12]: False\n    In [13]: e = a.ravel(); id(e) == aid\n    Out[13]: True\n    In [14]: %timeit a.flatten()\n    1000000 loops, best of 3: 1.65 µs per loop\n    In [15]: %timeit a.ravel()\n    1000000 loops, best of 3: 566 ns per loop\n    ```", "```py\n    In [16]: n = 1000\n    In [17]: a = np.arange(n)\n             ac = a[:, np.newaxis]  # Column vector.\n             ar = a[np.newaxis, :]  # Row vector.\n    In [18]: %timeit np.tile(ac, (1, n)) * np.tile(ar, (n, 1))\n    10 loops, best of 3: 25 ms per loop\n    In [19]: %timeit ar * ac\n    100 loops, best of 3: 4.63 ms per loop\n    ```", "```py\noffset = array.strides[0] * i1 + array.strides[1] * i2\n```", "```py\nIn [20]: a = np.random.rand(5000, 5000)\nIn [21]: %timeit a[0,:].sum()\n100000 loops, best of 3: 17.9 µs per loop\nIn [22]: %timeit a[:,0].sum()\n10000 loops, best of 3: 60.6 µs per loop\n```", "```py\n    In [3]: x = np.zeros(10); x.strides\n    Out[3]: (8,)\n    ```", "```py\n    In [4]: y = np.zeros((10, 10)); y.strides\n    Out[4]: (80, 8)\n    ```", "```py\n    In [5]: n = 1000; a = np.arange(n)\n    ```", "```py\n    In [6]: b = np.lib.stride_tricks.as_strided(a, (n, n), \n                                               (0, 4))\n    Out[7]: array([[ 0, 1, 2, ..., 997, 998, 999],\n                 ..., \n                 [ 0, 1, 2, ..., 997, 998, 999]])\n    In [8]: b.size, b.shape, b.nbytes\n    Out[8]: (1000000, (1000, 1000), 4000000)\n    ```", "```py\n    In [9]: %timeit b * b.T\n    100 loops, best of 3: 5.03 ms per loop\n    In [10]: %timeit np.tile(a, (n, 1)) \\\n                   * np.tile(a[:, np.newaxis], (1, n))\n    10 loops, best of 3: 28 ms per loop\n    ```", "```py\n    In [1]: import numpy as np\n            from numpy.lib.stride_tricks import as_strided\n    In [2]: n = 5; k = 2\n    In [3]: a = np.linspace(1, n, n); aid = id(a)\n    ```", "```py\n    In [4]: as_strided(a, (k, n), (8, 8))\n    Out[4]: array([[ 1e+00,  2e+00,  3e+00,  4e+00,  5e+00],\n                   [ 2e+00,  3e+00,  4e+00,  5e+00, -1e-23]])\n    ```", "```py\n    In [5]: as_strided(a, (k, n-k+1), (8, 8))\n    Out[5]: array([[ 1.,  2.,  3.,  4.],\n                   [ 2.,  3.,  4.,  5.]])\n    ```", "```py\n    In [6]: def shift1(x, k):\n                return np.vstack([x[i:n-k+i+1] for i in \n                                  range(k)])\n    In [7]: def shift2(x, k):\n                return as_strided(x, (k, n-k+1), \n                                  (x.itemsize,)*2)\n    ```", "```py\n    In [8]: b = shift1(a, k); b, id(b) == aid\n    Out[8]: (array([[ 1.,  2.,  3.,  4.],\n                    [ 2.,  3.,  4.,  5.]]), False) \n    In [9]: c = shift2(a, k); c, id(c) == aid\n    Out[9]: (array([[ 1.,  2.,  3.,  4.],\n                    [ 2.,  3.,  4.,  5.]]), True)\n    ```", "```py\n    In [10]: n, k = 100, 10\n             t = np.linspace(0., 1., n)\n             x = t + .1 * np.random.randn(n)\n    ```", "```py\n    In [11]: y = shift2(x, k)\n             x_avg = y.mean(axis=0)\n    ```", "```py\n    In [15]: %timeit shift1(x, k)\n    10000 loops, best of 3: 163 µs per loop\n    In [16]: %%timeit y = shift1(x, k)\n             z = y.mean(axis=0)\n    10000 loops, best of 3: 63.8 µs per loop\n    ```", "```py\n    In [17]: %timeit shift2(x, k)\n    10000 loops, best of 3: 23.3 µs per loop\n    In [18]: %%timeit y = shift2(x, k)\n             z = y.mean(axis=0)\n    10000 loops, best of 3: 35.8 µs per loop\n    ```", "```py\n    In [3]: n, d = 100000, 100\n    In [4]: a = np.random.random_sample((n, d)); aid = id(a)\n    ```", "```py\n    In [5]: b1 = a[::10]\n            b2 = a[np.arange(0, n, 10)]\n    In [6]: np.array_equal(b1, b2)\n    Out[6]: True\n    ```", "```py\n    In [7]: id(b1) == aid, id(b2) == aid\n    Out[7]: (True, False)\n    ```", "```py\n    In [8]: %timeit a[::10]\n    100000 loops, best of 3: 2.03 µs per loop\n    In [9]: %timeit a[np.arange(0, n, 10)]\n    10 loops, best of 3: 46.3 ms per loop\n    ```", "```py\n    In [10]: i = np.arange(0, n, 10)\n    In [11]: b1 = a[i]\n             b2 = np.take(a, i, axis=0)\n    In [12]: np.array_equal(b1, b2)\n    Out[12]: True\n    ```", "```py\n    In [13]: %timeit a[i]\n    10 loops, best of 3: 50.2 ms per loop\n    In [14]: %timeit np.take(a, i, axis=0)\n    100 loops, best of 3: 11.1 ms per loop\n    ```", "```py\n    In [15]: i = np.random.random_sample(n) < .5\n    In [16]: b1 = a[i]\n             b2 = np.compress(i, a, axis=0) \n    In [17]: np.array_equal(b1, b2)\n    Out[17]: True\n    In [18]: %timeit a[i]\n    1 loops, best of 3: 286 ms per loop\n    In [19]: %timeit np.compress(i, a, axis=0)\n    10 loops, best of 3: 41.3 ms per loop\n    ```", "```py\n    In [1]: import numpy as np\n    In [2]: nrows, ncols = 1000000, 100\n    In [3]: f = np.memmap('memmapped.dat', dtype=np.float32, \n                          mode='w+', shape=(nrows, ncols))\n    ```", "```py\n    In [4]: for i in range(ncols):\n                f[:,i] = np.random.rand(nrows)\n    ```", "```py\n    In [5]: x = f[:,-1]\n    ```", "```py\n    In [6]: del f\n    ```", "```py\n    In [7]: f = np.memmap('memmapped.dat', dtype=np.float32,\n                          shape=(nrows, ncols))\n    In [8]: np.array_equal(f[:,-1], x)\n    Out[8]: True\n    In [9]: del f\n    ```", "```py\n    In [1]: import numpy as np\n            import tables as tb\n    ```", "```py\n    In [2]: f = tb.open_file('myfile.h5', 'w')\n    ```", "```py\n    In [3]: f.create_group('/', 'experiment1')\n    Out[3]: /experiment1 (Group) u''\n      children := []\n    ```", "```py\n    In [4]: f.set_node_attr('/experiment1', 'date', '2014-09-01')\n    ```", "```py\n    In [5]: x = np.random.rand(1000, 1000)\n            f.create_array('/experiment1', 'array1', x)\n    Out[5]: /experiment1/array1 (Array(1000L, 1000L))\n    ```", "```py\n    In [6]: f.close()\n    ```", "```py\n    In [7]: f = tb.open_file('myfile.h5', 'r')\n    ```", "```py\n    In [8]: f.get_node_attr('/experiment1', 'date')\n    Out[8]: '2014-09-01'\n    ```", "```py\n    In [9]: y = f.root.experiment1.array1  \n            # /experiment1/array1\n            type(y)\n    Out[9]: tables.array.Array\n    ```", "```py\n    In [10]: np.array_equal(x[0,:], y[0,:])\n    Out[10]: True\n    ```", "```py\n    In [11]: f.get_node('/experiment1/array1')\n    Out[11]: /experiment1/array1 (Array(1000, 1000))\n    ```", "```py\n    In [12]: f.close()\n    In [13]: import os\n             os.remove('myfile.h5')\n    ```", "```py\n    In [1]: import numpy as np\n            import tables as tb\n    ```", "```py\n    In [2]: f = tb.open_file('myfile.h5', 'w')\n    ```", "```py\n    In [3]: dtype = np.dtype([('city','S64'),\n                              ('population', 'i4')])\n    ```", "```py\n    In [4]: table = f.create_table('/', 'table1', dtype)\n    ```", "```py\n    In [5]: table.append([('Brussels', 1138854),\n                          ('London',   8308369),\n                          ('Paris',    2243833)])\n    ```", "```py\n    In [6]: table.flush()\n    ```", "```py\n    In [7]: table[:]\n    Out[7]: array([('Brussels', 1138854),\n                   ('London', 8308369), \n                   ('Paris', 2243833)], \n                   dtype=[('city', 'S64'), \n                          ('population', '<i4')])\n    ```", "```py\n    In [8]: table.col('city')\n    Out[8]: array(['Brussels', 'London', 'Paris'],\n                  dtype='|S64')\n    ```", "```py\n    In [9]: [row['city'] for row in \n             table.where('population>2e6')]\n    Out[9]: ['London', 'Paris']\n    ```", "```py\n    In [10]: table[1]\n    Out[10]: ('London', 8308369)\n    ```"]