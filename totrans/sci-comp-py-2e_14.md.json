["```py\n# creating a new file object from an existing file\nmyfile = open('measurement.dat','r')\n```", "```py\nprint(myfile.read())\n```", "```py\nmyfile.close() # closes the file object\n```", "```py\nwith open('measurement.dat','r') as myfile: \n     ... # use myfile here\n```", "```py\nmyfile = open(name,'w')\nmyfile.write('some data')\na = 1/0\nmyfile.write('other data')\nmyfile.close()\n```", "```py\nwith open(name,'w') as myfile:\n    myfile.write('some data')\n    a = 1/0\n    myfile.write('other data')\n```", "```py\nwith open(name,'r') as myfile:\n    for line in myfile:\n        data = line.split(';')\n        print(f'time {data[0]} sec temperature {data[1]} C')\n```", "```py\ndata = 'aa;bb;cc;dd;ee;ff;gg'\ndata.split(';') # ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg']\n\ndata = 'aa bb cc dd ee ff gg'\ndata.split(' ') # ['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg']\n```", "```py\ndata = list(myfile)\n```", "```py\nwith open('file1.dat','r') as ...  # read only\nwith open('file2.dat','r+') as ...  # read/write\nwith open('file3.dat','rb') as ...  # read in byte mode  \nwith open('file4.dat','a') as ...  # append (write to the end of the file)\nwith open('file5.dat','w') as ... # (over-)write the file\nwith open('file6.dat','wb') as ... # (over-)write the file in byte mode\n```", "```py\n_with open('file3.dat','a') as myfile:\n    myfile.write('something new\\n')\n```", "```py\nsavetxt(filename,data)\n```", "```py\nx = range(100) # 100 integers\nsavetxt('test.txt',x,delimiter=',') # use comma instead of space\nsavetxt('test.txt',x,fmt='%d') # integer format instead of float with e\n```", "```py\nfilename = 'test.txt'\ndata = loadtxt(filename)\n```", "```py\ndata = loadtxt('test.txt',delimiter=';')    # data separated by semicolons\n\n# read to integer type, comments in file begin with a hash character\ndata = loadtxt('test.txt',dtype=int,comments='#')\n```", "```py\nimport pickle\nwith open('file.dat','wb') as myfile:\n    a = random.rand(20,20)\n    b = 'hello world'\n    pickle.dump(a,myfile)    # first call: first object\n    pickle.dump(b,myfile)    # second call: second object\n\nimport pickle\nwith open('file.dat','rb') as myfile:\n    numbers = pickle.load(myfile) # restores the array\n    text = pickle.load(myfile)    # restores the string\n```", "```py\na = [1,2,3,4]\npickle.dumps(a) # returns a bytes object\nb = {'a':1,'b':2}\npickle.dumps(b) # returns a bytes object\n```", "```py\nfrom contextlib import closing\nimport shelve as sv\n# opens a data file (creates it before if necessary)\nwith closing(sv.open('datafile')) as data:\n    A = array([[1,2,3],[4,5,6]])     \n    data['my_matrix'] = A  # here we created a key\n```", "```py\nfrom contextlib import closing\nimport shelve as sv\nwith closing(sv.open('datafile')) as data: # opens a data file\n    A = data['my_matrix']  # here we used the key\n    ...\n```", "```py\nimport scipy.io\ndata = scipy.io.loadmat('datafile.mat')\n```", "```py\ndata = {}\ndata['x'] = x\ndata['y'] = y\nscipy.io.savemat('datafile.mat',data)\n```", "```py\nimport PIL.Image as pil   # imports the Pillow module\n\n# read image to array\nim=pil.open(\"test.jpg\")\nprint(im.size)   # (275, 183)  \n                 # Number of pixels in horizontal and vertical directions\n# resize image\nim_big = im.resize((550, 366))\nim_big_gray = im_big.convert(\"L\") # Convert to grayscale\n\nim_array=array(im)\n\nprint(im_array.shape)\nprint(im_array.dtype)   # unint 8\n# write result to new image file\nim_big_gray.save(\"newimage.jpg\")\n```", "```py\nnew_image = pil.from_array(ima_array)\n```"]