- en: '*Chapter 7*: Exploring Streamlit Components'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Streamlit has a full-time team of developers working on new features but also
    thrives because it is open to community-driven development. Undoubtedly, there
    will be community members who want a specific feature that did not make it onto
    the roadmap of priorities. Streamlit Components allow them the flexibility to
    go out and make it themselves, and immediately use their idea in their own Streamlit
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Our priority in this chapter is to learn how to find and use community-made
    Streamlit Components. For that, we will run through three excellent Streamlit
    apps, one to learn how to embed code into our Streamlit apps, another for adding
    beautiful animations to them, and a third to embed easy automated **exploratory
    data analysis** (**EDA**) to Streamlit apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Streamlit Components: `streamlit-embedcode`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using Streamlit Components: `streamlit-lottie`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using Streamlit Components: `streamlit-pandas-profiling`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding more components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at the technical requirements in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can work with new Streamlit Components, we need to download them
    first. We can download each using `pip` (or any other package manager), just as
    we did with Streamlit in [*Chapter 1*](B16864_01_Final_VK_ePub.xhtml#_idTextAnchor014),
    *An* *Introduction to Streamlit*. These are the components to be downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '`streamlit-embedcode`: To download this library, run the following code in
    your terminal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`streamlit-embedcode` makes it easy to import code blocks from other locations
    (such as a GitHub gist) and show them directly in your apps, and was created by
    Randy Zwitch, a Streamlit employee.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`streamlit-lottie`: To download this library, run the following code in your
    terminal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`streamlit-lottie` uses the `lottie` open source library to allow us to add
    web-native animations (such as a **Graphics Interchange Format** (**GIF**) file)
    into our Streamlit apps. It is frankly a wonderful library for beautifying Streamlit
    apps and was created by Andy Fanilo, a prolific Streamlit app creator.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`streamlit-pandas-profiling`: To download this library, run the following code
    in your terminal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The popular `pandas` Python library is the standard Python data analysis library
    and often tops the list of the most popular and useful Python libraries for data
    scientists. `pandas-profiling` creates an automatically generated EDA on top of
    any DataFrame we create and shows us everything, from descriptive statistics to
    how many duplicate rows we have. It was created by a Streamlit user who goes by
    the name of *Okld* on GitHub ([https://github.com/okld](https://github.com/okld)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the three libraries installed, we can move on to learning
    about the first one: `streamlit-embedcode`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Streamlit Components – streamlit-embedcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to display code on Streamlit, we can easily just treat the code as
    text and use the familiar `st.write()`, which takes text as input, or `st.markdown()`,
    which takes markdown as input. This might work well for small snippets but will
    be a struggle to format easily, and may not look good for the average user or
    longer bits of code. As a result, `streamlit-embedcode` was created to help solve
    this problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Showing snippets of code to others is a commonly solved problem; a few solutions
    that are out there include sharing snippets with GitHub gists (which are like
    mini GitHub repositories with only one text file) with GitLab snippets (which
    are the same as gists but for GitLab) and using Pastebin, which is a shared text/code
    snippets freeway outside of GitHub/GitLab. Now, we can make a Python file with
    some example Streamlit code, put it in a GitHub gist, and call it from a new Streamlit
    app. To do so, we''ll follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For each of these options, we will start by making a quick Streamlit app that
    just exists to show users the code behind the `Palmer''s Penguins` Streamlit app.
    We can house this app in its own `component_example` folder using the following
    code from our `streamlit_apps` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to navigate to [https://gist.github.com/](https://gist.github.com/)
    to create our very own gist. After we sign in to GitHub, we need to title the
    gist and then paste our code from `Palmer''s Penguins` to copy it to the following
    code block (which includes a brief explanation in the middle of it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This first section imports our libraries, adds some text for a title, gathers
    some inputs from the user, and downloads the right dataset. Now, we would just
    like to make a scatterplot graph, and then that will conclude the code that goes
    into our gist. Again, the exact code here does not actually matter because it
    does not execute within a gist—it is instead a prettier way to send code to others.
    The following code snippet illustrates the process:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we should have a GitHub gist that looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.1 – GitHub gist example'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16864_07_1.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.1 – GitHub gist example
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When we save our GitHub gist, we can link directly to it from within our Streamlit
    apps. In the `gist_example.py` Python file, we need to import the `github_gist()`
    function from our new library and use it on the GitHub gist we just created. The
    following code does this for my own gist, but you should replace the gist link
    with your own:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if we ever need to edit the code in the gist, we can instead edit the
    underlying gist and the Streamlit apps will update automatically. When we start
    up our Streamlit apps held in `gist_example.py`, we will get the following Streamlit
    app:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Streamlit apps with GitHub gist'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_07_2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Streamlit apps with GitHub gist
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For any public Streamlit apps, we can always simply access the source code for
    the app in the **Settings** tab. So, this method is not very useful for showing
    the code behind the Streamlit apps as this is already built-in, but is more useful
    for showing often-used code blocks such as a generic bit of code to make a **machine
    learning** (**ML**) model or a more generic **Structured Query Language** (**SQL**)
    query that users may learn from.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's switch over to learning about how to add beautiful animations to
    our app using `streamlit-lottie`!
  prefs: []
  type: TYPE_NORMAL
- en: Using Streamlit Components – streamlit-lottie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we talked about at the beginning of this chapter, `lottie` is a web-native,
    open source library created by *Airbnb* to make putting animations on your website
    just as easy as putting static images on it. It is very common for large, profitable
    tech companies to put out open source software as a way of giving back to the
    developer community (or, more likely, to recruit developers who think their software
    is cool), and this is no exception. In this case, `streamlit-lottie` wraps around
    `lottie` files and places them directly into our Streamlit apps.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we first need to import the `streamlit-lottie` library, and then
    point the `st_lottie()` function to our `lottie` file. We can either import a
    local `lottie` file or, more likely, we can find a useful animation file on the
    free site ([https://lottiefiles.com/](https://lottiefiles.com/)) and load it from
    there into our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this out, we can add a cute penguin animation ([https://lottiefiles.com/39646-cute-penguin](https://lottiefiles.com/39646-cute-penguin))
    to the top of the Penguins app we created earlier in [*Chapter 4*](B16864_04_Final_VK_ePub.xhtml#_idTextAnchor049),
    *Using Machine Learning with Streamlit*. In our new `components_example` folder,
    we can add a new `penguin_animated.py` file using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in this new file, we can make this new app. The following code block
    makes a function, as shown in the example from the `streamlit-lottie` library
    ([https://github.com/andfanilo/streamlit-lottie](https://github.com/andfanilo/streamlit-lottie)),
    that allows us to load `lottie` files from the URL and then loads this animation
    at the top of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous section of code uses the `requests` library to define a function
    that we can use to load `lottie` files from a link. In this case, I have pre-filled
    a link that takes us to a cute penguin animation. We can then load our file using
    our new function, and call that file using the `st_lottie()` function we imported
    from our `streamlit-lottie` library. Next, we can finish out the app with our
    previously defined user inputs and scatterplot. The code is illustrated in the
    following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block will create the following app, which is simply our *Palmer''s
    Penguins* app with the cute penguin animation on top (the app has been cropped
    for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Adorable penguin animation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_07_3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Adorable penguin animation
  prefs: []
  type: TYPE_NORMAL
- en: '`streamlit-lottie` also allows us to change the animation speed, width, and
    height through the `speed`, `width`, and `height` parameters respectively. If
    the animation goes too slowly for your taste, increase the speed to a number such
    as `1.5` or `2`, which will increase the speed by 50% or 100%. The `height` and
    `width` parameters, however, are the pixel height/width of the animation and default
    to the native size of the animation (the penguin animation is ~700 pixels by ~400
    pixels, for example). In the following code block, we change the speed, width,
    and height of our animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code block is the same as for the other app but instead, we have
    changed the speed, width, and height of our animation to `1.5`, `800`, and `400`.
    It takes a while to get used to how these inputs interact, as animations can have
    different sizes and speeds! You can see the different settings being applied here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When we make the penguin animation much larger by increasing the width and
    height in comparison to the previous version, we see the impact on the animation
    size, as illustrated in the following screenshot. When you run this yourself,
    you will also notice the animation speed increase as well. I would strongly encourage
    running this app, as the penguin animation is really quite adorable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Final penguin animation app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_07_4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Final penguin animation app
  prefs: []
  type: TYPE_NORMAL
- en: And that completes our tour of `streamlit-lottie`! I have started getting into
    the habit of putting a nice animation at the top of each and every Streamlit apps
    I create—it creates a sense of design that makes Streamlit apps feel more purposeful,
    and immediately alerts the user to the fact that this is not a static document
    but instead a dynamic and interactive application. Now, let's move on to `pandas-profiling`!
  prefs: []
  type: TYPE_NORMAL
- en: Using Streamlit Components – streamlit-pandas-profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pandas-profiling` is a very powerful Python library that automates some of
    the EDA that is often the first step in any data analysis, modeling, or even data
    engineering task. Before a data scientist begins almost any data work, they want
    to start with a good understanding of the distributions of their underlying data,
    the number of missing rows, correlations between variables, and many other basic
    pieces of information. As we mentioned before, this library automates the process
    and then places this interactive analytics document into a Streamlit app for the
    user.'
  prefs: []
  type: TYPE_NORMAL
- en: Behind the Streamlit component called `pandas-profiling`, there is a full Python
    library with the same name that the component imports its functions from. The
    Streamlit component here actually renders the output from the `pandas-profiling`
    Python library in a way that becomes very easy to integrate. For this segment,
    we will first learn how to implement the library, and then explore the generated
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, we will actually continue with our code from the previous
    section on Palmer''s Penguins and add our automatically generated profile to the
    bottom of the app. The code for this is only a few lines—we need to generate a
    report for our dataset and then use the Streamlit component to add it to our app.
    The next code block imports the necessary libraries, and then creates and adds
    to our app a profile based on the `penguins_df` variable we have defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This section uses the same `streamlit-lottie` library but also loads the `pandas_profiling`
    and `streamlit-pandas-profiling` library for our use. This is a good lesson—we
    can treat Streamlit Components as unique Lego blocks, combining them at will to
    create new and interesting Streamlit applications. The following section reads
    in our DataFrame and adds a pandas profile to our dataset! Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting app contains this profile, which starts with an overview that
    contains information on the number of variables, any warnings about the dataset
    (for example, we are warned that some rows are missing gender information for
    our penguin dataset), and other base information. The following screenshot shows
    the top section of the profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – pandas profile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_07_5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – pandas profile
  prefs: []
  type: TYPE_NORMAL
- en: 'I would strongly encourage you to try out this component yourself and see the
    massive amount of information generated from these couple of lines of code. It
    includes histograms and basic statistics about each variable, sample rows from
    the beginning and end of the dataset, and even a correlation matrix with an explanation
    of a few different correlation variables. The following screenshot shows the correlation
    section output for our penguin dataset—we can immediately see that body mass is
    positively correlated with the flipper length of our penguins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Pearson''s correlation coefficient'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16864_07_6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Pearson's correlation coefficient
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Try this out yourself to see the full spectrum of colors.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you now have a solid understanding of how to use this component to
    add EDA, which should help if you are inviting users to bring their own dataset,
    as in the penguin example.
  prefs: []
  type: TYPE_NORMAL
- en: Finding more components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These three components are a tiny percentage of all the components the community
    has created, and by the time you may be reading this, I am sure the number of
    components out there will be dramatically higher. The best place to find new and
    interesting components is on either the Streamlit website at [https://streamlit.io/gallery?type=components&category=featured](https://streamlit.io/gallery?type=components&category=featured)
    or the discussion forums at [https://discuss.streamlit.io/tag/custom-components](https://discuss.streamlit.io/tag/custom-components).
    When you find a component that you think is interesting, try it out by downloading
    it with `pip` as we did earlier, and read enough documentation to get started!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, I hope you feel very comfortable downloading and using Streamlit
    Components, which you have learned about here, as well as comfortable with finding
    new Streamlit components created by the community. You should also understand
    how to add GitHub gist examples, Lottie animations, and automatic `pandas-profiling`
    features to the apps you build.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive more deeply into deploying your own Streamlit
    apps with a cloud provider such as **Amazon Web Services** (**AWS**).
  prefs: []
  type: TYPE_NORMAL
