["```py\nsum?\n\n```", "```py\n%pylab inline\n\n```", "```py\n    def return_on_investment(principal, interest_rate, number_of_years):\n     return principal * e ** (interest_rate * number_of_years)\n\n    ```", "```py\n    principal = 250\n    interest_rate = .034\n    tstart = 0.0\n    tend = 5.0\n    npoints = 6\n\n    ```", "```py\n    tvalues = linspace(tstart, tend, npoints)\n    amount_values = return_on_investment(principal, interest_rate, tvalues)\n    plot(tvalues, amount_values, 'o')\n    title('Return on investment, years {} to {}'.format(tstart, tend))\n    xlabel('Years')\n    ylabel('Return')\n    tstart += tend\n    tend += tend\n\n    ```", "```py\n    tstart += tend\n    tend += tend\n\n    ```", "```py\nprint am\n\n```", "```py\nlinspace\n\n```", "```py\nWe want to know how an investment grows with a fixed interest.\n\nThe *compound interest* formula states that:\n$$R = Pe^{rt}$$\nwhere:\n\n- $P$ is the principal (initial investment).\n- $r$ is the annual interest rate, as a decimal.\n- $t$ is the time in years.\n- $e$ is the base of natural logarithms.\n- $R$ is the total return after $t$ years (including principal)\n\nFor details, see the [corresponding Wikipedia entry](http://en.wikipedia.org/wiki/Compound_interest).\n\nWe start by defining a Python function that implements this formula.\n```", "```py\n%timeit return_on_investment(principal, interest_rate, tvalues)\n\n```", "```py\n100000 loops, best of 3: 3.73 µs per loop\n\n```", "```py\nprincipal = 250\ninterest_rates = [0.0001 * i for i in range(100000)]\ntfinal = 10\n\n```", "```py\n%%timeit\nreturns = []\nfor r in interest_rates:\n returns.append(return_on_investment(principal, r, tfinal))\n\n```", "```py\n10 loops, best of 3: 31.6 ms per loop\n\n```", "```py\nprincipal = 250\ninterest_rates = arange(0, 10, 0.0001)\ntfinal = 10\n\n```", "```py\n%%timeit\nreturns = return_on_investment(principal, interest_rates, tfinal)\n\n```", "```py\n100 loops, best of 3: 5.53 ms per loop\n\n```", "```py\n%lsmagic\n\n```", "```py\nimport math\ndef sin_area(a, b, nintervals):\n dx = (b-a)/nintervals\n sleft = 0.0\n sright = 0.0\n for i in range(nintervals):\n sleft += math.sin(a + i * dx)\n sright += math.sin(a + (i + 1) * dx)\n return dx * (sright + sleft) / 2 \n\n```", "```py\nsin_area(0, pi, 10000)\n\n```", "```py\n1.9999999835506606\n\n```", "```py\n%timeit sin_area(0, pi, 10000)\n\n```", "```py\n100 loops, best of 3: 3.7 ms per loop\n\n```", "```py\n%load_ext cythonmagic\n\n```", "```py\n%%cython\ncimport cython\nfrom libc.math cimport sin\n\n@cython.cdivision(True)\ndef sin_area_cython(a, b, nintervals):\n cdef double dx, sleft, sright\n cdef int i\n dx = (b-a)/nintervals\n sleft = 0.0\n sright = 0.0\n for i in range(nintervals):\n sleft += sin(a + i * dx)\n sright += sin(a + (i + 1) * dx)\n return dx * (sright + sleft) / 2\n\n```", "```py\nsin_area_cython(0, pi, 10000)\n\n```", "```py\n1.9999999835506608\n\n```", "```py\n%timeit sin_area_cython(0, pi, 10000)\n\n```", "```py\n1000 loops, best of 3: 1.12 ms per loop\n\n```", "```py\ndef sin_area_numpy(a, b, nintervals):\n dx = (b - a) / nintervals\n xvalues = arange(a, b, dx)\n sleft = sum(sin(xvalues))\n sright = sum(sin(xvalues + dx))\n return dx * (sleft + sright) / 2\n\n```", "```py\n1000 loops, best of 3: 248 µs per loop\n\n```", "```py\n%autosave 300\n\n```", "```py\n%autosave 0\n\n```", "```py\nipython nbconvert \"Chapter 2.ipynb\"\n\n```", "```py\nipython nbconvert \"Chapter 2.ipynb\" --to slides\n\n```", "```py\n!dir\n\n```", "```py\n!ls\n\n```", "```py\n!cc hello.c –o hello\n\n```", "```py\n%ls\n\n```", "```py\n%echo %PATH%\n\n```", "```py\n%echo $PATH\n\n```", "```py\n%alias show_path echo %PATH%\n\n```", "```py\n%alias show_path echo $PATH\n\n```", "```py\nshow_path\n\n```", "```py\nmkdir my-directory\n\n```", "```py\nrmdir my-directory\n\n```", "```py\n%automagic off\n\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef make_lorenz(sigma, r, b):\n    def func(statevec, t):\n        x, y, z = statevec\n        return [ sigma * (y - x),\n                 r * x - y - x * z,\n                 x * y - b * z ]\n    return func\n\nlorenz_eq = make_lorenz(10., 28., 8./3.)\n\ntmax = 50\ntdelta = 0.005\ntvalues = np.arange(0, tmax, tdelta) \nic = np.array([0.0, 1.0, 0.0])\nsol = odeint(lorenz_eq, ic, tvalues)\n\nx, y, z = np.array(zip(*sol))\n\nfig = plt.figure(figsize=(10,10))\nax = fig.add_subplot(111, projection='3d')\nax.plot(x, y, z, lw=1, color='red')\nax.set_xlabel('$x$')\nax.set_ylabel('$y$')\nax.set_zlabel('$z$')\nplt.show()\n```", "```py\n%run lorenz.py\n\n```", "```py\n%load lorenz.py\n\n```", "```py\n%load http://matplotlib.org/mpl_examples/pylab_examples/boxplot_demo2.py\n\n```", "```py\n%%SVG\n<svg width=\"400\" height=\"300\">\n <circle  cx=\"200\" cy=\"150\" r=\"100\"\n style=\"fill:Wheat; stroke:SteelBlue; stroke-width:5;\"/>\n <line x1=\"10\" y1=\"10\" x2=\"250\" y2=\"85\"\n style=\"stroke:SlateBlue; stroke-width:4\"/>\n <polyline points=\"20,30 50,70 100,25 200,120\"\n style=\"stroke:orange; stroke-width:3; \n fill:olive; opacity:0.65;\"/>\n <rect x=\"30\" y=\"150\" width=\"120\" height=\"75\"\n style=\"stroke:Navy; stroke-width:4; fill:LightSkyBlue;\"/>\n <ellipse cx=\"310\" cy=\"220\" rx=\"55\" ry=\"75\"\n style=\"stroke:DarkSlateBlue; stroke-width:4;\n fill:DarkOrange; fill-opacity:0.45;\"/>\n <polygon points=\"50,50 15,100 75,200 45,100\"\n style=\"stroke:DarkTurquoise; stroke-width:5; fill:Beige;\"/>\n</svg>\n\n```", "```py\n%%html\n<h1 id=\"hellodisplay\">Hello, world!</h1>\n\n```", "```py\n%%javascript\nelement = document.getElementById(\"hellodisplay\")\nelement.style.color = 'blue'\n\n```", "```py\n%%script julia\nfunction factorial(n::Int)\n fact = 1\n for k=1:n\n fact *= k\n end\n fact\nend\n\nprintln(factorial(10))\n\n```", "```py\nfactorial (generic function with 1 method)\n3628800\n\n```", "```py\nA = rand(5, 10)\nprint A\nsave('random_array.npy', A)\n\n```", "```py\ndel A\nA\n\n```", "```py\nA = load('random_array.npy')\nA\n\n```", "```py\nxvalues = arange(0.0, 10.0, 0.5)\nxsquares = xvalues ** 2\nprint xvalues\nprint xsquares\nsavez('values_and_squares.npz', values=xvalues, squares=xsquares)\n\n```", "```py\nmy_data = load('values_and_squares.npz')\n\n```", "```py\nmy_data.files\n\n```", "```py\n['squares', 'values']\n\n```", "```py\nxvalues = my_data['values']\nxsquares = my_data['squares']\nplot(xvalues, xsquares)\n\n```", "```py\nfrom IPython.display import Image\nImage('character.png')\n\n```", "```py\nimg = Image('character.png')\n\n```", "```py\nImage('http://www.imagesource.com/Doc/IS0/Media/TR5/7/7/f/4/IS09A9H4K.jpg')\n\n```", "```py\nImage('http://www.imagesource.com/Doc/IS0/Media/TR5/7/7/f/4/IS09A9H4K.jpg', embed=False)\n\n```", "```py\nfrom IPython.display import YouTubeVideo\nYouTubeVideo('G_GBwuYuOOs')\n\n```", "```py\n%matplotlib\nxvalues = linspace(-pi,pi,200)\nfcts = [('sin', sin), ('cos', cos), ('exp', exp)]\nfor fctname, fct in fcts:\n yvalues = fct(xvalues)\n fig=figure()\n ax = fig.add_subplot(1,1,1)\n ax.plot(xvalues, yvalues, color='red')\n ax.set_xlabel('$x$')\n strname = '$\\\\%s(x)$' % fctname\n ax.set_ylabel(strname)\n fig.savefig(fctname + '.png')\n\n```", "```py\nfig.savefig(fctname + '.png')\n\n```", "```py\nhtml_string = '<table style=\"padding:20px\">\\n'\nfor fctname, fct in fcts:\n strname = strname = '$\\\\%s(x)$' % fctname\n filename = fctname + '.png'\n html_string += '<tr>\\n'\n html_string += '<td style=\"width:80px;\">%s</td>\\n' % strname\n html_string += '<td style=\"width:500px;\">'\n html_string += '<img src=\"img/%s\">' % filename\n html_string += '</td>\\n'\n html_string += '</tr>\\n'\n html_string += '</table>\\n'\n\n```", "```py\nprint html_string\n\n```", "```py\n<table style=\"padding:20px\">\n<tr>\n<td style=\"width:80px;\">$\\sin(x)$</td>\n<td style=\"width:500px;\"><img src=\"img/sin.png\"></td>\n</tr>\n<tr>\n<td style=\"width:80px;\">$\\cos(x)$</td>\n<td style=\"width:500px;\"><img src=\"img/cos.png\"></td>\n</tr>\n<tr>\n<td style=\"width:80px;\">$\\exp(x)$</td>\n<td style=\"width:500px;\"><img src=\"img/exp.png\"></td>\n</tr>\n</table>\n\n```", "```py\nfrom IPython.display import HTML\nHTML(html_string)\n\n```", "```py\n%matplotlib inline\n\n```"]