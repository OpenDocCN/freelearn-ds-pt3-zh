- en: Preface
  prefs: []
  type: TYPE_NORMAL
- en: Python has tremendous potential in the scientific computing domain. This updated
    edition of *Scientific Computing with Python* features new chapters on graphical
    user interfaces, efficient data processing, and parallel computing to help you
    perform mathematical and scientific computing efficiently using Python.
  prefs: []
  type: TYPE_NORMAL
- en: This book will help you to explore new Python syntax features and create different
    models using scientific computing principles. The book presents Python alongside
    mathematical applications and demonstrates how to apply Python concepts in computing
    with the help of examples involving Python 3.8\. You'll use pandas for basic data
    analysis to understand the modern needs of scientific computing and cover data
    module improvements and built-in features. You'll also explore numerical computation
    modules such as NumPy and SciPy, which enable fast access to highly efficient
    numerical algorithms. By learning to use the plotting module Matplotlib, you will
    be able to represent your computational results in talks and publications. A special
    chapter is devoted to SymPy, a tool for bridging symbolic and numerical computations.
    The book introduces also to the Python wrapper, mpi4py,  for message passing parallel
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this Python book, you'll have gained a solid understanding of
    task automation and how to implement and test mathematical algorithms along within
    scientific computing.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for students with a mathematical background, university teachers
    designing modern courses in programming, data scientists, researchers, developers,
    and anyone who wants to perform scientific computation in Python. The book evolved
    from 13 years of Python teaching in undergraduate science and engineering programs,
    as special industry in-house courses and specialization courses for high school
    teachers. The typical reader has the need to use Python in areas like mathematics,
    big  data processings, machine learning and simulation. Therefore a basic knowledge
    of vectors and matrices as well of notions like convergence and iterative processes
    is beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](cbb0e54a-9e37-4356-8553-6f051956f80e.xhtml), *Getting Started*,
    addresses the main language elements of Python without going into detail. Here
    we will have a brief tour of everything. It is a good starting point for those
    who want to start directly. It is a quick reference for those readers who want
    to revise their basic understanding of constructs such as functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](879c0554-386f-4bb1-8fa8-b86c43927545.xhtml), *Variables and Basic
    Types*, presents the most important and basic types in Python. Float is the most
    important data type in scientific computing together with the special numbers
    nan and inf. Booleans, integers, complex data types, and strings are other basic
    data types that will be used throughout this book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](c4f97b8b-36c4-4db4-9e58-02aac275b257.xhtml), *Container Types*,
    explains how to work with container types, mainly lists. Dictionaries and tuples
    will be explained as well as indexing and looping through container objects. Occasionally,
    we can even use sets as a special container type.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](b9f628e9-f682-41be-b5a6-94359f8629fc.xhtml), *Linear Algebra -
    Arrays*, covers the most important objects in linear algebra – vectors and matrices.
    This book chooses the NumPy array as the central tool for describing matrices
    and even higher-order tensors. Arrays have many advanced features and also allow
    universal functions to act on matrices or vectors elementwise. The book focuses
    on array indexing, slices, and the dot product as the basic operations in most
    computing tasks. Some linear algebra examples are shown to demonstrate the use
    of SciPy''s `linalg` submodule.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](e60692b7-f6d2-42df-a59f-bfaf357ea932.xhtml), *Advanced Array Concepts*,
    explains some more advanced aspects of arrays. The difference between array copies
    and views is explained extensively as views make programs that use arrays very
    fast but are often a source of errors that are hard to debug. The use of Boolean
    arrays to write effective, compact, and readable code is shown and demonstrated.
    Finally, the technique of array broadcasting – a unique feature of NumPy arrays
    – is explained by comparing it to operations being performed on functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](86c61820-e645-486c-9418-10079ffac7f8.xhtml), *Plotting*, shows
    how to make plots, mainly classical *x*/*y* plots but also 3D plots and histograms.
    Scientific computing requires good tools for visualizing the results. Python''s
    `matplotlib` module is introduced, starting with the handy plotting commands in
    its `pyplot` submodule. Finetuning and modifying plots becomes possible by creating
    graphical objects such as axes. We will show how attributes of these objects can
    be changed and how annotations can be made.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](35749482-dbc7-41b2-aa19-dc63b242f18f.xhtml), *Functions*, looks
    at functions, which form a fundamental building block in programming that is closely
    linked to some underlying mathematical concepts. Function definition and function
    calls are explained as the different ways to set function arguments. Anonymous
    lambda functions are introduced and used in various examples throughout the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](1654fae9-6203-4871-8352-e436445fa49a.xhtml), *Classes*, defines
    objects as instances of classes, which we provide with methods and attributes.
    In mathematics, class attributes often depend on each other, which requires special
    programming techniques for setter and getter functions. Basic mathematical operations
    such as addition can be defined for special mathematical data types. Inheritance
    and abstraction are mathematical concepts that are reflected by object-oriented
    programming. We demonstrate the use of inheritance using a simple solver class
    for ordinary differential equations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](66c25bba-72d2-46a9-929a-1f57fa7a1684.xhtml), *Iterating*, presents
    iteration using loops and iterators. There is now a chapter in this book without
    loops and iterations, but here we will come to the principles of iterators and
    create our own generator objects. In this chapter, you will learn why a generator
    can be exhausted and how infinite loops can be programmed. Python''s `itertools`
    module is a useful companion for this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](6db12ffa-0569-4e1e-9059-2f7ada99c3e3.xhtml), *Series and DataFrames
    – Working with pandas*,  gives a brief introduction to pandas. This chapter will
    teach you how to work with various time series in Python, the concept of DataFrames,
    and how to access and visualize data. This chapter will also cover how the concept
    of NumPy arrays is extended to pandas DataFrames.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](d75edcc3-fed1-438a-b3de-89e3b4e96682.xhtml), *Communication by
    a Graphical User Interface*,  shows the basic principles of GUI programming within'
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib. The role of events, slider movements, or mouseclicks and their interaction
    with so-called callback functions is explained along with a couple of examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](9bd2d3f3-b846-4421-931c-7ebfbdc8fbea.xhtml), *Error and Exception
    Handling*, covers errors and exceptions and how to find and fix them. An error
    or an exception is an event that breaks the execution of a program unit. This
    chapter shows what to do then, that is, how an exception can be handled. You will
    learn how to define your own exception classes and how to provide valuable information
    that can be used for catching these exceptions. Error handling is more than printing
    an error message.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](919d9596-6c84-492d-8b65-8f1045866d8e.xhtml), *Namespaces, Scopes,
    and Modules*, covers Python modules. What are local and global variables? When
    is a variable known and when is it unknown to a program unit? This is discussed
    in this chapter. A variable can be passed to a function by a parameter list or
    tacitly injected by making use of its scope. When should this technique be applied
    and when shouldn''t it? This chapter tries to give an answer to this central question.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](f95f92d6-d8d1-46a6-bb5b-560714044c70.xhtml), *Input and Output*,
    covers some options for handling data files. Data files are used for storing and
    providing data for a given problem, often large-scale measurements. This chapter
    describes how this data can be accessed and modified using different formats.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](dfb91b0a-8012-4043-af84-5cff4c6506db.xhtml), *Testing*, focuses
    on testing for scientific programming. The key tool is `unittest`, which allows
    automatic testing and parametrized tests. By considering the classical bisection
    algorithm in numerical mathematics, we exemplify different steps to designing
    meaningful tests, which as a side effect also deliver documentation of the use
    of a piece of code. Careful testing provides test protocols that can be helpful
    later when debugging complex code often written by many different programmers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](e921daa2-c37c-4799-a8b8-669dc9ae4d17.xhtml), *Symbolic Computations
    – SymPy*, is all about symbolic computations. Scientific computing is mainly numeric
    computations with inexact data and approximative results. This is contrasted with
    symbolic computations'' often formal manipulation, which aims for exact solutions
    in a closed-form expression. In this chapter, we introduce this technique in Python,
    which is often used to derive and verify theoretically mathematical models and
    numerical results. We focus on high-precision floating-point evaluation of symbolic
    expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](622774e1-4a03-45ba-9890-6cb0a8307943.xhtml), *Interacting with
    the Operating System*, demonstrates the interaction of a Python script with system
    commands. The chapter is based on Linux systems such as Ubuntu and serves only
    as a demonstration of concepts and possibilities. It allows putting scientific
    computing tasks in an application context, where often different software have
    to be combined. Even hardware components might come into play.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18](37f328a2-fb7e-4a67-a2a9-ca9f3db6389c.xhtml), *Python for Parallel
    Computing*, covers parallel computing and the `mpi4py` module. In this chapter,
    we see how to execute copies of the same script on different processors in parallel. The
    commands presented in this chapter are provided by the `mpi4py` Python module,
    which is a Python wrapper to realize the MPI standard in C. After working through
    this chapter, you will be able to work on your own scripts for parallel programming,
    and you will find that we described only the most essential commands and concepts
    here.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19](2bd9f874-5cdc-4298-873f-12572838a10c.xhtml), *Comprehensive Examples*,
    presents some comprehensive and longer examples together with a brief introduction
    to the theoretical background and their complete implementation. These examples
    make use of all the constructs shown in the book so far and put them in a larger
    and more complex context. They are open to extension by the reader.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for beginners or readers who have some experience in programming. You
    can read the book either from the first page to the last, or by picking the bits
    that seem most interesting. Prior knowledge of Python is not mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in the book** | **OS requirements** |'
  prefs: []
  type: TYPE_TB
- en: '| Python 3.8 | Windows/Linux/macOS |'
  prefs: []
  type: TYPE_TB
- en: You'll need a system with Ubuntu (or any other Linux OS) installed for [Chapter
    17](622774e1-4a03-45ba-9890-6cb0a8307943.xhtml), *Interacting with the Operating
    System*.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code via the GitHub repository (link available
    in the next section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Scientific-Computing-with-Python-Second-Edition](https://github.com/PacktPublishing/Scientific-Computing-with-Python-Second-Edition). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781838822323_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781838822323_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in the text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "The `for` statement has two important keywords:
    `break` and `else`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
