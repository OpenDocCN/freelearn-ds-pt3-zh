["```py\npip install spacy==3.7.5\n```", "```py\nimport pandas as pd\n```", "```py\ndata = {\n    'Age': [18, 20, None, 22, 21, 19, None, 23, 18, 24, 40, 41, 45, None, 34, None, 25, 30, 32, 24, 35, 38, 76, 90],\n    'Test_Score': [85, None, 90, 92, None, 88, 94, 91, None, 87, 75, 78, 80, None, 74, 20, 50, 68, None, 58, 48, 59, 10, 5]}\ndf = pd.DataFrame(data)\n```", "```py\n     Age  Test_Score\n0   18.0        85.0\n1   20.0         NaN\n2    NaN        90.0\n3   22.0        92.0\n4   21.0         NaN\n```", "```py\nmissing_values = df.isnull()\n```", "```py\n      Age  Test_Score\n0   False       False\n1   False        True\n2    True       False\n3   False       False\n4   False        True\n```", "```py\nnull_rows_count = missing_values.any(axis=1).sum()\nprint(\"Count of Rows with at least one Missing Value:\", null_rows_count)\nprint(8/len(df))\n```", "```py\nCount of Rows with at least one Missing Value: 8\n% of rows with at least one missing value: 33%\n```", "```py\nprint(df.describe())\n```", "```py\n             Age  Test_Score\ncount  20.000000   19.000000\nmean   33.750000   65.894737\nstd    18.903843   27.989869\nmin    18.000000    5.000000\n25%    21.750000   54.000000\n50%    27.500000   75.000000\n75%    38.500000   87.500000\nmax    90.000000   94.000000\n```", "```py\ndf_no_missing = df.dropna()\n```", "```py\nprint(df_no_missing.describe())\n             Age  Test_Score\ncount  16.000000   16.000000\nmean   36.500000   65.500000\nstd    20.109699   26.610775\nmin    18.000000    5.000000\n25%    23.750000   56.000000\n50%    32.000000   74.500000\n75%    40.250000   85.500000\nmax    90.000000   92.000000\n```", "```py\ndf_mean_imputed = df.copy()\ndf_mean_imputed['Age'].fillna(round(df['Age'].mean()), inplace=True)\n```", "```py\ndf_mean_imputed['Test_Score'].fillna(df['Test_Score'].mean(), inplace=True)\n```", "```py\nprint(df_mean_imputed)\n     Age  Test_Score\n0   18.0   85.000000\n1   20.0   65.894737\n2   34.0   90.000000\n3   22.0   92.000000\n4   21.0   65.894737\n5   19.0   88.000000\n6   34.0   94.000000\n7   23.0   91.000000\n8   18.0   65.894737\n9   24.0   87.000000\n10  40.0   75.000000\n```", "```py\nprint(df_mean_imputed.describe())\n             Age  Test_Score\ncount  24.000000   24.000000\nmean   33.791667   65.894737\nstd    17.181839   24.761286\nmin    18.000000    5.000000\n25%    22.750000   58.750000\n50%    33.000000   66.947368\n75%    35.750000   85.500000\nmax    90.000000   94.000000\n```", "```py\ndf_median_imputed = df.copy()\n```", "```py\ndf_median_imputed['Age'].fillna(df['Age'].median(), inplace=True)\n```", "```py\ndf_median_imputed['Test_Score'].fillna(df['Test_Score'].median(), inplace=True)\n```", "```py\nprint(df_median_imputed)\n     Age  Test_Score\n0   18.0        85.0\n1   20.0        75.0\n2   27.5        90.0\n3   22.0        92.0\n4   21.0        75.0\n5   19.0        88.0\n6   27.5        94.0\n7   23.0        91.0\n8   18.0        75.0\n9   24.0        87.0\n10  40.0        75.0\n```", "```py\nprint(df_median_imputed.describe())\n             Age  Test_Score\ncount  24.000000   24.000000\nmean   32.708333   67.791667\nstd    17.345540   25.047744\nmin    18.000000    5.000000\n25%    22.750000   58.750000\n50%    27.500000   75.000000\n75%    35.750000   85.500000\nmax    90.000000   94.000000\n```", "```py\ndf['Age_missing'] = df['Age'].isnull().astype(int)\ndf['Test_Score_missing'] = df['Test_Score'].isnull().astype(int)\n```", "```py\ndf_imputed['Age'].fillna(df_imputed['Age'].mean(), inplace=True)\ndf_imputed['Test_Score'].fillna(df_imputed['Test_Score'].mean(), inplace=True)\n```", "```py\nprint(df_imputed)\n      Age  Test_Score  Age_missing  Test_Score_missing\n0   18.00   85.000000            0                   0\n1   20.00   65.894737            0                   1\n2   33.75   90.000000            1                   0\n3   22.00   92.000000            0                   0\n4   21.00   65.894737            0                   1\n5   19.00   88.000000            0                   0\n6   33.75   94.000000            1                   0\n7   23.00   91.000000            0                   0\n8   18.00   65.894737            0                   1\n9   24.00   87.000000            0                   0\n10  40.00   75.000000            0                   0\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nsns.boxplot(x='Age_missing', y='Test_Score', data=df_imputed)\nplt.title(\"Boxplot of Test_Score by Age_missing\")\nplt.subplot(1, 2, 2)\nsns.boxplot(x='Test_Score_missing', y='Age', data=df_imputed)\nplt.title(\"Boxplot of Age by Test_Score_missing\")\nplt.tight_layout()\nplt.show()\n```", "```py\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.title(\"Box Plot for 'Age'\")\nplt.boxplot(df['Age'].dropna(), vert=False)\nplt.subplot(1, 2, 2)\nplt.title(\"Box Plot for 'Test_Score'\")\nplt.boxplot(df['Test_Score'].dropna(), vert=False)\nplt.tight_layout()\nplt.show()\n```", "```py\nplt.figure(figsize=(12, 5))\nplt.subplot(1, 2, 1)\nplt.title(\"Violin Plot for 'Age'\")\nplt.violinplot(df['Age'].dropna(), vert=False)\nplt.subplot(1, 2, 2)\nplt.title(\"Violin Plot for 'Test_Score'\")\nplt.violinplot(df['Test_Score'].dropna(), vert=False)\nplt.tight_layout()\nplt.show()\n```", "```py\nz_scores_age = np.abs(stats.zscore(df['Age'].dropna()))\n```", "```py\nz_scores_test_score = np.abs(stats.zscore(df['Test_Score'].dropna()))\n```", "```py\nz_threshold = 3\noutliers_age = np.where(z_scores_age > z_threshold)[0]\noutliers_test_score = np.where(z_scores_test_score > z_threshold)[0]\n```", "```py\ndef identify_outliers(column):\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]\n    return outliers\n```", "```py\nage_outliers = identify_outliers('Age')\nprint(\"Outliers in 'Age':\")\nprint(age_outliers)\n```", "```py\ntest_score_outliers = identify_outliers('Test_Score')\nprint(\"\\nOutliers in 'Test_Score':\")\nprint(test_score_outliers)\n```", "```py\n   Age  Test_Score\n  76.0        10.0\n  90.0         5.0\n```", "```py\n(IQR) Q1 = df['Test_Score'].quantile(0.25)\nQ3 = df['Test_Score'].quantile(0.75)\nIQR = Q3 - Q1\noutlier_threshold = 1.5\n```", "```py\nlower_bound = Q1 - outlier_threshold * IQR\nupper_bound = Q3 + outlier_threshold * IQR\n```", "```py\ndf_no_outliers = df[(df['Test_Score'] >= lower_bound) & (df['Test_Score'] <= upper_bound)].copy()\n```", "```py\n             Age  Test_Score\ncount  22.000000   22.000000\nmean   29.272727   71.203349\nstd     8.163839   17.794339\nmin    18.000000   20.000000\n25%    22.250000   65.894737\n50%    31.000000   71.000000\n75%    33.937500   86.500000\nmax    45.000000   94.000000\n```", "```py\ndf_trimmed = df[(df['Age'] >= df['Age'].quantile(0.1)) & (df['Age'] <= df['Age'].quantile(0.9))]\n```", "```py\ndf_trimmed_mean = df_trimmed.mean()\n```", "```py\n             Age  Test_Score\ncount  18.000000   18.000000\nmean   30.222222   69.309942\nstd     6.757833   18.797436\nmin    20.000000   20.000000\n25%    24.000000   60.723684\n50%    32.875000   66.947368\n75%    33.937500   84.750000\nmax    41.000000   94.000000\n```", "```py\nwinsorizing_fraction = 0.1\n```", "```py\ndf_winsorized = df.apply(lambda x: mstats.winsorize(x, limits=[winsorizing_fraction, winsorizing_fraction]))\n```", "```py\n             Age  Test_Score  Age_Winsorized\ncount  24.000000   24.000000       24.000000\nmean   33.750000   65.894737       30.666667\nstd    17.181575   24.761286        8.857773\nmin    18.000000    5.000000       19.000000\n25%    22.750000   58.750000       22.750000\n50%    32.875000   66.947368       32.875000\n75%    35.750000   85.500000       35.750000\nmax    90.000000   94.000000       45.000000\n```", "```py\ndf_log_transformed = df.copy()\ndf_log_transformed['Age'] = np.log1p(df_log_transformed['Age'])\ndf_log_transformed['Test_Score'] = np.log1p(df_log_transformed['Test_Score'])\n```", "```py\n            Age  Test_Score\ncount  24.000000   24.000000\nmean    3.462073    4.059624\nstd     0.398871    0.687214\nmin     2.944439    1.791759\n25%     3.167414    4.090143\n50%     3.522344    4.218613\n75%     3.603530    4.460095\nmax     4.510860    4.553877\n```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from scipy.stats import chi2\n    from mpl_toolkits.mplot3d import Axes3D\n    ```", "```py\n    np.random.seed(42)\n    data = np.random.multivariate_normal(mean=[0, 0], cov=[[1, 0.5], [0.5, 1]], size=100)\n    ```", "```py\n    outliers = np.array([[8, 8], [9, 9]])\n    data = np.concatenate([data, outliers])\n    df = pd.DataFrame(data, columns=['X1', 'X2'])\n    ```", "```py\n    def mahalanobis_distance(x, mean, inv_cov_matrix):\n        centered_data = x - mean\n        mahalanobis_dist = np.sqrt(np.dot(centered_data,\n                                   np.dot(inv_cov_matrix,\n                                   centered_data)))\n        return mahalanobis_dist\n    ```", "```py\n    mean = np.mean(df[['X1', 'X2']], axis=0)\n    cov_matrix = np.cov(df[['X1', 'X2']], rowvar=False)\n    inv_cov_matrix = np.linalg.inv(cov_matrix)\n    ```", "```py\n    df['Mahalanobis_Distance'] = df.apply(lambda row: mahalanobis_distance(row[['X1', 'X2']], mean, inv_cov_matrix), axis=1)\n    ```", "```py\n    alpha = 0.01\n    ```", "```py\n    chi2_threshold = chi2.ppf(1 - alpha, df=2) # df is the degrees of freedom, which is the number of features\n    ```", "```py\n    outliers = df[df['Mahalanobis_Distance'] > chi2_threshold]\n    df_no_outliers = df[df['Mahalanobis_Distance'] <= chi2_threshold]\n    ```", "```py\n    fig = plt.figure(figsize=(10, 8))\n    ax = fig.add_subplot(111, projection='3d')\n    ax.scatter(df_no_outliers['X1'], df_no_outliers['X2'], df_no_outliers['Mahalanobis_Distance'], color='blue', label='Data Points')\n    ax.scatter(outliers['X1'], outliers['X2'], outliers['Mahalanobis_Distance'], color='red', label='Outliers')\n    ax.set_xlabel('X1')\n    ax.set_ylabel('X2')\n    ax.set_zlabel('Mahalanobis Distance')\n    ax.set_title('Outlier Detection using Mahalanobis Distance')\n    plt.legend()\n    plt.show()\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.cluster import DBSCAN\n    from sklearn.preprocessing import StandardScaler\n    ```", "```py\n    np.random.seed(42)\n    data = np.random.multivariate_normal(mean=[0, 0], cov=[[1, 0.5], [0.5, 1]], size=100)\n    outliers = np.random.multivariate_normal(mean=[8, 8], cov=[[1, 0], [0, 1]], size=10)\n    data_with_outliers = np.vstack([data, outliers])\n    ```", "```py\n    df = pd.DataFrame(data_with_outliers, columns=['Feature1', 'Feature2'])\n    ```", "```py\n    scaler = StandardScaler()\n    data_scaled = scaler.fit_transform(df)\n    ```", "```py\n    dbscan = DBSCAN(eps=0.4, min_samples=5)\n    df['Outlier'] = dbscan.fit_predict(data_scaled)\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from scipy.stats import chi2\n    from mpl_toolkits.mplot3d import Axes3D\n    ```", "```py\n    np.random.seed(42)\n    data = np.random.multivariate_normal(mean=[0, 0], cov=[[1, 0.5], [0.5, 1]], size=100)\n    outliers = np.array([[8, 8], [9, 9]])\n    data = np.concatenate([data, outliers])\n    df = pd.DataFrame(data, columns=['X1', 'X2'])\n    ```", "```py\n    def mahalanobis_distance(x, mean, inv_cov_matrix):\n        centered_data = x - mean\n        mahalanobis_dist = np.sqrt(np.dot(centered_data, np.dot(inv_cov_matrix, centered_data)))\n        return mahalanobis_dist\n    ```", "```py\n    df[['X1', 'X2']] = df[['X1', 'X2']].astype(float)\n    mean = np.mean(df[['X1', 'X2']], axis=0)\n    cov_matrix = np.cov(df[['X1', 'X2']], rowvar=False)\n    inv_cov_matrix = np.linalg.inv(cov_matrix)\n    ```", "```py\n    df['Mahalanobis_Distance'] = df.apply(lambda row: mahalanobis_distance(row[['X1', 'X2']], mean, inv_cov_matrix), axis=1)\n    ```", "```py\n    alpha = 0.1\n    chi2_threshold = chi2.ppf(1 - alpha, df=2)\n    ```", "```py\n    outliers = df[df['Mahalanobis_Distance'] > chi2_threshold]\n    df_no_outliers = df[df['Mahalanobis_Distance'] <= chi2_threshold]\n    ```", "```py\n               X1          X2\ncount  102.000000  102.000000\nmean     0.248108    0.281463\nstd      1.478963    1.459212\nmin     -1.852725   -1.915781\n25%     -0.554778   -0.512700\n50%      0.108116    0.218681\n75%      0.715866    0.715485\nmax      9.000000    9.000000\n```", "```py\n               X1          X2  Mahalanobis_Distance\ncount  100.000000  100.000000            100.000000\nmean     0.083070    0.117093              1.005581\nstd      0.907373    0.880592              0.547995\nmin     -1.852725   -1.915781              0.170231\n25%     -0.574554   -0.526337              0.534075\n50%      0.088743    0.200745              0.874940\n75%      0.699309    0.707639              1.391190\nmax      1.857815    2.679717              2.717075\n```"]