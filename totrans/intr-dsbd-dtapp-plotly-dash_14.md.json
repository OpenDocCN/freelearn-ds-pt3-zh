["```py\n    import dash_html_components as html\n    import dash_core_components as dcc\n    from jupyter_dash import JupyterDash\n    from dash.dependencies import Output, Input\n    app = JupyterDash(__name__)\n    ```", "```py\n    app.layout = html.Div([\n        dcc.Location(id='location'),\n     html.Div(id='output')\n    ])\n    ```", "```py\n    @app.callback(Output('output', 'children'), Input('location', 'href'))\n    def display_href(href):\n        return f\"You are at: {href}.\"\n    ```", "```py\n    app.run_server(mode='inline')\n    You are at: http://127.0.0.1:8050/.\n    ```", "```py\n    dcc.Location(id='location')\n    ```", "```py\n    html.A(href='/path',\n           children='Go to a directory path'),\n    ```", "```py\n    dcc.Link(href='/path/search?one=1&two=2',\n             children='Go to search page')\n    ```", "```py\n    dcc.Link(href='path/?hello=HELLO#hash_string',   children='Go to a page with a hash')\n    ```", "```py\n    html.Div(id='output')\n    ```", "```py\n    @app.callback(Output('output', 'children'),\n                  Input('location', 'pathname'),\n                 Input('location', 'search'),\n                 Input('location', 'href'),\n                  Input('location', 'hash'))\n    ```", "```py\n    def show_url_parts(pathname, search, href, hash_)\n    ```", "```py\n    return html.Div([\n        f\"href: {href}\",\n        f\"path: {pathname}\",\n        f\"search: {search}\",\n        f\"hash: {hash_}\"\n    ])\n    ```", "```py\nfrom urllib.parse import parse_qs\nparse_qs('1=one&2=two&20=twenty')\n{'1': ['one'], '2': ['two'], '20': ['twenty']}\n```", "```py\nparse_qs('country_code=CAN&year=2020&inidcator=SI.DST.02ND.20')\n{'country_code': ['CAN'], 'year': ['2020'], 'inidcator': ['SI.DST.02ND.20']}\n```", "```py\n    main_layout = html.Div([\n                      dbc.NavbarSimple([                      …\n                      ]),\n                      dcc.Location(id='location'),\n                      html.Div(id='main_content'),\n                      dbc.Tabs([\n                      …\n                      ])\n    ])\n    ```", "```py\n    indicators_dashboard = html.Div([\n        # all components we built so far\n    ])\n    ```", "```py\n    country_dashboard = html.Div([\n        html.H1(id='country_heading'),\n        dcc.Graph(id='country_page_graph'),\n        dcc.Dropdown(id='country_page_indicator_dropdown'),\n        dcc.Dropdown(id='country_page_contry_dropdown'),\n        html.Div(id='country_table')\n    ])\n    ```", "```py\n    app.validation_layout = html.Div([\n        main_layout,\n        indicators_dashboard,\n        country_dashboard,\n    ])\n    ```", "```py\napp.layout = main_layout\n```", "```py\nfrom urllib.parse import unquote\nunquote('Bosnia%20and%20Herzegovina')\n 'Bosnia and Herzegovina'\n```", "```py\ncountries = countries = poverty[poverty['is_country']]['Country Name'].drop_duplicates().sort_values().tolist()\n@app.callback(Output('main_content', 'children'),\n              Input('location', 'pathname'))\n def display_content(pathname):\n    if unquote(pathname[1:]) in countries:\n        return country_dashboard\n    else:\n        return indicators_dashboard\n```", "```py\n    import dash_bootstrap_components as dbc\n    dbc.NavbarSimple([\n        …\n    ], brand=\"Home\", brand_href=\"/\")\n    ```", "```py\n    dbc.DropdownMenu(children=[\n        menu_item_1,\n        menu_item_2,\n        …\n    ], label=\"Select country\")\n    ```", "```py\n    dbc.DropdownMenu([\n        dbc.DropdownMenuItem(country, href=country)\n        for country in countries\n    ])\n    ```", "```py\ndbc.NavbarSimple([\n    dbc.DropdownMenu([\n        dbc.DropdownMenuItem(country, href=country)\n        for country in countries\n    ], label='Select country')\n], brand='Home',brand_href='/')\n```", "```py\n@app.callback(Output('country_page_contry_dropdown', 'value'),\n              Input('location', 'pathname'))\n def set_dropdown_values(pathname):\n    if unquote(pathname[1:]) in countries:\n        country = unquote(pathname[1:])\n        return [country]\n@app.callback(Output('country_heading', 'children'),\n              Output('country_page_graph', 'figure'),\n              Output('country_table', 'children'),\n              Input('location', 'pathname'),\n              Input('country_page_contry_dropdown', 'value'),\n              Input('country_page_indicator_dropdown', 'value'))\n def plot_country_charts(pathname, countries, indicator):\n    if (not countries) or (not indicator):\n        raise PreventUpdate\n    if unquote(pathname[1:]) in countries:\n        country = unquote(pathname[1:])    df = poverty[poverty['is_country'] & poverty['Country Name'].isin(countries)]\n    fig = px.line(df,\n                  x='year',\n                  y=indicator,\n                  title='<b>' + indicator + '</b><br>' + ', '.join(countries),\n                  color='Country Name')\n    fig.layout.paper_bgcolor = '#E5ECF6'\n    table = country_df[country_df['Short Name'] == countries[0]].T.reset_index()\n    if table.shape[1] == 2:\n        table.columns = [countries[0] + ' Info', '']\n        table = dbc.Table.from_dataframe(table)\n    else:\n        table = html.Div()\n    return country + ' Poverty Data', fig, table\n```"]