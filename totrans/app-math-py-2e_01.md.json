["```py\npython --version\n```", "```py\npython3.10 -m pip install numpy scipy\n```", "```py\nimport numpy as np\nimport scipy as sp\n```", "```py\nfrom decimal import Decimal\nnum1 = Decimal('1.1')\nnum2 = Decimal('1.563')\nnum1 + num2  # Decimal('2.663')\n```", "```py\nfrom decimal import getcontext\nctx = getcontext()\nnum = Decimal('1.1')\nnum**4  # Decimal('1.4641')\nctx.prec = 4 # set new precision\nnum**4  # Decimal('1.464')\n```", "```py\nfrom decimal import localcontext\nnum = Decimal(\"1.1\")\nwith localcontext() as ctx:\n    ctx.prec = 2\n    num**4  # Decimal('1.5')\nnum**4  # Decimal('1.4641')\n```", "```py\nfrom fractions import Fraction\nnum1 = Fraction(1, 3)\nnum2 = Fraction(1, 7)\nnum1 * num2  # Fraction(1, 21)\n```", "```py\nz = 1 + 1j\nz + 2  # 3 + 1j\nz.conjugate()  # 1 - 1j\n```", "```py\nimport math\n```", "```py\nimport math\nmath.sqrt(4)  #  2.0\n```", "```py\ntheta = math.pi/4\nmath.cos(theta)  # 0.7071067811865476\nmath.sin(theta)  # 0.7071067811865475\nmath.tan(theta)  # 0.9999999999999999\n```", "```py\nmath.asin(-1)  # -1.5707963267948966\nmath.acos(-1)  # 3.141592653589793\nmath.atan(1)  # 0.7853981633974483\n```", "```py\nmath.log(10) # 2.302585092994046\nmath.log(10, 10) # 1.0\n```", "```py\nmath.gamma(5) # 24.0\nmath.erf(2) # 0.9953222650189527\n```", "```py\nmath.comb(5, 2)  # 10\nmath.factorial(5)  # 120\n```", "```py\nmath.gcd(2, 4)  # 2\nmath.gcd(2, 3)  # 1\n```", "```py\nnums = [0.1]*10  # list containing 0.1 ten times\nsum(nums)  # 0.9999999999999999\nmath.fsum(nums)  # 1.0\n```", "```py\nimport numpy as np\n```", "```py\narr = np.array([1, 2, 3, 4])  # array([1, 2, 3, 4])\n```", "```py\nnp.array([1, 2, 3, 4], dtype=np.float32)\n# array([1., 2., 3., 4.], dtype=float32)\n```", "```py\narr = np.array([1, 2, 3, 4])\nprint(arr.dtype) # int64\narr.dtype = np.float32\nprint(arr)\n# [1.e-45 0.e+00 3.e-45 0.e+00 4.e-45 0.e+00 6.e-45 0.e+00]\n```", "```py\narr = arr.astype(np.float32)\nprint(arr)\n# [1\\. 2\\. 3\\. 4.]\n```", "```py\narr = np.array([1, 2, 3, 4])\narr[0]  # 1\narr[2]  # 3\n```", "```py\nfirst_two = arr[:2]  # array([1, 2])\neven_idx = arr[::2]  # array([1, 3])\n```", "```py\narr_a = np.array([1, 2, 3, 4])\narr_b = np.array([1, 0, -3, 1])\narr_a + arr_b  # array([2, 2, 0, 5])\narr_a - arr_b  # array([0, 2, 6, 3])\narr_a * arr_b  # array([ 1, 0, -9, 4])\narr_b / arr_a  # array([ 1\\. , 0\\. , -1\\. , 0.25])\narr_b**arr_a  # array([1, 0, -27, 1])\n```", "```py\narr = np.array([1, 2, 3, 4])\nnew = 2*arr\nprint(new)\n# [2, 4, 6, 8]\n```", "```py\nnp.linspace(0, 1, 5)  # array([0., 0.25, 0.5, 0.75, 1.0])\nnp.arange(0, 1, 0.3)  # array([0.0, 0.3, 0.6, 0.9])\n```", "```py\nmat = np.array([[1, 2], [3, 4]])\n```", "```py\nvec = np.array([1, 2])\nmat.shape  # (2, 2)\nvec.shape  # (2,)\n```", "```py\nmat.reshape(4,)  # array([1, 2, 3, 4])\n```", "```py\nmat1 = [[1, 2], [3, 4]]\nmat2 = [[5, 6], [7, 8]]\nmat3 = [[9, 10], [11, 12]]\narr_3d = np.array([mat1, mat2, mat3])\narr_3d.shape  # (3, 2, 2)\n```", "```py\nmat[0, 0]  # 1 - top left element\nmat[1, 1]  # 4 - bottom right element\n```", "```py\nmat[:, 0]\n# array([1, 3])\n```", "```py\nnp.eye(3)\n# array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]])\n```", "```py\nA = np.array([[1, 2], [3, 4]])\nA.transpose()\n# array([[1, 3],\n#         [2, 4]])\nA.T\n# array([[1, 3],\n#         [2, 4]])\n```", "```py\nA = np.array([[1, 2], [3, 4]])\nA.trace()  # 5\n```", "```py\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[-1, 1], [0, 1]])\nA @ B\n# array([[-1, 3],\n#           [-3, 7]])\nA * B # different from A @ B\n# array([[-1, 2],\n#           [ 0, 4]])\n```", "```py\nA = np.array([[1, 2], [3, 4]])\nI = np.eye(2)\nA @ I\n# array([[1., 2.],\n#           [3., 4.]])\n```", "```py\nfrom numpy import linalg\nlinalg.det(A)  # -2.0000000000000004\n```", "```py\nlinalg.inv(A)\n# array([[-2\\. , 1\\. ],\n#           [ 1.5, -0.5]])\n```", "```py\nAinv = linalg.inv(A)\nAinv @ A\n# Approximately\n# array([[1., 0.],\n#           [0., 1.]])\nA @ Ainv\n# Approximately\n# array([[1., 0.],\n#           [0., 1.]])\n```", "```py\nimport numpy as np\nfrom numpy import linalg\nA = np.array([[3, -2, 1], [1, 1, -2], [-3, -2, 1]])\nb = np.array([7, -4, 1])\n```", "```py\nlinalg.solve(A, b)  # array([ 1., -1., 2.])\n```", "```py\nimport numpy as np\nfrom numpy import linalg\nA = np.array([[3, -1, 4], [-1, 0, -1], [4, -1, 2]])\n```", "```py\nv, B = linalg.eig(A)\n```", "```py\ni = 0 # first eigenvalue/eigenvector pair\nlambda0 = v[i]\nprint(lambda0)\n# 6.823156164525971\nx0 = B[:, i] # ith column of B\nprint(x0)\n# [ 0.73271846, -0.20260301, 0.649672352]\n```", "```py\nlinalg.norm(x0)  # 1.0  - eigenvectors are normalized.\n```", "```py\nlhs = A @ x0\nrhs = lambda0*x0\nlinalg.norm(lhs - rhs)  # 2.8435583831733384e-15 - very small.\n```", "```py\nmat = np.array([[0., 1., 2., 3.], [4., 5., 6., 7.]])\nU, s, VT = np.linalg.svd(mat)\n```", "```py\nSigma = np.zeros(mat.shape)\nSigma[:len(s), :len(s)] = np.diag(s)\n# array([[11.73352876, 0., 0., 0.],\n#        [0., 1.52456641, 0.,  0.]])\nreconstructed = U @ Sigma @ VT\n# array([[-1.87949788e-15, 1., 2., 3.],\n#           [4., 5., 6., 7.]])\n```", "```py\nSigma = sp.linalg.diagsvd(s, *mat.shape)\n```", "```py\nimport numpy as np\nfrom scipy import sparse\n```", "```py\nA = np.array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]])\nsp_A = sparse.csr_matrix(A)\nprint(sp_A)\n#  (0, 0)  1.0\n#  (1, 1)  1.0\n#  (2, 2)  1.0\n```", "```py\nT = sparse.diags([-1, 2, -1], (-1, 0, 1),   \n    shape=(5, 5), format=\"csr\")\n```", "```py\nT.toarray()\n# array([[ 2, -1,  0,  0,  0],\n#           [-1,  2, -1,  0,  0],\n#           [ 0, -1,  2, -1,  0],\n#           [ 0,  0, -1,  2, -1],\n#           [ 0,  0,  0, -1,  2]])\n```", "```py\nfrom scipy.sparse import linalg\nlinalg.spsolve(T.tocsr(), np.array([1, 2, 3, 4, 5]))\n# array([ 5.83333333, 10.66666667, 13.5 , 13.33333333, 9.16666667])\n```"]